# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface AwsNativeAccountDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface AwsNativeAccountLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"A Blueprint."
interface Blueprint {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "list of children"
    children: [BlueprintChild!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "status of the last test failover"
    currentFailoverStatus: AppBlueprintFailoverStatus!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "relic status of the Blueprint"
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    "last test failover"
    lastTestFailover: Failover
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Number of child workloads of the Blueprint."
    numChildren: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "resource mapping status of the Blueprint"
    rmStatus: AppBlueprintRmStatus!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "status of the Blueprint"
    status: AppBlueprintStatus!
}

"Blueprint Child."
interface BlueprintChild {
    "Boot priority."
    bootPriority: Int!
    "Child fid."
    fid: UUID!
}

"A Blueprint failover instance."
interface BlueprintFailoverInstance {
    "The Blueprint child workload ID."
    snappableId: String!
}

"Blueprint Location."
interface BlueprintLocation {
    "The type of the location."
    type: BlueprintLocationType!
}

"A Blueprint."
interface BlueprintNew {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Blueprint recovery counts."
    blueprintRecoveryCount: BlueprintRecoveryCount
    "Blueprint recovery type."
    blueprintRecoveryType: BlueprintRecoveryType
    "List of children."
    children: [BlueprintChild!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Archived status of the Blueprint."
    isArchived: Boolean!
    "Flag to enable visibility of Cyber Recovery Blueprint."
    isBlueprintVisible: Boolean
    "Status of hydration enablement."
    isHydrationEnabled: Boolean
    "Source Uuid of the last failover."
    lastFailoverSource: String
    "Status of the last failover."
    lastFailoverStatus: BlueprintFailoverStatus!
    "Last failover time."
    lastFailoverTime: DateTime
    "Status of the last isolated recovery."
    lastIsolatedRecoveryStatus: BlueprintFailoverStatus!
    "Last isolated recovery time."
    lastIsolatedRecoveryTime: DateTime
    "Status of the last local recovery."
    lastLocalRecoveryStatus: BlueprintFailoverStatus!
    "Last local recovery time."
    lastLocalRecoveryTime: DateTime
    "Status of the last test failover."
    lastTestFailoverStatus: BlueprintFailoverStatus!
    "Last test failover time."
    lastTestFailoverTime: DateTime
    "Details of the latest failover."
    latestFailover: BlueprintFailover
    "Details of the local blueprint RPO lag."
    localRpoLagInfo: RpoLagInfo
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Number of child workloads of the Blueprint."
    numChildren: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Information about the remote RPO lag for the Blueprint."
    remoteRpoLagInfo: RpoLagInfo
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "The source location from which this object originated."
    sourceLocation: BlueprintLocation
    "Status of the Blueprint."
    status: BlueprintStatus!
    "The target location to which the object failed over."
    targetLocation: BlueprintLocation
    "List of numbers representing the length of time, in minutes, to pause between each priority group during recovery. The numbers are ordered to align with the order of the priority groups. For example, consider a Blueprint with 3 priority groups. For this Blueprint, a value of [5,10,0] implies that there is a 5-minute pause between the 1st and 2nd priority groups and a 10-minute pause between the 2nd and 3rd priority groups. The last value in the list is always 0."
    timeoutBetweenPriorityGroups: [Long!]
    "Version of the Blueprint."
    version: Int!
}

"Cassandra Keyspace descendant type information."
interface CassandraKeyspaceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Cassandra Keyspace physical child type information."
interface CassandraKeyspacePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Cassandra Source descendant type information."
interface CassandraSourceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Cassandra Source physical child type information."
interface CassandraSourcePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"A Rubrik CDM Managed Hierarchy object."
interface CdmHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"A managed hierarchy protected objects."
interface CdmHierarchySnappableNew {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The ID of the workload on the Rubrik CDM cluster."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this workload originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
}

"Cloud Account (AWS, Azure etc.) information."
interface CloudAccount {
    "The ID of this Cloud Account."
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudAccountType!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account."
    description: String
    "The name of this Cloud Account."
    name: String!
}

"Descendant type of a Db2 instance."
interface Db2InstanceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Physical child type of a Db2 instance."
interface Db2InstancePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
}

"Descendant of the Exchange DAG object."
interface ExchangeDagDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Descendant of the Exchange Server object."
interface ExchangeServerDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Failover Rubrik cluster descendant."
interface FailoverClusterAppDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Failover cluster app physical child."
interface FailoverClusterAppPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"The top level descendent of failover cluster."
interface FailoverClusterTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Fileset template descendent."
interface FilesetTemplateDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Fileset template physical child."
interface FilesetTemplatePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Descendant type for GCP project."
interface GcpNativeProjectDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Logical child type for GCP project."
interface GcpNativeProjectLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"A generic snapshot type."
interface GenericSnapshot {
    "The date of the snapshot."
    date: DateTime!
    "The expirationDate of the snapshot."
    expirationDate: DateTime
    "The ID of the snapshot."
    id: UUID!
    "The number of indexing attempts for the snapshot."
    indexingAttempts: Long!
    "Specifies whether or not the snapshot is corrupted."
    isCorrupted: Boolean!
    "Specifies whether or not the snapshot is expired."
    isExpired: Boolean!
    "Specifies whether or not the snapshot is indexed."
    isIndexed: Boolean!
    "Specifies whether the snapshot is an on-demand snapshot."
    isOnDemandSnapshot: Boolean!
    "Specifies whether or not the snapshot is unindexable."
    isUnindexable: Boolean!
    "The workload ID of the snapshot."
    snappableId: String!
}

"A generic hierarchy object."
interface HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"A generic hierarchy protected objects."
interface HierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Host failover cluster descendant."
interface HostFailoverClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Host failover cluster physical child."
interface HostFailoverClusterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Host share type."
interface HostShareDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Host share physical child."
interface HostSharePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V cluster descendant type."
interface HyperVClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V cluster logical child type."
interface HyperVClusterLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V SCVMM descendant type."
interface HyperVSCVMMDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V SCVMM logical child type."
interface HyperVSCVMMLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V server descendant type."
interface HypervServerDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V server logical child type."
interface HypervServerLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Hyper-V top-level descendant type."
interface HypervTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface K8sClusterDescendant {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Managed Volume descendant type, eg. ManagedVolumeMount, PhysicalHost."
interface ManagedVolumeDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Descendant type of Managed Volume Export, eg. PhysicalHost."
interface ManagedVolumeMountDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Managed Volume Export physical child type, eg. PhysicalHost."
interface ManagedVolumeMountPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Managed Volume physical child type, eg. ManagedVolumeMount."
interface ManagedVolumePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Database descendant Type."
interface MongoDatabaseDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Database Physical Child Type."
interface MongoDatabasePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Source DescendantType."
interface MongoSourceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB source physical child type."
interface MongoSourcePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Database descendant type information."
interface MongodbDatabaseDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Database physical child type information."
interface MongodbDatabasePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Source descendant type information."
interface MongodbSourceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"MongoDB Source physical child type information."
interface MongodbSourcePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlAvailabilityGroupDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlAvailabilityGroupLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlInstanceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlInstanceLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Mssql top level descendant."
interface MssqlTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS namespace descendant type."
interface NasNamespaceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS namespace logical child type."
interface NasNamespaceLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS share descendant type."
interface NasShareDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS share logical child type."
interface NasShareLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS system descendant type."
interface NasSystemDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS system logical child type."
interface NasSystemLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS volume descendant type."
interface NasVolumeDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"NAS volume logical child type."
interface NasVolumeLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Nutanix cluster descendant type."
interface NutanixClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Nutanix cluster logical child type."
interface NutanixClusterLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface O365AppObject {
    "The added time of the O365 app."
    addedAt: DateTime!
    "The authentication status of the app against the subscription."
    appAuthStatus: AppAuthStatus!
    "The ID of the O365 app."
    appId: String!
    "The owner of the O365 app (RUBRIK or CUSTOMER)."
    appOwner: String!
    "The type of the O365 app (e.g. ONEDRIVE)."
    appType: String!
    "The authentication status of the app against the subscription [To be deprecated]."
    isAuthenticated: Boolean!
    "The subscription to which the O365 app is associated."
    subscription: String!
    "The ID of the O365 subscription."
    subscriptionId: String!
}

interface O365ExchangeObject {
    "The ID of the O365 exchange object."
    id: String!
    "The parent folder ID of the object (ROOT indicates root folder)."
    parentFolderId: String
}

"SharePoint descendant objects."
interface O365FullSpObject {
    "The time when this SharePoint descendant object was created."
    createTime: DateTime
    "The fid of the SharePoint descendant object."
    fid: String!
    "The time when this SharePoint descendant object was modified."
    modifiedTime: DateTime
    "The name of the SharePoint descendant object."
    name: String
    "The object type."
    objectType: SharePointDescendantType!
    "The parent ID of the SharePoint descendant object."
    parentId: String
    "The SharePoint natural ID of the SharePoint descendant object."
    sharepointId: String!
    "The ID of the snapshot."
    snapshotId: UUID
    "The sequence number of the snapshot."
    snapshotNum: Int
}

interface O365OnedriveObject {
    "The name of the folder corresponding to the Teams channel."
    channelFolderName: String
    "The membership type of the Teams channel."
    channelMembershipType: ChannelMembershipType
    "The display name of the Teams channel."
    channelName: String
    "The creation time of the OneDrive object."
    createTime: DateTime
    "The ID of the O365 OneDrive object."
    id: String!
    "The modified time of the OneDrive object."
    modifiedTime: DateTime
    "The name of the OneDrive object."
    name: String
    "The parent folder ID of the object (ROOT indicates root folder)."
    parentFolderId: String
    "The size of the OneDrive object or its contents in bytes."
    size: Long
}

interface O365OrgDescendant {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface O365SharepointObject {
    "The sharepoint object ID."
    objectId: String!
    "The parent ID of the object."
    parentId: String!
    "The preferred data location of the SharePoint workload."
    preferredDataLocation: String!
    "The child ID of the object used for full SharePoint."
    siteChildId: String!
    "The title or name of the sharepoint object."
    title: String!
}

interface O365TeamsChannelObject {
    "The ID of the Sharepoint folder for the Teams channel."
    folderId: String
    "The name of the Sharepoint folder for the Teams channel."
    folderName: String
    "The ID of the Teams channel."
    id: String
    "The display name of the Teams channel."
    name: String
}

interface O365UserDescendant {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface O365UserDescendantMetadata {
    "The object ID."
    id: UUID!
    "The name of the object."
    name: String!
    "The preferred data location of the workload."
    preferredDataLocation: String!
    "The user principal name of the object."
    userPrincipalName: String!
}

interface OracleDataGuardGroupDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface OracleDataGuardGroupLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface OracleHostDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface OracleHostLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface OracleRacDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface OracleRacLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface OracleTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface PhysicalHostDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"A Polaris Managed Hierarchy Object."
interface PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Polaris protectable object."
interface PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Polaris-specific information about snapshots of specific object types. Currently, this is only valid for Azure Virtual Machine and AWS EC2 snapshots."
interface PolarisSpecificSnapshot {
    "ID of the snapshot."
    snapshotId: UUID!
}

interface ProtectedObjectSummary {
    "The effective sla of the protected object (if defined)."
    effectiveSlaOpt: String
    "The ID of the protected object."
    id: String!
    "Whether the protected object is archived."
    isArchived: Boolean!
    "The name of the protected object."
    name: String!
    "The object type of the protected object (if returned)"
    objectType: ManagedObjectType
}

"A Recovery Spec"
interface RecoverySpec {
    "The user provided scripts."
    userData: String
    "Recovery spec version."
    version: Long!
}

"A Resource Spec"
interface ResourceSpec {
    "Resource spec is archived."
    isArchived: Boolean!
    "Recovery point of the workload."
    recoveryPointOpt: Long
    "Resource spec child workload ID."
    snappableId: String!
    "Resource spec child workload name."
    snappableName: String!
    "Resource spec child snapshot ID."
    snapshotId: String!
}

"SAP HANA system descendant type, for example, SAP HANA Database."
interface SapHanaSystemDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"SAP HANA system Physical Child Type."
interface SapHanaSystemPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Warning details of non compliant SLA Domain with archival locations."
interface SlaArchivalWarningsDetails {
    "The ID of the SLA Domain."
    severity: WarningSeverityEnum!
}

interface SlaDomain {
    "The ID of the SLA Domain."
    id: String!
    "The name of the SLA Domain."
    name: String!
    "The object-specific configurations of the SLA Domain."
    objectSpecificConfigs: ObjectSpecificConfigs
    "The version of the SLA Domain."
    version: String
}

"Warnings specific to an archival location."
interface SpecificArchivalLocationWarningDetails {
    "The ID of the archival location."
    id: UUID!
    "The name of the archival location."
    name: String!
}

"Target information used for archival or replication."
interface Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Target Template to be used for automatic archival group."
interface TargetTemplate {
    "The type of this Target."
    targetType: TargetType!
}

interface Value {
    serializedValue: String!
}

interface VcdCatalogDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdCatalogLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgVdcDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgVdcLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"VCD vApp descendant."
interface VcdVappDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VcdVappLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereComputeClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereComputeClusterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereDatacenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereDatacenterLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereDatacenterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereDatastoreClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereDatastoreClusterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereFolderDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereFolderLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereHostDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereResourcePoolDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereResourcePoolPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereTagCategoryDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereTagCategoryTagChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereTagDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereTagTagChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereVcenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereVcenterLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereVcenterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface VsphereVcenterTagChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface WindowsClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

interface WindowsClusterLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

union ActivitySeriesGroupByInfo = ActivityObjectType | ActivityStatus | ActivityType | Cluster | ClusterType | TimeRangeWithUnit

"Group by information for anomaly detection results."
union AnomalyResultGroupByInfo = AnomalyStatus | Cluster | Snappable | TimeRangeWithUnit

union CdmSnapshotGroupByInfo = TimeRangeWithUnit

"Property to group a Rubrik cluster with."
union ClusterGroupByInfo = ClusterType | TimeRangeWithUnit

union ClusterMetricGroupByInfo = TimeRangeWithUnit

union CustomReportGroupByInfo = ReportFocus

union FailoverGroupByInfo = FailoverStatus | FailoverType | LastTestStatus | Source | TargetSite | TimeRangeWithUnit

"Group by information for Managed Volume queued snapshots."
union ManagedVolumeQueuedSnapshotGroupByInfo = TimeRangeWithUnit

union MissedSnapshotGroupByInfo = TimeRangeWithUnit

"GroupBy information of snapshot."
union MosaicSnapshotGroupByInfo = TimeRangeWithUnit

union PolarisSnapshotGroupByInfo = TimeRangeWithUnit

"Group by information for encryption detection results."
union RansomwareResultGroupByInfo = Cluster | Snappable | TimeRangeWithUnit

"All the possible chart types."
union ReportChartType = ActivityChart | AnomalyChart | FailoverChart | InfrastructureChart | SnappableChart | SonarContentReportChart | SonarReportChart | TaskDetailChart | TaskSummaryChart | UserAuditChart

"All the possible table types."
union ReportTableType = ActivityTable | AnomalyTable | FailoverTable | InfrastructureTable | SnappableTable | SonarContentReportTable | SonarReportTable | TaskDetailTable | TaskSummaryTable | UserAuditTable

union SnappableGroupByInfo = Cluster | ClusterSlaDomain | ClusterType | ComplianceStatus | ObjectType | ProtectionStatus | TimeRangeWithUnit

"Location of the workload."
union SnappableLocationType = AzureSnappableLocation | CdmSnappableLocation | WorkloadLocation

union TaskDetailGroupByInfo = Cluster | Status | TaskDetailClusterType | TaskDetailObjectType | TimeRangeWithUnit

union TaskSummaryGroupByInfo = Cluster | ClusterType | GlobalSlaReply | ObjectType | PolarisHierarchySnappableObject | TimeRangeWithUnit

"Property to group clusters upgrade data."
union UpgradeGroupByInfo = ClusterJobStatusType | ClusterType

type ASPKey {
    account: String!
    component: ComponentEnum!
    name: String!
    targetId: String!
}

type ASPValue {
    key: ASPKey
    value: String!
}

"Additional information about the vcenter object, such as name, version, os type, and api type, only available on clusters 5.1+."
type AboutInformation {
    apiType: String!
    name: String!
    osType: String!
    version: String!
}

"An absolute monthly recurrence pattern (e.g. 21st of every 3 months)."
type AbsoluteMonthlyRecurrencePattern {
    "Which day of the month the event occurs."
    dayOfMonth: Int!
    "The interval at which the recurrence applies."
    interval: Int!
}

"An absolute yearly recurrence pattern (e.g. 25th of December)."
type AbsoluteYearlyRecurrencePattern {
    "Which day of the month the event occurs."
    dayOfMonth: Int!
    "The month to which the recurrence applies."
    month: String!
}

type AccessGroup {
    groupId: String!
    groupName: String!
}

"Paginated list of AccessGroup objects."
type AccessGroupConnection {
    "Total number of AccessGroup objects matching the request arguments."
    count: Int!
    "List of AccessGroup objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AccessGroupEdge!]!
    "List of AccessGroup objects."
    nodes: [AccessGroup!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AccessGroup object. This wrapper is used for pagination."
type AccessGroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AccessGroup object wrapped by this edge."
    node: AccessGroup!
}

type AccessUser {
    activityDelta: Long!
    email: String!
    lastAccessTime: Long!
    numActivities: Long!
    subjectName: String!
    userSid: String!
    username: String!
}

"Paginated list of AccessUser objects."
type AccessUserConnection {
    "Total number of AccessUser objects matching the request arguments."
    count: Int!
    "List of AccessUser objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AccessUserEdge!]!
    "List of AccessUser objects."
    nodes: [AccessUser!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AccessUser object. This wrapper is used for pagination."
type AccessUserEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AccessUser object wrapped by this edge."
    node: AccessUser!
}

"Product enabled via Salesforce."
type AccountProduct {
    "Account name for the given product."
    account: String!
    "Date when product expires."
    expirationDate: DateTime!
    "Name of the product - GPS, Sonar, etc."
    name: ProductName!
    "State of the product - Acive, disabled, etc."
    state: ProductState!
    "The type of product - Revenue, Trial, POC."
    type: ProductType!
}

"User account setting per Rubrik account."
type AccountSetting {
    "Specifies whether email notifications are enabled."
    isEmailNotificationEnabled: Boolean
    "Specifies whether the EULA has been accepted."
    isEulaAccepted: Boolean
}

type Activity {
    activityInfo: String
    activitySeries: ActivitySeries!
    clusterId: UUID!
    id: ID!
    message: String!
    objectId: String!
    objectType: ActivityObjectTypeEnum!
    progress: String
    severity: ActivitySeverityEnum!
    status: ActivityStatusEnum!
    time: DateTime!
    type: ActivityTypeEnum!
}

type ActivityChart {
    focus: ReportFocusEnum!
    groupBy: [ActivitySeriesGroupByEnum!]
    name: String!
}

"Paginated list of Activity objects."
type ActivityConnection {
    "Total number of Activity objects matching the request arguments."
    count: Int!
    "List of Activity objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ActivityEdge!]!
    "List of Activity objects."
    nodes: [Activity!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Activity object. This wrapper is used for pagination."
type ActivityEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Activity object wrapped by this edge."
    node: Activity!
}

type ActivityObjectType {
    enumValue: ActivityObjectTypeEnum!
}

type ActivityResult {
    accessType: ActivityAccessType!
    count: Long!
    countDelta: Long!
}

type ActivitySeries {
    activityConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ActivityConnection!
    activitySeriesId: UUID!
    causeErrorCode: String
    causeErrorMessage: String
    causeErrorReason: String
    causeErrorRemedy: String
    cluster: Cluster
    clusterName: String!
    clusterUuid: UUID!
    failureReason: String
    fid: UUID
    id: Long!
    isCancelable: Boolean
    isPolarisEventSeries: Boolean!
    lastActivityStatus: ActivityStatusEnum!
    lastActivityType: ActivityTypeEnum!
    lastEventAddedAt: DateTime
    lastUpdated: DateTime!
    lastVerifiedAt: DateTime
    location: String!
    objectId: String!
    objectName: String
    objectType: ActivityObjectTypeEnum!
    "The organization ID of this event series."
    orgId: UUID @deprecated(reason: "Deprecated. Refer to organizations.")
    "The organization name of this event series."
    orgName: String @deprecated(reason: "Deprecated. Refer to organizations.")
    "The organizations associated with this event series."
    organizations: [Org!]!
    progress: String
    severity: ActivitySeverityEnum!
    startTime: DateTime
}

"Paginated list of ActivitySeries objects."
type ActivitySeriesConnection {
    "Total number of ActivitySeries objects matching the request arguments."
    count: Int!
    "List of ActivitySeries objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ActivitySeriesEdge!]!
    "List of ActivitySeries objects."
    nodes: [ActivitySeries!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ActivitySeries object. This wrapper is used for pagination."
type ActivitySeriesEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ActivitySeries object wrapped by this edge."
    node: ActivitySeries!
}

"Activity series data with groupby info applied to it."
type ActivitySeriesGroupBy {
    "Paginated activity series data."
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort activity series by field."
        sortBy: ActivitySeriesSortByEnum = LastUpdated
    ): ActivitySeriesConnection!
    "Provides further groupings for the data."
    activitySeriesGroupBy(
        "group activity series by a field"
        groupBy: ActivitySeriesGroupByEnum!
    ): [ActivitySeriesGroupBy!]!
    "The data groupby info."
    groupByInfo: ActivitySeriesGroupByInfo!
}

"Paginated list of ActivitySeriesGroupBy objects."
type ActivitySeriesGroupByConnection {
    "Total number of ActivitySeriesGroupBy objects matching the request arguments."
    count: Int!
    "List of ActivitySeriesGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ActivitySeriesGroupByEdge!]!
    "List of ActivitySeriesGroupBy objects."
    nodes: [ActivitySeriesGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ActivitySeriesGroupBy object. This wrapper is used for pagination."
type ActivitySeriesGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ActivitySeriesGroupBy object wrapped by this edge."
    node: ActivitySeriesGroupBy!
}

type ActivityStatus {
    enumValue: ActivityStatusEnum!
}

type ActivityTable {
    focus: ReportFocusEnum!
    groupBy: [ActivitySeriesGroupByEnum!]
    name: String!
    selectedColumns: [ActivityTableColumnEnum!]!
    sortBy: ActivitySeriesSortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

type ActivityTimelineResult {
    activityResults: [ActivityResult!]!
    day: String!
    topFiles: [FileAccessResult!]!
}

"Paginated list of ActivityTimelineResult objects."
type ActivityTimelineResultConnection {
    "Total number of ActivityTimelineResult objects matching the request arguments."
    count: Int!
    "List of ActivityTimelineResult objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ActivityTimelineResultEdge!]!
    "List of ActivityTimelineResult objects."
    nodes: [ActivityTimelineResult!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ActivityTimelineResult object. This wrapper is used for pagination."
type ActivityTimelineResultEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ActivityTimelineResult object wrapped by this edge."
    node: ActivityTimelineResult!
}

type ActivityType {
    enumValue: ActivityTypeEnum!
}

"Active Directory Groups from Microsoft."
type AdGroup {
    "Display name of the AD Group."
    displayName: String!
    "Microsoft generated ID of the AD Group."
    id: String!
}

"Reply Object for AddAndJoinSmbDomain."
type AddAndJoinSmbDomainReply {
    output: SmbDomainDetail
}

"Response for the request to add authentication server based AWS cloud account."
type AddAwsAuthenticationServerBasedCloudAccountReply {
    "Account details for the new cloud account."
    awsAccount: AwsCloudAccount
    "Success response message or error message."
    message: String
}

"Response for the request to add IAM user-based AWS cloud accounts."
type AddAwsIamUserBasedCloudAccountReply {
    "Account details for the new cloud account."
    awsAccount: AwsCloudAccount
}

"Response of the operation to add Exocompute Configurations to Azure Cloud Account."
type AddAzureCloudAccountExocomputeConfigurationsReply {
    "Configuration details of the Exocompute for the Azure Cloud Account."
    configs: [AzureExocomputeConfigDetails!]!
}

"Response of the operation to add an Azure Cloud Account."
type AddAzureCloudAccountReply {
    "Status of the operation to add Azure Cloud Account."
    status: [AddAzureCloudAccountStatus!]!
    "Tenant ID for the added subscriptions."
    tenantId: String!
}

"Status of the operation to add Azure Cloud Account."
type AddAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Rubrik ID of the Azure Subscription."
    azureSubscriptionRubrikId: String!
    "Error encountered, if any."
    error: String!
}

"Response of the operation to add Azure Cloud Account without OAuth."
type AddAzureCloudAccountWithoutOauthReply {
    "Status of the operation to add Azure Cloud Account."
    status: [AddAzureCloudAccountStatus!]!
    "Tenant ID for the added subscriptions."
    tenantId: String!
}

"List of objects where adding backup credentials succeeded and failed."
type AddCloudNativeSqlServerBackupCredentialsReply {
    "Object IDs for which adding credentials failed."
    failedObjectIds: [UUID!]!
    "Object IDs for which adding credentials succeeded."
    successObjectIds: [UUID!]!
}

"Supported in v5.1+"
type AddClusterCertificateReply {
    """

    Required. Supported in v5.1+
    ID of the certificate.
    """
    certId: String!
    """

    Supported in v5.1+
    User-friendly description for the certificate.
    """
    description: String
    """

    Required. Supported in v5.1+
    The expiration date for the certificate.
    """
    expiration: DateTime
    """

    Required. Supported in v5.1+
    v5.1-v6.0: A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.
    v7.0+: A Boolean value specifying whether the certificate is be added to the trust store. When the value is 'true' the certificate is added to the trust store. when the value is 'false', the certificate is not added to trust store.
    """
    hasKey: Boolean!
    """

    Supported in v7.0+
    A Boolean value that specifies whether or not the certificate is added to the trust store. when the value is 'true,' the certificate is added to the trust store. when this value is 'false,' the certificate is not added to trust store.
    """
    isTrusted: Boolean
    """

    Required. Supported in v5.1+
    Display name for the certificate.
    """
    name: String!
    """

    Required. Supported in v5.1+
    The certificates, in PEM format.
    """
    pemFile: String!
    """

    Required. Supported in v5.1+
    A list of components using the certificate.
    """
    usedBy: String!
}

"Response from CDM cluster add nodes job."
type AddClusterNodesReply {
    "Add nodes job id."
    jobId: String!
    "Add nodes job status."
    status: String!
}

"Response for the addition of a configuration group."
type AddConfiguredGroupToHierarchyReply {
    "The ID of the created group."
    groupId: UUID!
}

"Supported in v7.0+"
type AddDb2InstanceReply {
    """

    Required. Supported in v7.0+
    Status of the refresh job triggered on the new Db2 instance.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    ID of the new Db2 instance.
    """
    id: String!
}

"The certificate that was imported."
type AddGlobalCertificateReply {
    "The certificate that was imported."
    certificate: GlobalCertificate!
}

"Supported in v7.0+"
type AddManagedVolumeReply {
    """

    Required. Supported in v7.0+
    Status of the asynchronous job triggered when Managed Volumes are created.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    Summary information of the created Managed Volume.
    """
    managedVolumeSummary: UpdateManagedVolumeReply
}

"Information corresponding to adding a MongoDB source."
type AddMongoSourceReply {
    "Required. Status of the discovery job triggered on the new Mongo source."
    asyncRequestStatus: AsyncRequestStatus
    "Required. ID of the new MongoDB source."
    id: String!
}

"Add O365 Org response."
type AddO365OrgResponse {
    orgId: String!
    refreshOrgTaskchainId: String!
}

"Supported in v5.3+"
type AddSapHanaSystemReply {
    """

    Required. Supported in v5.3+
    Status of the job scheduled to refresh the system.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    The ID of the added SAP HANA system.
    """
    id: String!
}

"Response of an operation that adds a storage array to a Rubrik cluster."
type AddStorageArrayReply {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Optional error message in case of failure."
    errorMessage: String
    "Hostname of the storage array."
    hostname: String!
}

"A list of response objects for the operations to add storage arrays to a Rubrik cluster."
type AddStorageArraysReply {
    "Add storage arrays responses."
    responses: [AddStorageArrayReply!]!
}

"Reply Object for AddSyslogExportRule."
type AddSyslogExportRuleReply {
    output: SyslogExportRuleSummary
}

"Response of an operation that adds a vCD instance to a Rubrik cluster."
type AddVcdInstanceReplyType {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Error message in case of failure."
    errorMessage: String
    "Hostname of the vCD instance."
    hostname: String
}

"A list of response objects for the operations to add vCD instances to a Rubrik cluster."
type AddVcdInstancesReply {
    "Add vCD instances responses."
    responses: [AddVcdInstanceReplyType!]!
}

"Represents the response for a request to add application-consistency specification to specified virtual machines."
type AddVmAppConsistentSpecsReply {
    "IDs of virtual machines for which addition of application-consistency specification failed."
    failedSnappableIds: [String!]!
    "IDs of virtual machines for which addition of application-consistency specification was successful."
    successSnappableIds: [String!]!
}

type AddressBlockV4 {
    cidrBlock: String!
}

"Supported in v7.0+"
type AdvancedVirtualMachineSummary {
    """

    Supported in v7.0+
    Virtual disks excluded from snapshot.
    """
    excludedVmdks: [String!]!
    """

    Supported in v7.0+
    Script to execute after backup completes.
    """
    postBackupScript: VirtualMachineScriptDetail
    """

    Supported in v7.0+
    Script to execute after snapshot completes.
    """
    postSnapScript: VirtualMachineScriptDetail
    """

    Supported in v7.0+
    Script to execute before backup.
    """
    preBackupScript: VirtualMachineScriptDetail
}

"The status of the virtual machine's agent."
type AgentStatus {
    agentStatus: AgentConnectionStatus!
    disconnectReason: String
}

"Aggregation values calculated across all results prior to pagination."
type AggregatedValues {
    "The highest created file count."
    maxCreatedFileCount: Long!
    "The highest deleted file count."
    maxDeletedFileCount: Long!
    "The highest modified file count."
    maxModifiedFileCount: Long!
    "The highest suspicious file count."
    maxSuspiciousFileCount: Long!
    "The total number of workload anomalies."
    total: Long!
}

"Storage arrays added to Rubrik clusters, grouped by cluster."
type AllStorageArraysReply {
    "List of storage arrays in Rubrik clusters."
    clusterStorageArrays: [ClusterStorageArrays!]!
}

"Amazon Machine Image (AMI) type for exporting an archived EC2 Instance snapshot."
type AmiTypeForAwsNativeArchivedSnapshotExportReply {
    "If amiType is pre-existing, this field will contain the ID of the AMI."
    amiId: String!
    "Type of the AMI to be used for export of EC2 instance archived snapshot. This can be an existing AMI, or a runtime-generated AMI or a user-specified AMI."
    amiType: AmiType!
    "Rubrik Id of the aws account which contains the pre-existing AMI."
    awsAccountRubrikId: String!
    "Region where the pre-existing AMI exists."
    regionNativeId: AwsNativeRegion!
}

type Analyzer {
    analyzerType: AnalyzerTypeEnum!
    dictionary: [String!]!
    dictionaryCsv: String!
    id: String!
    name: String!
    regex: String!
}

type AnalyzerAccessUsage {
    analyzer: Analyzer
    count: Int!
    countDelta: Int!
    topFiles: [FileAccessResult!]!
}

"Paginated list of AnalyzerAccessUsage objects."
type AnalyzerAccessUsageConnection {
    "Total number of AnalyzerAccessUsage objects matching the request arguments."
    count: Int!
    "List of AnalyzerAccessUsage objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AnalyzerAccessUsageEdge!]!
    "List of AnalyzerAccessUsage objects."
    nodes: [AnalyzerAccessUsage!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AnalyzerAccessUsage object. This wrapper is used for pagination."
type AnalyzerAccessUsageEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AnalyzerAccessUsage object wrapped by this edge."
    node: AnalyzerAccessUsage!
}

"Paginated list of Analyzer objects."
type AnalyzerConnection {
    "Total number of Analyzer objects matching the request arguments."
    count: Int!
    "List of Analyzer objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AnalyzerEdge!]!
    "List of Analyzer objects."
    nodes: [Analyzer!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Analyzer object. This wrapper is used for pagination."
type AnalyzerEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Analyzer object wrapped by this edge."
    node: Analyzer!
}

type AnalyzerGroup {
    analyzers: [Analyzer!]!
    groupType: AnalyzerGroupTypeEnum!
    id: String!
    name: String!
}

"Paginated list of AnalyzerGroup objects."
type AnalyzerGroupConnection {
    "Total number of AnalyzerGroup objects matching the request arguments."
    count: Int!
    "List of AnalyzerGroup objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AnalyzerGroupEdge!]!
    "List of AnalyzerGroup objects."
    nodes: [AnalyzerGroup!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AnalyzerGroup object. This wrapper is used for pagination."
type AnalyzerGroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AnalyzerGroup object wrapped by this edge."
    node: AnalyzerGroup!
}

type AnalyzerGroupResult {
    analyzerGroup: AnalyzerGroup!
    analyzerResults: [AnalyzerResult!]!
    hits: Hits!
}

type AnalyzerMapping {
    analyzerResult: AnalyzerResult!
    groups: [AnalyzerGroup!]!
}

type AnalyzerResult {
    analyzer: Analyzer!
    hits: Hits!
}

type AnalyzerUsage {
    analyzer: Analyzer!
    policies: [ClassificationPolicySummary!]!
}

"Paginated list of AnalyzerUsage objects."
type AnalyzerUsageConnection {
    "Total number of AnalyzerUsage objects matching the request arguments."
    count: Int!
    "List of AnalyzerUsage objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AnalyzerUsageEdge!]!
    "List of AnalyzerUsage objects."
    nodes: [AnalyzerUsage!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AnalyzerUsage object. This wrapper is used for pagination."
type AnalyzerUsageEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AnalyzerUsage object wrapped by this edge."
    node: AnalyzerUsage!
}

type AnomalyChart {
    focus: ReportFocusEnum!
    groupBy: [AnomalyResultGroupBy!]
    name: String!
}

"Information about the anomaly detected."
type AnomalyInfo {
    """

    Information related to the list of strains identified.
    At this point, we identify at most one strain.
    """
    strainAnalysisInfo: [StrainInfo!]!
}

"Anomaly analysis report from lambda service."
type AnomalyResult {
    "The probability of the snapshot being anomalous."
    anomalyProbability: Float!
    "Total new bytes created."
    bytesCreatedCount: Long
    "Total bytes deleted."
    bytesDeletedCount: Long
    "Total bytes modified."
    bytesModifiedCount: Long
    "Net change in the number of bytes. For example, if 5 bytes are added and 3 bytes deleted, this field returns 2 as the number of bytes that changed."
    bytesNetChangedCount: Long
    "The Rubrik cluster of the object."
    cluster: Cluster!
    "Count of new files created."
    filesCreatedCount: Long
    "Count of files deleted."
    filesDeletedCount: Long
    "Count of files modified."
    filesModifiedCount: Long
    "The database ID of the anomaly result."
    id: String!
    "Indicates whether the snapshot is anomalous."
    isAnomaly: Boolean!
    "The location of the object."
    location: String!
    "Internal managed ID of the object."
    managedId: String!
    "The type of the object."
    objectType: ObjectTypeEnum
    "The date of the previous snapshot."
    previousSnapshotDate: DateTime!
    "The ID of the previous snapshot."
    previousSnapshotId: String!
    "The ransomware analysis result, including encryption."
    ransomwareResult: RansomwareResult
    "The analyzed snapshot."
    snapshot: CdmSnapshot
    "The date of the snapshot."
    snapshotDate: DateTime!
    "The internal fid of the snapshot."
    snapshotFid: UUID!
    "The internal ID of the snapshot."
    snapshotId: String!
    "Total number of suspicious files."
    suspiciousFilesCount: Long
    "The internal fid of the object."
    workloadFid: UUID!
    "The internal ID of the object."
    workloadId: String!
    "The name of the object."
    workloadName: String
}

"Aggregated anomaly results."
type AnomalyResultAggregation {
    "Aggregated total of bytes added."
    bytesAdded: Long!
    "Aggregated total of bytes deleted."
    bytesDeleted: Long!
    "Aggregated total of bytes modified."
    bytesModified: Long!
    "Aggregated total of files added."
    filesAdded: Long!
    "Aggregated total of files deleted."
    filesDeleted: Long!
    "Aggregated total of files modified."
    filesModified: Long!
}

"Paginated list of AnomalyResult objects."
type AnomalyResultConnection {
    "Aggregated anomaly results."
    aggregation: AnomalyResultAggregation!
    "Total number of AnomalyResult objects matching the request arguments."
    count: Int!
    "List of AnomalyResult objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AnomalyResultEdge!]!
    "List of AnomalyResult objects."
    nodes: [AnomalyResult!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AnomalyResult object. This wrapper is used for pagination."
type AnomalyResultEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AnomalyResult object wrapped by this edge."
    node: AnomalyResult!
}

"Anomaly result data with group by information applied to it."
type AnomalyResultGroupedData {
    "Provides further groupings for the data."
    anomalyResultGroupedData(
        "Group anomaly results by field."
        groupBy: AnomalyResultGroupBy!
    ): [AnomalyResultGroupedData!]!
    "Paginated anomaly result data."
    anomalyResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter anomaly results by input."
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort anomaly results by field."
        sortBy: AnomalyResultSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AnomalyResultConnection!
    "Group by information."
    groupByInfo: AnomalyResultGroupByInfo!
}

"Paginated list of AnomalyResultGroupedData objects."
type AnomalyResultGroupedDataConnection {
    "Total number of AnomalyResultGroupedData objects matching the request arguments."
    count: Int!
    "List of AnomalyResultGroupedData objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AnomalyResultGroupedDataEdge!]!
    "List of AnomalyResultGroupedData objects."
    nodes: [AnomalyResultGroupedData!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AnomalyResultGroupedData object. This wrapper is used for pagination."
type AnomalyResultGroupedDataEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AnomalyResultGroupedData object wrapped by this edge."
    node: AnomalyResultGroupedData!
}

"Anomaly status of the snapshot."
type AnomalyStatus {
    "Boolean indicating the anomaly status."
    isAnomaly: Boolean!
}

type AnomalyTable {
    focus: ReportFocusEnum!
    groupBy: [AnomalyResultGroupBy!]
    name: String!
    selectedColumns: [AnomalyTableColumnEnum!]!
    sortBy: AnomalyResultSortBy
    "Sorts by order."
    sortOrder: SortOrder
}

type AppBlueprintSnapshotCloudImage {
    appImageIds: [String!]!
    imageConverted: Boolean!
    snapshotFid: String!
}

type AppIdForType {
    appId: String!
    appType: String!
}

"Manifest information for Kubernetes Rubrik Backup Service."
type AppManifestInfo {
    "Kubernetes manifest information."
    manifest: String!
    "Content type of the Kubernetes manifest information."
    manifestContentType: K8sContentType!
    "SHA algorithm used for computing the checksum."
    shaAlgorithm: String!
    "SHA checksum of the manifest."
    shaChecksum: String!
}

type AppflowsSummary {
    numBlueprintsReady: Int!
    numBlueprintsWithIssues: Int!
    numBpFailedLastFailover: Int!
    numBpFailedLastTestFailover: Int!
    numBpFailedTestFailoverLastQuarter: Int!
    numBpPassedLastFailover: Int!
    numBpPassedLastTestFailover: Int!
    numDrPlansReady: Int!
    numDrPlansWithIssues: Int!
    numVmwareVmsProtected: Int!
    totalBlueprints: Int!
    totalDrPlans: Int!
    totalVmwareVms: Int!
}

"Connection status for archival group."
type ArchivalGroupConnectionStatus {
    status: ConnectionStatusType!
}

"Mapping between archival location and Rubrik cluster."
type ArchivalLocationToClusterMapping {
    "Cluster on which the archival location is created."
    cluster: SlaArchivalCluster
    "Location used as archival target."
    location: DlsArchivalLocation
}

"SLA Domain warning details related to non-compliant archival retention duration in the archival policy."
type ArchivalLocationWarningsDetails {
    "Warning code."
    code: SlaArchivalWarning!
    "Warning details for a non-compliant SLA Domain for a single archival location."
    specificArchivalLocationWarningDetails: SpecificArchivalLocationWarningDetails!
}

"Archiving specification."
type ArchivalSpec {
    "Mapping between archival location and Rubrik cluster."
    archivalLocationToClusterMapping: [ArchivalLocationToClusterMapping!]!
    "Archival tiering specification."
    archivalTieringSpec: ArchivalTieringSpec
    "Archives all snapshots taken with the specified frequency."
    frequencies: [RetentionUnit!]!
    "Storage settings of an archival group."
    storageSetting: TargetMapping
    "Archival threshold."
    threshold: Int!
    "Unit of archival threshold."
    thresholdUnit: RetentionUnit!
}

"Archival tiering specification."
type ArchivalTieringSpec {
    "Cold storage class for tiering."
    coldStorageClass: ColdStorageClass!
    "True when instant tiering enabled."
    isInstantTieringEnabled: Boolean!
    "Minimum accessible duration specified for smart tiering."
    minAccessibleDurationInSeconds: Long!
    "Tier existing snapshots for instant tiering, when true."
    shouldTierExistingSnapshots: Boolean!
}

"Response of the archived Kubernetes cluster."
type ArchiveK8sClusterReply {
    "UUID of the archived Kubernetes cluster."
    clusterId: UUID!
}

"Reply for assigning SLA Domain to MSSQL objects."
type AssignMssqlSlaDomainPropertiesAsyncReply {
    "Pending SLA Domains resulting from this assignment."
    items: [ManagedObjectPendingSlaInfo!]!
}

"A reply of the async download request."
type AsyncDownloadReply {
    "The job ID."
    jobId: Long!
    "The job reference ID."
    referenceId: String!
}

type AsyncJobStatus {
    "Error message if pre validation failed."
    error: String!
    "Job ID for object if pre validation succeeds for object. If pre validation failed Job ID will be empty and detials will be present in error field."
    jobId: String!
}

type AsyncJobStatusJobError {
    error: String!
    rubrikObjectId: String!
}

type AsyncJobStatusJobId {
    jobId: String!
    rubrikObjectId: String!
}

"Supported in v5.0+"
type AsyncRequestStatus {
    """

    Supported in v5.0+
    The end time of the request.
    """
    endTime: DateTime
    """

    Supported in v5.0+
    Any errors encountered.
    """
    error: RequestErrorInfo
    """

    Required. Supported in v5.0+
    v5.0: The ID of the request object. Use it to poll the status.
    v5.1+: The ID of the request object used to poll the status.
    """
    id: String!
    """

    Required. Supported in v5.0+
    References to any related objects.
    """
    links: [Link!]!
    """

    Supported in v5.0+
    The ID of the node where the job ran.
    """
    nodeId: String
    """

    Supported in v5.0+
    v5.0: The current progress in terms of percentage of the async request.
    v5.1+: The current percentage progress of the asynchronous request.
    """
    progress: Float
    """

    Supported in v5.0+
    The start time of the request.
    """
    startTime: DateTime
    """

    Required. Supported in v5.0+
    v5.0: Status of the id.
    v5.1+: Status of the ID.
    """
    status: String!
}

"Host AWS EC2 instance specifications for AWS EBS volume."
type AttachmentSpecForEbsVolume {
    "EC2 instance ID."
    awsNativeEc2InstanceId: String!
    "The device path of the EBS volume on the instance."
    devicePath: String!
    "Specifies whether the EBS volume is excluded from snapshots of the EC2 instance.."
    isExcludedFromSnapshot: Boolean!
    "Specifies whether the EBS volume is the root volume."
    isRootVolume: Boolean!
}

"EBS volume attachment specifications."
type AttachmentSpecForEc2Instance {
    "EBS volume ID."
    awsNativeEbsVolumeId: String!
    "The device path of this EBS volume attachment."
    devicePath: String!
    "Specifies whether this EBS volume is excluded from snapshots."
    isExcludedFromSnapshot: Boolean!
    "Specifies whether this EBS volume is the root volume of the corresponding EC2 instance."
    isRootVolume: Boolean!
}

"Attachment Specifications for Azure Native Managed Disk."
type AttachmentSpecsForManagedDisk {
    "Virtual machine ID to which the Azure managed disk is attached."
    attachedToVmId: String!
    "Specifies whether the managed disk is excluded from snapshots."
    isExcludedFromSnapshot: Boolean!
    "Specifies if the managed disk is an OS disk."
    isOsDisk: Boolean!
    "Logical Unit Number (LUN) associated with a managed disk in a virtual machine."
    lun: Int!
}

"Attachment Specifications for Azure Native Virtual Machine."
type AttachmentSpecsForVirtualMachine {
    "Specifies whether the managed disk is excluded from snapshots."
    isExcludedFromSnapshot: Boolean!
    "Specifies if the managed disk is an OS disk."
    isOsDisk: Boolean!
    "Logical Unit Number (LUN) associated with a managed disk in a virtual machine."
    lun: Int!
    "ID of the Azure managed disk attached ot the virtual machine."
    managedDiskId: String!
}

"""

Represents the counts of apps in an O365 service
type based on their authentication status.
"""
type AuthCounts {
    "The count of authenticated apps for the service type."
    authenticated: Int!
    "The count of unauthenticated apps for the service type."
    partiallyAuthenticated: Int!
    "The count of partially authenticated apps for the service type."
    unauthenticated: Int!
}

type AuthorizedOperations {
    id: String!
    operations: [Operation!]!
    "Workload Hierarchy."
    workloadHierarchy: WorkloadLevelHierarchy
}

"LDAP authorized principal."
type AuthorizedPrincipal {
    "ID of the authentication domain."
    authDomainId: String!
    "Name of the authentication domain."
    authDomainName: String!
    "Email address."
    email: String
    "Principal ID"
    id: String!
    "Last login timestamp."
    lastLogin: DateTime
    "Name of the principal."
    name: String!
    "Principal Type."
    principalType: PrincipalTypeEnum!
    roles: [Role!]!
    "TOTP status for a LDAP principal."
    totpStatus: LdapTotpStatus
}

"Paginated list of AuthorizedPrincipal objects."
type AuthorizedPrincipalConnection {
    "Total number of AuthorizedPrincipal objects matching the request arguments."
    count: Int!
    "List of AuthorizedPrincipal objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AuthorizedPrincipalEdge!]!
    "List of AuthorizedPrincipal objects."
    nodes: [AuthorizedPrincipal!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AuthorizedPrincipal object. This wrapper is used for pagination."
type AuthorizedPrincipalEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AuthorizedPrincipal object wrapped by this edge."
    node: AuthorizedPrincipal!
}

"Auto-enabled Data Discovery policy configuration for Rubrik clusters."
type AutoEnablePolicyClusterConfigReply {
    "Rubrik cluster ID."
    clusterId: String!
    "Specifies whether Auto-enabled Data Discovery Policies are enabled on the Rubrik cluster or not."
    enabled: Boolean!
}

"AWS Account specific info."
type AwsAccount implements CloudAccount {
    "Access key for IAM user, which is required while adding new AWS cloud account."
    accessKey: String!
    "The ID of this Cloud Account."
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudAccountType!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account."
    description: String
    "The name of this Cloud Account."
    name: String!
}

"Validate given aws accounts."
type AwsAccountValidationResponse {
    "AWS account name."
    accountName: String!
    "AWS account cloud type."
    cloudType: AwsCloudType!
    "AWS account validation response message."
    message: String!
    "AWS account native ID."
    nativeId: String!
    "Specfies whether seamless flow is enabled for this AWS account."
    seamlessFlowEnabled: Boolean!
}

"Details of AWS authentication server-based cloud account."
type AwsAuthServerDetail {
    "Agency name for the feature."
    agency: String!
    "List of AWS secret regions."
    authServerAwsRegions: [AwsAuthServerBasedCloudAccountRegion!]!
    "CA certificate ID for the authentication server."
    authServerCaCertId: Long!
    "Host name of the authentication server."
    authServerHostName: String!
    "Client's TLS Certificate ID for the authentication server."
    authServerUserClientCertId: Long!
    "Role name for the feature."
    roleName: String!
}

"CDM image version info from Aws marketplace."
type AwsCdmVersion {
    "Image ID."
    imageId: String!
    "Indicates whether the CDM version is the latest for the product code."
    isLatest: Boolean!
    "Product codes of Aws image."
    productCodes: [String!]!
    "Image tag array with each element in key=value format."
    tags: [AwsCdmVersionTag!]!
    "Image version."
    version: String!
}

"CDM image version Tag."
type AwsCdmVersionTag {
    "Tag key."
    key: String!
    "Tag value."
    value: String!
}

"Details of AWS account."
type AwsCloudAccount {
    "Name of cloud account."
    accountName: String!
    "Type of cloud account."
    cloudType: AwsCloudType!
    "Rubrik ID of cloud account."
    id: String!
    "Message for cloud account, in case of error."
    message: String!
    "Native ID of cloud account."
    nativeId: String!
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean!
}

"Initiate aws cloud accounts."
type AwsCloudAccountCreateResponse {
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegion!]
    "AWS CloudFormation URL."
    cloudFormationUrl: String!
    "External ID for the cloud account."
    externalId: String!
    "List of feature versions."
    featureVersions: [AwsCloudAccountFeatureVersion!]!
    "Role ARN for the feature (if valid)."
    roleArn: String!
    "Stack name of template to run, only for single account addition."
    stackName: String
    "StackSet name of template to run, only for bulk account addition."
    stackSetName: String
    "AWS CloudFormation template URL."
    templateUrl: String!
}

"Feature version of AWS cloud accounts."
type AwsCloudAccountFeatureVersion {
    "Feature Enum."
    feature: CloudAccountFeature!
    "Version."
    version: Int!
}

"AWS Cloud Account lists the AWS Key Management Service (AWS KMS) response."
type AwsCloudAccountListKMSKeysResponse {
    result: [KMSKey!]!
}

"AWS Cloud Account lists the security group response."
type AwsCloudAccountListSecurityGroupsResponse {
    result: [CloudAccountSub!]!
}

"AWS Cloud Account lists the subnet response."
type AwsCloudAccountListSubnetsResponse {
    result: [CloudAccountSubnet!]!
}

"AWS Cloud Account lists the Amazon Virtual Private Cloud (VPC) response."
type AwsCloudAccountListVpcResponse {
    result: [CloudAccountVpc!]!
}

"Aws Cloud Account Update Feature Response."
type AwsCloudAccountUpdateFeatureResponse {
    success: Boolean!
}

"Aws cloud accounts validate response."
type AwsCloudAccountValidateResponse {
    "Contains error message for account(s)."
    invalidAwsAccounts: [AwsAccountValidationResponse!]!
    "Contains error message for admin account."
    invalidAwsAdminAccount: AwsAccountValidationResponse
}

"Aws cloud accounts features."
type AwsCloudAccountWithFeatures {
    "AWS account details."
    awsCloudAccount: AwsCloudAccount
    "Feature details for the cloud account."
    featureDetails: [FeatureDetail!]!
}

"Compute setting for AWS Target."
type AwsComputeSettings {
    "Cloud account details of the AWS target."
    cloudAccount: CloudAccount
    "List of cluster interface CIDR."
    clusterInterfaceCidrs: [ClusterInfCidrs!]!
    "ID of the AWS cloud compute setting."
    id: String!
    "Specifies whether this AWS target is archived."
    isArchived: Boolean!
    "Managed by Rubrik SaaS."
    isRscManaged: Boolean!
    "Name of the AWS cloud compute setting."
    name: String!
    "Compute proxy settings of the AWS target."
    proxySettings: ProxySettings
    "AWS target region."
    region: AwsRegion!
    "Security Group ID of the AWS target."
    securityGroupId: String!
    "Subnet ID of the AWS target."
    subnetId: String!
    "VPC ID of the AWS target."
    vpcId: String!
}

type AwsEc2Instance {
    imageId: String!
    instanceId: String!
    instanceName: String!
    instanceType: String!
}

"AWS Exocompute configurations in an AWS account."
type AwsExocomputeConfig {
    "Account details."
    awsCloudAccount: AwsCloudAccount!
    "AWS exocompute get configurations response."
    configs: [AwsExocomputeGetConfigResponse!]!
    "List of regions for which exocompute can be configured."
    exocomputeEligibleRegions: [AwsCloudAccountRegion!]!
    "Feature details."
    featureDetail: FeatureDetail!
}

"AWS Exocompute configurations Deletion status."
type AwsExocomputeConfigsDeletionStatusType {
    "Exocompute configuration ID."
    exocomputeConfigId: String!
    "Specifies whether the deletion of the Exocompute configuration was successful."
    success: Boolean!
}

"AWS Exocompute configuration in a region."
type AwsExocomputeGetConfigResponse {
    "Specifies if the security groups are managed by Rubrik SaaS."
    areSecurityGroupsRscManaged: Boolean!
    "Cluster security group ID."
    clusterSecurityGroupId: String!
    "Exocompute configuration UUID."
    configUuid: String!
    "Status of the latest Exocompute health check."
    healthCheckStatus: ExocomputeHealthCheckStatus!
    "Exocompute configuration message."
    message: String!
    "Node security group ID."
    nodeSecurityGroupId: String!
    "Exocompute configuration region."
    region: AwsCloudAccountRegion!
    "First subnet."
    subnet1: AwsExocomputeSubnetType!
    "Second subnet."
    subnet2: AwsExocomputeSubnetType!
    "VPC ID."
    vpcId: String!
}

"AWS Exocompute subnet."
type AwsExocomputeSubnetType {
    "Availability zone in which the subnet resides."
    availabilityZone: String!
    "ID of the subnet."
    subnetId: String!
}

"AWS feature configurations in an AWS account."
type AwsFeatureConfig {
    "Account details."
    awsCloudAccount: AwsCloudAccount!
    "Aws exocompute configurations."
    exocomputeConfigs: [AwsExocomputeGetConfigResponse!]!
    "Feature detail."
    featureDetail: FeatureDetail!
}

"Immutability settings for aws cdm target."
type AwsImmutabilitySettingsType {
    "Number of days location is immutable."
    lockDurationDays: Int!
}

type AwsInstanceType {
    instanceTypeId: Int!
    memoryMbs: Int!
    name: String!
    networkPerformance: String!
    region: String!
    storage: String!
    tenancy: String!
    vcpus: Int!
}

"AWS native account."
type AwsNativeAccount implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "List of all EBS Volumes under this AWS Native account."
    awsNativeEbsVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter for EBS volumes."
        ebsVolumeFilters: AwsNativeEbsVolumeFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeEbsVolumeConnection!
    "List of all EC2 instances under this AWS Native account."
    awsNativeEc2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter for EC2 instances."
        ec2InstanceFilters: AwsNativeEc2InstanceFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeEc2InstanceConnection!
    "List of all RDS Instances under this AWS Native account."
    awsNativeRdsInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for RDS instances."
        rdsInstanceFilters: AwsNativeRdsInstanceFilters,
        "Sort fields for list of AWS RDS instances."
        sortBy: AwsNativeRdsInstanceSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeRdsInstanceConnection!
    "AWS cloud type."
    cloudType: AwsCloudType!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Count of EBS Volumes in the AWS Native account."
    ebsVolumeCount: Int!
    "Count of EC2 Instances in the AWS Native account."
    ec2InstanceCount: Int!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Last refresh time of the account, in UTC date-time format."
    lastRefreshedAt: DateTime
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Count of RDS Instances in the account."
    rdsInstanceCount: Int!
    "List of AWS region specifications associated with the account."
    regionSpecs: [AwsNativeRegionSpec!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Specifies the state of account in Rubrik environment like Refreshed, Disconnected, etc. An account can be in a single state at a time."
    status: AwsAccountStatus!
}

"Paginated list of AwsNativeAccount objects."
type AwsNativeAccountConnection {
    "Total number of AwsNativeAccount objects matching the request arguments."
    count: Int!
    "List of AwsNativeAccount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AwsNativeAccountEdge!]!
    "List of AwsNativeAccount objects."
    nodes: [AwsNativeAccount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AwsNativeAccount object. This wrapper is used for pagination."
type AwsNativeAccountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AwsNativeAccount object wrapped by this edge."
    node: AwsNativeAccount!
}

"AWS native EBS volume."
type AwsNativeEbsVolume implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "EC2 Instances to which this volume is attached."
    attachedEc2Instances: [AwsNativeEc2Instance!]!
    "List of EC2 instance details to which volume is attached."
    attachmentSpecs: [AttachmentSpecForEbsVolume!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZ for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones."
    availabilityZone: String!
    "Rubrik ID of Instance."
    awsAccountRubrikId: String!
    "AWS Native account associated with the EBS Volumes."
    awsNativeAccount: AwsNativeAccount!
    "Name for the AWS account."
    awsNativeAccountName: String!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Input/Output (IO) limit per second for volume."
    iops: Long!
    "Whether exocompute is configured for the region where the volume is."
    isExocomputeConfigured: Boolean!
    "Whether indexing is enabled for snapshots of volume."
    isIndexingEnabled: Boolean!
    "Whether the volume image is marketplace image."
    isMarketplace: Boolean!
    "Whether the volume is relic."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EBS volume on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions."
    region: AwsNativeRegion!
    "Size of volume in GiB."
    sizeInGiBs: Int!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "List of tags associated with volume."
    tags: [Tag!]!
    "Name of volume on AWS. Name is not necessarily unique for different volumes."
    volumeName: String!
    "AWS Native ID of EBS volume."
    volumeNativeId: String!
    "AWS Native EBS volume type. Some examples are: g3, io2. This field cannot be null or empty string and will be mapped directly to available EBS volumes on cloud(AWS). For more information, see https://aws.amazon.com/ebs/volume-types."
    volumeType: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of AwsNativeEbsVolume objects."
type AwsNativeEbsVolumeConnection {
    "Total number of AwsNativeEbsVolume objects matching the request arguments."
    count: Int!
    "List of AwsNativeEbsVolume objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AwsNativeEbsVolumeEdge!]!
    "List of AwsNativeEbsVolume objects."
    nodes: [AwsNativeEbsVolume!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AwsNativeEbsVolume object. This wrapper is used for pagination."
type AwsNativeEbsVolumeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AwsNativeEbsVolume object wrapped by this edge."
    node: AwsNativeEbsVolume!
}

"AWS native EC2 instance."
type AwsNativeEc2Instance implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Attach an AWS Elastic Block Store (EBS) volume to your instance."
    attachedEbsVolumes: [AwsNativeEbsVolume!]!
    "List of EBS volume details attached to the instance."
    attachmentSpecs: [AttachmentSpecForEc2Instance!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZs for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones."
    availabilityZone: String!
    "Rubrik ID of Instance."
    awsAccountRubrikId: String!
    "AWS account of the EC2 instance."
    awsNativeAccount: AwsNativeAccount!
    "Name for the AWS Account."
    awsNativeAccountName: String!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Rubrik CDM host information for the AWS EC2 instance added as a host to the cluster. The value is Null when the virtual machine is not added as a host on any Rubrik cluster."
    hostInfo: PhysicalHost
    "The FID of the hierarchy object."
    id: UUID!
    "Name of instance on AWS. Name is not necessarily unique for different instances."
    instanceName: String!
    "AWS Native ID of Instance."
    instanceNativeId: String!
    "AWS Native EC2 instance type. Some examples are: t2.nano, m5.xlarge. This field cannot be null or empty string and will be mapped directly to available EC2 instance on cloud(AWS). For more information, see https://aws.amazon.com/ec2/instance-types."
    instanceType: String!
    "Whether exocompute is configured for the region where the instance is."
    isExocomputeConfigured: Boolean!
    "Whether indexing is enabled for snapshots of instance."
    isIndexingEnabled: Boolean!
    "Whether the instance image is marketplace image."
    isMarketplace: Boolean!
    "Whether the instance is relic."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Name of the Operating System (OS) for the Instance. Some examples are: Linux, Windows. This field cannot be null or empty string but can be Undefined in case it is not currently supported.List of supported OS: Linux, Windows."
    osType: OsType!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Private IP address for instance."
    privateIp: String!
    "Public IP address for instance."
    publicIp: String!
    "Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions."
    region: AwsNativeRegion!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "Name of SSH key-pair for the Instance."
    sshKeyPairName: String!
    "List of tags associated with Instance."
    tags: [Tag!]!
    "ID of Virtual Private Cloud (VPC) associated with instance."
    vpcId: String!
    "Name of Virtual Private Cloud (VPC) associated with instance."
    vpcName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of AwsNativeEc2Instance objects."
type AwsNativeEc2InstanceConnection {
    "Total number of AwsNativeEc2Instance objects matching the request arguments."
    count: Int!
    "List of AwsNativeEc2Instance objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AwsNativeEc2InstanceEdge!]!
    "List of AwsNativeEc2Instance objects."
    nodes: [AwsNativeEc2Instance!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AwsNativeEc2Instance object. This wrapper is used for pagination."
type AwsNativeEc2InstanceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AwsNativeEc2Instance object wrapped by this edge."
    node: AwsNativeEc2Instance!
}

"Specific information for AWS EC2 snapshot created on Polaris."
type AwsNativeEc2InstanceSpecificSnapshot implements PolarisSpecificSnapshot {
    "AWS native account ID of the EC2 snapshot."
    awsNativeAccountId: String!
    "Consistency level of the EC2 snapshot."
    consistencyLevel: SnapshotServiceConsistencyLevel!
    "List of key-value pairs that map device path to volume snapshot."
    devicePathToVolumeSnapshotIdMap: DevicePathToVolumeSnapshotIdMap!
    "IAM instance profile ARN of the EC2 object at the time EC2 snapshot was taken."
    iamInstanceProfileArn: String!
    "Instance type of the EC2 snapshot."
    instanceType: String!
    "Native ID of the EC2 snapshot."
    nativeId: String!
    "Native name of the EC2 snapshot."
    nativeName: String!
    "Region native ID of the EC2 snapshot."
    region: String!
    "ID of the snapshot."
    snapshotId: UUID!
    "Volume snapshots excluded from the EC2 snapshot."
    volumeSnapshotsToExclude: [String!]!
}

type AwsNativeProtectionAccountAddResponse {
    cloudFormationName: String!
    cloudFormationTemplateUrl: String!
    cloudFormationUrl: String!
    errorMessage: String!
}

"AWS native RDS instance."
type AwsNativeRdsInstance implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Allocated size of RDS Instance in GiB."
    allocatedStorageInGibi: Long!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Rubrik Identifier for account associated with RDS Instance."
    awsAccountRubrikId: String!
    "AWS account of the Amazon Relational Database Service (RDS) instance."
    awsNativeAccount: AwsNativeAccount!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Engine being used for RDS Instance."
    dbEngine: AwsNativeRdsDbEngine!
    "Class type of RDS Instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClass!
    "Name of RDS Instance."
    dbInstanceName: String!
    "Resource identifier of RDS Instance."
    dbiResourceId: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Identifies if the RDS Instance is part of multiple Availability Zones."
    isMultiAz: Boolean!
    "Specifies whether the RDS Instance is a relic."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Maintenance window of RDS Instance."
    maintenanceWindow: String!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Name of Availability Zone(AZ) associated with RDS Instance."
    primaryAvailabilityZone: String!
    "Name of the source RDS instance if this instance is a read replica. This field is not applicable for primary RDS instances."
    readReplicaSourceName: String!
    "AWS region of RDS Instance."
    region: AwsNativeRegion!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "List of tags associated with RDS Instance."
    tags: [Tag!]!
    "Identifier of VPC associated with RDS Instance."
    vpcId: String!
    "Name of VPC associated with RDS Instance."
    vpcName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of AwsNativeRdsInstance objects."
type AwsNativeRdsInstanceConnection {
    "Total number of AwsNativeRdsInstance objects matching the request arguments."
    count: Int!
    "List of AwsNativeRdsInstance objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AwsNativeRdsInstanceEdge!]!
    "List of AwsNativeRdsInstance objects."
    nodes: [AwsNativeRdsInstance!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AwsNativeRdsInstance object. This wrapper is used for pagination."
type AwsNativeRdsInstanceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AwsNativeRdsInstance object wrapped by this edge."
    node: AwsNativeRdsInstance!
}

"The Point-in-Time (PiT) restore window of the RDS Instance."
type AwsNativeRdsPointInTimeRestoreWindow {
    "The earliest time to which RDS Instance can be restored."
    earliestTime: DateTime
    "The latest time to which RDS Instance can be restored."
    latestTime: DateTime
}

"List of AWS region specifications associated with an AWS account."
type AwsNativeRegionSpec {
    "A boolean specifying whether exocompute is configured in the region or not."
    isExocomputeConfigured: Boolean!
    "Name of the AWS region."
    region: AwsNativeRegion!
}

"Represents a subnet in AWS."
type AwsNativeSubnet {
    "Availability Zone corresponding to the subnet."
    availabilityZone: String!
    "ID of the subnet."
    id: String!
    "Name of the subnet."
    name: String!
}

"The SLA Domain configuration for AWS RDS instances."
type AwsRdsConfig {
    "Specifies the duration for which the logs will be retained. This duration determines the earliest time to which a Point-in-Time recovery can be performed on the associated RDS instances."
    logRetention: Duration
}

"AWS Replication target."
type AwsReplicationTarget {
    "AWS account ID."
    accountId: String!
    "AWS account name."
    accountName: String!
    region: AwsNativeRegionForReplication!
}

"AWS role based Account specific info."
type AwsRoleBasedAccount implements CloudAccount {
    awsSpecificInfo: AwsCloudAccountWithFeatures!
    "The ID of this Cloud Account."
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudAccountType!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account."
    description: String
    "The name of this Cloud Account."
    name: String!
}

"A Security group in AWS realm."
type AwsSecurityGroup {
    "ID of the AWS security group."
    id: String!
    "Name of the AWS security group."
    name: String!
}

type AwsStorageVolumeType {
    maxIops: Int!
    maxSizeGbs: Int!
    name: String!
    volumeTypeId: Int!
}

"A Subnet in AWS realm."
type AwsSubnet {
    "Availability zone in which the subnet resides."
    availabilityZone: String!
    "ID of the subnet."
    id: String!
    "Name of the subnet."
    name: String!
}

"Specific info for AWS Target Template."
type AwsTargetTemplate implements TargetTemplate {
    "AWS target bucket prefix."
    bucketPrefix: String!
    "AWS target bucket tags."
    bucketTags: [TagObject!]!
    "Cloud account details of the AWS target."
    cloudAccount: CloudAccount!
    "Cloud native template type."
    cloudNativeLocTemplateType: CloudNativeLocTemplateType!
    "AWS target compute settings."
    computeSettings: AwsComputeSettings
    "AWS target encryption type."
    encryptionType: TargetEncryptionTypeEnum!
    "Specifies whether AWS target has consolidation enabled or not."
    isConsolidationEnabled: Boolean!
    "AWS target KMS master key ID."
    kmsMasterKeyId: String
    "AWS target proxy settings."
    proxySettings: ProxySettings
    "AWS target region."
    region: AwsRegion!
    "AWS target storage class."
    storageClass: AwsStorageClass!
    "The type of this Target."
    targetType: TargetType!
}

type AwsVmNicSpec {
    ipv4Address: String!
    key: Int!
    "Security group of the nic."
    securityGroup: SnappableSecurityGroup
    securityGroupId: String!
    "Subnet of the nic."
    subnet: SnappableSubnet
    subnetId: String!
}

type AwsVmVolumeSpec {
    iops: Int!
    key: Int!
    sizeGbs: Int!
    volumeTypeId: Int!
}

"A Virtual Private Cloud (VPC) in AWS realm."
type AwsVpc {
    "ID for the VPC."
    id: String!
    "Name of the VPC."
    name: String!
    "List of security groups associated with the VPC."
    securityGroups: [AwsSecurityGroup!]!
    "List of subnets associated with the VPC."
    subnets: [AwsSubnet!]!
}

"Azure Account specific info."
type AzureAccount implements CloudAccount {
    "The ID of this Cloud Account."
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudAccountType!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account."
    description: String
    "The name of this Cloud Account."
    name: String!
    "The native ID of the subscription."
    subscriptionId: String!
    "The native ID of the tenant of the subscription."
    tenantId: String!
}

"Custom role ARM template corresponding to the feature."
type AzureArmTemplateByFeature {
    "Cloud native protections features."
    feature: CloudAccountFeature!
    "The template required for supporting the feature specified by the feature field. During the upgrade operation, only the role definition template is returned."
    roleDefinitionAssignmentTemplate: String!
    "Policy permission version to be used for adding and upgrading the subscription."
    version: Int!
}

"CDM image version info from Azure marketplace."
type AzureCdmVersion {
    "Image SKU."
    sku: String!
    "Supported Azure instance types for this CDM version."
    supportedInstanceTypes: [AzureInstanceType!]!
    "Image tag array with each element in key=value format."
    tags: [AzureCdmVersionTag!]!
    "Image version."
    version: String!
}

"CDM image version Tag."
type AzureCdmVersionTag {
    "Tag key."
    key: String!
    "Tag value."
    value: String!
}

"Azure Cloud Account Feature details."
type AzureCloudAccountFeatureDetail {
    "A feature refers to a Rubrik protection feature. For example: Virtual Machine and Disk Protection, Storage, Exocompute, etc."
    feature: CloudAccountFeature!
    "Persistent storage configured for the feature. It is null for features other than Azure SQL DB and Azure SQL MI."
    persistentStorage: PersistentStorage
    "Azure regions."
    regions: [AzureCloudAccountRegion!]!
    "Resource group for the feature."
    resourceGroup: AzureResourceGroup!
    "Role details for the feature."
    role: AzureRole!
    "Specifies the state of an Azure cloud account in Rubrik environment. For example, Refreshed, Disconnected, etc. A cloud account can only be in one state at a time."
    status: CloudAccountStatus!
    "User assigned managed identity for encryption feature. It is null for features other than Cloud Native Archival Encryption."
    userAssignedManagedIdentity: AzureUserAssignedManagedIdentity
}

"Configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Rubrik features that the customer wants to be enabled on the cloud account."
type AzureCloudAccountPermissionConfigResponse {
    "Policy permission version to be used on Rubrik for adding a subscription."
    permissionVersion: Int!
    "List of permissions to be applied on the role created in Azure for a subscription."
    rolePermissions: [AzureCloudAccountRolePermission!]!
}

"Azure Permission type with included and excluded actions."
type AzureCloudAccountRolePermission {
    "Actions which should be explicitly disallowed on the Azure role for the subscription."
    excludedActions: [String!]!
    "Data actions which should be explicitly disallowed on the Azure role for the subscription."
    excludedDataActions: [String!]!
    "Actions which should be allowed on the Azure role for the subscription."
    includedActions: [String!]!
    "Data actions which should be allowed on the Azure role for the subscription."
    includedDataActions: [String!]!
}

"Azure Cloud Account Subscription for a given feature."
type AzureCloudAccountSubscription {
    "Cloud type of the Azure subscription."
    cloudType: AzureCloudType!
    "Cloud account ID of the subscription."
    customerSubscriptionId: String!
    "Rubrik ID of the Azure tenant in which this subscription is present."
    customerTenantId: String!
    "Specifies whether the requester has appropriate permissions on this subscription."
    isAuthorized: Boolean!
    "Subscription name as specified in Azure."
    name: String!
    "Subscription UUID as specified in Azure."
    nativeId: String!
}

"Azure Cloud Account Subscription details for a given feature."
type AzureCloudAccountSubscriptionDetail {
    "One of the enabled features on this subscription."
    featureDetail: AzureCloudAccountFeatureDetail
    "Rubrik ID of the Azure Subscription."
    id: String!
    "Subscription name as specified in Azure."
    name: String!
    "Subscription UUID as specified in Azure."
    nativeId: String!
}

"Azure cloud account with features."
type AzureCloudAccountSubscriptionWithFeatures {
    "Details of features of the cloud account."
    featureDetails: [AzureCloudAccountFeatureDetail!]!
    "Azure subscription details."
    subscription: AzureCloudAccountSubscription
}

"Azure Tenant with details of subscriptions that are configured for a given feature."
type AzureCloudAccountTenant {
    "App name of the application configured for authentication of the Azure tenant."
    appName: String!
    "Rubrik ID of the Azure Tenant."
    azureCloudAccountTenantRubrikId: String!
    "Client ID of the application configured for authentication of the Azure tenant."
    clientId: String!
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    cloudType: AzureCloudType!
    "Domain Name of the Azure Tenant."
    domainName: String!
    "Count of subscriptions added to the Rubrik ecosystem for this Azure Tenant."
    subscriptionCount: Int!
    "Subscriptions added to the Rubrik ecosystem for this Azure Tenant."
    subscriptions: [AzureCloudAccountSubscriptionDetail!]!
}

"Azure Cloud Account Tenant with details of exocompute configured for subscriptions for a given feature."
type AzureCloudAccountTenantWithExoConfigs {
    "App name of Azure application for the tenant."
    appName: String!
    "Client ID of azure application for the tenant."
    clientId: String!
    "Type of Azure Tenant. Can be Azure Public Cloud or Azure China Cloud."
    cloudType: AzureCloudType!
    "Azure Active Directory (AD) domain corresponding to subscription."
    domainName: String!
    "Number of subscriptions for the tenant."
    subscriptionCount: Int!
    "Details of subscriptions for the tenant."
    subscriptions: [AzureSubscriptionWithExoConfigs!]!
}

"Azure native archival specific fields for Azure Target Template."
type AzureCloudNativeTargetCompanion {
    "Template type of the storage settings. Must be either SOURCE_REGION or SPECIFIC_REGION."
    cloudNativeLocTemplateType: CloudNativeLocTemplateType!
    "List of configured customer managed keys per region."
    cmkInfo: [AzureCmk!]!
    "Redundancy type for the Storage Account. Some examples are: LRS, ZRS, GRS etc. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy."
    redundancy: AzureRedundancy!
    "Region for the Storage Account. All the storage accounts created are General Purpose V2 Storage Account. GPV2 accounts are supported only in certain regions. List of Supported Regions: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#redundancy-in-the-primary-region."
    storageAccountRegion: AzureRegion!
    "Tags for the Storage Account."
    storageAccountTags: [TagObject!]!
    "Storage Tier for the Storage Account. Only Cool, Hot storage tier are supported for now. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers."
    storageTier: AzureStorageTier!
    "Native ID of the Azure subscription."
    subscriptionNativeId: String!
}

"Customer managed key vault and key information for a region."
type AzureCmk {
    "Name of the customer managed key."
    keyName: String!
    "Name of the key vault."
    keyVaultName: String!
    "Region of the key vault."
    region: AzureRegion!
}

"Compute setting for Azure Target."
type AzureComputeSettings {
    "Client ID of the Application."
    appId: String!
    "Compute proxy settings of the Azure target."
    computeProxySettings: ProxySettings
    "Storage container name of the Azure target."
    generalPurposeStorageContainer: String!
    "Storage account name of the Azure target."
    generalPurposeStorageName: String!
    "Name of the Azure region."
    region: AzureRegion!
    "Resource Group of the Azure target."
    resourceGroup: String!
    "Security Group ID of the Azure target."
    securityGroupId: String!
    "Subnet ID of the Azure target."
    subnetId: String!
    "Virtual Network ID of the Azure target."
    virtualNetworkId: String!
}

"Details of Azure Encryption Key."
type AzureEncryptionKey {
    "Name of Encryption Key."
    keyName: String!
}

"Exocompute configurations details."
type AzureExocomputeConfigDetails {
    "ID for exocompute configuration."
    configUuid: String!
    "Status of the latest Exocompute health check."
    healthCheckStatus: ExocomputeHealthCheckStatus!
    "Specifies if Exocompute is managed by RSC."
    isRscManaged: Boolean!
    "Error message received while creating Exocompute configuration."
    message: String!
    "Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni."
    podSubnetNativeId: String!
    "Region in which exocompute is configured. It will be in the format like EASTUS."
    region: AzureCloudAccountRegion!
    "Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni."
    subnetNativeId: String!
}

"Contains validation information, such as blockers or errors encountered in validating the Exocompute configuration."
type AzureExocomputeConfigValidationInfo {
    "Specifies the Exocompute configuration which needs validation."
    config: AzureExocomputeRegionConfig
    "Error received while validating Exocompute configuration."
    errorMessage: String!
    "Specifies whether the configuration has blocking security rules in its associated network security group attached to the subnet for running AKS cluster in the specific region. For more details, visit https://docs.microsoft.com/en-us/azure/aks/limit-egress-traffic#required-outbound-network-rules-and-fqdns-for-aks-clusters."
    hasBlockedSecurityRules: Boolean!
    "Specifies whether the configuration has the corresponding subnet address range overlap with Azure restricted address ranges. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#prerequisites."
    hasRestrictedAddressRangeOverlap: Boolean!
    "Specifies whether the size of the cluster subnet provided for the exocompute configuration is smaller than desired to create exo-cluster."
    isClusterSubnetSizeTooSmall: Boolean!
    "Specifies whether the subnet specified in configuration is same for the pod and cluster. Pod and cluster subnets should be different for a valid configuration. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#dynamic-allocation-of-ip-addresses-and-enhanced-subnet-support-faqs."
    isPodAndClusterSubnetSame: Boolean!
    "Specifies whether the VNET associated with the subnet specified in configuration is different for the pod and cluster. Pod and cluster VNETs should be same for a valid configuration. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#dynamic-allocation-of-ip-addresses-and-enhanced-subnet-support-faqs."
    isPodAndClusterVnetDifferent: Boolean!
    "Specifies whether the size of the pod subnet provided for the exocompute configuration is smaller than desired to create exo-cluster."
    isPodSubnetSizeTooSmall: Boolean!
    "Specifies whether the subnet specified in configuration is delegated. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#prerequisites."
    isSubnetDelegated: Boolean!
}

"Azure Exocompute configurations in an Azure subscription."
type AzureExocomputeConfigsInAccount {
    "Account details."
    azureCloudAccount: AzureCloudAccountSubscriptionDetail!
    "Azure exocompute configurations."
    configs: [AzureExocomputeGetConfigResponse!]!
    "List of regions for which exocompute can be configured."
    exocomputeEligibleRegions: [AzureCloudAccountRegion!]!
    "Feature details."
    featureDetails: AzureCloudAccountFeatureDetail!
}

"Azure Exocompute configuration."
type AzureExocomputeGetConfigResponse {
    "Unique ID of the Exocompute configuration."
    configUuid: String!
    "Status of the latest Exocompute health check."
    healthCheckStatus: ExocomputeHealthCheckStatus!
    "Specifies if Exocompute is managed by RSC."
    isRscManaged: Boolean!
    "Specifies the error message received if any."
    message: String!
    "Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni."
    podSubnetNativeId: String!
    "Azure region for the cloud account in which exocompute is configured."
    region: AzureCloudAccountRegion!
    "Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni."
    subnetNativeId: String!
}

"Represents an Azure Exocompute Configuration for a specific region. The Azure Exocompute Configuration includes the subnet native ID to be used for launching an Azure Kubernetes Service (AKS) Cluster in a specific region."
type AzureExocomputeRegionConfig {
    "Specifies whether Exocompute is managed by Rubrik or not."
    isRscManaged: Boolean!
    "Native ID of the subnet, configured for usage in this region for the Exocompute pods."
    podSubnetNativeId: String!
    "Azure region for the cloud account in which exocompute is configured."
    region: AzureCloudAccountRegion!
    "Native ID of the subnet, configured for usage in this region for the Exocompute cluster."
    subnetNativeId: String!
}

"Immutability settings for azure cdm target."
type AzureImmutabilitySettingsType {
    "Number of days location is immutable."
    lockDurationDays: Int!
}

"Details of Azure Key Vault."
type AzureKeyVault {
    "Whether the Key Vault is accessible by the user assigned managed identity. False by default if userAssignedManagedIdentityPrincipalId is not provided."
    isAccessibleByUserAssignedManagedIdentity: Boolean!
    "Name of Key Vault."
    keyVaultName: String!
    "Name of resource group in which the Key Vault resides."
    resourceGroupName: String!
}

"Mapped Azure subscription for launching Exocompute."
type AzureMappedExocomputeSubscription {
    "Cloud account ID of the Azure subscription."
    id: String!
    "Name of the Azure subscription."
    name: String!
    "Native ID of the Azure subscription."
    nativeId: String!
}

"Azure Virtual Machine attached disks snapshot."
type AzureNativeAttachedDiskSpecificSnapshot {
    "Name of the attached disk."
    diskName: String!
    "Resource group name of the attached disk."
    diskResourceGroupName: String!
    "Disk Storage Tier of the attached disk."
    diskStorageTier: String!
    "Specifies whether the attached disk is an OS disk or not."
    isOsDisk: Boolean!
    "Logical Unit Number(LUN) of the attached disk."
    lun: Int!
    "Native ID of the attached disk snapshot."
    snapshotNativeId: String!
    "Source Disk Unique Native ID of the attached disk."
    sourceDiskUniqueNativeId: String!
}

"An Azure availability set. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview."
type AzureNativeAvailabilitySet {
    "Name of the availability set."
    name: String!
    "Native ID of the availability set."
    nativeId: String!
}

"Details of the Azure Disk Encryption Set."
type AzureNativeDiskEncryptionSet {
    "Name of the Azure Disk Encryption Set."
    name: String!
    "Native ID of the Azure Disk Encryption Set."
    nativeId: String!
}

"List of disk types available for use in an Azure availability zone. Not all disk types are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types."
type AzureNativeExportCompatibleDiskTypes {
    "Availabity zone of the disk."
    availabilityZone: String!
    "Types of the disk."
    diskTypes: [AzureNativeManagedDiskType!]!
}

"The virtual machine sizes for an Azure availability zone. Not all virtual machine sizes are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
type AzureNativeExportCompatibleVmSizes {
    "Availability zone of the virtual machine (VM)."
    availabilityZone: String!
    "Sizes of the virtual machines (VMs). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
    vmSizes: [String!]!
}

"An Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview."
type AzureNativeManagedDisk implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "All Virtual Machines (VMs) attached to the Managed Disk."
    allAttachedAzureNativeVirtualMachines: [AzureNativeVirtualMachine!]!
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Attachment Specifications are properties of the Managed Disk,  like the ID of the virtual machine (VM) that is associated with the Managed Disk."
    attachmentSpecs: [AttachmentSpecsForManagedDisk!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Availability Zone associated with the Managed Disk."
    availabilityZone: String!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Number of Input/Output operations Per Second (IOPS) allowed for the Managed Disk."
    diskIopsReadWrite: Long!
    "Bandwidth allowed for the Managed Disk, in millions of bytes per second (MBps)."
    diskMbpsReadWrite: Long!
    "Native ID of the Managed Disk."
    diskNativeId: String!
    "Size of the Managed Disk in gigabytes (GiB)."
    diskSizeGib: Int!
    "Storage tier of the Managed Disk."
    diskStorageTier: AzureNativeManagedDiskType!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether Azure Disk Encryption (ADE) is enabled on the Managed Disk or not. When the value is true, ADE is enabled."
    isAdeEnabled: Boolean!
    "Specifies whether exocompute is configured for the region in which the Managed Disk exists or not. When the value is true, exocompute can be used to perform tasks like file indexing."
    isExocomputeConfigured: Boolean!
    "Specifies whether file indexing is enabled for this Managed Disk or not. When file indexing is enabled, Rubrik can scan through the file structure inside the managed disk in a protected environment where only the meta data like folder structure, file names, and file sizes will be readable by Rubrik."
    isFileIndexingEnabled: Boolean!
    "Specifies whether the Managed Disk is a relic. When the value is true, the Managed Disk is a relic. A managed disk is a relic when it is unprotected or deleted, but the previously taken snapshots of the Virtual Machine continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Type of the Operating System (OS) installed on the Managed Disk."
    osType: AzureNativeVmOsType!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Managed Disk is located."
    region: AzureNativeRegion!
    "Resource Group of the Azure Native Managed Disk."
    resourceGroup: AzureNativeResourceGroup!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "List of tags associated with the Managed Disk."
    tags: [AzureTag!]!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of AzureNativeManagedDisk objects."
type AzureNativeManagedDiskConnection {
    "Total number of AzureNativeManagedDisk objects matching the request arguments."
    count: Int!
    "List of AzureNativeManagedDisk objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureNativeManagedDiskEdge!]!
    "List of AzureNativeManagedDisk objects."
    nodes: [AzureNativeManagedDisk!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureNativeManagedDisk object. This wrapper is used for pagination."
type AzureNativeManagedDiskEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureNativeManagedDisk object wrapped by this edge."
    node: AzureNativeManagedDisk!
}

"Azure region specification."
type AzureNativeRegionSpec {
    "Specifies whether Exocompute is configured in the region or not."
    isExocomputeConfigured: Boolean!
    "Name of the Azure region."
    region: AzureNativeRegion!
}

"An Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside."
type AzureNativeResourceGroup implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Paginated ist of Azure Virtual Machines (VMs) in the Resource Group."
    azureNativeVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure virtual machines."
        sortBy: AzureNativeVirtualMachineSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder,
        virtualMachineFilters: AzureNativeVirtualMachineFilters
    ): AzureNativeVirtualMachineConnection!
    "Count of Azure SQL databases in the Resource Group."
    azureSqlDatabaseCount: Int!
    "Count of Azure SQL Managed Instance databases in the Resource Group."
    azureSqlManagedInstanceDbCount: Int!
    "Rubrik ID of the Azure Native Resource Group."
    azureSubscriptionRubrikId: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Deprecated, use protectedObjectTypeToSla instead. Rubrik Service Level Agreement (SLA) assigned to the disks in the Resource Group."
    diskSla: AzureNativeResourceGroupSlaAssignment!
    "Count of disks in the Resource Group."
    disksCount: Int!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "A list of mappings between protected object types and SLA Domains."
    protectedObjectTypeToSla: [ProtectedObjectTypeToSla!]!
    "Azure region associated with the Resource Group."
    region: AzureNativeRegion!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "A list of mappings between object types and details about the backup setup."
    snappableTypeToBackupSetupSpecs: [WorkloadTypeToBackupSetupSpecs!]!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Azure Native Subscription of the Resource Group."
    subscription: AzureNativeSubscription!
    "List of tags associated with the Resource Group."
    tags: [AzureTag!]!
    "Deprecated, use protectedObjectTypeToSla instead. Rubrik Service Level Agreement (SLA) assigned to the Virtual Machines (VMs) in the Resource Group."
    vmSla: AzureNativeResourceGroupSlaAssignment!
    "Count of Virtual Machines (VMs) in the Resource Group."
    vmsCount: Int!
}

"Paginated list of AzureNativeResourceGroup objects."
type AzureNativeResourceGroupConnection {
    "Total number of AzureNativeResourceGroup objects matching the request arguments."
    count: Int!
    "List of AzureNativeResourceGroup objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureNativeResourceGroupEdge!]!
    "List of AzureNativeResourceGroup objects."
    nodes: [AzureNativeResourceGroup!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureNativeResourceGroup object. This wrapper is used for pagination."
type AzureNativeResourceGroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureNativeResourceGroup object wrapped by this edge."
    node: AzureNativeResourceGroup!
}

"SLA Domain assignment type for the Azure resource group."
type AzureNativeResourceGroupSlaAssignment {
    "Configured SLA domain."
    configuredSlaDomain: GlobalSlaReply!
    "Effective SLA Domain."
    effectiveSlaDomain: GlobalSlaReply!
    "SLA Domain."
    slaAssignment: SlaAssignmentTypeEnum!
}

"An Azure security group. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups."
type AzureNativeSecurityGroup {
    "Name of the security group."
    name: String!
    "Native ID of the security group."
    nativeId: String!
    "Name of the resource group associated with the security group."
    resourceGroupName: String!
}

"The Point-in-Time (PiT) restore window of the Azure SQL Database. Database could be Azure SQL Managed Instance Database or Azure SQL Server Database."
type AzureNativeSqlDatabasePointInTimeRestoreWindow {
    "The earliest time to which database can be restored."
    earliestTime: DateTime
    "The latest time to which database can be restored."
    latestTime: DateTime
}

"Azure storage account."
type AzureNativeStorageAccount {
    "Azure ID of the storage account."
    id: String!
    "Name of the storage account."
    name: String!
    "Region where the storage account is located."
    region: AzureNativeRegion!
    "Name of the resource group where storage account is located."
    resourceGroupName: String!
    "Tags attached to the storage account."
    tags: [AzureTag!]!
}

"An Azure subnet. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets."
type AzureNativeSubnet {
    "List of subnet IP address prefixes in CIDR notation. The list can contain both IPv4 and IPv6 addresses. The list cannot be empty."
    addressPrefixes: [String!]!
    "Name of the subnet."
    name: String!
    "Native ID of the subnet."
    nativeId: String!
    "Virtual Network (VNet) associated with the subnet."
    vnet: AzureNativeVirtualNetwork!
}

"An Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources."
type AzureNativeSubscription implements HierarchyObject & PolarisHierarchyObject {
    "Cloud account ID associated with the subscription."
    accountConnectionId: String!
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Type of Azure cloud, for example, Azure Public Cloud and Azure China Cloud."
    azureCloudType: AzureCloudType!
    "Paginated list of all Azure Resource Groups in the subscription."
    azureNativeResourceGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for listing Azure resource groups."
        commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for listing Azure resource groups."
        sortBy: AzureNativeCommonResourceGroupSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureNativeResourceGroupConnection!
    "Count of Azure SQL databases in the subscription."
    azureSqlDatabaseDbCount: Int!
    "Count of Azure SQL Managed Instance databases in the subscription."
    azureSqlManagedInstanceDbCount: Int!
    "Native ID of the subscription."
    azureSubscriptionNativeId: String!
    "Status of the subscription at a given time. Some examples are: added, deleted, refreshed. For more information, see https://docs.microsoft.com/en-us/azure/cost-management-billing/manage/subscription-states."
    azureSubscriptionStatus: AzureSubscriptionStatus!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Count of managed disks in the subscription."
    disksCount: Int!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Details of features enabled for the subscription."
    enabledFeatures: [AzureNativeSubscriptionEnabledFeature!]!
    "The FID of the hierarchy object."
    id: UUID!
    "Last refresh time of the subscription, in UTC date-time format."
    lastRefreshedAt: DateTime
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "List of Azure region specifications associated with the subscription."
    regionSpecs: [AzureNativeRegionSpec!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "A list of mappings between object types and details about the backup setup."
    snappableTypeToBackupSetupSpecs: [WorkloadTypeToBackupSetupSpecs!]!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Tenant ID associated with the subscription."
    tenantId: String!
    "Count of virtual machines (VMs) in the subscription."
    vmsCount: Int!
}

"Paginated list of AzureNativeSubscription objects."
type AzureNativeSubscriptionConnection {
    "Total number of AzureNativeSubscription objects matching the request arguments."
    count: Int!
    "List of AzureNativeSubscription objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureNativeSubscriptionEdge!]!
    "List of AzureNativeSubscription objects."
    nodes: [AzureNativeSubscription!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureNativeSubscription object. This wrapper is used for pagination."
type AzureNativeSubscriptionEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureNativeSubscription object wrapped by this edge."
    node: AzureNativeSubscription!
}

"Details of a feature enabled in Azure Native Subscription."
type AzureNativeSubscriptionEnabledFeature {
    "Name of the feature enabled for the Azure Subscription."
    featureName: AzureNativeProtectionFeature!
    "Time, in UTC date-time format, when the feature was last refreshed."
    lastRefreshedAt: DateTime
    "Status of the feature at a given time. Some examples are: added, deleted, refreshed."
    status: AzureSubscriptionStatus!
}

"An Azure Native Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/."
type AzureNativeVirtualMachine implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "List of Managed Disks attached to the Azure Virtual Machine (VM)."
    attachedManagedDisks: [AzureNativeManagedDisk!]!
    "Sequence of attachment specs for the virtual machine (VM)."
    attachmentSpecs: [AttachmentSpecsForVirtualMachine!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Native ID of the availability set associated with the virtual machine (VM)."
    availabilitySetNativeId: String!
    "Availability Zone associated with the virtual machine (VM)."
    availabilityZone: String!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Rubrik CDM host information for the Azure Virtual Machine added as a host to the cluster. The value is Null when the virtual machine is not added as a host on any Rubrik cluster."
    hostInfo: PhysicalHost
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether accelerated networking is enabled on the virtual machine (VM) or not. Accelerated Networking improves the network performance on the VM. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-networking."
    isAcceleratedNetworkingEnabled: Boolean!
    "Specifies whether Azure Disk Encryption (ADE) exists on the virtual machine (VM) or not."
    isAdeEnabled: Boolean!
    "Specifies whether application consistent snapshots are enabled for this virtual machine (VM) or not. When enabled, Rubrik informs the Azure applications before taking snapshots, so apps can prepare. During the preparation phrase, Rubrik waits for the IO to be frozen and then the snapshot is taken. Once snapshot is taken, IO is unfreezed and the apps resume normal operation."
    isAppConsistencyEnabled: Boolean!
    "Specifies whether exocompute is configured for the region in which the virtual machine (VM) exists, or not. When the value is true, exocompute can be used to perform tasks like file indexing."
    isExocomputeConfigured: Boolean!
    "Specifies whether file indexing is enabled for this virtual machine or not. When enabled, Rubrik can scan through the file structure inside the virtual machine in a protected environment where only the metadata, like folder structure, file names, and file sizes will be readable by Rubrik."
    isFileIndexingEnabled: Boolean!
    "Specifies whether pre-script or post-script framework is enabled on the the virtual machine (VM) or not. When true, it facilitates application-consistent backups."
    isPreOrPostScriptEnabled: Boolean!
    "Specifies whether the virtual machine is a relic or not. A virtual machine is a relic when it is unprotected or deleted, but the previously taken snapshots of the virtual machine continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Type of the Operating System (OS) installed on the virtual machine (VM)."
    osType: AzureNativeVmOsType!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Private IP address of the virtual machine."
    privateIp: String!
    "Azure region where the virtual machine (VM) is located."
    region: AzureNativeRegion!
    "Resource Group of the Azure Virtual Machine (VM)."
    resourceGroup: AzureNativeResourceGroup!
    "Size type of the virtual machine (VM). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general."
    sizeType: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "Name of the subnet associated with the virtual machine (VM)."
    subnetName: String!
    "List of tags associated with the virtual machine (VM)."
    tags: [AzureTag!]!
    "Native ID of the the virtual machine (VM)."
    virtuaMachineNativeId: String!
    "Application Consistent Specifications of the virtual machine (VM)."
    vmAppConsistentSpecs: VmAppConsistentSpecsInternal
    "Name of the Virtual Machine (VM)."
    vmName: String!
    "Name of the Virtual Network (VNet) associated with the virtual machine (VM)."
    vnetName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of AzureNativeVirtualMachine objects."
type AzureNativeVirtualMachineConnection {
    "Total number of AzureNativeVirtualMachine objects matching the request arguments."
    count: Int!
    "List of AzureNativeVirtualMachine objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureNativeVirtualMachineEdge!]!
    "List of AzureNativeVirtualMachine objects."
    nodes: [AzureNativeVirtualMachine!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureNativeVirtualMachine object. This wrapper is used for pagination."
type AzureNativeVirtualMachineEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureNativeVirtualMachine object wrapped by this edge."
    node: AzureNativeVirtualMachine!
}

"An Azure virtual network (VNet). VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview."
type AzureNativeVirtualNetwork {
    "Name of the Virtual Network (VNet)."
    name: String!
    "Name of the resource group associated with the Virtual Network (VNet)."
    resourceGroupName: String!
}

"Azure VM-specific snapshot information."
type AzureNativeVmSpecificSnapshot implements PolarisSpecificSnapshot {
    "List of data disk snapshots attached to the Azure VM."
    dataDiskSnapshots: [AzureNativeAttachedDiskSpecificSnapshot!]!
    "OS disk snapshot attached to the Azure VM."
    osDiskSnapshot: AzureNativeAttachedDiskSpecificSnapshot
    "ID of the snapshot."
    snapshotId: UUID!
}

type AzureNetworkSecurityGroupResp {
    reason: String!
    rulesStatus: AzureNetworkSecurityRulesStatus!
}

type AzureNetworkSubnetResp {
    valid: Boolean!
}

type AzureNetworkSubnetUnusedAddrResp {
    unusedAddr: Long!
}

"Azure O365 Exocompute cluster details."
type AzureO365ExocomputeCluster {
    acrId: String!
    aksId: String!
    aksVersion: String!
    azureAppId: String!
    azureCloudType: O365AzureCloudType!
    groupName: String!
    hostType: AzureHostType!
    id: String!
    isProvisioned: Boolean!
    "KMS host type details. The possible values are RUBRIK_HOST and CUSTOMER_HOST."
    kmsHostType: AzureHostType!
    kmsId: String!
    "KMS and key details."
    kmsSpec: KmsSpec
    orgId: String!
    orgName: String!
    orgStatus: String!
    orgTenantId: String!
    polarisAccount: String!
    regionName: String!
    scaleRuntime: ScaleRuntime
    setupConfiguration: String!
    storageId: String!
    storageIds: ExocomputeStorageAccountIds
    subscriptionId: String!
    tenantId: String!
}

type AzureOauthConsentKickoffReply {
    appClientId: String!
    csrfToken: String!
    govAppClientId: String!
}

type AzureRegionsResp {
    regions: [Region!]!
}

"Target Azure subscription and region for replication."
type AzureReplicationTarget {
    "Region within the subscription."
    region: AzureNativeRegionForReplication!
    "ID of the subscription."
    subscriptionId: String!
    "Name of the subscription."
    subscriptionName: String!
}

type AzureResourceAvailabilityResp {
    available: Boolean!
    reason: String!
}

"Azure resource group."
type AzureResourceGroup {
    "The name of the resource group."
    name: String!
    "The native ID of the resource group."
    nativeId: String!
    "The region name of the resource group. Example: AustraliaEast."
    region: AzureNativeRegion!
    "The tags present in the resource group."
    tags: [AzureTag!]!
}

"Details of the Azure resource group if it exists."
type AzureResourceGroupInfo {
    "The region of the resource group."
    region: AzureCloudAccountRegion!
    "The name of the resource group."
    resourceGroupName: String!
    "The native ID of the Azure subscription."
    subscriptionNativeId: UUID!
    "The tags on the resource group."
    tags: [TagObject!]!
}

"Azure Role details."
type AzureRole {
    "Specifies whether role is created by Rubrik via OAuth flow or manually by the customer without OAuth flow."
    isRubrikManaged: Boolean!
    "Name of the role assignment."
    roleAssignmentName: String!
    "ID of the role definition."
    roleDefinitionId: UUID!
    "Name of the role."
    roleDisplayName: String!
    "Scope of the role in Azure. The format of the scope is `/subscriptions/<subscription-native-id>`."
    scope: String!
}

type AzureRoleBasedAccount implements CloudAccount {
    "The ID of this Cloud Account."
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudAccountType!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account."
    description: String
    "The name of this Cloud Account."
    name: String!
    "The subscription info with feature details."
    subscriptionWithFeatures: AzureSubscriptionWithFeaturesType!
}

"Location for Azure workload."
type AzureSnappableLocation {
    "Azure native region."
    azureRegion: String!
    "Azure Rubrik subscription ID."
    subscriptionRubrikId: String
    "Azure Rubrik subscription name."
    subscriptionRubrikName: String
}

"An Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more info, see https://azure.microsoft.com/en-us/products/azure-sql/database/."
type AzureSqlDatabaseDb implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Azure SQL Database Server of the Azure SQL Database."
    azureSqlDatabaseServer: AzureSqlDatabaseServer!
    "Details of the setup for performing backups of the Azure SQL database."
    backupSetupSpecs: CloudNativeDatabaseBackupSetupSpecs
    "Specifies the status of the setup for taking the backup of the database."
    backupSetupStatus: AzureSqlDbBackupSetupStatus!
    "Type of backup storage redundancy. Examples: LRS, ZRS, GRS."
    backupStorageRedundancy: AzureSqlBackupStorageRedundancyType!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Name of the Azure SQL Database."
    databaseName: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Name of the Elastic Pool in which the Azure SQL Database resides."
    elasticPoolName: String!
    "Specifies whether exocompute is configured for the database."
    exocomputeConfigured: Boolean!
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the Azure SQL Database is a relic or not. A database is a relic when it is unprotected or deleted, but the previously taken snapshots of the database continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Maximum size of the Azure SQL Database, in bytes."
    maximumSizeInBytes: Long!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Persistent storage configured for storing backups. None represents that persistent storage has not been configured."
    persistentStorage: PersistentStorage
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Database is located."
    region: AzureNativeRegion!
    "Specifies the service objective name of the Azure SQL Database."
    serviceObjectiveName: String!
    "Service Tier associated with the Azure SQL Database. Examples: Basic, General Purpose."
    serviceTier: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "List of tags associated with the Azure SQL Database."
    tags: [AzureTag!]!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"SLA Domain configuration for Azure SQL Database DB object."
type AzureSqlDatabaseDbConfig {
    "Specifies the number of days for which the Azure SQL Database DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int!
}

"Paginated list of AzureSqlDatabaseDb objects."
type AzureSqlDatabaseDbConnection {
    "Total number of AzureSqlDatabaseDb objects matching the request arguments."
    count: Int!
    "List of AzureSqlDatabaseDb objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureSqlDatabaseDbEdge!]!
    "List of AzureSqlDatabaseDb objects."
    nodes: [AzureSqlDatabaseDb!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureSqlDatabaseDb object. This wrapper is used for pagination."
type AzureSqlDatabaseDbEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureSqlDatabaseDb object wrapped by this edge."
    node: AzureSqlDatabaseDb!
}

"Retrieves an Azure SQL Database Server. Refers to the server the Azure SQL Database is a part of. For more info, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers."
type AzureSqlDatabaseServer implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Resource Group of the Azure SQL Database Server."
    azureNativeResourceGroup: AzureNativeResourceGroup!
    "The object from where the setup for performing backups of Azure SQL Databases is inherited."
    backupSetupSourceObject: PathNode
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Database Server is located."
    region: AzureNativeRegion!
    "Name of the Azure SQL Database Server."
    serverName: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "List of tags associated with the Azure SQL Database Server."
    tags: [AzureTag!]!
}

"Paginated list of AzureSqlDatabaseServer objects."
type AzureSqlDatabaseServerConnection {
    "Total number of AzureSqlDatabaseServer objects matching the request arguments."
    count: Int!
    "List of AzureSqlDatabaseServer objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureSqlDatabaseServerEdge!]!
    "List of AzureSqlDatabaseServer objects."
    nodes: [AzureSqlDatabaseServer!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureSqlDatabaseServer object. This wrapper is used for pagination."
type AzureSqlDatabaseServerEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureSqlDatabaseServer object wrapped by this edge."
    node: AzureSqlDatabaseServer!
}

"An elastic pool for a SQL Database Server."
type AzureSqlDatabaseServerElasticPool {
    "Name of the elastic pool."
    name: String!
}

"Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview."
type AzureSqlManagedInstanceDatabase implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Azure SQL Managed Instance Server of the Azure SQL Managed Instance Database."
    azureSqlManagedInstanceServer: AzureSqlManagedInstanceServer!
    "Details of the setup for performing backups of the Azure SQL Managed Instance database."
    backupSetupSpecs: CloudNativeDatabaseBackupSetupSpecs
    "Specifies the status of the setup for taking the backup of the database."
    backupSetupStatus: AzureSqlDbBackupSetupStatus!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Name of the Azure SQL Managed Instance Database."
    databaseName: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Specifies whether exocompute is configured for the database."
    exocomputeConfigured: Boolean!
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the Azure SQL Database is a relic or not. A database is a relic when it is unprotected or deleted, but the previously taken snapshots of the database continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Persistent storage configured for storing backups. None represents that persistent storage has not been configured."
    persistentStorage: PersistentStorage
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Managed Instance Database is located."
    region: AzureNativeRegion!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of AzureSqlManagedInstanceDatabase objects."
type AzureSqlManagedInstanceDatabaseConnection {
    "Total number of AzureSqlManagedInstanceDatabase objects matching the request arguments."
    count: Int!
    "List of AzureSqlManagedInstanceDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureSqlManagedInstanceDatabaseEdge!]!
    "List of AzureSqlManagedInstanceDatabase objects."
    nodes: [AzureSqlManagedInstanceDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureSqlManagedInstanceDatabase object. This wrapper is used for pagination."
type AzureSqlManagedInstanceDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureSqlManagedInstanceDatabase object wrapped by this edge."
    node: AzureSqlManagedInstanceDatabase!
}

"SLA Domain configuration for Azure SQL Managed Instance DB object."
type AzureSqlManagedInstanceDbConfig {
    "Specifies the number of days for which the Azure SQL Managed Instance DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int!
}

"Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of."
type AzureSqlManagedInstanceServer implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Resource Group of the Azure SQL Managed Instance Server."
    azureNativeResourceGroup: AzureNativeResourceGroup!
    "The object from where the setup for performing backups of Azure SQL Managed Instance Databases is inherited."
    backupSetupSourceObject: PathNode
    "Type of backup storage redundancy. Examples: LRS, ZRS, GRS."
    backupStorageRedundancy: AzureSqlBackupStorageRedundancyType!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Name of the Instance Pool the Azure SQL Managed Instance Server belongs to."
    instancePoolName: String!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Managed Instance Server is located."
    region: AzureNativeRegion!
    "Name of the Azure SQL Managed Instance Server."
    serverName: String!
    "Service Tier associated with the Azure SQL Managed Instance Server."
    serviceTier: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Storage size of the Azure SQL Managed Instance Server, in GiB."
    storageSizeGib: Long!
    "Name of the subnet associated with the Azure SQL Managed Instance Server."
    subnetName: String!
    "List of tags associated with the Azure SQL Managed Instance Server."
    tags: [AzureTag!]!
    "Count of the vCores in the Azure SQL Managed Instance Server."
    vCoresCount: Int!
    "Name of the Virtual Network associated with the Azure SQL Managed Instance Server."
    vnetName: String!
}

"Paginated list of AzureSqlManagedInstanceServer objects."
type AzureSqlManagedInstanceServerConnection {
    "Total number of AzureSqlManagedInstanceServer objects matching the request arguments."
    count: Int!
    "List of AzureSqlManagedInstanceServer objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureSqlManagedInstanceServerEdge!]!
    "List of AzureSqlManagedInstanceServer objects."
    nodes: [AzureSqlManagedInstanceServer!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureSqlManagedInstanceServer object. This wrapper is used for pagination."
type AzureSqlManagedInstanceServerEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureSqlManagedInstanceServer object wrapped by this edge."
    node: AzureSqlManagedInstanceServer!
}

type AzureSubscription {
    id: String!
    name: String!
}

"Paginated list of AzureSubscription objects."
type AzureSubscriptionConnection {
    "Total number of AzureSubscription objects matching the request arguments."
    count: Int!
    "List of AzureSubscription objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [AzureSubscriptionEdge!]!
    "List of AzureSubscription objects."
    nodes: [AzureSubscription!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the AzureSubscription object. This wrapper is used for pagination."
type AzureSubscriptionEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual AzureSubscription object wrapped by this edge."
    node: AzureSubscription!
}

"Missing permissions on the Azure Subscription."
type AzureSubscriptionMissingPermissions {
    "List of missing permissions on the Azure Subscription."
    missingPermissions: [String!]!
    "Native ID of the Azure Subscription."
    subscriptionNativeId: String!
}

"Azure Cloud Account Subscription with exocompute configurations for feature configured."
type AzureSubscriptionWithExoConfigs {
    "Native ID for Azure subscription."
    azureSubscriptionNativeId: String!
    "Rubrik ID for Azure subscription."
    azureSubscriptionRubrikId: String!
    "Exocompute configurations available through mapped subscription."
    exocomputeConfigs: [AzureExocomputeConfigDetails!]!
    "Feature details of subscription."
    featureDetail: AzureCloudAccountFeatureDetail!
    "Mapped Exocompute subscription for launching Exocompute."
    mappedExocomputeSubscription: AzureMappedExocomputeSubscription
    "Name of Azure subscription."
    subscriptionName: String!
}

"Azure subscription with Exocompute mapping, if present."
type AzureSubscriptionWithExocomputeMapping {
    "Azure subscription cloud account ID."
    id: String!
    "Mapped Exocompute Azure subscription details."
    mappedExocomputeSubscription: AzureMappedExocomputeSubscription
    "Azure subscription native name."
    name: String!
    "Azure subscription native ID."
    nativeId: String!
}

"Azure subscription with features."
type AzureSubscriptionWithFeaturesType {
    "Cloud type of the Azure subscription."
    cloudType: AzureCloudType!
    "Azure tenant ID."
    customerTenantId: String!
    "Feature details for the cloud account."
    featureDetails: [AzureCloudAccountFeatureDetail!]!
    "Azure subscription cloud account ID."
    id: String!
    "Azure subscription native name."
    name: String!
    "Azure subscription native ID."
    nativeId: String!
}

"Azure Tag."
type AzureTag {
    "Key of the Azure tag."
    key: String!
    "Value of the Azure tag."
    value: String!
}

"Specific info for Azure Target Template."
type AzureTargetTemplate implements TargetTemplate {
    "Cloud Account information of the Azure target."
    cloudAccount: CloudAccount!
    "Cloud native companion information of the Azure target."
    cloudNativeCompanion: AzureCloudNativeTargetCompanion
    "Compute settings of the Azure target."
    computeSettings: AzureComputeSettings
    "Container name prefix of the Azure target."
    containerNamePrefix: String!
    "Instance type of the Azure target."
    instanceType: InstanceTypeEnum!
    "Specifies whether Azure target has consolidation enabled or not."
    isConsolidationEnabled: Boolean!
    "Proxy settings of the Azure target."
    proxySettings: ProxySettings
    "Storage account name of the Azure target."
    storageAccountName: String!
    "The type of this Target."
    targetType: TargetType!
}

"Azure user-assigned Managed Identity details."
type AzureUserAssignedManagedIdentity {
    "Name of the managed identity."
    name: String!
    "Native ID of the managed identity."
    nativeId: String!
    "ID of the service principal object associated with the managed identity."
    principalId: String!
}

type AzureUserRoleResp {
    globalAdministrator: RoleStatus
    subscriptionOwner: RoleStatus
}

"Supported in v5.1+"
type BackupTaskDiagnosticInfo {
    """

    Supported in v5.1+
    The expected completion time of the task.
    """
    expectedEndTime: DateTime
    """

    Supported in v5.1+
    The scheduled start time of the task.
    """
    queueTime: DateTime
    taskStatus: DiagnosticTaskStatus!
}

"Specifies backup window parameters."
type BackupWindow {
    "Duration of backup window in hours."
    durationInHours: Int!
    "Start time attributes of the backup window."
    startTimeAttributes: StartTimeAttributes
}

"Supported in v5.0+"
type BaseGuestCredentialDetail {
    "Required. Supported in v5.0+"
    username: String!
}

"Supported in v5.0+"
type BaseSnapshotSummary {
    "Supported in v5.0+"
    archivalLocationIds: [String!]!
    """

    Supported in v5.0+
    v5.0-v5.3: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
    v6.0-v7.0: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.

    v8.0+: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived to any archival location. 2 means the snapshot is archived to any archival location. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at least on one of the archival locations.
    """
    cloudState: Long
    cloudStorageTier: SnapshotCloudStorageTier
    """

    Supported in v8.0+
    A list of those archival location entries where cloudStorageTier is applicable.
    """
    cloudStorageTiers: [PerLocationCloudStorageTier!]!
    "Supported in v5.0+"
    consistencyLevel: String
    "Required. Supported in v5.0+"
    date: DateTime
    "Supported in v5.0+"
    expirationDate: DateTime
    "Required. Supported in v5.0+"
    id: String!
    """

    Supported in v5.0+
    Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
    """
    indexState: Long
    """

    Supported in v5.2+
    A Boolean that indicates whether or not custom retention is applied to the snapshot.
    """
    isCustomRetentionApplied: Boolean
    "Required. Supported in v5.0+"
    isOnDemandSnapshot: Boolean!
    """

    Supported in v5.2+
    A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
    """
    isPlacedOnLegalHold: Boolean
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true,' the snapshot is being retained under a Retention Lock SLA Domain.
    v5.2+: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
    """
    isRetainedByRetentionLockSla: Boolean
    """

    Supported in v5.2+
    ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
    """
    parentSnapshotId: String
    "Required. Supported in v5.0+"
    replicationLocationIds: [String!]!
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
    """
    slaId: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
    """
    slaName: String!
    """

    Supported in v5.2+
    Snapshot retention related information for local, archival and replication locations.
    """
    snapshotRetentionInfo: SnapshotRetentionInfo
    "Supported in v5.0+"
    sourceObjectType: String
}

"Basic snapshot schedule."
type BasicSnapshotSchedule {
    "Frequency of snapshot schedule."
    frequency: Int!
    "Retention of snapshot schedule."
    retention: Int!
    "Unit of retention in snapshot schedule."
    retentionUnit: RetentionUnit!
}

type BatchAsyncJobStatus {
    "List of map of Rubrik object ID to error message for those object for which pre validation failed."
    errors: [AsyncJobStatusJobError!]!
    "List of map of Rubrik object ID to Job ID for object if pre validation succeeds for object. If pre validation failed, detials will be present in error field."
    jobIds: [AsyncJobStatusJobId!]!
}

"Supported in v5.0+"
type BatchAsyncRequestStatus {
    """

    Required. Supported in v5.0+
    The asynchronous request status of a batch request.
    """
    responses: [AsyncRequestStatus!]!
}

"Supported in v7.0+"
type BatchExportHypervVmReply {
    """

    Required. Supported in v7.0+
    Array of objects containing information about failed requests.
    """
    failedRequests: [HypervAsyncRequestFailureSummary!]!
    """

    Required. Supported in v7.0+
    Array of objects containing information about successful asynchronous requests.
    """
    successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}

"Reply Object for BatchExportNutanixVm."
type BatchExportNutanixVmReply {
    output: NutanixBatchAsyncApiResponse
}

"Supported in v7.0+"
type BatchInstantRecoverHypervVmReply {
    """

    Required. Supported in v7.0+
    Array of objects containing information about failed requests.
    """
    failedRequests: [HypervAsyncRequestFailureSummary!]!
    """

    Required. Supported in v7.0+
    Array of objects containing information about successful asynchronous requests.
    """
    successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}

"Supported in v7.0+"
type BatchMountHypervVmReply {
    """

    Required. Supported in v7.0+
    Array of objects containing information about failed requests.
    """
    failedRequests: [HypervAsyncRequestFailureSummary!]!
    """

    Required. Supported in v7.0+
    Array of objects containing information about successful asynchronous requests.
    """
    successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}

"Reply Object for BatchMountNutanixVm."
type BatchMountNutanixVmReply {
    output: NutanixBatchAsyncApiResponse
}

"Reply for the operation to quarantine a batch of snapshots."
type BatchQuarantineSnapshotReply {
    "Boolean which signifies whether the operation is successful."
    isBatchQuarantineSuccessful: Boolean!
}

"Reply for the operation to release a batch of snapshots from quarantine."
type BatchReleaseFromQuarantineSnapshotReply {
    "Boolean which signifies whether the operation is successful."
    isBatchReleaseFromQuarantineSuccessful: Boolean!
}

"Supported in v5.1+"
type BatchVmwareCdpLiveInfo {
    """

    Required. Supported in v5.1+
    The live CDP info for the virtual machines.
    """
    responses: [VmwareCdpLiveInfo!]!
}

"Supported in v5.3+"
type BatchVmwareVmRecoverableRanges {
    """

    Required. Supported in v5.3+
    The recoverable ranges for a set of virtual machines.
    """
    responses: [VmwareVmRecoverableRanges!]!
}

"Supported in v7.0+"
type BeginManagedVolumeSnapshotReply {
    """

    Supported in v7.0+
    Status of the asynchronous request that was initiated for the Managed Volume Begin Snapshot job.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Supported in v7.0+
    An ID representing the owner of a snapshot.
    """
    ownerId: String
    """

    Required. Supported in v7.0+
    ID of the snapshot. All writes to the Managed Volume until the next end-snapshot call will be part of this snapshot.
    """
    snapshotId: String!
}

"Bidirectional replication specification."
type BidirectionalReplicationSpec {
    "Replication specification 1."
    replicationSpec1: UnidirectionalReplicationSpec
    "Replication specification 2."
    replicationSpec2: UnidirectionalReplicationSpec
}

"Supported in v5.0+"
type BlackoutWindow {
    "Supported in v5.0+"
    endTime: String
    "Required. Supported in v5.0+"
    startTime: String!
}

"Supported in v5.0+"
type BlackoutWindowResponseInfo {
    "Required. Supported in v5.0+"
    blackoutWindowStatus: BlackoutWindowStatus
    "Required. Supported in v5.0+"
    blackoutWindows: BlackoutWindows
}

"Supported in v5.0+"
type BlackoutWindowStatus {
    "Required. Supported in v5.0+"
    isGlobalBlackoutActive: Boolean!
    "Supported in v5.0+"
    isSnappableBlackoutActive: Boolean
}

"Supported in v5.0+"
type BlackoutWindows {
    "Required. Supported in v5.0+"
    globalBlackoutWindows: [BlackoutWindow!]!
    "Supported in v5.0+"
    snappableBlackoutWindows: [BlackoutWindow!]!
}

type BlueprintCdmLocation implements BlueprintLocation {
    "The cluster."
    cluster: Cluster
    locationId: String!
    "The type of the location."
    type: BlueprintLocationType!
}

"Paginated list of BlueprintChild objects."
type BlueprintChildConnection {
    "Total number of BlueprintChild objects matching the request arguments."
    count: Int!
    "List of BlueprintChild objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [BlueprintChildEdge!]!
    "List of BlueprintChild objects."
    nodes: [BlueprintChild!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the BlueprintChild object. This wrapper is used for pagination."
type BlueprintChildEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual BlueprintChild object wrapped by this edge."
    node: BlueprintChild!
}

"Paginated list of Blueprint objects."
type BlueprintConnection {
    "Total number of Blueprint objects matching the request arguments."
    count: Int!
    "List of Blueprint objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [BlueprintEdge!]!
    "List of Blueprint objects."
    nodes: [Blueprint!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Blueprint object. This wrapper is used for pagination."
type BlueprintEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Blueprint object wrapped by this edge."
    node: Blueprint!
}

"Failover metadata."
type BlueprintFailover {
    "Type of the failover."
    failoverType: FailoverTypeEnum!
    "Status of the failover (succeeded or failed)."
    status: FailoverStatusEnum!
}

"Paginated list of BlueprintNew objects."
type BlueprintNewConnection {
    "Total number of BlueprintNew objects matching the request arguments."
    count: Int!
    "List of BlueprintNew objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [BlueprintNewEdge!]!
    "List of BlueprintNew objects."
    nodes: [BlueprintNew!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the BlueprintNew object. This wrapper is used for pagination."
type BlueprintNewEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual BlueprintNew object wrapped by this edge."
    node: BlueprintNew!
}

"Blueprint recovery count."
type BlueprintRecoveryCount {
    "Count of production failover."
    failoverRecoveryCount: Long!
    "Count of isolated recovery."
    isolatedRecoveryCount: Long!
    "Count of local recovery."
    localRecoveryCount: Long!
    "Count of test failover."
    testFailoverRecoveryCount: Long!
}

type BlueprintRecoveryRange {
    beginTime: DateTime
    endTime: DateTime
}

type BlueprintRecoveryRanges {
    missedRecoverableRanges: [BlueprintRecoveryRange!]!
    recoverableRanges: [BlueprintRecoveryRange!]!
}

"The recovery specification of a Blueprint."
type BlueprintRecoverySpec {
    childRecoverySpecs: [ChildRecoverySpecMap!]!
    failoverId: UUID
    isPending: Boolean!
    planType: PlanName!
    recoverySpecId: UUID!
    resourceSpecType: ResourceSpecType
    userData: String
    version: Long!
}

"the recovery specs of a Blueprint."
type BlueprintRecoverySpecs {
    errors: [ValidateFailureReason!]!
    specs: [BlueprintRecoverySpec!]!
}

"Supported in v5.0+"
type BootstrappableNodeInfo {
    """

    Supported in v7.0+
    Capacity of the node in bytes.
    """
    capacityInBytes: Long
    """

    Supported in v6.0+
    Chassis ID of Rubrik node.
    """
    chassisId: String
    """

    Required. Supported in v5.0+
    Hostname of a Rubrik node.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    IPv6 address of a Rubrik node.
    """
    ipv6: String!
    """

    Supported in v6.0+
    All-Copper 10GBaseT Rubrik node.
    """
    isAllCopper: Boolean
    """

    Supported in v6.0+
    Link status of port eth0 in Rubrik node.
    """
    isBond0Eth0Enabled: Boolean
    """

    Supported in v6.0+
    Link status of port eth1 in Rubrik node.
    """
    isBond0Eth1Enabled: Boolean
    """

    Supported in v7.0+
    indicates if Rubrik node is reachable through bond0.
    """
    isBond0Reachable: Boolean
    """

    Supported in v6.0+
    Link status of port eth2 in Rubrik node.
    """
    isBond1Eth2Enabled: Boolean
    """

    Supported in v6.0+
    Link status of port eth3 in Rubrik node.
    """
    isBond1Eth3Enabled: Boolean
    """

    Supported in v6.0+
    Position of Rubrik node.
    """
    nodePosition: String
    """

    Supported in v6.0+
    Deployment model of Rubrik node.
    """
    platformName: String
    """

    Supported in v5.3+
    Software version of Rubrik CDM.
    """
    version: String
}

"Supported in v5.0+"
type BootstrappableNodeInfoListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [BootstrappableNodeInfo!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.2+"
type BrowseMssqlDatabaseSnapshotReply {
    """

    Required. Supported in v5.2+
    A list of snapshots and logs.
    """
    items: [MssqlBackup!]!
}

"Supported in v5.0+"
type BrowseResponse {
    """

    Supported in v5.0+
    The type of file, either a regular file or a directory.
    """
    fileMode: String
    """

    Supported in v5.0+
    The name of the file.
    """
    filename: String
    "Supported in v5.0+"
    lastModified: String
    """

    Supported in v5.0+
    The complete path of the file.
    """
    path: String
    "Supported in v5.0+"
    size: Long
    """

    Supported in v5.0+
    Description about the status.
    """
    statusMessage: String
    """

    Supported in v5.3+
    Reason the file is unreadable. Undefined if the file is readable.
    """
    unreadable: Int
}

"Supported in v5.0+"
type BrowseResponseListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [BrowseResponse!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type BulkCreateFilesetTemplatesReply {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [FilesetTemplateDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type BulkCreateFilesetsReply {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [FilesetDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v7.0+"
type BulkCreateNasFilesetsReply {
    "Required. Supported in v7.0+"
    filesetDetails: [FilesetDetail!]!
}

"Response of the mutation to refresh multiple hosts."
type BulkRefreshHostsReply {
    "Details of the refreshed hosts."
    data: [RefreshHostReply!]!
}

"Supported in v5.0+"
type BulkRegisterHostReply {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [HostDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Reply Object for BulkUpdateFilesetTemplate."
type BulkUpdateFilesetTemplateReply {
    output: BulkCreateFilesetTemplatesReply
}

"Reply Object for BulkUpdateHost."
type BulkUpdateHostReply {
    output: InternalBulkUpdateHostResponse
}

"Response of the operation that updates MSSQL databases in bulk."
type BulkUpdateMssqlDbsReply {
    "Details of the updated MSSQL databases."
    items: [MssqlDbDetail!]!
}

"Supported in v5.2+"
type BulkUpdateOracleDatabasesReply {
    """

    Required. Supported in v5.2+
    An array that contains all Oracle Database update details.
    """
    responses: [OracleDbDetail!]!
}

"Supported in v5.2+"
type BulkUpdateOracleHostsReply {
    """

    Required. Supported in v5.2+
    An array that contains all Oracle Host update details.
    """
    responses: [OracleHostDetail!]!
}

"Supported in v5.2+"
type BulkUpdateOracleRacsReply {
    """

    Required. Supported in v5.2+
    An array that contains all Oracle RAC update details.
    """
    responses: [OracleRacDetail!]!
}

type BulkUpdateSnapMirrorCloudReply {
    items: [UpdateSnapMirrorCloudReply!]!
}

"Cancel download job response."
type CancelJobReply {
    "Cancel message."
    message: String!
    "Status of cancel request."
    status: Boolean!
}

"Represents a single capacity contribution."
type CapacityContribution {
    "The product that is making this contribution."
    product: Product!
    "The number of bytes this product has contributed."
    registeredCapacityBytes: Float!
}

"Cascading archival specification info."
type CascadingArchivalSpec {
    "Archival location for snapshot on target."
    archivalLocation: Target
    "Threshold after which the snapshot will be archived."
    archivalThreshold: Duration
    "Archival tiering specification."
    archivalTieringSpec: ArchivalTieringSpec
    "Frequencies that are associated with this cascaded archival location."
    frequency: [RetentionUnit!]!
}

"Backup Params configured on the management object."
type CassandraBackupParams {
    "Name of the store used to store backups."
    storeName: String!
    "Monitoring frequency used."
    watcherFrequency: Long!
}

"Cassandra Column Family information."
type CassandraColumnFamily implements CassandraKeyspaceDescendantType & CassandraKeyspacePhysicalChildType & CassandraSourceDescendantType & HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Number of backups for the column family."
    backupCount: Int
    "Backup Params of the source."
    backupParams: CassandraBackupParams
    "Mosaic cluster information."
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The source object ID."
    id: UUID!
    "Is the source object a relic."
    isRelic: Boolean!
    "Parent keyspace connection."
    keyspace: CassandraKeyspace!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The most recent snapshot of this workload."
    newestSnapshot: MosaicSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: MosaicSnapshot
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Date that effective SLA was assigned / inherited."
    protectionDate: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupBys(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter mosaic snapshot connection."
        filter: MosaicSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group mosaic snapshots by field."
        groupBy: MosaicSnapshotGroupBy!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MosaicSnapshotGroupByTypeConnection
    "The list of snapshots taken for this workload."
    snapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter mosaic snapshot connection."
        filter: MosaicSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort mosaic snapshots by field."
        sortBy: MosaicSnapshotSortBy = DATE,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MosaicSnapshotConnection!
    "Parent source connection."
    source: CassandraSource!
}

"Paginated list of CassandraColumnFamily objects."
type CassandraColumnFamilyConnection {
    "Total number of CassandraColumnFamily objects matching the request arguments."
    count: Int!
    "List of CassandraColumnFamily objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraColumnFamilyEdge!]!
    "List of CassandraColumnFamily objects."
    nodes: [CassandraColumnFamily!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CassandraColumnFamily object. This wrapper is used for pagination."
type CassandraColumnFamilyEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraColumnFamily object wrapped by this edge."
    node: CassandraColumnFamily!
}

"""

Supported in m3.2.0-m4.2.0
Object with cassandra column details.
"""
type CassandraColumnObject {
    """

    Supported in m3.2.0-m4.2.0
    Name of the cassandra column.
    """
    columnName: String
    """

    Supported in m3.2.0-m4.2.0
    Type of the cassandra column.
    """
    columnType: String
}

"Cassandra Keyspace information."
type CassandraKeyspace implements CassandraSourceDescendantType & CassandraSourcePhysicalChildType & HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The backup count."
    backupCount: Int
    "Backup Params of the source."
    backupParams: CassandraBackupParams
    "Mosaic cluster information."
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): CassandraKeyspaceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Is the keyspace a relic."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): CassandraKeyspacePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Parent source connection."
    source: CassandraSource!
    "Watcher status of the keyspace."
    watcherEnabled: Boolean!
}

"Paginated list of CassandraKeyspace objects."
type CassandraKeyspaceConnection {
    "Total number of CassandraKeyspace objects matching the request arguments."
    count: Int!
    "List of CassandraKeyspace objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraKeyspaceEdge!]!
    "List of CassandraKeyspace objects."
    nodes: [CassandraKeyspace!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of CassandraKeyspaceDescendantType objects."
type CassandraKeyspaceDescendantTypeConnection {
    "Total number of CassandraKeyspaceDescendantType objects matching the request arguments."
    count: Int!
    "List of CassandraKeyspaceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraKeyspaceDescendantTypeEdge!]!
    "List of CassandraKeyspaceDescendantType objects."
    nodes: [CassandraKeyspaceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CassandraKeyspaceDescendantType object. This wrapper is used for pagination."
type CassandraKeyspaceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraKeyspaceDescendantType object wrapped by this edge."
    node: CassandraKeyspaceDescendantType!
}

"Wrapper around the CassandraKeyspace object. This wrapper is used for pagination."
type CassandraKeyspaceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraKeyspace object wrapped by this edge."
    node: CassandraKeyspace!
}

"Paginated list of CassandraKeyspacePhysicalChildType objects."
type CassandraKeyspacePhysicalChildTypeConnection {
    "Total number of CassandraKeyspacePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of CassandraKeyspacePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraKeyspacePhysicalChildTypeEdge!]!
    "List of CassandraKeyspacePhysicalChildType objects."
    nodes: [CassandraKeyspacePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CassandraKeyspacePhysicalChildType object. This wrapper is used for pagination."
type CassandraKeyspacePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraKeyspacePhysicalChildType object wrapped by this edge."
    node: CassandraKeyspacePhysicalChildType!
}

"""

Supported in m3.2.0-m4.2.0
m3.2.0-m4.0.1: Object with cassandra column details.
m4.1.0-m4.2.0: Object with cassandra schema details.
"""
type CassandraSchemaObject {
    """

    Supported in m3.2.0-m4.2.0
    List of cassandra column names.
    """
    columns: [CassandraColumnObject!]!
    """

    Supported in m3.2.0-m4.2.0
    List of primary keys of table.
    """
    primaryKeys: [String!]!
}

"Cassandra Source information."
type CassandraSource implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Number of backups for the source."
    backupCount: Int
    "Backup Params of the source."
    backupParams: CassandraBackupParams
    "Mosaic cluster information."
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "Configuration Params of the source."
    configParams: SourceConfigParams
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): CassandraSourceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Is the source object a relic."
    isRelic: Boolean!
    "The last time the source was refreshed."
    lastRefreshTime: DateTime
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Number of source nodes."
    nodeCount: Int
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): CassandraSourcePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Data size of source."
    size: Long
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "IP of the source."
    sourceIp: String!
    "Source connectivity status."
    status: CassandraSourceStatus!
    "Watcher status of the source."
    watcherEnabled: Boolean!
}

"Paginated list of CassandraSource objects."
type CassandraSourceConnection {
    "Total number of CassandraSource objects matching the request arguments."
    count: Int!
    "List of CassandraSource objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraSourceEdge!]!
    "List of CassandraSource objects."
    nodes: [CassandraSource!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of CassandraSourceDescendantType objects."
type CassandraSourceDescendantTypeConnection {
    "Total number of CassandraSourceDescendantType objects matching the request arguments."
    count: Int!
    "List of CassandraSourceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraSourceDescendantTypeEdge!]!
    "List of CassandraSourceDescendantType objects."
    nodes: [CassandraSourceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CassandraSourceDescendantType object. This wrapper is used for pagination."
type CassandraSourceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraSourceDescendantType object wrapped by this edge."
    node: CassandraSourceDescendantType!
}

"Wrapper around the CassandraSource object. This wrapper is used for pagination."
type CassandraSourceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraSource object wrapped by this edge."
    node: CassandraSource!
}

"Paginated list of CassandraSourcePhysicalChildType objects."
type CassandraSourcePhysicalChildTypeConnection {
    "Total number of CassandraSourcePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of CassandraSourcePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CassandraSourcePhysicalChildTypeEdge!]!
    "List of CassandraSourcePhysicalChildType objects."
    nodes: [CassandraSourcePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CassandraSourcePhysicalChildType object. This wrapper is used for pagination."
type CassandraSourcePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CassandraSourcePhysicalChildType object wrapped by this edge."
    node: CassandraSourcePhysicalChildType!
}

"SSL Configuration on mosaic source object."
type CassandraSslOptions {
    "Whether ssl is enabled or not."
    ssl: Boolean!
    "Path to CA certificate."
    sslCaCerts: String!
    "SSL certificate requirements."
    sslCertRequirements: SourceSslCertReqs!
    "Path to SSL Certificate."
    sslCertfile: String!
    "Path to SSL Key."
    sslKeyfile: String!
}

"Async reply for a submitted job."
type CcProvisionJobReply {
    "Job Id of the submitted job."
    jobId: Long!
    "Detail of submitted job including job name and function parameters."
    message: String!
    "Indicates if the operation was a success or not."
    success: Boolean!
}

"Detailed cloud information for a Cloud Cluster."
type CcWithCloudInfo {
    "Native name of the cloud account where the Cloud Cluster exists."
    cloudAccount: String!
    "Rubrik-generated cloud account UUID."
    cloudAccountId: UUID!
    "Cloud Cluster name."
    name: String!
    "Native (AWS/Azure) ID of cloud account."
    nativeCloudAccountId: String!
    "Native name of the cloud account where the Cloud Cluster exists."
    nativeCloudAccountName: String!
    "Native name of the network where the Cloud Cluster exists."
    networkName: String!
    "User-friendly name for the cloud region."
    region: String!
    "ID for the cloud region."
    regionId: String!
    "Elastic Storage configuration."
    storageConfig: ElasticStorageConfig
    "Cloud Cluster UUID."
    uuid: UUID!
    "Cloud provider."
    vendor: CcpVendorType!
}

"Metadata for a single cluster job."
type CcprovisionInfo {
    "Current job status."
    jobStatus: CcpJobStatus!
    "Type of running job."
    jobType: CcpJobType!
    "Cloud cluster configuration."
    marshaledConfig: String!
    "Progress of job in percent."
    progress: Int!
    "Cloud vendor provider."
    vendor: CcpVendorType!
}

"Supported in v5.0+"
type CdmAgentStatus {
    """

    Required. Supported in v5.0+
    The agent connection status.
    """
    agentStatus: String!
    """

    Supported in v5.0+
    The reason the agent disconnected.
    """
    disconnectReason: String
}

"Different types of usages of a certificate on a Rubrik cluster."
type CdmCertificateUsageInfo {
    "The name of the Rubrik cluster where the certificate is used."
    clusterName: String!
    "The Rubrik cluster where the certificate is used."
    clusterUuid: String!
    "The ID of the object for which the certificate is used, if applicable."
    id: String!
    "The type of usage of the certificate on Rubrik CDM."
    type: CdmCertificateUsage!
}

type CdmClusterStatus {
    "Rubrik cluster status message."
    message: String
    "Rubrik cluster upgrade status. The value reflects the status of the Rubrik cluster at the various stages involved in an upgrade, for example, pre-check, download, upgrade scheduling, and rollback of the upgrade."
    status: CdmClusterStatusTypeEnum!
    "Status of the Rubrik cluster upgrade process including information about the tasks that have been completed and tasks that are pending or ongoing."
    statusInfo: CdmClusterStatusInfo
}

type CdmClusterStatusInfo {
    "Number of nodes where rolling upgrade is complete."
    completedNodes: String
    "Node going through rolling upgrade currently."
    currentNode: String
    "Upgrade state of the node going through the rolling upgrade currently."
    currentNodeState: String
    "The upgrade state running at the time of the query."
    currentState: String
    "Progress percentage of the current upgrade state."
    currentStateProgress: String
    "The upgrade task running at the time of the query."
    currentTask: String
    "Status of the download job."
    downloadJobStatus: String
    "Download progress."
    downloadProgress: String
    "Time, in seconds, remaining for the download to complete."
    downloadRemainingTimeEstimateInSeconds: String
    "Download package version."
    downloadVersion: String
    "A list of upgrade states that are completed."
    finishedStates: String
    "Overall upgrade progress percentage."
    overallProgress: String
    "A list of upgrade states that are pending."
    pendingStates: String
    "Total number of nodes in the Rubrik cluster."
    totalNodes: String
}

"CDM group by information."
type CdmGroupByInfo {
    "End time of the grouping."
    end: DateTime
    "Interval the grouping was made with."
    group: String!
    "Start time of the grouping."
    start: DateTime
}

"CDM Snapshot data with group by information applied to it."
type CdmGroupedSnapshot {
    "List of snapshots for a CDM object."
    cdmSnapshots: CdmWorkloadSnapshotConnection!
    "Information on the grouped snapshots."
    groupByInfo: CdmGroupByInfo
}

"Paginated list of CdmGroupedSnapshot objects."
type CdmGroupedSnapshotConnection {
    "Total number of CdmGroupedSnapshot objects matching the request arguments."
    count: Int!
    "List of CdmGroupedSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdmGroupedSnapshotEdge!]!
    "List of CdmGroupedSnapshot objects."
    nodes: [CdmGroupedSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdmGroupedSnapshot object. This wrapper is used for pagination."
type CdmGroupedSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdmGroupedSnapshot object wrapped by this edge."
    node: CdmGroupedSnapshot!
}

"Cdm Guest credential."
type CdmGuestCredential {
    "Details of a cluster."
    cluster: Cluster!
    "Detail of the guest credential."
    detail: CreateGuestCredentialReply!
}

"Paginated list of CdmHierarchyObject objects."
type CdmHierarchyObjectConnection {
    "Total number of CdmHierarchyObject objects matching the request arguments."
    count: Int!
    "List of CdmHierarchyObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdmHierarchyObjectEdge!]!
    "List of CdmHierarchyObject objects."
    nodes: [CdmHierarchyObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdmHierarchyObject object. This wrapper is used for pagination."
type CdmHierarchyObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdmHierarchyObject object wrapped by this edge."
    node: CdmHierarchyObject!
}

type CdmHostVolume {
    cdmId: String!
    clusterUuid: String!
    fileSystemType: String
    mountPoints: [String!]!
    size: Long
    "ID of the volume group to which this volume belongs."
    volumeGroupId: String
    "Host volume's ID."
    volumeId: String!
}

"Supported in v6.0+"
type CdmIndicatorOfCompromise {
    iocType: IndicatorOfCompromiseType!
    """

    Required. Supported in v6.0+
    Type specific payload.
    """
    iocValue: String!
}

type CdmInventorySubHierarchyRoot {
    "List of children."
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): CdmHierarchyObjectConnection!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): CdmHierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)."
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
}

"Supported in v6.0+"
type CdmMalwareScanInSnapshotResult {
    """

    Supported in v6.0+
    ID of the most recent job run against this snapshot, if any.
    """
    lastJobId: String
    """

    Required. Supported in v6.0+
    List of malware matches found in this snapshot.
    """
    matches: [MalwareMatch!]!
    """

    Supported in v6.0+
    Stats collected during the scan.  Note that the stats capture what was actually scanned.  It's possible a scan for a snapshot terminates early;  it's also possible a scan is retried after an error. This means the counts could be less than or more than the actual count of entites (files, bytes, etc.) in the snapshot.
    """
    scanStats: MalwareScanStats
    """

    Required. Supported in v6.0+
    Date of the snapshot.
    """
    snapshotDate: DateTime
    """

    Required. Supported in v6.0+
    ID of the snapshot.
    """
    snapshotId: String!
    """

    Supported in v6.0+
    Status of scanning this snapshot.
    """
    status: MalwareScanInSnapshotStatus!
}

"Supported in v6.0+"
type CdmMalwareScanResult {
    "Required. Supported in v6.0+"
    objectId: String!
    "Required. Supported in v6.0+"
    snapshotResults: [CdmMalwareScanInSnapshotResult!]!
}

"Specific info for AWS target created on Cdm."
type CdmManagedAwsTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Id of the AWS location."
    id: String!
    "Immutability info of Aws location."
    immutabilitySettings: AwsImmutabilitySettingsType
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of the AWS location."
    region: AwsRegion!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Storage class of the AWS target."
    storageClass: AwsStorageClass!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific info for Azure target created on Cdm."
type CdmManagedAzureTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "ID of the Azure location."
    id: String!
    "Immutability info of Azure location."
    immutabilitySettings: AzureImmutabilitySettingsType
    "Instance type of the Azure location."
    instanceType: InstanceTypeEnum!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Specifies whether Azure archival tiering is supported or not."
    isAzureTieringSupported: Boolean
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific info for Gcp target created on Cdm."
type CdmManagedGcpTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Id of the GCP location."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of the GCP location."
    region: GcpRegion!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific info for Glacier target created on Cdm."
type CdmManagedGlacierTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Id of the Glacier location."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of the Glacier location."
    region: AwsRegion!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific info for Nfs target created on Cdm."
type CdmManagedNfsTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Host of the Nfs location."
    host: String!
    "Id of the Nfs location."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific info for S3Compatible created on Cdm."
type CdmManagedS3CompatibleTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Host of the S3Compatible location."
    endpoint: String!
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Id of the S3Compatible location."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"SSL Configuration for a MongoDB source object."
type CdmMongoSslParams {
    "Specifies whether SSL is enabled or not."
    isSslEnabled: Boolean!
    "Path to the CA certificate."
    sslCaCerts: String!
    "SSL certificate requirements."
    sslCertRequirements: SourceSslCertReqs!
    "Path to the SSL Certificate."
    sslCertfile: String!
    "Path to the SSL Key."
    sslKeyfile: String!
}

type CdmMssqlDbReplica {
    availabilityInfo: CdmMssqlDbReplicaAvailabilityInfo
    clusterUuid: String!
    hasPermissions: Boolean!
    instance: MssqlInstance
    instanceRootId: String!
    isArchived: Boolean!
    isStandBy: Boolean!
    recoveryModel: String!
    snapshotNeeded: Boolean!
    state: String!
}

type CdmMssqlDbReplicaAvailabilityInfo {
    availabilityMode: String!
    replicaId: String!
    role: String!
}

"The node details of a Rubrik CDM cluster."
type CdmNodeDetail {
    "Rubrik cluster UUID."
    clusterId: UUID!
    "Data IP address of the Rubrik cluster node."
    dataIpAddress: String!
    "IPMI IP address of the Rubrik cluster node. Not available for virtual or cloud cluster nodes."
    ipmiIpAddress: String
    "Rubrik cluster node ID."
    nodeId: String!
}

"Representation of a single node in an Oracle RAC."
type CdmOracleRacNode {
    "FID of the physical host object of the RAC node."
    hostFid: String
    "Host name of the RAC node."
    nodeName: String!
    "Connectivity status of the RAC node."
    status: HostConnectivityStatusEnum!
}

"The priority order used for the selection of a RAC node by Oracle backup and recovery."
type CdmOracleRacNodeOrder {
    "Host name of the RAC node."
    nodeName: String!
    "Priority order of the RAC node."
    order: Int!
}

"Location for Rubrik CDM workload."
type CdmSnappableLocation {
    "Workload location."
    location: String!
}

type CdmSnapshot implements GenericSnapshot {
    archivalLocations: [DataLocation!]
    cdmId: String!
    cdmVersion: String!
    "Children snapshot ID list."
    childSnapshots: [CdmSnapshot!]!
    cloudNativeLocations: [DataLocation!]
    cluster: Cluster!
    consistencyLevel: ConsistencyLevelEnum
    date: DateTime!
    "Db2 specific metadata for the snapshot."
    db2AppMetadata: Db2AppMetadata
    expirationDate: DateTime
    expiryHint: Boolean!
    "Number of files in the snapshot."
    fileCount: Long!
    hasDelta: Boolean!
    "Flag if the snapshot has image(s) converted."
    hasImageConverted: Boolean!
    id: UUID!
    indexingAttempts: Long!
    "Flag if the snapshot is an anomaly."
    isAnomaly: Boolean!
    isCorrupted: Boolean!
    isDownloadedSnapshot: Boolean
    "Specifies whether or not the snapshot is expired."
    isExpired: Boolean!
    isIndexed: Boolean!
    isOnDemandSnapshot: Boolean!
    "True if the snapshot is quarantined."
    isQuarantined: Boolean!
    "Specifies whether the snapshot follows retention lock constraint."
    isRetentionLocked: Boolean
    "Specifies whether the snapshot is an incremental SAP HANA snapshot."
    isSapHanaIncrementalSnapshot: Boolean
    isUnindexable: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "Contains info regarding legal hold on snapshot, null otherwise."
    legalHoldInfo: LegalHoldInfo
    localLocations: [DataLocation!]
    locations: [DataLocation!]
    "Managed Volume specific metadata for the snapshot. Null if snapshot is not of a managed volume."
    managedVolumeAppMetadata: ManagedVolumeAppMetadata
    "Non-null when a user has assigned a SLA to this snapshot, and the SLA assignment is in the process of being synced over to CDM."
    pendingSla: SlaDomain
    "Mapping from snapshot to delete pending action status."
    pendingSnapshotDeletion: PendingSnapshotDeletion
    replicationLocations: [DataLocation!]
    "Resource spec for a snapshot."
    resourceSpec: String
    "SAP HANA specific metadata for the snapshot."
    sapHanaAppMetadata: SapHanaAppMetadata
    "SLA domain of the snapshot."
    slaDomain: SlaDomain
    "The workload ID of the snapshot."
    snappableId: String!
    snappableNew: CdmHierarchySnappableNew!
    snapshotRetentionInfo: CdmSnapshotRetentionInfo
    "VMware specific metadata for the snapshot."
    vmwareAppMetadata: VmwareAppMetadata
}

"Paginated list of CdmSnapshot objects."
type CdmSnapshotConnection {
    "Total number of CdmSnapshot objects matching the request arguments."
    count: Int!
    "List of CdmSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdmSnapshotEdge!]!
    "List of CdmSnapshot objects."
    nodes: [CdmSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdmSnapshot object. This wrapper is used for pagination."
type CdmSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdmSnapshot object wrapped by this edge."
    node: CdmSnapshot!
}

"Snapshot data with groupby information applied to it."
type CdmSnapshotGroupBy {
    "Provides further groupings for the data."
    cdmSnapshotGroupBy(
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!
    ): [CdmSnapshotGroupBy!]!
    "The groupby information applied to the snapshot data."
    groupByInfo: CdmSnapshotGroupByInfo!
    "Paginated snapshot data."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection!
}

"Paginated list of CdmSnapshotGroupBy objects."
type CdmSnapshotGroupByConnection {
    "Total number of CdmSnapshotGroupBy objects matching the request arguments."
    count: Int!
    "List of CdmSnapshotGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdmSnapshotGroupByEdge!]!
    "List of CdmSnapshotGroupBy objects."
    nodes: [CdmSnapshotGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdmSnapshotGroupBy object. This wrapper is used for pagination."
type CdmSnapshotGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdmSnapshotGroupBy object wrapped by this edge."
    node: CdmSnapshotGroupBy!
}

"CDM Snapshot data with group by information applied to it."
type CdmSnapshotGroupBySummary {
    "List of snapshots for a CDM object."
    cdmSnapshots: CdmSnapshotConnection!
    "Information on the grouped snapshots."
    count: Int!
    "Information on the grouped snapshots."
    groupByInfo: TimeRangeWithUnit!
}

"Paginated list of CdmSnapshotGroupBySummary objects."
type CdmSnapshotGroupBySummaryConnection {
    "Total number of CdmSnapshotGroupBySummary objects matching the request arguments."
    count: Int!
    "List of CdmSnapshotGroupBySummary objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdmSnapshotGroupBySummaryEdge!]!
    "List of CdmSnapshotGroupBySummary objects."
    nodes: [CdmSnapshotGroupBySummary!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdmSnapshotGroupBySummary object. This wrapper is used for pagination."
type CdmSnapshotGroupBySummaryEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdmSnapshotGroupBySummary object wrapped by this edge."
    node: CdmSnapshotGroupBySummary!
}

"CDM snapshot location retention information."
type CdmSnapshotLocationRetentionInfo {
    """

    Supported in v5.2+
    Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
    """
    expirationTime: DateTime
    """

    Supported in v5.2+
    A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
    """
    isExpirationDateCalculated: Boolean!
    """

    Supported in v5.2+
    Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
    """
    isExpirationInformationUnavailable: Boolean!
    """

    Required. Supported in v5.2+
    Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
    """
    isSnapshotPresent: Boolean!
    "Location ID for snapshot retention."
    locationId: String!
    """

    Required. Supported in v5.2+
    Name of the location.
    """
    name: String!
    """

    Supported in v5.2+
    The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
    """
    snapshotFrequency: SnapshotFrequency!
}

"Snapshot retention information."
type CdmSnapshotRetentionInfo {
    "List of snapshot retention information objects for the archival locations."
    archivalInfos: [CdmSnapshotLocationRetentionInfo!]
    "Specifies whether custom retention is applied."
    isCustomRetentionApplied: Boolean!
    "Snapshot retention information on the local cluster."
    localInfo: CdmSnapshotLocationRetentionInfo
    "List of snapshot retention information objects for the replicated locations."
    replicationInfos: [CdmSnapshotLocationRetentionInfo!]
}

"Target-specific information created and synchronized from a Rubrik CDM cluster."
type CdmTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"CDM upgrade availability."
type CdmUpgradeAvailabilityReply {
    "Upgrade available flag."
    isAvailable: Boolean!
    "Availability request status."
    status: StatusResponse
}

type CdmUpgradeInfo {
    "You are authorized to perform operations on the Rubrik cluster."
    authorizedOperations: AuthorizedOperations!
    "Cluster job status."
    clusterJobStatus: ClusterJobStatusTypeEnum
    "Status of the Rubrik cluster."
    clusterStatus: CdmClusterStatus
    "The cluster UUID."
    clusterUuid: UUID!
    "Current running state progress percentage."
    currentStateProgress: Float
    "Downloaded version of tarball."
    downloadedVersion: String
    "Upgrade type in cdm cluster."
    fastUpgradePreferred: Boolean
    "Finished states of upgrade."
    finishedStates: String
    "Time taken by the last upgrade."
    lastUpgradeDuration: UpgradeDurationReply
    "Overall upgrade progress."
    overallProgress: Float
    "Pending states of upgrade."
    pendingStates: String
    "The version of the cluster before the upgrade."
    previousVersion: String
    "Scheduled-Upgrade action."
    scheduleUpgradeAction: String
    "Scheduled-Upgrade timestamp."
    scheduleUpgradeAt: DateTime
    "Scheduled-Upgrade mode."
    scheduleUpgradeMode: String
    "Upgrade state machine status."
    stateMachineStatus: String
    "The time at which the state machine was last updated.."
    stateMachineStatusAt: DateTime
    "The time at which the upgrade ended."
    upgradeEndAt: DateTime
    "The upgrade event series ID."
    upgradeEventSeriesId: String
    "Recommended upgrade version of the Rubrik cluster."
    upgradeRecommendationInfo: UpgradeRecommendationInfo
    "The time at which the upgrade started."
    upgradeStartAt: DateTime
    "Version of the Rubrik cluster."
    version: String!
    "Version status of the Rubrik cluster."
    versionStatus: VersionStatus
}

"CDM upgrade recommendation."
type CdmUpgradeRecommendationReply {
    "Upgrade recommended flag."
    isRecommended: Boolean!
    "Status of recommendation request."
    status: StatusResponse
}

"CDM release detail."
type CdmUpgradeReleaseDetail {
    "The customer adoption status of the Rubrik CDM release."
    adoptionStatus: AdoptionStatus!
    "Description of CDM release."
    description: String!
    "Release date of GA version."
    gaReleaseDate: String!
    "Is this a recommended version."
    isRecommended: Boolean!
    "Is cluster upgradeable to version."
    isUpgradable: Boolean!
    "Md5Sum of the package."
    md5Sum: String!
    "Name of CDM release."
    name: String!
    "CDM package release date."
    releaseDate: String!
    "Release notes link."
    releaseNotesLink: String!
    "Size of CDM package."
    size: Long!
    "Download link to tarball."
    tarDownloadLink: String!
}

"CDM release details."
type CdmUpgradeReleaseDetailsFromSupportPortalReply {
    "Link to CDM upgrade matrix."
    compatibilityMatrixLink: String!
    "List of CDM release detail object."
    releaseDetails: [CdmUpgradeReleaseDetail!]!
    "Support portal link."
    supportSoftwareLink: String!
}

"Supported in v5.0+"
type CdmWorkload {
    """

    Supported in v5.0
    ID of the effective SLA domain
    """
    effectiveSlaDomainId: String
    """

    Supported in v5.0
    name of the effective SLA domain
    """
    effectiveSlaDomainName: String
    """

    Supported in v5.0
    Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Supported in v5.0
    ID of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.0
    Name of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.2+
    The ID of the SLA Domain whose retention policy is in use.
    """
    retentionSlaDomainId: String
    slaAssignable: SlaAssignable
    slaAssignment: SnappableSlaAssignment!
}

"Snapshot of a Rubrik CDM workload."
type CdmWorkloadSnapshot {
    "Rubrik CDM ID of the snapshot."
    cdmId: String!
    "Version of the Rubrik cluster to which the snapshot belongs."
    cdmVersion: String!
    "ID of the Rubrik cluster to which the snapshot belongs."
    clusterUuid: String!
    "The date the snapshot was taken. This value is formatted as YYYY/MM/DD HH:mm:ss."
    date: String!
    "Date the snapshot will expire."
    expirationDate: DateTime
    "Specifies whether the expiration hint is enabled."
    expiryHint: Boolean!
    "ID of the SLA Domain."
    id: String!
    "Number of attempts for indexing the snapshot."
    indexingAttempts: Long!
    "Specifies whether the snapshot is corrupted or not."
    isCorrupted: Boolean!
    "Specifies whether the snapshot was downloaded."
    isDownloadedSnapshot: Boolean!
    "Specifies whether the snapshot is expired or not."
    isExpired: Boolean!
    "Specifies whether the snapshot is indexed or not."
    isIndexed: Boolean!
    "Specifies whether the snapshot is an on-demand snapshot."
    isOnDemandSnapshot: Boolean!
    "Specifies whether the snapshot can be unindexed."
    isUnindexable: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "The information about how long this snapshot will be retained."
    retentionInfo: String!
    "SLA Domain of the snapshot."
    slaDomain: SlaConfig
    "Sub objects for the snapshot."
    subObjs: [SnapshotSubObject!]!
    "ID of the workload to which the snapshot belongs."
    workloadId: String!
    "Type of the workload to which the snapshot belongs."
    workloadType: String!
}

"Paginated list of CdmWorkloadSnapshot objects."
type CdmWorkloadSnapshotConnection {
    "Total number of CdmWorkloadSnapshot objects matching the request arguments."
    count: Int!
    "List of CdmWorkloadSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdmWorkloadSnapshotEdge!]!
    "List of CdmWorkloadSnapshot objects."
    nodes: [CdmWorkloadSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdmWorkloadSnapshot object. This wrapper is used for pagination."
type CdmWorkloadSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdmWorkloadSnapshot object wrapped by this edge."
    node: CdmWorkloadSnapshot!
}

"The details about a CDP virtual machine."
type CdpVmInfo {
    "Local status."
    cdpLocalStatus: CdpLocalStatus
    "Replication status."
    cdpReplicationStatus: CdpReplicationStatus
    "IO Filter installation status."
    ioFilterStatus: IoFilterStatus
    "Latest snapshot time."
    latestSnapshotTime: DateTime
    "Replication cluster name."
    replicationTarget: String!
    "SLA Domain ID."
    slaDomainName: String!
    "Source cluster name."
    sourceCluster: String!
    "ID."
    vmId: String!
    "VCenter address."
    vmLocation: String!
    "Name."
    vmName: String!
}

"Paginated list of CdpVmInfo objects."
type CdpVmInfoConnection {
    "Total number of CdpVmInfo objects matching the request arguments."
    count: Int!
    "List of CdpVmInfo objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CdpVmInfoEdge!]!
    "List of CdpVmInfo objects."
    nodes: [CdpVmInfo!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CdpVmInfo object. This wrapper is used for pagination."
type CdpVmInfoEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CdpVmInfo object wrapped by this edge."
    node: CdpVmInfo!
}

type CellData {
    displayableValue: DisplayableValue
    metadata: [Metadata!]!
}

"Certificate information."
type Certificate {
    certificate: String!
    certificateId: Long!
    description: String!
    expiringAt: DateTime
    hasKey: Boolean!
    name: String!
    usedBy: [String!]!
}

"Information about the Rubrik cluster on which the certificate has been uploaded."
type CertificateClusterInfo {
    "The Rubrik CDM ID of the certificate."
    cdmCertUuid: UUID!
    "The UUID of the Rubrik cluster."
    clusterUuid: UUID!
    "Specifies whether the Rubrik cluster trusts any certificate signed by the certificate's issuer."
    isTrusted: Boolean!
    "The name of the Rubrik cluster."
    name: String!
}

"Paginated list of Certificate objects."
type CertificateConnection {
    "Total number of Certificate objects matching the request arguments."
    count: Int!
    "List of Certificate objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CertificateEdge!]!
    "List of Certificate objects."
    nodes: [Certificate!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Certificate object. This wrapper is used for pagination."
type CertificateEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Certificate object wrapped by this edge."
    node: Certificate!
}

"Certificate Information with ID and name."
type CertificateInfo {
    "ID of the certificate."
    certificateId: Long!
    "Name of the certificate."
    name: String
}

"Supported in v5.1+"
type CertificateSummaryListResponse {
    """

    Supported in v5.1+
    List of matching objects.
    """
    data: [AddClusterCertificateReply!]!
    """

    Supported in v5.1+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.1+
    Total list responses.
    """
    total: Long
}

"Reply Object for ChangeVfdOnHost."
type ChangeVfdOnHostReply {
    output: InternalChangeVfdOnHostResponse
}

type ChartConfig {
    aggregations: [String!]!
    chartType: ChartType!
    chartViewId: String!
    defaultChart: Boolean!
    groupBys: [String!]!
    name: String!
}

"The result data of the chart."
type ChartDataResult {
    "The data of the chart."
    chartData: [ChartPrimaryGroupBy!]!
    "Chart type of the chart."
    chartType: ChartType!
}

"The primary group by data of the chart."
type ChartPrimaryGroupBy {
    "The primary group by's metaData."
    metadata: [Metadata!]!
    "The primary group by's name."
    name: DisplayableValue
    "The secondary groupBy data."
    secondaryGroupBy: [ChartSecondaryGroupBy!]!
    "The primary of the secondary groupBy."
    value: DisplayableValue
}

"The secondary group by data of the chart."
type ChartSecondaryGroupBy {
    "The secondary group by's metaData."
    metadata: [Metadata!]!
    "The secondary group by's name."
    name: DisplayableValue
    "The value of the secondary groupBy."
    value: DisplayableValue
}

"The chart's ID and its name."
type ChartViewWithName {
    "The name of the chart."
    chartName: String!
    "Chart View Type ID of the chart."
    chartViewType: ChartViewType!
}

"Archived snapshot locking related details for a workload."
type CheckArchivedSnapshotsLockedReply {
    "Snapshot IDs are not valid for checking if they are locked. Snapshots which do not have unexpired archival copy are considered invalid."
    invalidSnapshotIds: [String!]!
    "Snapshot IDs for which the archived copy is locked."
    lockedSnapshotIds: [String!]!
    "Snapshot IDs for which the archived copy is not locked."
    unlockedSnapshotIds: [String!]!
}

type CheckGuestOsReply {
    success: Boolean!
    supportedOs: [GuestOS!]!
    validationResult: [CheckGuestOsResult!]!
}

type CheckGuestOsResult {
    errorMessage: String!
    "vsphere vm instance"
    instance: VsphereVm!
    instanceId: String!
    instanceOs: GuestOS!
    instanceType: String!
}

type ChildInfo {
    vSphereVmInfo: VsphereBlueprintChildSnapshotInfo!
}

type ChildRecoverySpecMap {
    "Recovery point of the snappable."
    recoveryPoint: Long
    "the recovery spec"
    recoverySpec: RecoverySpec!
    "the fid of the recovery spec"
    recoverySpecFid: String!
    "Sla for post failover assignment."
    sla: SlaDomain
    "sla to be assigned post failover"
    slaId: String
    "the child snappable Fid"
    snappableFid: String!
    "the child snapshot Fid"
    snapshotId: String
}

type ChildVmRecoveryInfo {
    missedRecoverableRanges: [VmwareRecoverableRange!]!
    recoverableRanges: [VmwareRecoverableRange!]!
    recoveryPoints: VmwareRecoveryPoints!
    recoveryState: VmwareRecoveryState!
}

"Account-level settings for classification banners."
type ClassificationBannerSettings {
    "Color of banner on UI for accounts with classified data."
    bannerColor: BannerColor!
    "Text to be displayed on banner on UI for accounts with classified data."
    bannerText: String!
    "Determines if user has classification banners enabled."
    isBannerEnabled: Boolean!
}

"Account-level settings for classification login."
type ClassificationLoginSettings {
    "Determines if user has enabled classification login."
    isLoginEnabled: Boolean!
    "Text to be displayed on login modal for accounts with classified data."
    loginText: String!
}

type ClassificationPolicyDetail {
    analyzers: [Analyzer!]!
    colorEnum: ClassificationPolicyColor!
    createdTime: Long!
    creator: User
    deletable: Boolean!
    description: String!
    "Connection on hierarchy objects."
    hierarchyObjectConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HierarchyObjectConnection!
    hierarchyObjectIds: [String!]!
    hierarchyObjects: [HierarchyObject]!
    id: String!
    lastUpdatedTime: Long!
    mode: ClassificationPolicyMode!
    name: String!
    numAnalyzers: Int!
    objectStatuses: [ObjectStatus!]!
    totalObjects: Int!
    whitelists: [ClassificationPolicyWhitelistDetailedEntry!]!
}

"Paginated list of ClassificationPolicyDetail objects."
type ClassificationPolicyDetailConnection {
    "Total number of ClassificationPolicyDetail objects matching the request arguments."
    count: Int!
    "List of ClassificationPolicyDetail objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClassificationPolicyDetailEdge!]!
    "List of ClassificationPolicyDetail objects."
    nodes: [ClassificationPolicyDetail!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ClassificationPolicyDetail object. This wrapper is used for pagination."
type ClassificationPolicyDetailEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ClassificationPolicyDetail object wrapped by this edge."
    node: ClassificationPolicyDetail!
}

type ClassificationPolicySummary {
    colorEnum: ClassificationPolicyColor!
    id: String!
    name: String!
}

type ClassificationPolicyWhitelistDetailedEntry {
    nativePath: String!
    snappable: HierarchyObject!
    stdPath: String!
    updateTs: Long!
    updateUsername: String!
}

"List of objects where clearing backup credentials succeeded and failed."
type ClearCloudNativeSqlServerBackupCredentialsReply {
    "Object IDs for which credentials failed to be cleared."
    failedObjectIds: [UUID!]!
    "Object IDs for which credentials were cleared successfully."
    successObjectIds: [UUID!]!
}

"Indicates the ID and creation time of a snapshot."
type ClosestSnapshotDetail {
    "The snapshot creation time."
    date: DateTime!
    "The snapshot ID."
    id: String!
    "Whether the snapshot is anomalous or not."
    isAnomaly: Boolean!
    "Indicates whether the snapshot is quarantined or not."
    isQuarantined: Boolean!
}

"The result of a search for an unexpired snapshot closest to a point in time for a specific workload."
type ClosestSnapshotSearchResult {
    "An error which occurred during the search."
    error: SnapshotSearchError
    "The workload's ID."
    snappableId: String!
    "The snapshot closest to the point in time."
    snapshot: ClosestSnapshotDetail
}

type CloudAccountAddressBlockV4 {
    cidrBlock: String!
}

"Cloud Account ID along with Features and permissions serialized in JSON format."
type CloudAccountFeaturePermission {
    "ID of the cloud account for which feature permissions are provided."
    cloudAccountId: String!
    "List of features along with the associated permissions."
    featurePermissions: [FeaturePermission!]!
}

type CloudAccountSub {
    description: String!
    name: String!
    ownerId: String!
    securityGroupId: String!
    vpcId: String!
}

type CloudAccountSubnet {
    availabilityZone: String!
    cidrBlock: CloudAccountAddressBlockV4
    name: String!
    subnetId: String!
    vpcId: String!
}

type CloudAccountVpc {
    cidrBlock: CloudAccountAddressBlockV4
    id: String!
    name: String!
    vpcId: String!
}

"A NAS Cloud Direct site."
type CloudDirectSite {
    "The management endpoint URL for the site."
    endpoint: String!
    "The internal identifier for the site."
    id: String!
    "The display name for the site."
    name: String!
}

"Supported in v5.0+"
type CloudInstantiationSpec {
    """

    Required. Supported in v5.0+
    Specifies the number of seconds to retain an image file that is generated for a snappable. Setting this to -1 disables cloud instantiation for the snappable.
    """
    imageRetentionInSeconds: Long!
}

"Cloud-native account details."
type CloudNativeAccountIdWithName {
    "Cloud-native account ID."
    id: String!
    "Cloud-native account name."
    name: String!
}

"Contains the details about Rubrik Backup Agent (RBA) connectivity jobs."
type CloudNativeCheckRbaConnectivityReply {
    "List of VMs for which the job to check Rubrik backup service connectivity could not be launched."
    failures: [Failure!]!
    "List of VMs for which the job to check Rubrik backup service connectivity could be launched."
    successes: [Success!]!
}

"Details of the setup for performing backups of a database."
type CloudNativeDatabaseBackupSetupSpecs {
    "Specifies whether backup setup is successful for the database or not."
    isSetupSuccessful: Boolean!
    "The object from where the setup specification is inherited."
    setupSourceObject: PathNode!
}

"Contains file recovery feasibility status for a cloud-native snapshot."
type CloudNativeFileRecoveryFeasibility {
    "File recovery feasibility status."
    fileRecoveryFeasibility: FileRecoveryFeasibility!
    "Cloud-native snapshot ID."
    snapshotId: String!
}

"Contains metadata fields of a file specific to the version of the file in a snapshot."
type CloudNativeFileVersion {
    "File mode (directory, file, symlink, or unknown)."
    fileMode: FileModeEnum!
    "Time when the file was last modified."
    lastModified: DateTime!
    "Size of the file, in bytes."
    sizeInBytes: Long!
    "Snapshot corresponding to the file version."
    snapshot: CloudNativeSnapshotInfo!
}

"A single label."
type CloudNativeLabel {
    "Label key."
    labelKey: String!
    "Label value."
    labelValue: String!
    "Specifies if all label values should be matched."
    matchAllValues: Boolean!
}

"Region where cloud native object exists."
type CloudNativeRegion {
    "Region where AWS native object exists. This field will be null if the object is not an AWS object."
    awsRegion: AwsNativeRegion
    "Region where Azure native object exists. This field will be null if the object is not an Azure object."
    azureRegion: AzureNativeRegion
    "Region where GCP native object exists. This field will be null if the object is not a GCP object."
    gcpRegion: GcpNativeRegion
}

"Recovery related details for a particular snapshot type."
type CloudNativeSnapshotDetailsForRecovery {
    "Rubrik ID of the cloud account where the particular type of snapshot exists. This field is set only if file recovery is feasible. "
    cloudNativeAccountId: CloudNativeAccountIdWithName
    "Name of the cloud provider. Can be AWS/Azure/GCP. This field is set only if file recovery is feasible."
    cloudType: CloudProviderType!
    "Field specifying whether file recovery is feasible or not, and if infeasible, the reason for the same. Can have values IS_UNKNOWN, IS_FEASIBLE, IS_SNAPSHOT_EXPIRED, or IS_EXOCOMPUTE_NOT_CONFIGURED."
    fileRecoveryFeasibility: FileRecoveryFeasibility!
    "Region where the particular snapshot exists. This field is set only if file recovery is feasible."
    snapshotRegion: CloudNativeRegion!
    "Type of the snapshot. Can be SOURCE/REPLICATED/ARCHIVED."
    snapshotType: SnapshotType!
}

"Recovery related details for different snapshot types."
type CloudNativeSnapshotDetailsForRecoveryReply {
    "Details required for file recovery for different snapshot types of SOURCE, ARCHIVED and REPLICATED."
    snapshotDetails: [CloudNativeSnapshotDetailsForRecovery!]!
}

"Contains information about the cloud-native snapshot."
type CloudNativeSnapshotInfo {
    "Snapshot date."
    date: DateTime!
    "Snapshot ID."
    id: String!
    "Specifies if the snapshot is on-demand."
    isOnDemandSnapshot: Boolean!
}

"Script to setup backups on a SQL Server database."
type CloudNativeSqlServerSetupScript {
    "Contents of the script."
    script: String!
}

"Cloud-native tag rule."
type CloudNativeTagRule {
    "Does this tag rule apply to all cloud accounts."
    applyToAllCloudAccounts: Boolean!
    "Cloud-native accounts for the tag rule."
    cloudNativeAccounts: [CloudNativeAccountIdWithName!]!
    "Effective SLA domain to be assigned to objects."
    effectiveSla: TagRuleEffectiveSla
    "Specifies whether the user has permissions to modify the tag rule."
    hasPermissionToModify: Boolean!
    "ID of the tag rule."
    id: String!
    "Name of the tag rule."
    name: String!
    "Object type to which the tag rule will be applied."
    objectType: ManagedObjectType!
    "Tag for the tag rule."
    tag: TagRuleTag
}

"Contains information about the cloud-native versioned file."
type CloudNativeVersionedFile {
    "Absolute path."
    absolutePath: String!
    "Display path."
    displayPath: String!
    "File versions."
    fileVersions: [CloudNativeFileVersion!]!
    "File name."
    filename: String!
    "File path."
    path: String!
}

"Paginated list of CloudNativeVersionedFile objects."
type CloudNativeVersionedFileConnection {
    "Total number of CloudNativeVersionedFile objects matching the request arguments."
    count: Int!
    "List of CloudNativeVersionedFile objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CloudNativeVersionedFileEdge!]!
    "List of CloudNativeVersionedFile objects."
    nodes: [CloudNativeVersionedFile!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CloudNativeVersionedFile object. This wrapper is used for pagination."
type CloudNativeVersionedFileEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CloudNativeVersionedFile object wrapped by this edge."
    node: CloudNativeVersionedFile!
}

"A Rubrik CDM Cluster."
type Cluster {
    "The cluster's activity series."
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort activity series by field."
        sortBy: ActivitySeriesSortField
    ): ActivitySeriesConnection!
    "The organizations to which this cluster is authorized."
    allOrgs: [Org!]!
    "Operations that the user is authorized to perform on the Rubrik cluster."
    authorizedOperations: AuthorizedOperations!
    "Job status of a create cluster operation."
    ccprovisionInfo: CcprovisionInfo
    "The CDM cluster node details."
    cdmClusterNodeDetails: [CdmNodeDetail!]!
    "Cluster upgrade information."
    cdmUpgradeInfo: CdmUpgradeInfo
    "Cloud information for this cluster."
    cloudInfo: CcWithCloudInfo
    "The cluster disks."
    clusterDiskConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Rubrik Cluster disk filter."
        filter: ClusterDiskFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterDiskConnection!
    "The cluster nodes."
    clusterNodeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Rubrik Cluster node filter."
        filter: ClusterNodeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterNodeConnection!
    "The node-level performance statistics of a Rubrik cluster."
    clusterNodeStats(
        "Rubrik cluster node ID."
        cdmClusterNodeID: String,
        "Time range input."
        timeRange: TimeRangeInput
    ): [ClusterNodeStats!]!
    "Config protection information."
    configProtectionInfo: ConfigProtectionInfo
    "When the global manager connectivity was last updated."
    connectivityLastUpdated: DateTime
    "Auto Enable Sensitive Data Discovery policy configuration."
    datagovAutoEnablePolicyConfig: AutoEnablePolicyClusterConfigReply!
    "Sonar previewer configuration."
    datagovPreviewerConfig: PreviewerClusterConfig!
    "The cluster's default address."
    defaultAddress: String
    "Whether or not the cluster is encrypted."
    encryptionEnabled: Boolean!
    "The number of days remaining before the system fills up."
    estimatedRunway: Long!
    "The cluster's location."
    geoLocation: GeoLocation
    "The cluster's global manager connectivity status."
    globalManagerConnectivityStatus: GlobalManagerConnectivity
    "The cluster uuid."
    id: UUID!
    "Whether or not the cluster is healthy."
    isHealthy: Boolean! @deprecated(reason: "Use systemStatus instead.")
    "Lambda configuration."
    lambdaConfig: GetLambdaConfigReply
    "Lambda feature history."
    lambdaFeatureHistory: LambdaFeatureHistory
    "The time the cluster was last connected."
    lastConnectionTime: DateTime
    "The licensed products that belong to this cluster."
    licensedProducts: [Product!]!
    "Metadata pull scheduler."
    metadataPullScheduler: JobsReply
    "The most recent metric of a cluster."
    metric: ClusterMetric
    "The metric time series of a cluster."
    metricTimeSeries(
        "Time range input."
        timeRange: TimeRangeInput,
        unit: TimeUnitEnum!
    ): [metricTimeSeries!]!
    "The cluster name."
    name: String!
    "Total number of protected NoSQL workloads."
    noSqlWorkloadCount: Int!
    "Whether the global manager connectivity is healthy."
    passesConnectivityCheck: Boolean
    "Pause status of the cluster."
    pauseStatus: ClusterPauseStatus
    "The cluster product type (e.g., CDM, DATOS, etc.)."
    productType: ClusterProductEnum
    "The time the cluster was registered."
    registrationTime: DateTime!
    "The cluster's replication sources."
    replicationSources: [ReplicationSource!]!
    "The cluster's replication targets."
    replicationTargets: [ReplicationTarget!]!
    "This field lists jobs that sync CDM cluster data to RSC."
    rubrikSyncStatus: RubrikSyncStatus!
    "The cluster's snappables."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter protected objects by input."
        filter: SnappableFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): SnappableConnection!
    "The total number of snapshots."
    snapshotCount: Long!
    "The cluster state."
    state: clusterState!
    "The cluster status."
    status: ClusterStatus!
    "The cluster sub status."
    subStatus: ClusterSubStatus!
    "System status of the cluster. For Mosaic clusters and Rubrik clusters running CDM versions earlier than 5.0, this value is null."
    systemStatus: ClusterSystemStatus
    "List of affected nodes in the cluster."
    systemStatusAffectedNodes: [ClusterNode!]
    "Human readable message explaining the systemStatus."
    systemStatusMessage: String
    "The cluster's timezone."
    timezone: String
    "The cluster type."
    type: ClusterTypeEnum!
    "The software version."
    version: String
}

"CDM archiving specification."
type ClusterArchivalSpec {
    "Archival location ID."
    archivalLocationId: String!
    "Archival location name."
    archivalLocationName: String!
    "Archival tiering specification."
    archivalTieringSpec: ArchivalTieringSpec
    "Archives all snapshots taken with the specified frequency."
    frequencies: [RetentionUnit!]!
    "Archival threshold."
    threshold: Int!
    "Unit of archival threshold."
    thresholdUnit: RetentionUnit!
}

"Paginated list of Cluster objects."
type ClusterConnection {
    "Aggregate Rubrik clusters' health information based on filters and pagination arguments."
    aggregateClusterHealth: ClusterHealthAggregation!
    "Aggregate statistics across Clusters with respect for the applied filters and pagination arguments."
    aggregateClusterStatistics: ClusterStatsAggregation!
    "Total number of Cluster objects matching the request arguments."
    count: Int!
    "List of Cluster objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClusterEdge!]!
    "List of Cluster objects."
    nodes: [Cluster!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Supported in v7.0+"
type ClusterCsr {
    """

    Required. Supported in v7.0+
    Certificate signing request generated from the private key of the Rubrik cluster.
    """
    csr: String!
}

"Rubrik cluster disk type."
type ClusterDisk {
    "Disk capacity, in bytes."
    capacityBytes: Long!
    "ID of the Rubrik cluster."
    clusterId: UUID!
    "Disk type."
    diskType: ClusterDiskType!
    "ID of the Rubrik cluster disk type."
    id: String!
    "Specifies if the disk is encrypted."
    isEncrypted: Boolean!
    "LED status of the disk, where true means ON and false is OFF."
    ledStatus: Boolean
    "ID of the Rubrik cluster node."
    nodeId: String
    "Disk path."
    path: String!
    "Disk serial ID."
    serial: String
    "Disk status."
    status: ClusterDiskStatus!
    "Disk unallocated bytes."
    unallocatedBytes: Long
    "Disk usable bytes."
    usableBytes: Long
}

"Paginated list of ClusterDisk objects."
type ClusterDiskConnection {
    "Total number of ClusterDisk objects matching the request arguments."
    count: Int!
    "List of ClusterDisk objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClusterDiskEdge!]!
    "List of ClusterDisk objects."
    nodes: [ClusterDisk!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ClusterDisk object. This wrapper is used for pagination."
type ClusterDiskEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ClusterDisk object wrapped by this edge."
    node: ClusterDisk!
}

"Represents the response of a request to retrieve DNS information from a Rubrik cluster."
type ClusterDnsReply {
    "List of DNS search domains."
    domains: [String!]!
    "List of DNS name servers."
    servers: [String!]!
}

"Wrapper around the Cluster object. This wrapper is used for pagination."
type ClusterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Cluster object wrapped by this edge."
    node: Cluster!
}

"Cluster geolocation type."
type ClusterGeolocation {
    "Address information for mapping the location of the Rubrik cluster."
    address: String!
}

"Cluster data with groupby info applied to it."
type ClusterGroupBy {
    "Paginated snappable data."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort clusters by field."
        sortBy: ClusterSortByEnum = ClusterType,
        "Cluster sort order."
        sortOrder: SortOrder = DESC
    ): ClusterConnection!
    "Provides further groupings for the data."
    clusterGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Group by field."
        groupBy: ClusterGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [ClusterGroupBy!]!
    "The data groupby info."
    groupByInfo: ClusterGroupByInfo!
}

"Paginated list of ClusterGroupBy objects."
type ClusterGroupByConnection {
    "Total number of ClusterGroupBy objects matching the request arguments."
    count: Int!
    "List of ClusterGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClusterGroupByEdge!]!
    "List of ClusterGroupBy objects."
    nodes: [ClusterGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ClusterGroupBy object. This wrapper is used for pagination."
type ClusterGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ClusterGroupBy object wrapped by this edge."
    node: ClusterGroupBy!
}

"Aggregate Rubrik clusters' health information."
type ClusterHealthAggregation {
    "The number of Rubrik clusters that have a FATAL status."
    fatal: Long!
    "The number of Rubrik clusters that have an OK status."
    ok: Long!
    "The number of Rubrik clusters that have a WARNING status."
    warning: Long!
}

"Supported in v6.0+"
type ClusterHostGroupInfo {
    """

    Required. Supported in v6.0+
    Name of data center the compute cluster is a member of.
    """
    datacenterName: String!
    """

    Required. Supported in v6.0+
    Host groups configured in the compute cluster.
    """
    hostGroups: [HostGroupInfo!]!
    """

    Required. Supported in v6.0+
    Moid of the compute cluster. This is not the Rubrik managed id.
    """
    id: String!
    """

    Required. Supported in v6.0+
    Name of the compute cluster.
    """
    name: String!
}

"Cluster interface CIDR map."
type ClusterInfCidrs {
    clusterId: String!
    clusterName: String!
    interfaceCidr: [InterfaceCidr!]!
}

"IP allow list of Rubrik cluster mappings."
type ClusterIpMapping {
    "UUID of the Rubrik cluster."
    clusterUuid: UUID!
    "IP allow list of Rubrik clusters."
    ips: [String!]!
}

type ClusterJobStatusType {
    enumValue: ClusterJobStatusTypeEnum!
}

"Warnings and errors related to cluster license capacities."
type ClusterLicenseCapacityValidations {
    "The errors related to cluster license capacities."
    errors: [ClusterLicenseInfo!]!
    "The warnings related to cluster license capacities."
    warnings: [ClusterLicenseInfo!]!
}

"Information related to cluster licenses."
type ClusterLicenseInfo {
    "The last date among the term-end dates of all licenses of this product."
    maxTermEndDate: DateTime
    "The product included in this cluster license."
    product: Product!
    "The total requested capacity, in bytes."
    requestedCapacityBytes: Float!
    "The total requested capacity, in bytes."
    totalCapacityBytes: Float!
    "The type of information."
    type: ClusterLicenseInfoType!
    "The usable capacity of this product, in bytes."
    usableCapacityBytes: Float!
    "The capacity consumed, in bytes."
    usedCapacityBytes: Float!
}

"Metadata for a single cluster job."
type ClusterMetadata {
    "Name of cluster."
    clusterName: String!
    "Type of cluster."
    clusterType: CcpClusterType!
    "Cluster uuid."
    clusterUuid: String!
    "Start time for the job."
    jobStartTime: Long!
    "Current job status."
    jobStatus: CcpJobStatus!
    "Type of running job."
    jobType: CcpJobType!
    "Job configuration json."
    marshaledConfig: String!
    "Progress of job in percent."
    progress: Int!
    "Job status message."
    statusMessage: String!
    "Cloud vendor provider."
    vendor: CcpVendorType!
}

type ClusterMetric {
    availableCapacity: Long!
    "Ingested bytes for archived snapshots."
    ingestedArchivalStorage: Long!
    ingestedSnapshotStorage: Long!
    lastUpdateTime: DateTime!
    liveMountCapacity: Long!
    miscellaneousCapacity: Long!
    "Physical bytes for archived snapshots."
    physicalArchivalStorage: Long!
    physicalSnapshotStorage: Long!
    snapshotCapacity: Long!
    totalCapacity: Long!
    usedCapacity: Long!
}

"Rubrik cluster node."
type ClusterNode {
    "Brik ID of the Rubrik cluster node."
    brikId: String!
    "Rubrik cluster ID."
    clusterId: UUID!
    "CPU cores count of the Rubrik cluster node."
    cpuCores: Int
    "Hardware health status of a Rubrik cluster node. The value is null when hardware health status is not available."
    hardwareHealth: [HealthPolicyStatus!]
    "Hostname of the Rubrik cluster node."
    hostname: String
    "Node ID."
    id: String!
    "Network interface of a Rubrik cluster node."
    interfaceCidrs: [ClusterNodeInterfaceCidr!]
    "IP address of the Rubrik cluster node."
    ipAddress: String
    "Platform type of the Rubrik cluster node."
    needsInspection: Boolean
    "Network speed of the Rubrik cluster node."
    networkSpeed: String
    "Platform type of the Rubrik cluster node."
    platformType: ClusterNodePlatformType
    "Rear view position of the Rubrik cluster node."
    position: ClusterNodePosition
    "RAM of the Rubrik cluster node, in bytes."
    ram: Long
    "Status of the Rubrik cluster node."
    status: ClusterNodeStatus
}

"Paginated list of ClusterNode objects."
type ClusterNodeConnection {
    "Total number of ClusterNode objects matching the request arguments."
    count: Int!
    "List of ClusterNode objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClusterNodeEdge!]!
    "List of ClusterNode objects."
    nodes: [ClusterNode!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ClusterNode object. This wrapper is used for pagination."
type ClusterNodeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ClusterNode object wrapped by this edge."
    node: ClusterNode!
}

"Network interface of a Rubrik cluster node."
type ClusterNodeInterfaceCidr {
    "CIDR address for the interface."
    cidr: String!
    "Name of the interface."
    interfaceName: String!
}

"The node-level performance statistics of a Rubrik cluster."
type ClusterNodeStats {
    "Rubrik cluster UUID."
    clusterId: UUID!
    "CPU utilization of the node."
    cpuStat: Long!
    "Input/output read operations per second."
    iopsReadsPerSecond: Long!
    "Input/output write operations per second."
    iopsWritesPerSecond: Long!
    "Data received over the network, in bytes per second."
    networkBytesReceived: Long!
    "Data transmitted over the network, in bytes per second."
    networkBytesTransmitted: Long!
    "Rubrik cluster node ID."
    nodeId: String!
    "Read Input/output throughput, in bytes per second."
    readThroughputBytesPerSecond: Long!
    "Time at which the performance metrics were retrieved."
    time: DateTime!
    "Memory used on the node, in percentage."
    usedMemoryStat: Int!
    "Write Input/output throughput, in bytes per second."
    writeThroughputBytesPerSecond: Long!
}

"Object containing the pause or resume status for a Rubrik cluster."
type ClusterPauseStatusResult {
    "Cluster UUID."
    clusterUuid: String!
    "Specifies whether the pause or resume action was successful or not. When true, the action was successful. When false, the action failed."
    success: Boolean!
}

"Represents the response of a request to retrieve proxy information from a Rubrik cluster."
type ClusterProxyReply {
    "Proxy port."
    port: Int!
    "Proxy protocol."
    protocol: ProxyProtocol!
    "Proxy server."
    server: String!
    "Proxy account username."
    username: String!
}

"Info about the cluster product types the user is entitled to."
type ClusterRegistrationProductInfoType {
    "The latest product type associated with the user. Product type can only be either Hybrid or LifeOfDevice."
    latestProductType: String!
    "Distinct cluster product types associated with the cluster registration tokens. Product type can only be either Hybrid or LifeOfDevice."
    productTypes: [String!]!
}

"Object type containing the token, public key, and product type used in registering a cluster."
type ClusterRegistrationToken {
    "The product type this token should be used to register."
    productType: String!
    "The public key of the token."
    pubkey: String!
    "The JWT that will be used to register the cluster."
    token: String!
}

"Replication target specific information."
type ClusterReplicationTarget {
    "Id of replication target."
    id: String!
    "Name of replication target."
    name: String!
}

"Metadata for rendering a Rubrik cluster SLA Domain."
type ClusterSlaDomain implements SlaDomain {
    "Archiving specification for the SLA Domain."
    archivalSpec: ClusterArchivalSpec
    "List of archival specifications for SLA Domain."
    archivalSpecs: [ClusterArchivalSpec!]!
    "Backup windows for the SLA Domain."
    backupWindows: [BackupWindow!]!
    "Base frequency for the SLA Domain."
    baseFrequency: Duration
    "ID of the Rubrik cluster."
    cdmId: String!
    "Rubrik cluster ID of SLA Domain."
    cluster: Cluster
    "FID."
    fid: String!
    "First full backup windows."
    firstFullBackupWindows: [BackupWindow!]!
    "ID of Rubrik cluster SLA Domain."
    id: String!
    "Specifies if this SLA Domain is Retention Locked or not."
    isRetentionLockedSla: Boolean!
    "Local retention limit."
    localRetentionLimit: Duration
    "Rubrik Cluster SLA Domain name."
    name: String!
    "The object-specific configurations of the SLA Domain."
    objectSpecificConfigs: ObjectSpecificConfigs
    "Rubrik SaaS managed ID for the SLA Domain."
    polarisManagedId: String
    "Protected object count for the SLA Domain."
    protectedObjectCount: Int!
    "Replication specification for the SLA Domain."
    replicationSpec: ReplicationSpec
    "Replication specification for the SLA Domain."
    replicationSpecsV2: [ReplicationSpecV2!]!
    "Snapshot schedule for the SLA Domain."
    snapshotSchedule: SnapshotSchedule
    "SLA Domain upgrade information."
    upgradeInfo: SlaUpgradeInfo
    "Version for the SLA Domain."
    version: String
}

"Paginated list of ClusterSlaDomain objects."
type ClusterSlaDomainConnection {
    "Total number of ClusterSlaDomain objects matching the request arguments."
    count: Int!
    "List of ClusterSlaDomain objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClusterSlaDomainEdge!]!
    "List of ClusterSlaDomain objects."
    nodes: [ClusterSlaDomain!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ClusterSlaDomain object. This wrapper is used for pagination."
type ClusterSlaDomainEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ClusterSlaDomain object wrapped by this edge."
    node: ClusterSlaDomain!
}

"Metadata for rendering a cluster sla for filter."
type ClusterSlaDomainForFilter {
    "The name of the cluster the sla belongs to."
    clusterName: String
    "The uuid of the cluster the sla belongs to."
    clusterUuid: UUID!
    "The fid of the sla."
    id: String!
    "The name of the sla."
    name: String!
}

"Paginated list of ClusterSlaDomainForFilter objects."
type ClusterSlaDomainForFilterConnection {
    "Total number of ClusterSlaDomainForFilter objects matching the request arguments."
    count: Int!
    "List of ClusterSlaDomainForFilter objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ClusterSlaDomainForFilterEdge!]!
    "List of ClusterSlaDomainForFilter objects."
    nodes: [ClusterSlaDomainForFilter!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ClusterSlaDomainForFilter object. This wrapper is used for pagination."
type ClusterSlaDomainForFilterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ClusterSlaDomainForFilter object wrapped by this edge."
    node: ClusterSlaDomainForFilter!
}

"Aggregated statistics across Clusters."
type ClusterStatsAggregation {
    "Ingested bytes for archived snapshots."
    ingestedArchivalStorage: Long!
    "Ingested bytes for local snapshots."
    ingestedSnapshotStorage: Long!
    "Physical bytes for archived snapshots."
    physicalArchivalStorage: Long!
    "Physical bytes for local snapshots."
    physicalSnapshotStorage: Long!
}

"All storage arrays in a Rubrik cluster."
type ClusterStorageArrays {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Error message. Available only when the storage array retrieve operation fails."
    errorMessage: String
    "Storage arrays in Rubrik cluster."
    storageArrays: [StorageArrayDetail!]!
}

"Cluster time zone."
type ClusterTimezone {
    timezone: ClusterTimezoneType!
}

type ClusterType {
    enumValue: ClusterTypeEnum!
}

"Supported in v6.0+"
type ClusterVisibilityConfig {
    """

    Required. Supported in v6.0+
    Names of the host groups being protected.
    """
    hostGroupFilter: [String!]!
    """

    Required. Supported in v6.0+
    VMware managed object ID of the compute cluster. This is not the ID managed by Rubrik.
    """
    id: String!
    """

    Supported in v6.0+
    A Boolean that specifies whether the compute cluster is a VMware Metro Storage Cluster.
    """
    isVmwareMetroStorageCluster: Boolean
}

"Supported in v6.0+"
type ClusterVisibilityInfo {
    clusterVisibilityConfig: ClusterVisibilityConfig
    """

    Required. Supported in v6.0+
    Name of the compute cluster.
    """
    name: String!
}

"Web certificate and IPMI details for a cluster."
type ClusterWebCertAndIpmi {
    "Web server certificate."
    certInfo: ClusterWebSignedCertificateReply
    "ID of the Rubrik cluster."
    clusterUuid: UUID!
    "Error message, in the case of an error."
    error: String!
    "IPMI details."
    ipmiInfo: ModifyIpmiReply
}

"Supported in v5.2+"
type ClusterWebSignedCertificateReply {
    """

    Supported in v5.2+
    Signed certificate of the web server.
    """
    cert: AddClusterCertificateReply
    """

    Required. Supported in v5.2+
    A Boolean value that indicates if the web server is configured to use a certificate signed by an external CA.
    """
    webServerConfiguredWithCaSignedCertificate: Boolean!
}

type Column {
    aggregate: Boolean!
    default: Boolean!
    dimensional: Boolean!
    displayName: String!
    name: String!
    nullable: Boolean!
    sortable: Boolean!
    type: DataTypeEnum!
}

type CommonNotificationConfig {
    hostname: String!
    networkType: NetworkProtocolTypeEnum!
    port: Int!
    securityType: SMTPSecurityTypeEnum!
    trustedCerts: String!
}

"Response of the operation to complete Azure Cloud Account OAuth."
type CompleteAzureCloudAccountOauthReply {
    "Specifies whether the OAuth authentication was completed successfully. When true, it means the authentication was successful."
    isSuccess: Boolean!
    "Subscriptions for which the OAuth user has read permission on Azure."
    subscriptions: [AzureCloudAccountSubscription!]!
}

"Number of objects sharing a compliance status."
type ComplianceFrequency {
    "Number of objects with this status."
    count: Int!
    "Compliance status."
    status: ComplianceStatusEnum!
}

type ComplianceStatus {
    enumValue: ComplianceStatusEnum!
}

"Supported in v5.0+"
type ComputeClusterDetail {
    computeClusterSummary: ComputeClusterSummary
    "Required. Supported in v5.0+"
    hosts: [VmwareHostSummary!]!
    "Required. Supported in v5.0+"
    moid: String!
    "Required. Supported in v5.0+"
    virtualMachines: [VirtualMachineSummary!]!
}

"The iofilter installation status of the compute cluster."
type ComputeClusterIofilterStatus {
    "Compute cluster fid."
    computeClusterFid: String!
    "Compute cluster name."
    computeClusterName: String!
    "The iofilter installation status."
    iofilterStatus: String!
}

"Supported in v5.0+"
type ComputeClusterSummary {
    "Required. Supported in v5.0+"
    datacenterId: String!
    """

    Supported in v5.1+
    Current Drs Status of Cluster.
    """
    drsStatus: Boolean
    effectiveSlaDomainId: String
    effectiveSlaDomainName: String
    "Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed."
    effectiveSlaDomainPolarisManagedId: String
    effectiveSlaHolder: EffectiveSlaHolder
    "ID of the object from which the effective SLA domain is inherited"
    effectiveSlaSourceObjectId: String
    "Name of the object from which the effective SLA domain is inherited"
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.1+
    List of Versions of ESXi Hosts in Compute Cluster.
    """
    hostVersions: [String!]!
    ioFilterStatus: IoFilterStatus
    "Supported in v5.1+"
    lastUsedFqdn: String
    slaAssignable: SlaAssignable
}

"List of configuration backups of a cluster."
type ConfigBackup {
    "Date and time when the configuration backup was taken."
    backupDateTime: DateTime!
    "Name of the configuration backup file."
    backupFileName: String!
    "Size of the configuration backup file in bytes."
    backupSizeInBytes: Long!
    "Connection state of the source cluster."
    connectionState: ClusterStatus!
    "Name of the replication cluster where backup file is stored."
    replicationTargetName: String
    "UUID of the replication cluster where backup file is stored."
    replicationTargetUuid: UUID
    "Rubrik CDM version of the source cluster at the time of backup."
    softwareVersion: String!
    "Name of the source cluster."
    sourceClusterName: String!
    "UUID of the source cluster."
    sourceClusterUuid: UUID!
    "Upload location type."
    uploadLocationType: UploadLocationType
}

type ConfigFilter {
    filter: ReportFilter!
    filterHeader: [String!]!
}

"Configuration protection information."
type ConfigProtectionInfo {
    "The cluster UUID."
    clusterUuid: UUID!
    "Status of configuration protection."
    configProtectionStatus: ConfigProtectionStatus!
    "Date and time of last successful backup."
    lastSuccessfulBackupTime: DateTime
    "The replication target name of the upload location."
    replicationTargetName: String
    "Type of upload location."
    uploadLocation: UploadLocationType!
}

"Configuration protection setup information for a cluster."
type ConfigProtectionSetupInfo {
    "CA certificate provider type."
    caCertProvider: CaCertProviderType
    "UUID of the CA certificate used for the setup."
    caCertUuid: UUID
    "Name of the replication cluster used for storing configuration backup."
    replicationTargetName: String
    "UUID of the replication cluster used for storing configuration backup."
    replicationTargetUuid: UUID
    "Upload location type."
    uploadLocationType: UploadLocationType
}

"Additional information about the connection status of the replication pair Rubrik clusters."
type ConnectionStatusDetails {
    "Connection between source cluster and Rubrik (connected, disconnected, or not added)."
    sourceAndRubrik: ClusterConnectionStatus!
    "Connection between source and target Rubrik clusters (connected or disconnected)."
    sourceAndTarget: ConnectionStatusType!
    "Connection between target cluster and Rubrik (connected, disconnected, or not added)."
    targetAndRubrik: ClusterConnectionStatus!
}

"A node in a help topic document tree."
type ContentNode {
    "Attributes of this node."
    attributes: [ContentNodeAttribute!]!
    "Index of this node in the document tree."
    index: Int
    "Index of the parent of this node."
    parentIndex: Int
    "Markup tag name."
    tag: String!
    "Text content of this node."
    text: String!
}

"The attributes of a content node."
type ContentNodeAttribute {
    "Attribute name."
    key: String!
    "Attribute value."
    value: String!
}

type CountOfObjectsProtectedBySLAsResult {
    slaObjectCounts: [SLAIdToObjectCount!]!
}

type Crawl {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    crawlObj(snappableFid: String!): CrawlObj!
    crawlObjConnection: CrawlObjConnection!
    endTime: Long!
    failedObjectCount: Int!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListFileResultFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput
    ): FileResultConnection!
    filesAnalyzeable: Long!
    filesAnalyzed: Long!
    filesTotal: Long!
    filesWithHits: Long!
    id: String!
    name: String!
    progress: Float!
    snappableTypeSummaries: [SnappableTypeSummary!]!
    startTime: Long!
    status: CrawlStatusEnum!
    totalHits: Int!
    user: User
}

"Paginated list of Crawl objects."
type CrawlConnection {
    "Total number of Crawl objects matching the request arguments."
    count: Int!
    "List of Crawl objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CrawlEdge!]!
    "List of Crawl objects."
    nodes: [Crawl!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Crawl object. This wrapper is used for pagination."
type CrawlEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Crawl object wrapped by this edge."
    node: Crawl!
}

type CrawlObj {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    cluster: Cluster!
    crawlId: String!
    endTime: Long!
    error: String!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrowseDirectoryFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        stdPath: String!
    ): FileResultConnection!
    filesAnalyzeable: Long!
    filesAnalyzed: Long!
    filesTotal: Long!
    filesWithHits: Long!
    progress: Float!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTime: Long!
    startTime: Long!
    status: SnappableCrawlStatus!
    totalHits: Int!
}

"Paginated list of CrawlObj objects."
type CrawlObjConnection {
    "Total number of CrawlObj objects matching the request arguments."
    count: Int!
    "List of CrawlObj objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CrawlObjEdge!]!
    "List of CrawlObj objects."
    nodes: [CrawlObj!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CrawlObj object. This wrapper is used for pagination."
type CrawlObjEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CrawlObj object wrapped by this edge."
    node: CrawlObj!
}

"AWS Exocompute Configs Create Response."
type CreateAwsExocomputeConfigsReply {
    "List of exocompute configurations."
    configs: [AwsExocomputeGetConfigResponse!]!
}

"Response of the mutation to create a storage setting for AWS."
type CreateCloudNativeAwsStorageSettingReply {
    targetMapping: TargetMapping!
}

"Storage settings information for Azure."
type CreateCloudNativeAzureStorageSettingReply {
    targetMapping: TargetMapping!
}

"Status of the request to create a label rule. If the request succeeds, the status contains the ID of the new label rule."
type CreateCloudNativeLabelRuleReply {
    "ID of the new label rule."
    labelRuleId: String!
}

"Rubrik Cloud Vault storage settings information for Azure."
type CreateCloudNativeRcvAzureStorageSettingReply {
    "Rubrik Cloud Vault Azure storage setting."
    targetMapping: TargetMapping!
}

"Status of the request to create a tag rule. If the request succeeds, the status contains the ID of the new tag rule."
type CreateCloudNativeTagRuleReply {
    "ID of the tag rule."
    tagRuleId: String!
}

"Metadata for rendering a custom report."
type CreateCustomReportReply {
    "The list of charts in the custom report."
    charts: [ReportChartType!]!
    "Time the report was created."
    createdAt: DateTime!
    "The filters applied to the data in the report."
    filters: CustomReportFilters!
    "The metrics focus of the custom report."
    focus: ReportFocusEnum!
    "ID of the custom report."
    id: Int!
    "Specifies whether the report should be hidden from the gallery view."
    isHidden: Boolean!
    "Specifies whether the report is auto-generated and not editable."
    isReadOnly: Boolean!
    "Name of the custom report."
    name: String!
    "Date of the most recent sync for the report."
    newestSyncDate: DateTime
    "Date of the oldest sync for the report."
    oldestSyncDate: DateTime
    "The creator of the custom report."
    owner: User!
    scheduledReportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    "The list of tables in the custom report."
    tables: [ReportTableType!]!
    "Time the report was last updated and saved."
    updatedAt: DateTime!
    "Time the report was last viewed or opened."
    viewedAt: DateTime!
}

"Reply Object for CreateFailoverClusterApp."
type CreateFailoverClusterAppReply {
    output: FailoverClusterAppSummary
}

"Reply Object for CreateFailoverCluster."
type CreateFailoverClusterReply {
    output: FailoverClusterDetail
}

"Supported in v5.0+"
type CreateGuestCredentialReply {
    "Base guest credential details."
    baseGuestCredentialDetail: BaseGuestCredentialDetail
    "Supported in v5.0+"
    domain: String
    "Required. Supported in v5.0+"
    id: String!
}

"CreateK8sAgentManifest mutation reply."
type CreateK8sAgentManifestReply {
    "Kubernetes Agent manifest information."
    info: K8sAgentManifestInfo!
}

"Create Kubernetes cluster response."
type CreateK8sClusterReply {
    "The Kubernetes cluster ID created."
    clusterId: String!
    "The URL that allows you to download the yaml file for the Kubernetes Protection agent."
    yamlUrl: String!
}

"Contains information about the snapshots placed on legal hold."
type CreateLegalHoldReply {
    "List of the snapshot IDs placed on legal hold."
    snapshotIds: [String!]!
}

"O365 create app kickoff response."
type CreateO365AppKickoffResp {
    appClientId: String!
    csrfToken: String!
    o365TenantId: String!
}

"Reply to Create on-demand job request."
type CreateOnDemandJobReply {
    jobId: Long!
    taskchainId: String!
}

"UUID of created organization."
type CreateOrgReply {
    "UUID of created organization."
    organizationId: String!
}

"The reply of creating a new Polaris report."
type CreatePolarisReportReply {
    "The ID of report."
    reportId: Long!
}

"Required fields for adding private endpoint to RCV location."
type CreateRcvPrivateEndpointApprovalRequestReply {
    "Authentication token for approving request."
    requestMessage: String!
    "Azure storage account identifier for the RCV location."
    storageAccountId: String!
}

"A Recovery Plan."
type CreateRecoveryPlanReply implements HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Recovery Plan configuration."
    config: RecoveryPlanConfig
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Recovery Plan description."
    description: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Recovery Plan version."
    version: Int!
}

"Represents the response for creating a scheduled report."
type CreateScheduledReportReply {
    "Description of the newly created schedule."
    scheduledReport: ScheduledReport!
}

"Service account details."
type CreateServiceAccountReply {
    "URI to retrieve the access token.."
    accessTokenUri: String!
    "Client ID of the service account."
    clientId: String!
    "Client secret used to authenticate to the authorization server."
    clientSecret: String!
    "Name of the service account."
    name: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Properties of the SnapMirror Cloud relationship.
"""
type CreateSnapMirrorCloudRelationshipReply {
    """

    Required. Supported in v7.0+
    ID of the SnapMirrorCloud cloud target on the NetApp server.
    """
    cloudTargetId: String!
    """

    Required. Supported in v7.0+
    ID of the SnapMirrorCloud policy on the NetApp server.
    """
    policyId: String!
    """

    Required. Supported in v7.0+
    ID of the SnapMirrorCloud relationship on the NetApp server.
    """
    relationshipId: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Key properties of the SnapMirror Cloud workload.
"""
type CreateSnapMirrorCloudReply {
    """

    Supported in v7.0+
    ID of the effective SLA Domain for this SnapMirror Cloud protected object.
    """
    effectiveSlaDomainId: String
    """

    Supported in v7.0+
    v7.0-v8.0: Name of the effective SLA Domain for this SnapMirror Cloud protected object.
    v9.0: Name of the effective SLA Domain for this SnapMirror Cloud workload.
    """
    effectiveSlaDomainName: String
    """

    Supported in v7.0+
    Optional field containing the Polaris managed ID of the effective SLA domain, if it is managed by Polaris.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v7.0+
    v7.0-v8.0: Optional Boolean value that specifies whether the effective SLA Domain of a SnapMirror Cloud protected object is retention locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not retention locked.
    v9.0: Optional Boolean value that specifies whether the effective SLA Domain of a SnapMirror Cloud workload is retention locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not retention locked.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
    "Required. Supported in v7.0+"
    isRelic: Boolean!
    "Required. Supported in v7.0+"
    nasNamespaceId: String!
    "Required. Supported in v7.0+"
    nasNamespaceName: String!
    "Required. Supported in v7.0+"
    nasSystemId: String!
    "Required. Supported in v7.0+"
    nasSystemName: String!
    "Required. Supported in v7.0+"
    nasVolumeId: String!
    "Required. Supported in v7.0+"
    nasVolumeName: String!
    "Supported in v7.0+"
    relationshipUuid: String
    "Details of the SLA Domain assigned to SnapMirror Cloud workload."
    slaAssignable: SlaAssignable
    "Supported in v7.0+"
    snapMirrorLabel: String
}

"Create a support case reply."
type CreateSupportCaseReply {
    "The support case ID."
    caseId: String!
    "The number used as the name of the support case."
    caseNumber: String!
}

"Supported in v5.0+"
type CreateVappNetworkParams {
    """

    Supported in v5.0+
    v5.0-v5.3: Name to assign within vCloud to the vApp network that is referenced by the specified new vApp network object. The Rubrik REST API server uses this value, when present, to rename the vApp network within vCloud. When this value is empty the vApp network uses the existing name.
    v6.0+: Name to assign to the vApp network that is referenced by the specified new vApp network object. If a name is specified, the Rubrik REST API server uses the name to rename the vApp network within the vCloud. If the value is empty, the vApp network is not renamed.
    """
    newName: String
    "Network summary of the vApp to be created."
    vappNetworkSummary: VappNetworkSummary
}

"Response for the operation to Create vapp snapshot."
type CreateVappSnapshotReply {
    "Error message in case of failure."
    errorMessage: String
    "ID of the vapp snapshot."
    id: String!
}

"A list of response for the operations to Create vapp snapshots."
type CreateVappSnapshotsReply {
    "Create vApp snapshots responses."
    responses: [CreateVappSnapshotReply!]!
}

"A list of async responses for the operation to instantly recover vApp snapshots from the Rubrik cluster."
type CreateVappsInstantRecoveryReply {
    "Responses of vApp snapshots instant recovery."
    responses: [AsyncRequestStatus!]!
}

"Reply Object for CreateFilter."
type CreateVsphereAdvancedTagReply {
    output: FilterCreateResponse
}

"Supported in v5.3+"
type CreateVsphereVcenterReply {
    "Required. Supported in v5.3+"
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    The ID of the vCenter server that controls the management of the virtual machine whose metadata will be refreshed.
    """
    id: String!
    "Supported in v7.0+ An optional field that specifies whether HotAdd transport mode is enabled for On-Premise vCenter. When this value is `true`, HotAdd transport mode is enabled for this vCenter. When this value is `false`, HotAdd transport mode is not enabled for this vCenter. When this value is not specified, it indicates that this is an VMC vCenter."
    isHotAddProxyEnabledForOnPremVcenter: Boolean
    "Required. Specifies whether the new vCenter is a VMC instance."
    isVmc: Boolean!
}

"The webhook that was created."
type CreateWebhookReply {
    "The webhook that was created."
    webhook: Webhook!
}

"Certificate Signing Request (CSR) information."
type Csr {
    "City of the Certificate Signing Request."
    city: String!
    "Country of the Certificate Signing Request."
    country: String!
    "Creation timestamp of the Certificate Signing Request."
    createdAt: DateTime
    "Email of the user who created the Certificate Signing Request."
    creatorEmail: String!
    "Content of the Certificate Signing Request."
    csr: String!
    "ID of the Certificate Signing Request."
    csrId: Long!
    "Email of the Certificate Signing Request."
    email: String!
    "Hostnames for the Certificate Signing Request."
    hostnames: [String!]!
    "Name of the Certificate Signing Request."
    name: String!
    "Organization of the Certificate Signing Request."
    organization: String!
    "Organizational Unit of the Certificate Signing Request."
    organizationUnit: String!
    "State of the Certificate Signing Request."
    state: String!
    "Surname of the Certificate Signing Request."
    surname: String!
    "User ID of the Certificate Signing Request."
    userId: String!
}

"Paginated list of Csr objects."
type CsrConnection {
    "Total number of Csr objects matching the request arguments."
    count: Int!
    "List of Csr objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CsrEdge!]!
    "List of Csr objects."
    nodes: [Csr!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Csr object. This wrapper is used for pagination."
type CsrEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Csr object wrapped by this edge."
    node: Csr!
}

"Current rolling upgrade node status information."
type CurrentStateInfo {
    "Completed stages."
    completedStates: [String!]!
    "Current stage."
    currentState: String!
    "Current task index in stage."
    currentTaskIndex: String!
    "Current task name."
    currentTaskName: String!
    "Pending stages."
    pendingStates: [String!]!
    "Current task result."
    result: String!
    "Current status."
    status: StatusResponse
}

type CustomAnalyzerMatch {
    endIndex: Int!
    startIndex: Int!
}

"Metadata for rendering a custom report."
type CustomReport {
    "The list of charts in the custom report."
    charts: [ReportChartType!]!
    "Time the report was created."
    createdAt: DateTime!
    "The filters applied to the data in the report."
    filters: CustomReportFilters!
    "The metrics focus of the custom report."
    focus: ReportFocusEnum!
    "ID of the custom report."
    id: Int!
    "True if report should be hidden from gallery view."
    isHidden: Boolean!
    "True if report is auto-generated and not allowed to be edited."
    isReadOnly: Boolean!
    "Name of the custom report."
    name: String!
    newestSyncDate: DateTime
    oldestSyncDate: DateTime
    "The creator of the custom report."
    owner: User!
    scheduledReports(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    "The list of tables in the custom report."
    tables: [ReportTableType!]!
    "Time the report was last updated (i.e., saved)."
    updatedAt: DateTime!
    "Time the report was last viewed / opened by the user."
    viewedAt: DateTime!
}

"Paginated list of CustomReport objects."
type CustomReportConnection {
    "Total number of CustomReport objects matching the request arguments."
    count: Int!
    "List of CustomReport objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CustomReportEdge!]!
    "List of CustomReport objects."
    nodes: [CustomReport!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CustomReport object. This wrapper is used for pagination."
type CustomReportEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CustomReport object wrapped by this edge."
    node: CustomReport!
}

"Filter configs for a report."
type CustomReportFilters {
    "List of activity object types to filter on."
    activityObjectType: [ActivityObjectTypeEnum!]
    "List of clusters to filter on."
    cluster: [Cluster!]
    clusterLocation: [String!]
    "List of cluster types to filter on."
    clusterType: [ClusterTypeEnum!]
    complianceStatus: [ComplianceStatusEnum!]
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    "Anomalous value to filter data on."
    isAnomaly: Boolean
    "List of activity statuses to filter on."
    lastActivityStatus: [ActivityStatusEnum!]
    "List of activity types to filter on."
    lastActivityType: [ActivityTypeEnum!]
    "List of managed ids to filter data on."
    managedId: [String!]
    "List of snappable types to filter on."
    objectType: [ObjectTypeEnum!]
    "List of organization IDs to filter on."
    orgId: [String!]
    "List of policy IDs to filter on."
    policyId: [String!]
    protectionStatus: [ProtectionStatusEnum!]
    replicationSource: [String!]
    searchTerm: String
    slaDomain: [SlaDomain!]
    "The time range for SLA Domain compliance report."
    slaTimeRange: SlaComplianceTimeRange
    sonarObjectTypes: [HierarchyObjectTypeEnum!]
    source: [String!]
    targetSite: [String!]
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    "Start and end time range to filter data on."
    timeRange: GenericTimeRange
    "List of object types to filter on for Audits."
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    "List of user audit status to filter on."
    userAuditStatus: [UserAuditStatusEnum!]
    "List of user audit types to filter on."
    userAuditType: [UserAuditTypeEnum!]
}

"CustomReport data with groupby info applied to it."
type CustomReportGroupBy {
    "The data groupby info."
    groupByInfo: CustomReportGroupByInfo!
    "Paginated snappable data."
    reportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort by field"
        sortBy: CustomReportSortByEnum = UpdateTime,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CustomReportConnection!
    "Provides further groupings for the data."
    reportGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: CustomReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [CustomReportGroupBy!]!
}

"Paginated list of CustomReportGroupBy objects."
type CustomReportGroupByConnection {
    "Total number of CustomReportGroupBy objects matching the request arguments."
    count: Int!
    "List of CustomReportGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CustomReportGroupByEdge!]!
    "List of CustomReportGroupBy objects."
    nodes: [CustomReportGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CustomReportGroupBy object. This wrapper is used for pagination."
type CustomReportGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CustomReportGroupBy object wrapped by this edge."
    node: CustomReportGroupBy!
}

"Location path point of the cyber recovery workload."
type CyberRecoveryLocationPathPoint {
    "Managed ID."
    managedId: UUID!
    "Location name."
    name: String!
}

"Details about the cyber recovery workload."
type CyberRecoveryObject {
    "Cluster ID."
    clusterId: UUID!
    "Rubrik cluster name."
    clusterName: String!
    "Cyber recovery object ID."
    id: UUID!
    "Last recovery time."
    lastRecoveryMilliSec: Long!
    "Last recovery status."
    lastRecoveryStatus: WorkloadLastFailoverStatus!
    "Last recovery type."
    lastRecoveryType: RecoveryPlanType!
    "Workload name."
    name: String!
    "Physical location."
    physicalLocation: [CyberRecoveryLocationPathPoint!]!
    "Number of recoveries."
    recoveryInfos: [RecoveryInfo!]!
    "Recovery plan IDs."
    recoveryPlanIds: [UUID!]!
    "Details about the associated recovery plans."
    recoveryPlansInfo: [RecoveryPlanDetails!]!
    "SLA Domain ID."
    retentionSlaDomainId: String!
    "SLA Domain name."
    retentionSlaDomainName: String!
    "The snapshot distribution of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of CyberRecoveryObject objects."
type CyberRecoveryObjectConnection {
    "Total number of CyberRecoveryObject objects matching the request arguments."
    count: Int!
    "List of CyberRecoveryObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [CyberRecoveryObjectEdge!]!
    "List of CyberRecoveryObject objects."
    nodes: [CyberRecoveryObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the CyberRecoveryObject object. This wrapper is used for pagination."
type CyberRecoveryObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual CyberRecoveryObject object wrapped by this edge."
    node: CyberRecoveryObject!
}

"A daily summary of Ransomware Investigation results across all workloads."
type DailyAnalysisDetails {
    "The number of anomaly events generated."
    anomalyEventCount: Long!
    "The number of created bytes."
    createdDataBytes: Long!
    "The count of files created."
    createdFileCount: Long!
    """

    The day for which the Ransomware Investigation results were recorded.
    The value is formatted using the ISO 8601 standard and
    appears as YYYY-MM-DD.
    """
    day: String!
    "The number of deleted bytes."
    deletedDataBytes: Long!
    "The count of files deleted."
    deletedFileCount: Long!
    "The number of modified bytes."
    modifiedDataBytes: Long!
    "The count of files modified."
    modifiedFileCount: Long!
    "The number of suspicious bytes."
    suspiciousDataBytes: Long!
    "The count of suspicious files."
    suspiciousFileCount: Long!
}

"Daily compliance stats."
type DailyComplianceStats {
    "Number of objects by compliance status."
    counts: [ComplianceFrequency!]!
    "The date to which the stats apply."
    date: DateTime!
}

"A daily recurrence pattern (e.g. every 3 days)."
type DailyRecurrencePattern {
    "The interval at which the recurrence applies."
    interval: Int!
}

"Daily snapshot schedule."
type DailySnapshotSchedule {
    "Basic daily snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
}

"Supported in v5.0+"
type DataCenterSummary {
    "Supported in v5.0"
    effectiveSlaDomainId: String
    "Supported in v5.0"
    effectiveSlaDomainName: String
    """

    Supported in v5.0
    Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Supported in v5.0
    ID of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.0
    Name of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectName: String
    slaAssignable: SlaAssignable
    "Supported in v5.0+"
    vcenterId: String
}

"Supported in v6.0+"
type DataGuardGroupMember {
    """

    Required. Supported in v6.0+
    Unique name of the member Oracle database.
    """
    dbUniqueName: String!
    """

    Supported in v6.0+
    Rubrik ID of the RAC on which this database is hosted. This field is empty when the database is not hosted on a RAC environment.
    """
    racId: String
    """

    Supported in v6.0+
    Cluster name assigned to the Oracle RAC.
    """
    racName: String
    """

    Required. Supported in v6.0+
    Current role of the member Oracle database.
    """
    role: String!
    """

    Supported in v6.0+
    Rubrik ID of the standalone Oracle host on which this database is hosted. This field is empty when the database is not hosted on a standalone system.
    """
    standaloneHostId: String
    """

    Supported in v6.0+
    Name of the standalone Oracle database host.
    """
    standaloneHostName: String
}

"Data Location."
type DataLocation {
    "Rubrik cluster UUID."
    clusterUuid: UUID!
    "Indicates whether the snapshots is retained beyond its expiration date for security reasons."
    createDate: DateTime!
    "ID of the location."
    id: String!
    "Specifies if the data location is active."
    isActive: Boolean!
    "Specifies if the snapshot is archived."
    isArchived: Boolean!
    "The name of the data location."
    name: String!
    "Specifies the type of data location."
    type: DataLocationName!
}

"The supported Rubrik cluster-specific information."
type DataLocationSupportedCluster {
    "Name of the supported Rubrik cluster."
    name: String!
    "UUID of the supported Rubrik cluster."
    uuid: String!
    "Version of the supported Rubrik cluster."
    version: String!
}

"Supported in v5.0+"
type DataStoreSummary {
    "Supported in v5.0+"
    capacity: Long
    "Supported in v5.0+"
    dataCenterName: String
    "Supported in v5.0+"
    dataStoreType: String
    "Required. Supported in v5.0+"
    id: String!
    "Supported in v5.0+"
    isLocal: Boolean
    "Supported in v5.0+"
    name: String
}

"Supported in v5.0+"
type Datastore {
    """

    Required. Supported in v5.0+
    Name for the ESXi host datastore.
    """
    name: String!
}

"Rubrik CDM storage array details."
type DatastoreFreespaceThresholdType {
    "Details of a Rubrik cluster."
    cluster: Cluster!
    "Datastore freespace threshold details."
    datastoreFreespaceThreshold: VmwareDatastoreFreespaceThreshold!
}

"Objects containing Datastore names for a given ESXi host"
type Datastores {
    name: String!
}

"Datastores for a given ESXi host"
type DatastoresListResponse {
    data: [Datastores!]!
    hasMore: Boolean
    total: Long
}

"Day of the week."
type DayOfWeekOpt {
    "Day of the week."
    day: DayOfWeek!
}

"Db2 workload related app metadata for a snapshot."
type Db2AppMetadata {
    "Approximate DB size just around the time the snapshot is taken."
    approximateDbSizeBytes: Long
    "Backup ID set by database."
    backupId: String
    "Backup ID of the base backup."
    baseBackupId: String
    "Snapshot ID of the base backup."
    baseSnapshotId: String
    "Snapshot type for base back up: Full/Incremental/Differential."
    baseSnapshotType: Db2SnapshotType
    "Snapshot metadata information specific to Db2."
    db2SnapshotMetadata: Db2WorkloadDataSnapshotMetadata
    "End time for the backup in DB."
    endTime: DateTime
    "List of files backed up as a part of this backup."
    files: [Db2DataBackupFile!]!
    "Denotes whether the backup was triggered by Rubrik or by an external agent."
    isExternalBackup: Boolean!
    "Whether the backup is triggered by Rubrik and is OnDemand."
    isRubrikTriggeredOnDemandBackup: Boolean!
    "The ID for the backup object stored in snapshot table."
    snapshotId: String
    "Snapshot type: Full/Incremental/Differential."
    snapshotType: Db2SnapshotType
    "Start time for the backup in DB."
    startTime: DateTime
}

"The SLA Domain configuration for Db2 database."
type Db2Config {
    "Frequency value for differential backup of Db2 databases."
    differentialFrequency: Duration
    "Frequency value for incremental backup of Db2 databases."
    incrementalFrequency: Duration
    "Specifies the number of days for which the Db2 database logs will be retained."
    logRetention: Duration
}

"File backed up as a part of db2 backup."
type Db2DataBackupFile {
    "Size of the backed up file in bytes."
    backupFileSizeInBytes: Long!
    "Information specific to Db2 and which is already not available in DBDataBackupFile."
    db2BackupFile: Db2WorkloadDataBackupFile!
    "Backup file destination path. Path of the file in the backing storage."
    destinationPath: String!
}

"Db2 Database details object."
type Db2Database implements CdmHierarchyObject & CdmHierarchySnappableNew & Db2InstanceDescendantType & Db2InstancePhysicalChildType & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Id associated with Db2 database in CDM."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Type of Db2 database: STANDALONE, PARTITIONED, HADR, or UNKNOWN."
    db2DbType: Db2DatabaseType!
    "HADR metadata object for the specified Db2 database."
    db2HadrMetadata: Db2HadrMetadata
    "Db2 instance parent for the given database."
    db2Instance: Db2Instance
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Whether the db2 database is a relic."
    isRelic: Boolean!
    "Time stamp of when last metadata sync happened for the Db2 database."
    lastSyncTime: DateTime
    "Latest User note information."
    latestUserNote: LatestUserNote
    "Threshold before new log backup takes place."
    logBackupThreshold: String!
    "Connection of log snapshots for given Db2 database."
    logSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter Db2 log snapshots."
        filter: Db2LogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort Db2 log snapshots."
        sortBy: Db2LogSnapshotSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): Db2LogSnapshotConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Uuid of the primary cluster."
    primaryClusterUuid: UUID!
    "Db2 database SLA Domain protection start date."
    protectionDate: DateTime
    "Connection of recoverable ranges for given Db2 database."
    recoverableRanges(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter Db2 recoverable ranges."
        filter: Db2RecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort Db2 recoverable ranges."
        sortBy: Db2RecoverableRangeSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): Db2RecoverableRangeConnection!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Stats for DB2 database."
    reportWorkload: Snappable
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
}

"Paginated list of Db2Database objects."
type Db2DatabaseConnection {
    "Total number of Db2Database objects matching the request arguments."
    count: Int!
    "List of Db2Database objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [Db2DatabaseEdge!]!
    "List of Db2Database objects."
    nodes: [Db2Database!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Db2Database object. This wrapper is used for pagination."
type Db2DatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Db2Database object wrapped by this edge."
    node: Db2Database!
}

"Details of instances related to a Db2 HADR database."
type Db2HadrInstanceInfo {
    "Db2 instance parent for the Db2 HADR database."
    db2Instance: Db2Instance!
    "Role of the HADR database on the specified Db2 instance."
    role: String!
}

"HADR metadata object for a Db2 instance."
type Db2HadrMetadata {
    "Specifies the details of instances related to the specified Db2 HADR database."
    instancesInfoList: [Db2HadrInstanceInfo!]!
}

"Db2 Instance details object."
type Db2Instance implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Id associated with Db2 instance in CDM."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Specifies whether the Db2 instance contains an HADR database."
    containsHadrDatabase: Boolean!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): Db2InstanceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Timestamp when last refresh job got triggered for the Db2 instance."
    lastRefreshTime: DateTime
    "Time stamp of when last metadata sync happened for the Db2 instance."
    lastSyncTime: DateTime
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): Db2InstancePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Uuid of the primary cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Current status for the Db2 instance: OK, WARNING, ERROR or UNKNOWN."
    status: Db2Status!
    "Additional information about the current status of the Db2 instance."
    statusMessage: [String!]!
}

"Paginated list of Db2Instance objects."
type Db2InstanceConnection {
    "Total number of Db2Instance objects matching the request arguments."
    count: Int!
    "List of Db2Instance objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [Db2InstanceEdge!]!
    "List of Db2Instance objects."
    nodes: [Db2Instance!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of Db2InstanceDescendantType objects."
type Db2InstanceDescendantTypeConnection {
    "Total number of Db2InstanceDescendantType objects matching the request arguments."
    count: Int!
    "List of Db2InstanceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [Db2InstanceDescendantTypeEdge!]!
    "List of Db2InstanceDescendantType objects."
    nodes: [Db2InstanceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Db2InstanceDescendantType object. This wrapper is used for pagination."
type Db2InstanceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Db2InstanceDescendantType object wrapped by this edge."
    node: Db2InstanceDescendantType!
}

"Wrapper around the Db2Instance object. This wrapper is used for pagination."
type Db2InstanceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Db2Instance object wrapped by this edge."
    node: Db2Instance!
}

"Paginated list of Db2InstancePhysicalChildType objects."
type Db2InstancePhysicalChildTypeConnection {
    "Total number of Db2InstancePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of Db2InstancePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [Db2InstancePhysicalChildTypeEdge!]!
    "List of Db2InstancePhysicalChildType objects."
    nodes: [Db2InstancePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Db2InstancePhysicalChildType object. This wrapper is used for pagination."
type Db2InstancePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Db2InstancePhysicalChildType object wrapped by this edge."
    node: Db2InstancePhysicalChildType!
}

"Supported in v7.0+"
type Db2InstanceSummary {
    """

    Required. Supported in v7.0+
    List of IDs of databases present in this Db2 instance.
    """
    databaseIds: [String!]!
    "List of HADR database IDs present in this Db2 instance."
    hadrDatabaseIds: [String!]!
    """

    Required. Supported in v7.0+
    v7.0: List of hosts that are a part of this Db2 instance.
    v8.0+: A list of IDs of the hosts that are part of this Db2 instance.
    """
    hostIds: [String!]!
    """

    Supported in v8.0+
    A list of names of the hosts that are part of this Db2 instance.
    """
    hostNames: [String!]!
    """

    Required. Supported in v7.0+
    ID of the Db2 instance.
    """
    id: String!
    """

    Supported in v8.0+
    Specifies whether a Db2 instance is archived.
    """
    isArchived: Boolean
    """

    Required. Supported in v7.0+
    UTC timestamp of the most recent Db2 instance refresh job.
    """
    lastRefreshTime: String!
    """

    Required. Supported in v7.0+
    Name of the Db2 instance.
    """
    name: String!
    """

    Required. Supported in v7.0+
    ID of the CDM cluster that protects the Db2 instance.
    """
    primaryClusterUuid: String!
    """

    Required. Supported in v7.0+
    UTC timestamp of the most recent Db2 instance refresh job.
    """
    protectionDate: String!
    """

    Supported in v8.0+
    List of relic database IDs present in this Db2 instance.
    """
    relicDatabaseIds: [String!]!
    """

    Required. Supported in v7.0+
    SLA Domain ID assigned to the Db2 instance.
    """
    slaDomainId: String!
    """

    Required. Supported in v7.0+
    Type of the SLA Domain assigned to the Db2 instance.
    """
    slaType: String!
    """

    Supported in v7.0+
    Status of the most recent Db2 instance refresh job.
    """
    status: Db2InstanceSummaryStatus!
    """

    Required. Supported in v7.0+
    Status messsage of the most recent Db2 instance refresh job.
    """
    statusMessage: String!
    """

    Required. Supported in v7.0+
    Username provided by the user that will be used while interacting with Db2 system.
    """
    username: String!
}

"Backup file associated with the Db2 log back object."
type Db2LogBackupFile {
    "Size of the db2 log backup."
    backupFileSizeInBytes: Long
    "The ID for the Db2 log back object."
    backupId: String
    "Location of the backup file."
    destinationPath: String
    "End time for log backup."
    endTime: DateTime
}

"Db2 log snapshot object."
type Db2LogSnapshot {
    "App metadata of log snapshots in Db2."
    appMetadata: Db2LogSnapshotAppMetadata
    "The CDM fid of the Db2 snapshot object."
    cdmId: String!
    "UUID of the CDM cluster associated with Db2 workload."
    clusterUuid: UUID!
    "The creation date of the snapshot."
    date: DateTime
    "The Rubrik FID of the Db2 snapshot object."
    fid: String!
    "The internal time stamp of the Db2 snapshot object."
    internalTimestamp: Long!
    "Boolean for archival status of the Db2 snapshot object."
    isArchived: Boolean!
    "The Rubrik fid of the workload on which snapshot was taken."
    workloadId: String!
    "The workload type on which snapshot was taken."
    workloadType: String!
}

"Metadata related to the Db2 log snapshot."
type Db2LogSnapshotAppMetadata {
    "List of Backups for a Db2 log snapshot."
    backups: [Db2LogBackupFile!]
    "The ID for the backup object stored in snapshot table."
    snapshotId: String
}

"Paginated list of Db2LogSnapshot objects."
type Db2LogSnapshotConnection {
    "Total number of Db2LogSnapshot objects matching the request arguments."
    count: Int!
    "List of Db2LogSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [Db2LogSnapshotEdge!]!
    "List of Db2LogSnapshot objects."
    nodes: [Db2LogSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Db2LogSnapshot object. This wrapper is used for pagination."
type Db2LogSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Db2LogSnapshot object wrapped by this edge."
    node: Db2LogSnapshot!
}

"Db2 recoverable range object."
type Db2RecoverableRange {
    "ID of the associated base snapshot."
    baseSnapshotId: String
    "The CDM fid of the Db2 recoverable range object."
    cdmId: String!
    "UUID of the CDM cluster associated with Db2 workload."
    clusterUuid: UUID!
    "The Rubrik FID for the Db2 database associated with the Db2 recoverable range object."
    dbId: String!
    "End time of the Db2 recoverable range object."
    endTime: DateTime
    "The Rubrik FID of the Db2 recoverable range object."
    fid: String!
    "Boolean for archival status of Db2 recoverable range object."
    isArchived: Boolean!
    "Start time of the Db2 recoverable range object."
    startTime: DateTime
}

"Paginated list of Db2RecoverableRange objects."
type Db2RecoverableRangeConnection {
    "Total number of Db2RecoverableRange objects matching the request arguments."
    count: Int!
    "List of Db2RecoverableRange objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [Db2RecoverableRangeEdge!]!
    "List of Db2RecoverableRange objects."
    nodes: [Db2RecoverableRange!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Db2RecoverableRange object. This wrapper is used for pagination."
type Db2RecoverableRangeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Db2RecoverableRange object wrapped by this edge."
    node: Db2RecoverableRange!
}

"Db2 information that is not already available in DBDataBackupFile."
type Db2WorkloadDataBackupFile {
    "Partition number of the backed up file in the database."
    partitionNum: Int!
    "Sequence number of the backed up file in the database."
    sequenceNum: Int!
}

"Any snapshot metadata information specific to Db2 that is not already part of the DBDataSnapshotMetadata structure."
type Db2WorkloadDataSnapshotMetadata {
    "List of serialized InternalFileInstanceInfo instances for all files in the snapshot."
    kvSnapshotFileInstancesInfoList: [String!]!
}

"Represents a DB parameter group in AWS."
type DbParameterGroup {
    "Amazon Resource Name (ARN) of the DB parameter group."
    arn: String!
    "Family name of the DB parameter group."
    family: String!
    "Name of the DB parameter group."
    name: String!
}

"Response for the request to remove AWS cloud account without altering permissions in the cloud account."
type DeleteAwsCloudAccountWithoutCftReply {
    "Contains success response message."
    message: String
}

"AWS Exocompute Configs Delete Response."
type DeleteAwsExocomputeConfigsReply {
    "Deletion status for exocompute configurations."
    deletionStatus: [AwsExocomputeConfigsDeletionStatusType!]!
}

"Response for the request to delete IAM user-based AWS cloud account."
type DeleteAwsIamUserBasedCloudAccountReply {
    "Contains success response message."
    message: String
}

"Response of the operation to delete Exocompute Configuration from the Azure Cloud Account."
type DeleteAzureCloudAccountExocomputeConfigurationsReply {
    "IDs of the Azure Cloud Accounts that could not be deleted."
    deletionFailedIds: [String!]!
    "IDs of the Azure Cloud Accounts that were deleted successfully."
    deletionSuccessIds: [String!]!
}

"Response of the operation to delete Azure Cloud Account."
type DeleteAzureCloudAccountReply {
    "Status of the operation to delete Azure Cloud Account."
    status: [DeleteAzureCloudAccountStatus!]!
}

"Status of the operation to delete Azure Cloud Account."
type DeleteAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Error received during deletion of Azure Cloud Account."
    error: String!
    "Specifies whether the deletion of Azure Cloud Account was successful. When true, the deletion was successful."
    isSuccess: Boolean!
}

"Response of the operation to delete Azure Cloud Account without OAuth."
type DeleteAzureCloudAccountWithoutOauthReply {
    "Status of the operation to delete Azure Cloud Account."
    status: [DeleteAzureCloudAccountStatus!]!
}

type DeleteBlueprintRecoverySpecReply {
    recoverySpecIds: [RecoverySpecId!]!
}

"The Rubrik clusters from which the certificate was successfully deleted."
type DeleteGlobalCertificateReply {
    "The Rubrik clusters from which the certificate was successfully deleted."
    clusterUuids: [UUID!]!
}

"Supported in v7.0+"
type DeleteManagedVolumeReply {
    """

    Supported in v7.0+
    Status of the triggered asynchronous unexport job.
    """
    asyncRequestStatus: AsyncRequestStatus
}

"Responses of operations to delete storage arrays from Rubrik clusters."
type DeleteStorageArraysReply {
    "Delete storage arrays responses."
    responses: [StorageArrayOperationOutputType!]!
}

"Response for the operation to delete vApp snapshot from the Rubrik cluster."
type DeleteVappSnapshotReply {
    "Error message in case of failure."
    errorMessage: String
}

"A list of response objects for the operation to delete vCD snapshots from the Rubrik cluster."
type DeleteVappSnapshotsReply {
    "Delete vApp snapshots responses."
    responses: [DeleteVappSnapshotReply!]!
}

"Response for the operation to delete vCD instance from a Rubrik cluster."
type DeleteVcdInstanceReplyType {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Error message in case of failure."
    errorMessage: String
    "ID of the vCD instance."
    id: String!
}

"A list of response objects for the operations to delete vCD instances from a Rubrik cluster."
type DeleteVcdInstancesReply {
    "Delete vCD instance responses."
    responses: [DeleteVcdInstanceReplyType!]!
}

"DevicePathToVolumeSnapshotId type to take key value input."
type DevicePathToVolumeSnapshotId {
    "Key representing device path."
    key: String!
    "Value representing volume snapshot ID."
    value: String!
}

"DevicePathToVolumeSnapshotIdMap type to take map input."
type DevicePathToVolumeSnapshotIdMap {
    "List of key-value pairs that map device path to volume snapshot."
    devicePathToVolumeSnapshotIdList: [DevicePathToVolumeSnapshotId!]!
}

"""

Recommendation represents a single textual recommendation how to increase the
score for a specific category. Recommendations are derived from a set of
metrics.
"""
type DhrcActiveRecommendation {
    "The category that the recommendation belong to."
    category: DhrcCategory!
    "The time that the recommendation was compiled from the set of metrics."
    compiledAt: DateTime
    "The earliest (oldest) metric used to compile the recommendation."
    earliestMetric: DateTime
    """

    The key uniquely identifies the type of the recommendation. One use-case is
    for translation of the recommendation message.
    """
    key: DhrcRecommendationKey!
    "The textual recommendation compiled by the service, always in English."
    message: String!
    "The translation arguments of the recommendation. Stored as key/value pairs."
    translationArgs: [DhrcKeyValue!]!
    """

    The weight of the issue this recommendation aims to resolve. Heavier means
    the issue is more severe.
    """
    weight: Float!
}

"KeyValue represents a key/value pair."
type DhrcKeyValue {
    "The key of the key/value pair."
    key: String!
    "The value of the key/value pair."
    value: String!
}

"""

Score represent a score for a single category. Scores are calculated from a
set of metrics.
"""
type DhrcScore {
    "The time that the score was calculated."
    calculatedAt: DateTime
    "The category that the score belong to."
    category: DhrcCategory!
    """

    The time of this score. This may differ from the time the score was
    calculated if padding was used to introduce the score.
    """
    date: DateTime
    """

    The time at which the earliest (oldest) metric used to calculate the score
    was collected.
    """
    earliestMetric: DateTime
    "The score value, always between 0 and 100."
    value: Float!
}

"Statistic result for certain file/folder."
type DiffData {
    "Additional information corresponding to the anomaly detected."
    anomalyInfo: AnomalyInfo
    "Number of bytes created under this path."
    bytesCreated: Long!
    "Number of bytes deleted under this path."
    bytesDeleted: Long!
    "Number of bytes modified under this path."
    bytesModified: Long!
    "Number of files created under this path."
    filesCreated: Long!
    "Number of files deleted under this path."
    filesDeleted: Long!
    "Number of files modified under this path."
    filesModified: Long!
    "Boolean indicating whether this file or folder was deleted in this snapshot."
    isDeleted: Boolean!
    "Boolean indicating whether this is a file or folder."
    isFolder: Boolean!
    "Modification time of the inode of the file or folder at this path."
    lastModifiedTime: Long!
    "Mode of the inode of the file or folder at this path."
    mode: Int!
    "Absolute path of the file or folder."
    path: String!
    "Number of suspicious files added under this path."
    suspiciousFilesAdded: Long!
    "Total size of the files under this path."
    totalSize: Long!
}

"Diff fmd result."
type DiffResult {
    "A list of changed files and folders in the snapshot."
    data: [DiffData!]!
    "The date of the previous snapshot."
    previousSnapshotDate: Long!
    "The id of the previous snapshot."
    previousSnapshotId: String!
}

"Archival location disable result."
type DisableTargetReply {
    "Rubrik Security Cloud managed location ID."
    locationId: String!
    "Ownership status of the archival location."
    status: ArchivalLocationStatus!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Status of auto discover job for a NAS system.
"""
type DiscoverNasSystemSummary {
    """

    Required. Supported in v7.0+
    The asynchronous request status of the job that discovers the NAS system.
    """
    nasDiscoverJobStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    ID of the NAS system.
    """
    nasSystemId: String!
}

"Supported in v5.0+"
type DiskInfo {
    "Required. Supported in v5.0+"
    capacityBytes: Long!
    diskStatus: DiskStatus
    isResizable: Boolean
    "Required. Supported in v5.0+"
    path: String!
    "Supported in v5.0+"
    unallocatedBytes: Long
    "Supported in v5.0+"
    usableBytes: Long
}

"Supported in v5.0+"
type DiskStatus {
    "Required. Supported in v5.0+"
    diskType: String!
    "Required. Supported in v5.0+"
    id: String!
    "Required. Supported in v5.0+"
    isDegraded: Boolean!
    "Required. Supported in v5.0+"
    isEncrypted: Boolean!
    "Required. Supported in v5.0+"
    nodeId: String!
    "Required. Supported in v5.0+"
    status: String!
}

type DisplayableValueBoolean implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Boolean
}

type DisplayableValueDateRange implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: PastDurationEnum
}

type DisplayableValueDateTime implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: DateTime
}

type DisplayableValueFloat implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Float
}

type DisplayableValueInteger implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Int
}

type DisplayableValueLong implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Long
}

type DisplayableValueNull implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
}

type DisplayableValueString implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: String
}

"Contains information about the snapshots dissolved from legal hold."
type DissolveLegalHoldReply {
    "List of the snapshot IDs dissolved from  legal hold."
    snapshotIds: [String!]!
}

"Information about the archival location."
type DlsArchivalLocation {
    "ID of the archival location."
    id: UUID!
    "Name of the archival location."
    name: String!
    "Type of target."
    targetType: TargetType
}

type DownloadActiveSlaWithReplicationCsvReply {
    downloadLink: String!
    isActiveSla: Boolean!
}

"Download CDM upgrades report response."
type DownloadCdmUpgradesPdfReply {
    "Download link of the pdf report."
    downloadLink: String!
}

type DownloadCsvReply {
    "Status of queueing a download CSV job."
    isSuccessful: Boolean!
}

"The status of download cloud native files req. It contains the taskchain ID of the download job if succeeded."
type DownloadFilesReply {
    "Taskchain ID of the download job."
    taskchainId: String!
}

"Download job progress information."
type DownloadJobInfo {
    "Event series ID related to download package job."
    eventId: String!
    "Job ID of download package job."
    jobInstanceId: String!
    "Download job progress."
    progress: Float!
    "Time remaining for download job to complete."
    remainingTimeEstimateInSeconds: Long!
    "Status of download package job."
    status: String!
}

"Link to download the report."
type DownloadLink {
    "The link to the report."
    link: String!
}

"Download package response."
type DownloadPackageReply {
    "Download job ID."
    jobId: String!
}

"Start download job request response."
type DownloadPackageReplyWithUuid {
    "Download package job ID."
    jobId: String!
    "Cluster uuid."
    uuid: String!
}

"Download package job status information."
type DownloadPackageStatusReply {
    "Availability of CDM package."
    availability: String!
    "Download job status description."
    description: String!
    "CDM download job information."
    downloadJobInfo: DownloadJobInfo
    "MD5Sum of the CDM package."
    md5Sum: String!
    "Size of CDM package."
    size: Long!
    "CDM upgrade package version."
    version: String!
}

type DownloadResultsCsvReply {
    downloadLink: String!
}

"Response for the operation to download threat hunt result as CSV."
type DownloadThreatHuntCsvReply {
    "Specifies if the download operation is successful."
    isSuccessful: Boolean!
}

"Duplicated vSphere virtual machine."
type DuplicatedVm {
    "The Rubrik cluster for this virtual machine."
    cluster: Cluster!
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "FID of the virtual machine."
    fid: UUID!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The snapshot distribution of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Duration."
type Duration {
    "Duration."
    duration: Int!
    "Unit of duration."
    unit: RetentionUnit!
}

type Ec2Blueprint implements Blueprint & HierarchyObject & HierarchySnappable & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The list of child objects in the workload."
    childConnection: BlueprintChildConnection!
    children: [Ec2InstanceChild!]!
    "AWS Cloud Account of EC2 Blueprint."
    cloudAccount: AwsNativeAccount
    "The cluster from which this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    currentFailoverStatus: AppBlueprintFailoverStatus!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    lastFailoverStatus: AppBlueprintLastFailoverStatus!
    lastFailoverTimeMillisOpt: Long
    "last test failover"
    lastTestFailover: Failover
    lastTestFailoverStatus: AppBlueprintLastFailoverStatus!
    lastTestFailoverTimeMillisOpt: Long
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: PolarisSnapshot
    "The newest snapshot ready for failover."
    newestFailoverReadySnapshot(isTestFailover: Boolean!): PolarisSnapshot
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "Number of child workloads of the Blueprint."
    numChildren: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    rmStatus: AppBlueprintRmStatus!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    status: AppBlueprintStatus!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

type Ec2BlueprintChildFailoverInstance implements BlueprintFailoverInstance {
    snappableId: String!
}

type Ec2InstanceChild implements BlueprintChild {
    bootPriority: Int!
    "Failover instance of child workload."
    failoverInstance: Ec2BlueprintChildFailoverInstance
    fid: UUID!
    "RecoverySpec of child snappable."
    recoverySpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): RecoverySpec
    "ResourceSpec of child snappable."
    resourceSpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): Ec2InstanceResourceSpec
    "The child snappable."
    snappable: AwsNativeEc2Instance
    snappableType: ObjectTypeEnum!
}

type Ec2InstanceNic {
    key: String!
    secGroup: SnappableSecurityGroup
    subnet: SnappableSubnet
}

type Ec2InstanceRecoverySpec implements RecoverySpec {
    availabilityZone: String
    awsNicSpecs: [AwsVmNicSpec!]!
    awsVolumeSpecs: [AwsVmVolumeSpec!]!
    dedicatedHostId: String
    hostAffinity: String
    instanceTypeId: Int!
    instanceTypeName: String!
    keyName: String
    placementGroup: String
    "Recovery point of the workload."
    recoveryPointOpt: Long
    tenancy: AwsInstanceTenancy!
    userData: String
    version: Long!
}

type Ec2InstanceResourceSpec implements ResourceSpec {
    ec2InstanceNics: [Ec2InstanceNic!]!
    ec2InstanceVolumeSpecs: [Ec2InstanceVolume!]!
    instanceType: String!
    instanceTypeMemoryMbs: Int!
    instanceTypeVcpus: Int!
    isArchived: Boolean!
    nativeId: String!
    osType: String!
    "Recovery point of the workload."
    recoveryPointOpt: Long
    region: String!
    snappableId: String!
    snappableName: String!
    snapshotId: String!
}

type Ec2InstanceVolume {
    key: String!
    sizeGbs: Int!
}

"Supported in v5.1+"
type EffectiveSlaHolder {
    """

    Required. Supported in v5.1+
    v5.1: ID of the effective SLA domain
    v5.2+: The ID of the SLA Domain that controls the protection of the Rubrik object.
    """
    effectiveSlaDomainId: String!
    """

    Required. Supported in v5.1+
    v5.1: name of the effective SLA domain
    v5.2+: The name of the SLA Domain that controls the protection of the Rubrik object.
    """
    effectiveSlaDomainName: String!
    """

    Supported in v5.1+
    v5.1: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    v5.2+: Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v5.1+
    v5.1: ID of the object from which the effective SLA domain is inherited.
    v5.2+: The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.1+
    v5.1: Name of the object from which the effective SLA domain is inherited.
    v5.2+: The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
    """
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA Domain is a Retention Lock SLA Domain.
    v5.2+: Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
}

"Elastic storage configuration for CCES (Cloud Cluster with Elastic Storage)."
type ElasticStorageConfig {
    "Specifies whether the Cloud Cluster is using immutable cloud storage."
    isImmutable: Boolean!
    "Rubrik generated ID of the object store location."
    locationId: String!
    "Object Store location (bucket name on S3 and container on Azure) name."
    locationName: String!
}

"Status of 'enable automatic upload' service on certain cluster."
type EnableAutomaticFmdUploadReply {
    "The cluster UUID."
    clusterId: String!
    """

    Specifies whether automatic snapshot metadata (FMD) upload is enabled
    for the cluster or not.
    """
    enabled: Boolean!
}

"List of workload IDs classified based on success or failure of enabling or disabling application-consistent protection for virtual machines."
type EnableDisableAppConsistencyReply {
    "List of workload IDs for which enabling or disabling app-consistency failed."
    failedWorkloadIds: [UUID!]!
    "List of workload IDs for which enabling or disabling app-consistency succeeded."
    successWorkloadIds: [UUID!]!
}

"Status of 'enable lambda service' on certain cluster."
type EnableLambdaForSnappableReply {
    "Specifies whether the snapshot metadata (diff fmd) is enabled."
    diffFmdEnabled: Boolean!
    "Specifies whether the full fmd is enabled or not."
    fullFmdEnabled: Boolean!
    "The workload fid associated with the request."
    snappableFid: String!
}

"Archival location enable result."
type EnableTargetReply {
    "Rubrik Security Cloud managed location ID."
    locationId: String!
    "Ownership status of the archival location."
    status: ArchivalLocationStatus!
}

"A recurrence range with a start and end (e.g. repeat the pattern from 7/29/2019 until 4/13/2022)."
type EndDateRecurrenceRange {
    "The ending date of the recurrence."
    endDate: DateTime!
    "The starting date of the recurrence."
    startDate: DateTime!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Response for end managed volume snapshot.
"""
type EndManagedVolumeSnapshotReply {
    """

    Supported in v7.0+
    Status of the asynchronous request that was initiated for the Managed Volume End Snapshot job.
    """
    asyncRequestStatus: AsyncRequestStatus
    "Summary of the Managed Volume snapshot."
    managedVolumeSnapshotSummary: ManagedVolumeSnapshotSummary
}

"Envoy registration token details."
type EnvoyRegistrationToken {
    "Token expiration time in `yyyy-MM-dd'T'HH:mm:ss.SSSZ` format."
    expiration: String!
    "ID of the tenant network in which Rubrik Envoy is to be registered."
    tenantNetworkId: String!
    "Encoded token to access Rubrik CDM APIs."
    token: String!
}

"The status code and message describing an error."
type ErrorInfo {
    "The message describing the error."
    errorMessage: String!
    "The error's three digit status code."
    statusCode: Int!
}

"A user's EULA acceptance state."
type EulaState {
    "Specifies whether a user has accepted the EULA."
    isAccepted: Boolean!
    "Specifies whether PactSafe EULA should be used."
    isPactsafeEnabled: Boolean!
    "Specifies whether PactSafe EULA version 2 should be used."
    isPactsafeV2Enabled: Boolean!
}

"An Event Digest."
type EventDigest {
    "Account related to the event digest."
    account: String!
    "ID of the event digest."
    digestId: Int!
    "Name of the event digest."
    digestName: String!
    "Event digest configuration."
    eventDigestConfigJson: String!
    "Frequency, in hours, with which the event digests are sent."
    frequency: Int!
    "Specifies whether to include audits in the event digest."
    includeAudits: Boolean!
    "Specifies whether to include events in the event digest."
    includeEvents: Boolean!
    "Specifies whether to send the event digest immediately."
    isImmediate: Boolean!
    "User ID of the recipient."
    recipientUserId: String!
}

"Exchange DAG details object."
type ExchangeDag implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Backup Preference for databases present in the Exchange Dag."
    backupPreference: String!
    "ID associated with the Exchange DAG in CDM."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): ExchangeDagDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "UUID of the primary cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Number of hosts associated with the Exchange DAG."
    totalHosts: Int!
}

"Paginated list of ExchangeDag objects."
type ExchangeDagConnection {
    "Total number of ExchangeDag objects matching the request arguments."
    count: Int!
    "List of ExchangeDag objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ExchangeDagEdge!]!
    "List of ExchangeDag objects."
    nodes: [ExchangeDag!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of ExchangeDagDescendantType objects."
type ExchangeDagDescendantTypeConnection {
    "Total number of ExchangeDagDescendantType objects matching the request arguments."
    count: Int!
    "List of ExchangeDagDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ExchangeDagDescendantTypeEdge!]!
    "List of ExchangeDagDescendantType objects."
    nodes: [ExchangeDagDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ExchangeDagDescendantType object. This wrapper is used for pagination."
type ExchangeDagDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ExchangeDagDescendantType object wrapped by this edge."
    node: ExchangeDagDescendantType!
}

"Wrapper around the ExchangeDag object. This wrapper is used for pagination."
type ExchangeDagEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ExchangeDag object wrapped by this edge."
    node: ExchangeDag!
}

"Supported in v8.0+"
type ExchangeDagSummary {
    backupPreference: ExchangeBackupPreference!
    """

    Required. Supported in v8.0+
    SLA Domain ID assigned to the Exchange DAG.
    """
    configuredSlaDomainId: String!
    """

    Required. Supported in v8.0+
    Type of the SLA Domain assigned to the Exchange DAG.
    """
    configuredSlaType: String!
    """

    Required. Supported in v8.0+
    ID of the Exchange DAG.
    """
    id: String!
    """

    Required. Supported in v8.0+
    Name of the Exchange DAG.
    """
    name: String!
}

"Exchange Database details object."
type ExchangeDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & ExchangeDagDescendantType & ExchangeServerDescendantType & HierarchyObject {
    "Number of database copies which are active."
    activeCopies: Int!
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID associated with the Exchange Database in CDM."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Exchange Server parent of the database."
    exchangeServer: ExchangeServer!
    "The FID of the hierarchy object."
    id: UUID!
    "Boolean flag indicating if the database is disconnected and has snapshots present in CDM cluster."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "UUID of the primary cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Total number of database copies."
    totalCopies: Int!
}

"Paginated list of ExchangeDatabase objects."
type ExchangeDatabaseConnection {
    "Total number of ExchangeDatabase objects matching the request arguments."
    count: Int!
    "List of ExchangeDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ExchangeDatabaseEdge!]!
    "List of ExchangeDatabase objects."
    nodes: [ExchangeDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ExchangeDatabase object. This wrapper is used for pagination."
type ExchangeDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ExchangeDatabase object wrapped by this edge."
    node: ExchangeDatabase!
}

"Exchange live mount."
type ExchangeLiveMount {
    "CDM ID of the live mount."
    cdmId: UUID!
    "Cluster of the live mount."
    cluster: Cluster!
    "Fid of the live mount."
    id: UUID!
    "Describes if the live mount is ready."
    isReady: Boolean!
    "NodeId of the node with the live mount."
    nodeCompositeId: String!
    "Node Ip of the node with the live mount."
    nodeIp: String!
    "Source database of the live mount."
    sourceDatabase: ExchangeDatabase
    "Source snapshot of the live mount."
    sourceSnapshot: CdmSnapshot!
}

"Paginated list of ExchangeLiveMount objects."
type ExchangeLiveMountConnection {
    "Total number of ExchangeLiveMount objects matching the request arguments."
    count: Int!
    "List of ExchangeLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ExchangeLiveMountEdge!]!
    "List of ExchangeLiveMount objects."
    nodes: [ExchangeLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ExchangeLiveMount object. This wrapper is used for pagination."
type ExchangeLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ExchangeLiveMount object wrapped by this edge."
    node: ExchangeLiveMount!
}

"Exchange Server details object."
type ExchangeServer implements CdmHierarchyObject & HierarchyObject & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID associated with the Exchange Server in CDM."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): ExchangeServerDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Dag parent for Exchange Server."
    exchangeDag: ExchangeDag
    "Indicates that the underlying host has conflicts with Exchange Server as a result of its volume group backup."
    hasVgConflict: Boolean!
    "Host parent for the Exchange Server."
    host: PhysicalHost!
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "UUID of the primary cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Number of database copies present in the Exchange Server."
    totalDbs: Int!
    "Version of the Exchange Server."
    version: String!
    "Indicates that the user has resolved the conflict between Exchange Server and volume group backup running on the host."
    vgConflictResolvedByUser: Boolean!
}

"Paginated list of ExchangeServer objects."
type ExchangeServerConnection {
    "Total number of ExchangeServer objects matching the request arguments."
    count: Int!
    "List of ExchangeServer objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ExchangeServerEdge!]!
    "List of ExchangeServer objects."
    nodes: [ExchangeServer!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of ExchangeServerDescendantType objects."
type ExchangeServerDescendantTypeConnection {
    "Total number of ExchangeServerDescendantType objects matching the request arguments."
    count: Int!
    "List of ExchangeServerDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ExchangeServerDescendantTypeEdge!]!
    "List of ExchangeServerDescendantType objects."
    nodes: [ExchangeServerDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ExchangeServerDescendantType object. This wrapper is used for pagination."
type ExchangeServerDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ExchangeServerDescendantType object wrapped by this edge."
    node: ExchangeServerDescendantType!
}

"Wrapper around the ExchangeServer object. This wrapper is used for pagination."
type ExchangeServerEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ExchangeServer object wrapped by this edge."
    node: ExchangeServer!
}

"Details of an existing user."
type ExistingUser {
    "ID of the user."
    id: String!
    "Specifies whether the user is an org admin."
    isOrgAdmin: Boolean!
    "Specifies user details."
    user: User!
}

"Describes the Exocompute health check status."
type ExocomputeHealthCheckStatus {
    "Reason for the health check failure."
    failureReason: String!
    "Time of last update for the health check status."
    lastUpdatedAt: DateTime
    "Status of the health check."
    status: ExocomputeHealthCheckStatusValue!
    "ID for the health check status job."
    taskchainId: String!
}

type ExocomputeStorageAccountIds {
    ids: [String!]!
}

"Specs required for Export URL."
type ExportUrlSpecs {
    "Name of the blob."
    blobName: String!
    "SAS URI of the blob."
    blobSasUri: String!
    "Polaris account of the user."
    polarisAccount: String!
}

"A protection task."
type Failover {
    "ID of the associated appblueprint."
    appBlueprintId: UUID!
    "Name of the associated appblueprint."
    appBlueprintName: String!
    "Duration of the Orchestrated Application Recovery failover job, in milliseconds."
    duration: Long
    "The timestamp that the job ends."
    endTime: DateTime
    "The failover job status."
    failoverStatus: FailoverStatusEnum!
    "The type of the failover job."
    failoverType: FailoverTypeEnum!
    "ID of the failover job."
    id: String!
    "The status of the last test."
    lastTestStatus: LastTestStatusEnum
    "The timestamp of the last test."
    lastTestTime: DateTime
    "The report for the failover job."
    report(
        "failover report ID"
        failoverReportId: String!
    ): FailoverReport
    "Source of the workload associated with this Orchestrated Application Recovery failover job."
    source: String!
    "The timestamp that the job starts."
    startTime: DateTime!
    "Target site of the Orchestrated Application Recovery failover job."
    targetSite: String!
    taskchainId: UUID!
}

type FailoverChart {
    focus: ReportFocusEnum!
    groupBy: [FailoverGroupByEnum!]
    name: String!
}

"Failover cluster App."
type FailoverClusterApp implements CdmHierarchyObject & FailoverClusterTopLevelDescendantType & HierarchyObject & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the CDM cluster."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): FailoverClusterAppDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "ID of the failover cluster."
    failoverClusterId: String!
    "Failover Rubrik cluster type."
    failoverClusterType: String
    "Get the host failover cluster app object."
    hostFailoverCluster: HostFailoverCluster!
    "The FID of the hierarchy object."
    id: UUID!
    "Boolean variable denoting if archived."
    isArchived: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): FailoverClusterAppPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Connectivity status of failover cluster."
    status: FailoverClusterStatus
    "Virtual IP addresses."
    vips: [String!]!
}

"Supported in v5.2+"
type FailoverClusterAppConfig {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Required. Supported in v5.2+
    The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
    """
    failoverClusterAppSource: FailoverClusterAppSource
    """

    Required. Supported in v5.2+
    Cluster ID of the failover cluster app.
    """
    failoverClusterId: String!
    failoverClusterType: FailoverClusterType!
    """

    Required. Supported in v5.2+
    Name of the failover cluster app.
    """
    name: String!
}

"Paginated list of FailoverClusterApp objects."
type FailoverClusterAppConnection {
    "Total number of FailoverClusterApp objects matching the request arguments."
    count: Int!
    "List of FailoverClusterApp objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverClusterAppEdge!]!
    "List of FailoverClusterApp objects."
    nodes: [FailoverClusterApp!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of FailoverClusterAppDescendantType objects."
type FailoverClusterAppDescendantTypeConnection {
    "Total number of FailoverClusterAppDescendantType objects matching the request arguments."
    count: Int!
    "List of FailoverClusterAppDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverClusterAppDescendantTypeEdge!]!
    "List of FailoverClusterAppDescendantType objects."
    nodes: [FailoverClusterAppDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverClusterAppDescendantType object. This wrapper is used for pagination."
type FailoverClusterAppDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverClusterAppDescendantType object wrapped by this edge."
    node: FailoverClusterAppDescendantType!
}

"Wrapper around the FailoverClusterApp object. This wrapper is used for pagination."
type FailoverClusterAppEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverClusterApp object wrapped by this edge."
    node: FailoverClusterApp!
}

"Paginated list of FailoverClusterAppPhysicalChildType objects."
type FailoverClusterAppPhysicalChildTypeConnection {
    "Total number of FailoverClusterAppPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of FailoverClusterAppPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverClusterAppPhysicalChildTypeEdge!]!
    "List of FailoverClusterAppPhysicalChildType objects."
    nodes: [FailoverClusterAppPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverClusterAppPhysicalChildType object. This wrapper is used for pagination."
type FailoverClusterAppPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverClusterAppPhysicalChildType object wrapped by this edge."
    node: FailoverClusterAppPhysicalChildType!
}

"Supported in v5.2+"
type FailoverClusterAppSource {
    """

    Supported in v5.2+
    Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
    """
    nodeOrders: [FailoverClusterNodeOrder!]!
    "Virtual IP addresses of the failover cluster."
    vips: [String!]!
    """

    Supported in v5.3+
    Virtual IP addresses of the failover cluster.
    """
    virtualIps: [String!]!
}

"Supported in v5.2+"
type FailoverClusterAppSummary {
    connectionStatus: FailoverClusterAppConnectionStatus!
    effectiveSlaHolder: EffectiveSlaHolder
    failoverClusterAppConfig: FailoverClusterAppConfig
    """

    Supported in v5.3+
    The failover cluster name of the failover cluster app. The failover cluster is a group of hosts that provides high availability for running failover clustered applications.
    """
    failoverClusterName: String
    """

    Required. Supported in v5.2+
    ID assigned to the failover cluster app.
    """
    id: String!
    operatingSystemType: FailoverClusterOsType
    "Required. Supported in v5.2+"
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    slaAssignment: SlaAssignment
}

"Supported in v5.2+"
type FailoverClusterDetail {
    failoverClusterSummary: FailoverClusterSummary
    """

    Required. Supported in v5.2+
    Count of the number of failover cluster apps.
    """
    numApps: Int!
    """

    Required. Supported in v5.2+
    Count of the number of nodes on the failover cluster.
    """
    numNodes: Int!
}

"Supported in v5.2+"
type FailoverClusterNode {
    connectionStatus: FailoverClusterNodeConnectionStatus!
    """

    Required. Supported in v5.2+
    ID of the node in the failover cluster.
    """
    id: String!
    """

    Required. Supported in v5.2+
    Name of the node in the failover cluster.
    """
    name: String!
    """

    Supported in v5.3+
    Operating system of the node in the failover cluster.
    """
    operatingSystem: String
}

"Supported in v5.2+"
type FailoverClusterNodeOrder {
    """

    Required. Supported in v5.2+
    ID of the failover cluster node.
    """
    nodeId: String!
    """

    Supported in v5.3+
    The name of the failover cluster node.
    """
    nodeName: String
    """

    Required. Supported in v5.2+
    An integer that specifies the place occupied by this node in the failover cluster app backup order.
    """
    order: Int!
}

"The connection status of a failover cluster."
type FailoverClusterStatus {
    "Specifies connectivity status of failover cluster."
    connectivity: FailoverClusterConnectivityStatus!
    "Specifies the timestamp in milliseconds."
    timestampMillis: DateTime
}

"Supported in v5.2+"
type FailoverClusterSummary {
    connectionStatus: FailoverClusterConnectionStatus!
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Required. Supported in v5.2+
    ID assigned to the failover cluster.
    """
    id: String!
    """

    Required. Supported in v5.2+
    Cluster name assigned to the failover cluster.
    """
    name: String!
    """

    Required. Supported in v5.2+
    Details of the nodes of this failover cluster.
    """
    nodes: [FailoverClusterNode!]!
    operatingSystemType: FailoverClusterOsType
    "Required. Supported in v5.2+"
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    slaAssignment: SlaAssignment
}

"Paginated list of FailoverClusterTopLevelDescendantType objects."
type FailoverClusterTopLevelDescendantTypeConnection {
    "Total number of FailoverClusterTopLevelDescendantType objects matching the request arguments."
    count: Int!
    "List of FailoverClusterTopLevelDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverClusterTopLevelDescendantTypeEdge!]!
    "List of FailoverClusterTopLevelDescendantType objects."
    nodes: [FailoverClusterTopLevelDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverClusterTopLevelDescendantType object. This wrapper is used for pagination."
type FailoverClusterTopLevelDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverClusterTopLevelDescendantType object wrapped by this edge."
    node: FailoverClusterTopLevelDescendantType!
}

"Paginated list of Failover objects."
type FailoverConnection {
    "Total number of Failover objects matching the request arguments."
    count: Int!
    "List of Failover objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverEdge!]!
    "List of Failover objects."
    nodes: [Failover!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Failover object. This wrapper is used for pagination."
type FailoverEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Failover object wrapped by this edge."
    node: Failover!
}

"The Failover Event for a Blueprint failover."
type FailoverEvent {
    "The message returned from the activity series."
    message: String!
    "The activity series sequence number for the event."
    seq: Int!
    "The start time of the activity series event."
    startTime: Long!
    "The status of the activity series event."
    status: String!
}

"Appflows failover jobs data with groupby info applied to it."
type FailoverGroupBy {
    "Paginated appflows failover jobs data."
    failoverConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort appflows failover jobs by field."
        sortBy: FailoverSortByEnum = AppBlueprintName,
        "failover jobs sort order."
        sortOrder: SortOrder = DESC
    ): FailoverConnection!
    failoverGroupBy(
        "group appflows failover jobs by a field."
        groupBy: FailoverGroupByEnum!
    ): [FailoverGroupBy!]!
    "The data groupby info."
    groupByInfo: FailoverGroupByInfo!
}

"Paginated list of FailoverGroupBy objects."
type FailoverGroupByConnection {
    "Total number of FailoverGroupBy objects matching the request arguments."
    count: Int!
    "List of FailoverGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverGroupByEdge!]!
    "List of FailoverGroupBy objects."
    nodes: [FailoverGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverGroupBy object. This wrapper is used for pagination."
type FailoverGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverGroupBy object wrapped by this edge."
    node: FailoverGroupBy!
}

"Failover job reports for Blueprints."
type FailoverJobReport {
    "The ID of the Blueprint."
    blueprintId: UUID!
    "Name of the Blueprint."
    blueprintName: String!
    "The elapsed time of the failover."
    elapsedTime: Long!
    "The end time of the failover."
    endTime: Long!
    "The job ID for the failover."
    jobId: String!
    "The job type."
    jobType: String!
    "IDs of the workload that are part of the recovery."
    objectIds: [String!]!
    "The progress percentage for the failover."
    progress: Float!
    "Name given to the recovery."
    recoveryName: String!
    "Name of the Recovery Plan."
    recoveryPlanName: String!
    "The start time for the failover."
    startTime: Long!
    "The status of the failover."
    status: String!
    "The specific steps for the failover."
    steps: [FailoverStep!]!
}

"Paginated list of FailoverJobReport objects."
type FailoverJobReportConnection {
    "Total number of FailoverJobReport objects matching the request arguments."
    count: Int!
    "List of FailoverJobReport objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverJobReportEdge!]!
    "List of FailoverJobReport objects."
    nodes: [FailoverJobReport!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverJobReport object. This wrapper is used for pagination."
type FailoverJobReportEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverJobReport object wrapped by this edge."
    node: FailoverJobReport!
}

"A Recovery Plan failover job status response."
type FailoverJobStatusReply {
    "Recovery Plan job error."
    error: String!
    "Recovery Plan job ID."
    jobId: Long!
    "Recovery Plan ID."
    recoveryPlanId: String!
    "Recovery Plan taskchain ID."
    taskchainId: String!
}

"Failover report."
type FailoverReport {
    expireTime: DateTime!
    id: String!
    reportUrl: String
    "status of the failover report"
    status: AppflowsBlueprintFailoverReportStatusEnum!
}

"All source sites."
type FailoverSource {
    "Source of the workload associated with this Orchestrated Application Recovery failover job."
    source: String!
}

"Paginated list of FailoverSource objects."
type FailoverSourceConnection {
    "Total number of FailoverSource objects matching the request arguments."
    count: Int!
    "List of FailoverSource objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverSourceEdge!]!
    "List of FailoverSource objects."
    nodes: [FailoverSource!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverSource object. This wrapper is used for pagination."
type FailoverSourceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverSource object wrapped by this edge."
    node: FailoverSource!
}

type FailoverStatus {
    enumValue: FailoverStatusEnum!
}

"The specific failover step for a failover job."
type FailoverStep {
    "The elapsed time for the specific failover step."
    elapsedTime: Long!
    "The latest event message for the specific failover step."
    message: String!
    "The progress percentage for the specific failover step."
    progress: Float!
    "The sequence number for the specific failover step."
    seq: Int!
    "The start time for the specific failover step."
    startTime: Long!
    "The status of the specific failover step."
    status: String!
    "The sub-steps that belong to the specific failover step."
    subSteps: [FailoverSubStep!]!
}

"The specific failover sub-step for a step within a failover job."
type FailoverSubStep {
    "The events that occured within the specific failover sub-step."
    events: [FailoverEvent!]!
    "The latest event message for the specific failover sub-step."
    message: String!
    "The sequence number for the specific failover sub-step."
    seq: Int!
}

type FailoverTable {
    focus: ReportFocusEnum!
    groupBy: [FailoverGroupByEnum!]
    name: String!
    selectedColumns: [FailoverTableColumnEnum!]!
    sortBy: FailoverSortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

"All target sites."
type FailoverTargetSite {
    "Target site of the Orchestrated Application Recovery failover job."
    targetSite: String!
}

"Paginated list of FailoverTargetSite objects."
type FailoverTargetSiteConnection {
    "Total number of FailoverTargetSite objects matching the request arguments."
    count: Int!
    "List of FailoverTargetSite objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FailoverTargetSiteEdge!]!
    "List of FailoverTargetSite objects."
    nodes: [FailoverTargetSite!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FailoverTargetSite object. This wrapper is used for pagination."
type FailoverTargetSiteEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FailoverTargetSite object wrapped by this edge."
    node: FailoverTargetSite!
}

type FailoverType {
    enumValue: FailoverTypeEnum!
}

"Contains the failure details for the Rubrik Backup Service connectivity."
type Failure {
    "Details of the error that occurred when connecting to the Rubrik Backup Service."
    error: String!
    "Rubrik Backup Service connectivity checks were performed on Workload ID."
    snappableId: String!
}

"Fake data."
type FakeData {
    data: String!
}

"Paginated list of FakeData objects."
type FakeDataConnection {
    "Total number of FakeData objects matching the request arguments."
    count: Int!
    "List of FakeData objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FakeDataEdge!]!
    "List of FakeData objects."
    nodes: [FakeData!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FakeData object. This wrapper is used for pagination."
type FakeDataEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FakeData object wrapped by this edge."
    node: FakeData!
}

"Cluster version support for feature details."
type FeatureCdmVersionReply {
    "Flag denoting feature support."
    isSupported: Boolean!
}

"Feature specific details for a cloud account."
type FeatureDetail {
    "IAM user access key for feature. This field has a non-empty value only for accounts with an IAM user credential provider."
    accessKey: String
    "Details for authentication server-based cloud accounts. This field is only applicable to the accounts in AWS DCA and LCK regions."
    authServerDetail: AwsAuthServerDetail
    "AWS regions. The list will be non-empty for cloud accounts on AWS GovCloud and commercial clouds."
    awsRegions: [AwsCloudAccountRegion!]!
    "Feature enum."
    feature: CloudAccountFeature!
    "Role ARN for feature. This field has a non-empty value only for CFT-based accounts."
    roleArn: String!
    "Stack ARN for feature. This field has a non-empty value only for CFT-based accounts."
    stackArn: String!
    "Feature status for a cloud account."
    status: CloudAccountStatus!
    "User ARN for feature. This field has a non-empty value only for accounts with an IAM user credential provider."
    userArn: String
}

"A flag with a dynamically computed value."
type FeatureFlag {
    "Name of the flag."
    name: FeatureFlagName!
    "Computed value of this flag."
    variant: String
}

"A collection of all feature flags."
type FeatureFlagAll {
    "List of flags."
    flags: [FeatureFlag!]!
}

"Minimum cluster version required for feature set details."
type FeatureListMinimumCdmVersionReply {
    "Minimum cluster version required."
    minimumVersion: String!
}

"Feature along with permissions serialized in JSON format."
type FeaturePermission {
    "Feature name, for example, CLOUD_NATIVE_PROTECTION, CLOUD_NATIVE_ARCHIVAL."
    feature: CloudAccountFeature!
    "The permissions required for supporting the feature given by the feature field."
    permissionJson: String!
    "Feature permission version."
    version: Int!
}

"Status of the Federated Access feature for the specified account."
type FederatedLoginStatus {
    "Specifies whether Federated Access is enabled."
    enabled: Boolean!
    "Specifies whether UI should display the inventory cards after Federated login."
    inventoryCardEnabled: Boolean!
}

type FileAccessResult {
    accessType: ActivityAccessType!
    directory: String!
    filename: String!
    nativePath: String!
    numAccesses: Int!
}

"Details of a particular file."
type FileDetails {
    "Name of the file."
    fileName: String!
}

type FileResult {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    directory: String!
    errorCode: AnalyzerErrorCode!
    filename: String!
    filesWithHits: Hits
    hits: Hits!
    lastAccessTime: Long!
    lastModifiedTime: Long!
    mode: DataGovFileMode!
    nativePath: String!
    numActivities: Long!
    numActivitiesBreakdown: [ActivityResult!]!
    numActivitiesDelta: Long!
    numDescendantErrorFiles: Long!
    numDescendantFiles: Int!
    numDescendantFolders: Long!
    numDescendantSkippedExtFiles: Long!
    numDescendantSkippedSizeFiles: Long!
    openAccessFiles: Hits
    openAccessFilesWithHits: Hits
    openAccessFolders: Hits
    openAccessStaleFiles: Hits
    openAccessType: OpenAccessType!
    owner: String!
    paginationId: String!
    size: Long!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTimestamp: Long!
    staleFiles: Hits
    staleFilesWithHits: Hits
    stalenessType: StalenessType!
    stdPath: String!
}

"Paginated list of FileResult objects."
type FileResultConnection {
    "Total number of FileResult objects matching the request arguments."
    count: Int!
    "List of FileResult objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FileResultEdge!]!
    "List of FileResult objects."
    nodes: [FileResult!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FileResult object. This wrapper is used for pagination."
type FileResultEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FileResult object wrapped by this edge."
    node: FileResult!
}

"Supported in v5.0+"
type FileVersion {
    """

    Supported in v5.0+
    The type of file, either a regular file or a directory.
    """
    fileMode: String
    "Supported in v5.0+"
    lastModified: String
    "Supported in v5.0+"
    size: Long
    """

    Supported in v5.0+
    The snapshot this file belongs to.
    """
    snapshotId: String
    """

    Supported in v5.0+
    The location where the file is stored, either in the cloud or locally.
    """
    source: String
}

"Supported in v5.0+"
type FilesetArraySpec {
    """

    Supported in v5.0+
    ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
    """
    proxyHostId: String
}

"Supported in v5.0+"
type FilesetDetail {
    "Supported in v5.0+"
    archiveStorage: Long
    "Supported in v5.0+"
    archivedSnapshotCount: Int
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    filesetSummary: FilesetSummary
    filesetUpdate: FilesetUpdate
    "Supported in v5.0+"
    localStorage: Long
    """

    Supported in v5.0+
    Script to run after backup of this Fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this Fileset starts.
    """
    preBackupScript: String
    "Supported in v5.0+"
    protectionDate: DateTime
    "Required. Supported in v5.0+"
    snapshotCount: Int!
    "Supported in v5.0+"
    snapshots: [FilesetSnapshotSummary!]!
}

"Supported in v5.0+"
type FilesetOptions {
    """

    Supported in v5.0+
    Include or exclude hidden folders inside locally-mounted remote file systems from backups.
    """
    allowBackupHiddenFoldersInNetworkMounts: Boolean
    """

    Supported in v5.0+
    Include or exclude locally-mounted remote file systems from backups.
    """
    allowBackupNetworkMounts: Boolean
    """

    Supported in v5.0+
    Use VSS during Windows backups.
    """
    useWindowsVss: Boolean
}

"Supported in v5.0+"
type FilesetSnapshotDetail {
    filesetSnapshotSummary: FilesetSnapshotSummary
    "Required. Supported in v5.0+"
    lastModified: String!
    "Required. Supported in v5.0+"
    size: Long!
    "Supported in v5.0+"
    verbose: FilesetSnapshotVerbose
}

"Supported in v5.0+"
type FilesetSnapshotSummary {
    baseSnapshotSummary: BaseSnapshotSummary
    "Supported in v8.0+"
    errorsCollected: Long
    "Supported in v5.0+"
    fileCount: Long
    "Required. Supported in v5.0+"
    filesetName: String!
    "Supported in v5.1+"
    snapdiffUsed: Boolean
}

"Supported in v5.0+"
type FilesetSnapshotVerbose {
    """

    Required. Supported in v5.0+
    Whether or not the fileset snapshot has fingerprint info.
    """
    hasFingerprint: Boolean!
    """

    Required. Supported in v5.0+
    List a partition paths for the fileset snapshot.
    """
    partitionPaths: [String!]!
}

"Supported in v5.0+"
type FilesetSummary {
    "Supported in v5.0+"
    arraySpec: FilesetArraySpec
    """

    Supported in v5.0+
    v5.0: The ID of the effective SLA domain for this Fileset
    v5.1+: The ID of the effective SLA Domain for this fileset.
    """
    effectiveSlaDomainId: String
    """

    Supported in v5.0+
    v5.0: The name of the effective SLA domain for this Fileset
    v5.1+: The name of the effective SLA Domain for this fileset.
    """
    effectiveSlaDomainName: String
    """

    Supported in v5.0+
    v5.0: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    v5.1+: Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v5.1+
    A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
    """
    enableHardlinkSupport: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
    """
    enableSymlinkResolution: Boolean
    "Supported in v5.0+"
    exceptions: [String!]!
    "Supported in v5.0+"
    excludes: [String!]!
    """

    Supported in v5.2+
    ID of the failover cluster app.
    """
    failoverClusterAppId: String
    """

    Supported in v5.3+
    The name of the failover cluster app.
    """
    failoverClusterAppName: String
    filesetOptions: FilesetOptions
    "Supported in v5.0+"
    hostId: String
    "Required. Supported in v5.0+"
    hostName: String!
    "Required. Supported in v5.0+"
    includes: [String!]!
    """

    Supported in v5.1+
    An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
    v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
    """
    isPassthrough: Boolean
    "Required. Supported in v5.0+"
    isRelic: Boolean!
    "Supported in v5.0+"
    operatingSystemType: String
    """

    Supported in v5.2+
    v5.2: Describes any pending SLA Domain assignment to this object.
    v5.3+: Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    "Supported in v5.0+"
    shareId: String
    slaAssignable: SlaAssignable
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
    "Required. Supported in v5.0+"
    templateId: String!
    "Required. Supported in v5.0+"
    templateName: String!
}

"Fileset template."
type FilesetTemplate implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Boolean variable specifying if hidden folders can be backed up."
    allowBackupHiddenFoldersInNetworkMounts: Boolean!
    "Boolean variable denoting if network mounts can be backed up."
    allowBackupNetworkMounts: Boolean!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Error handling for backup script."
    backupScriptErrorHandling: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): FilesetTemplateDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Exceptions for backup of fileset."
    exceptions: [String!]!
    "Paths excluded in fileset template."
    excludes: [String!]!
    "The FID of the hierarchy object."
    id: UUID!
    "Paths included in fileset template."
    includes: [String!]!
    "Boolean variable denoting array is enabled."
    isArrayEnabled: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Operating system type of host."
    osType: FilesetOsType!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): FilesetTemplatePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Post backup script."
    postBackupScript: String!
    "Pre backup script."
    preBackupScript: String!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Share type of the fileset template."
    shareType: ShareTypeEnum!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of FilesetTemplate objects."
type FilesetTemplateConnection {
    "Total number of FilesetTemplate objects matching the request arguments."
    count: Int!
    "List of FilesetTemplate objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FilesetTemplateEdge!]!
    "List of FilesetTemplate objects."
    nodes: [FilesetTemplate!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Supported in v5.0+"
type FilesetTemplateCreate {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    "Supported in v5.0+"
    exceptions: [String!]!
    "Supported in v5.0+"
    excludes: [String!]!
    filesetOptions: FilesetOptions
    "Required. Supported in v5.0+"
    includes: [String!]!
    """

    Supported in v5.0+
    Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
    """
    isArrayEnabled: Boolean
    """

    Supported in v7.0+
    Specifies whether this is created by a Kupr Host.
    """
    isCreatedByKupr: Boolean
    """

    Supported in v7.0+
    Specifies whether the template was created for Polaris NAS.
    """
    isCreatedByPolarisNas: Boolean
    "Required. Supported in v5.0+"
    name: String!
    operatingSystemType: FilesetTemplateCreateOperatingSystemType
    """

    Supported in v5.0+
    Script to run after backup of this fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplateCreateShareType
}

"Paginated list of FilesetTemplateDescendantType objects."
type FilesetTemplateDescendantTypeConnection {
    "Total number of FilesetTemplateDescendantType objects matching the request arguments."
    count: Int!
    "List of FilesetTemplateDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FilesetTemplateDescendantTypeEdge!]!
    "List of FilesetTemplateDescendantType objects."
    nodes: [FilesetTemplateDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FilesetTemplateDescendantType object. This wrapper is used for pagination."
type FilesetTemplateDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FilesetTemplateDescendantType object wrapped by this edge."
    node: FilesetTemplateDescendantType!
}

"Supported in v5.0+"
type FilesetTemplateDetail {
    filesetTemplateCreate: FilesetTemplateCreate
    """

    Supported in v5.0+
    Number of hosts where this template has been applied.
    """
    hostCount: Int
    "Required. Supported in v5.0+"
    id: String!
    "Supported in v5.0+"
    isArchived: Boolean
    """

    Supported in v6.0
    Specifies whether this is created by a Kupr Host.
    """
    isCreatedByKupr: Boolean
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    """

    Supported in v5.0+
    Number of shares where this template has been applied.
    """
    shareCount: Int
}

"Wrapper around the FilesetTemplate object. This wrapper is used for pagination."
type FilesetTemplateEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FilesetTemplate object wrapped by this edge."
    node: FilesetTemplate!
}

"Paginated list of FilesetTemplatePhysicalChildType objects."
type FilesetTemplatePhysicalChildTypeConnection {
    "Total number of FilesetTemplatePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of FilesetTemplatePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [FilesetTemplatePhysicalChildTypeEdge!]!
    "List of FilesetTemplatePhysicalChildType objects."
    nodes: [FilesetTemplatePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the FilesetTemplatePhysicalChildType object. This wrapper is used for pagination."
type FilesetTemplatePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual FilesetTemplatePhysicalChildType object wrapped by this edge."
    node: FilesetTemplatePhysicalChildType!
}

"Supported in v5.0+"
type FilesetUpdate {
    """

    Supported in v5.0+
    v5.0-v5.1: Assign Fileset to SLA domain
    v5.2+: Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.
    """
    forceFull: Boolean
    """

    Supported in v5.2+
    Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.
    """
    forceFullPartitionIds: [Int!]!
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
}

"""

Supported in v7.0+
Information about the asynchronous request initiated to create the multi-tag filter.
"""
type FilterCreateResponse {
    "Required. Supported in v7.0+"
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    Conditional logic in the filter.
    """
    condition: String!
    """

    Required. Supported in v7.0+
    The ID of the filter created.
    """
    id: String!
    """

    Required. Supported in v7.0+
    Filter name.
    """
    name: String!
}

type FilterOption {
    displayValue: String!
    value: String
}

"""

Supported in v7.0+
A virtual machine that satisfies the proposed multi-tag filter condition.
"""
type FilterPreviewResult {
    """

    Required. Supported in v7.0+
    The proposed multi-tag filter condition.
    """
    filterCondition: String!
    "Required. Supported in v7.0+"
    virtualMachineSummary: VirtualMachineSummary
}

"Supported in v7.0+"
type FilterPreviewResultListResponse {
    """

    Supported in v7.0+
    List of matching objects.
    """
    data: [FilterPreviewResult!]!
    """

    Supported in v7.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v7.0+
    Total list responses.
    """
    total: Int
}

"Process delete of aws cloud account."
type FinalizeAwsCloudAccountDeletionReply {
    "Contains success response message."
    message: String
}

"Response for the operation to finalize protection for AWS cloud accounts."
type FinalizeAwsCloudAccountProtectionReply {
    "Contains success response message."
    awsChildAccounts: [AwsCloudAccount!]!
    "Contains success response message."
    message: String
}

"SharePoint object excluded from protection."
type FullSpObjectExclusion {
    "The fid of the SharePoint object."
    fid: String!
    "The name of the SharePoint object."
    name: String!
    "The object type."
    objectType: SharePointDescendantType!
    "The URL of the SharePoint object."
    url: URL!
}

"SharePoint objects excluded from protection under a site collection."
type FullSpSiteExclusions {
    "The objects to be excluded under the site collection."
    excludedObjects: [FullSpObjectExclusion!]!
    "The fid of the SharePoint site collection."
    siteFid: String!
}

"Gateway information for NAT replication setup."
type GatewayInfo {
    "IPv4 address of the gateway."
    address: String!
    "Ports of the gateway."
    ports: [Int!]!
}

"Detail of the Gcp Cloud Account Add operations."
type GcpCloudAccountAddProjectDetail {
    "Error while adding a GCP project, if any."
    error: String!
    "GCP project ID."
    projectId: String!
    "Rubrik ID of the project."
    uuid: String!
}

"Gcp Cloud Account Add Projects Response."
type GcpCloudAccountAddProjectsReply {
    "GCP cloud account add projects details."
    details: [GcpCloudAccountAddProjectDetail!]!
}

"Response for the request to delete GCP cloud account projects."
type GcpCloudAccountDeleteProjectsReply {
    "Statuses of the operation to delete GCP cloud account projects."
    gcpProjectDeleteStatuses: [GcpCloudAccountProjectDeleteStatus!]!
}

"Details of the Gcp Cloud Account feature."
type GcpCloudAccountFeatureDetail {
    "The cloud account feature."
    feature: CloudAccountFeature!
    "Specifies the status of the cloud account."
    status: CloudAccountStatus!
}

"List of permissions missing for project addition for projects ineligible for addition."
type GcpCloudAccountMissingPermissionsForAddition {
    "Permissions which are missing for adding a GCP project."
    missingPermissions: [String!]!
    "GCP project ID."
    projectId: String!
}

"GCP Cloud Account OAuth Complete Response."
type GcpCloudAccountOauthCompleteReply {
    "GCP cloud account user information."
    userInfo: GcpOauthUserInfo
}

"GCP Cloud Account OAuth Initiate Response."
type GcpCloudAccountOauthInitiateReply {
    "Client ID."
    clientId: String!
    "Redirect URL."
    redirectUrl: String!
    "Scope."
    scope: [String!]!
    "Session ID."
    sessionId: String!
    "State."
    state: String!
}

"GCP Cloud Account Project."
type GcpCloudAccountProject {
    "Rubrik ID of the GCP project."
    id: String!
    "Name of the GCP project."
    name: String!
    "The name of the organization containing the GCP Project."
    organizationName: String!
    "Native ID of the GCP Project."
    projectId: String!
    "Native Project Number of the GCP Project."
    projectNumber: Long!
    "Google managed ID of the role created in the GCP project."
    roleId: String!
    "Whether the GCP project uses global configuration for authentication."
    usesGlobalConfig: Boolean!
}

"Status of the Gcp Cloud Account delete operation."
type GcpCloudAccountProjectDeleteStatus {
    "Error during deletion, if any."
    error: String!
    "GCP project ID."
    projectUuid: String!
    "Specifies whether project deletion succeeded."
    success: Boolean!
}

"Details of the Gcp Cloud Account project configured for a feature."
type GcpCloudAccountProjectDetail {
    "Details of the GCP cloud account feature."
    featureDetail: GcpCloudAccountFeatureDetail
    "GCP cloud account project."
    project: GcpCloudAccountProject
}

"Details of a GCP project for OAuth."
type GcpCloudAccountProjectForOauth {
    "List of permissions missing in the GCP project."
    missingPermissions: [String!]
    "GCP project name."
    name: String!
    "GCP project ID."
    projectId: String!
}

"Status of the Gcp Cloud Account upgrade operation."
type GcpCloudAccountProjectUpgradeStatus {
    "Error during upgrade, if any."
    error: String!
    "GCP project ID."
    projectUuid: String!
    "Specifies whether upgrade succeeded."
    success: Boolean!
}

"Response for the request to upgrade GCP cloud account projects."
type GcpCloudAccountUpgradeProjectsReply {
    "Statuses of the operation to upgrade GCP cloud account projects."
    gcpProjectUpgradeStatuses: [GcpCloudAccountProjectUpgradeStatus!]!
}

"Attachment details of the GCP native disk."
type GcpNativeAttachmentDetails {
    "Device name."
    deviceName: String!
    "GCP disk Rubrik ID."
    diskId: String!
    "GCP native disk name."
    diskName: String!
    "GCP GCE instance Rubrik ID."
    instanceId: String!
    "GCP native GCE instance name."
    instanceName: String!
    "GCP native GCE zone."
    instanceZone: String!
    "Specifies whether the disk is a boot disk or not."
    isBootDisk: Boolean!
    "Specifies whether the disk is excluded from virtual machine snapshot or not."
    isExcluded: Boolean!
    "Size of disk in GiB."
    sizeInGiBs: Int!
}

type GcpNativeDisk implements GcpNativeProjectDescendantType & GcpNativeProjectLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Instances to which the disk is attached."
    attachedInstances: [GcpNativeAttachmentDetails!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "GCP native disk ID."
    diskId: String!
    "Name of the disk."
    diskName: String!
    "Type of the disk."
    diskType: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "GCP Project of the disk."
    gcpNativeProject: GcpNativeProject!
    "The FID of the hierarchy object."
    id: UUID!
    "Relic status of the disk."
    isRelic: Boolean!
    "KMS key for the disk."
    kmsKey: String!
    "Labels attached to the disk."
    labels: [Label!]!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "GCP project ID for the disk."
    projectId: String!
    "Region of the disk."
    region: String!
    "Replica zones of the disk."
    replicaZones: [String!]!
    "Size of disk in GiB."
    sizeInGiBs: Int!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
    "Zone of the disk."
    zone: String!
}

"Paginated list of GcpNativeDisk objects."
type GcpNativeDiskConnection {
    "Total number of GcpNativeDisk objects matching the request arguments."
    count: Int!
    "List of GcpNativeDisk objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GcpNativeDiskEdge!]!
    "List of GcpNativeDisk objects."
    nodes: [GcpNativeDisk!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GcpNativeDisk object. This wrapper is used for pagination."
type GcpNativeDiskEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GcpNativeDisk object wrapped by this edge."
    node: GcpNativeDisk!
}

"GCP native firewall rule."
type GcpNativeFirewallRule {
    name: String!
    targetTags: [String!]!
}

"Represents a GCP GCE instance."
type GcpNativeGceInstance implements GcpNativeProjectDescendantType & GcpNativeProjectLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "List of attached GCP native disks."
    attachedDisks: [GcpNativeAttachmentDetails!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "GCP Project of the GCE Instance."
    gcpNativeProject: GcpNativeProject!
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the GCP GCE instance is relic or not."
    isRelic: Boolean!
    "List of labels attached to the GCP instance."
    labels: [Label!]!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The machine type of the GCP instance."
    machineType: String!
    "The name of the hierarchy object."
    name: String!
    "GCP GCE instance native ID."
    nativeId: String!
    "GCP GCE instance native name."
    nativeName: String!
    "Network host project native ID."
    networkHostProjectNativeId: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "GCP project ID."
    projectId: String!
    "The region of the GCP GCE instance."
    region: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "Name of Virtual Private Cloud (VPC) associated with the GCP GCE instance."
    vpcName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
    "The zone of the GCP GCE instance."
    zone: String!
}

"Paginated list of GcpNativeGceInstance objects."
type GcpNativeGceInstanceConnection {
    "Total number of GcpNativeGceInstance objects matching the request arguments."
    count: Int!
    "List of GcpNativeGceInstance objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GcpNativeGceInstanceEdge!]!
    "List of GcpNativeGceInstance objects."
    nodes: [GcpNativeGceInstance!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GcpNativeGceInstance object. This wrapper is used for pagination."
type GcpNativeGceInstanceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GcpNativeGceInstance object wrapped by this edge."
    node: GcpNativeGceInstance!
}

"Represents a fully qualified GCP native KMS crypto key."
type GcpNativeKmsCryptoKey {
    "KMS crypto key."
    key: String!
    "KMS crypto key ring."
    keyRing: String!
    "KMS crypto key location."
    location: String!
    "GCP project native ID."
    projectNativeId: String!
}

"Represents a GCP native VPC network."
type GcpNativeNetwork {
    "Firewall rules of the GCP native VPC network."
    firewallRules: [GcpNativeFirewallRule!]!
    "Name of the GCP native VPC network."
    name: String!
    "Project ID of the  GCP native VPC network."
    nativeProjectId: String!
    "Subnetworks of the GCP native VPC network."
    subnetworks: [GcpNativeSubnetwork!]!
}

"Represents a GCP project."
type GcpNativeProject implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Number of disks in the GCP project."
    diskCount: Int!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "List of all GCE instances under this GCP project."
    gcpNativeGceInstanceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        gceInstanceFilters: GcpNativeGceInstanceFilters,
        "Returns the last n elements from the list."
        last: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): GcpNativeGceInstanceConnection!
    "The FID of the hierarchy object."
    id: UUID!
    "Last refreshed time of the GCP project."
    lastRefreshedAt: DateTime
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): GcpNativeProjectLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Native id of the GCP project."
    nativeId: String!
    "Native name of the GCP project."
    nativeName: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Organization name of the GCP project."
    organizationName: String!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Project number of the GCP project."
    projectNumber: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Status of the GCP project."
    status: GcpNativeProjectStatus!
    "Number of virtual machines in the GCP project."
    vmCount: Int!
}

"Paginated list of GcpNativeProject objects."
type GcpNativeProjectConnection {
    "Total number of GcpNativeProject objects matching the request arguments."
    count: Int!
    "List of GcpNativeProject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GcpNativeProjectEdge!]!
    "List of GcpNativeProject objects."
    nodes: [GcpNativeProject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GcpNativeProject object. This wrapper is used for pagination."
type GcpNativeProjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GcpNativeProject object wrapped by this edge."
    node: GcpNativeProject!
}

"Paginated list of GcpNativeProjectLogicalChildType objects."
type GcpNativeProjectLogicalChildTypeConnection {
    "Total number of GcpNativeProjectLogicalChildType objects matching the request arguments."
    count: Int!
    "List of GcpNativeProjectLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GcpNativeProjectLogicalChildTypeEdge!]!
    "List of GcpNativeProjectLogicalChildType objects."
    nodes: [GcpNativeProjectLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GcpNativeProjectLogicalChildType object. This wrapper is used for pagination."
type GcpNativeProjectLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GcpNativeProjectLogicalChildType object wrapped by this edge."
    node: GcpNativeProjectLogicalChildType!
}

"Represents a GCP native region."
type GcpNativeRegion {
    "Name of the GCP region."
    name: String!
    "Zones within the region."
    zones: [String!]!
}

"GCP native subnetwork."
type GcpNativeSubnetwork {
    "Name of the subnet."
    name: String!
    "Region of the subnet."
    region: String!
}

"GCP user information received after OAuth flow is completed."
type GcpOauthUserInfo {
    "Domain name."
    domain: String!
    "Email ID."
    emailId: String!
    "First name."
    firstName: String!
}

"Represents a GCP permission."
type GcpPermission {
    "The permission."
    permission: String!
}

"Supported in v7.0+"
type GenerateConfigProtectionRestoreFormReply {
    "Supported configuration types for configuration protection."
    configurationTypes: [ConfigurationTypes!]!
    """

    Required. Supported in v7.0+
    Configurations backed-up.
    """
    configurations: RestoreFormConfigurations
}

"TOTP secret for a user."
type GenerateTotpSecretReply {
    "TOTP secret key."
    secret: String!
    "TOTP secret URI."
    secretUri: String!
}

"Paginated list of GenericSnapshot objects."
type GenericSnapshotConnection {
    "Total number of GenericSnapshot objects matching the request arguments."
    count: Int!
    "List of GenericSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GenericSnapshotEdge!]!
    "List of GenericSnapshot objects."
    nodes: [GenericSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GenericSnapshot object. This wrapper is used for pagination."
type GenericSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GenericSnapshot object wrapped by this edge."
    node: GenericSnapshot!
}

type GenericTimeRange {
    absoluteTimeRange: TimeRange
    relativeTimeRange: RelativeTimeRange
}

type GeoLocation {
    address: String!
    latitude: Float!
    longitude: Float!
}

"Anomaly analysis report from lambda service."
type GetAnomalyDetailsReply {
    "Information about possible ransomware strains."
    anomalyInfo: AnomalyInfo
    "The probability of the snapshot being anomalous."
    anomalyProbability: Float!
    "Total new bytes created."
    bytesCreatedCount: Long!
    "Total bytes deleted."
    bytesDeletedCount: Long!
    "Total bytes modified."
    bytesModifiedCount: Long!
    "Net change in the number of bytes. For example, if 5 bytes are added and 3 bytes deleted, this field returns 2 as the number of bytes that changed."
    bytesNetChangedCount: Long!
    "Total suspicious bytes."
    bytesSuspiciousCount: Long!
    "The Rubrik cluster of the object."
    cluster: Cluster!
    "Level of encryption detected."
    encryption: EncryptionLevel!
    "The count of new files created."
    filesCreatedCount: Long!
    "The count of files deleted."
    filesDeletedCount: Long!
    "The count of files modified."
    filesModifiedCount: Long!
    "The id of the anomaly."
    id: String!
    "Specifies whether the snapshot is anomalous."
    isAnomaly: Boolean!
    "The location of the object."
    location: String!
    "The internal managed ID of the object."
    managedId: String!
    "The type of the object."
    objectType: ObjectTypeEnum
    "The date of the previous snapshot."
    previousSnapshotDate: DateTime
    "The ID of the previous snapshot."
    previousSnapshotId: String!
    "The ransomware analysis result, including encryption."
    ransomwareResult: RansomwareResult
    "Severity of the anomaly."
    severity: ActivitySeverityEnum!
    "The analyzed snapshot."
    snapshot: CdmSnapshot
    "The date of the snapshot."
    snapshotDate: DateTime
    "The internal fid of the snapshot."
    snapshotFid: String!
    "The internal ID of the snapshot."
    snapshotId: String!
    "Total number of suspicious files."
    suspiciousFilesCount: Long!
    "The internal fid of the object."
    workloadFid: String!
    "The internal ID of the object."
    workloadId: String!
    "The name of the object."
    workloadName: String!
}

type GetAppBlueprintOngoingFailoverTaskchainUuidsRsp {
    taskchains: [TaskchainInfo!]!
}

type GetAppBlueprintSnapshotCloudImagesRsp {
    snapshotCloudImages: [AppBlueprintSnapshotCloudImage!]!
}

type GetAzureHostTypeResp {
    hostType: AzureHostType!
}

type GetAzureO365ExocomputeResp {
    cluster: AzureO365ExocomputeCluster
}

"Certificate metadata details."
type GetCertificateInfoReply {
    "The certificate in x509 PEM format."
    certificate: String!
    "The expiration date of the certificate."
    expiringAt: DateTime
    "The issuer of the certificate."
    issuedBy: String!
    "The date when the certificate was issued."
    issuedOn: DateTime
    "To whom the certificate was issued."
    issuedTo: String!
    "The serial number in hexadecimal format of the certificate."
    serialNumber: String!
    "The sha-1 fingerprint in hexadecimal format of the certificate."
    sha1Fingerprint: String!
    "The sha-256 fingerprint in hexadecimal format of the certificate."
    sha256Fingerprint: String!
}

"Represents the list of user-visible label rules."
type GetCloudNativeLabelRulesReply {
    "List of label rules visible to the user."
    labelRules: [LabelRule!]!
}

"Represents the list of user-visible tag rules."
type GetCloudNativeTagRulesReply {
    "List of tag rules visible to the user."
    tagRules: [CloudNativeTagRule!]!
}

type GetDashboardSummaryReply {
    analyzerResults: [AnalyzerResult!]!
    policyResults: [AnalyzerGroupResult!]!
}

"Get implicitly authorized ancestors response."
type GetImplicitlyAuthorizedAncestorSummariesResponse {
    objectSummaries: [ObjectSummary!]!
}

"Get implicitly authorized objects response."
type GetImplicitlyAuthorizedObjectSummariesResponse {
    objectSummaries: [ObjectSummary!]!
}

"Lambda configuration details of the Rubrik cluster."
type GetLambdaConfigReply {
    "The account id associated with the request."
    accountId: String!
    "The cluster UUID."
    clusterId: String!
    "The default diff fmd upload prefix."
    defaultDiffFmdUploadPrefix: String!
    "Whether automatic fmd upload is enabled for the cluster."
    enableAutomaticFmdUpload: Boolean!
    "Whether fmd upload is enabled for all resources."
    enableFmdUploadForAllResources: Boolean!
    "The maximum number of snapshots to upload automatically."
    maxSnapshotsToUploadAutomatically: Int!
}

"Reply Object for GetLambdaMalwareScanDetail."
type GetLambdaMalwareScanDetailReply {
    output: MalwareScanDetail
}

"Information about the licensed products the customer has."
type GetLicensedProductsInfoReply {
    "Represents a list of licensed cluster products."
    clusterProducts: [LicensedClusterProduct!]!
}

"MFA settings for an account."
type GetMfaSettingReply {
    "Boolean value indicating whether TOTP is globally enforced."
    isTotpEnforcedGlobal: Boolean!
    "Boolean value indicating whether TOTP global enforcement is locked."
    isTotpGlobalEnforceLocked: Boolean!
    "Integer value indicating the time of remembering the MFA login in hours."
    mfaRememberHours: Int!
    "Integer value indicating the period of showing TOTP configuration reminder in hours."
    totpReminderHours: Int!
}

"""

Supported in m3.2.0-m4.2.0
Request Range Response Object carrying details of restore range for the table and request status details.
"""
type GetMosaicRecoverableRangeResponse {
    """

    Supported in m3.2.0-m4.2.0
    Object with details of Any Point In Time restore Range.
    """
    data: MosaicRecoverableRangeObject
    """

    Supported in m3.2.0-m4.2.0
    Response Message string.
    """
    message: String
    """

    Supported in m3.2.0-m4.2.0
    Return Code.
    """
    returnCode: Long
    """

    Supported in m3.2.0-m4.2.0
    Status of the request.
    """
    status: Boolean
}

type GetO365ServiceStatusResp {
    lastUpdated: DateTime
    status: O365ServiceStatusIndication!
}

type GetO365StorageStatsResp {
    dailyGrowthInBytes: Long!
    estimatedThirtyDaysStorageInBytes: Long!
    liveDataSizeInBytes: Long!
    physicalDataSizeInBytes: Long!
    physicalDataSizeTimeSeries: [O365PhysicalDataSizeTimeStamp!]!
    storageEfficiencyPercent: Long!
}

"Specifies the health metric for the Ransomware Investigation pipeline covering the backup, indexing, and analysis jobs."
type GetPipelineHealthReply {
    "The number of failed analysis operations in the specified time range."
    failedAnalysis: Long!
    "The number of failed backups in the specified time range."
    failedBackup: Long!
    "The number of failed indexing operations in the specified time range."
    failedIndexing: Long!
    "The total number of analysis operations in the specified time range."
    totalAnalysis: Long!
    "The total number of backups in the specified time range."
    totalBackup: Long!
    "The total number of indexing operations in the specified time range."
    totalIndexing: Long!
}

type GetPoliciesTimelineReply {
    "Count of high-risk objects."
    highRiskObjects: [TimelineEntry!]!
    "Count of low-risk objects."
    lowRiskObjects: [TimelineEntry!]!
    "Count of no-risk objects."
    noRiskObjects: [TimelineEntry!]!
    policyFilesHitsEntries: [TimelineEntry!]!
    policyHitsEntries: [TimelineEntry!]!
    policyOaFilesHitsEntries: [TimelineEntry!]!
    policyStaleFilesHitsEntries: [TimelineEntry!]!
    policySummaries: [ClassificationPolicySummary!]!
    totalFilesHitsEntries: [TimelineEntry!]!
    totalHitsEntries: [TimelineEntry!]!
    totalOaFilesEntries: [TimelineEntry!]!
    totalOaFilesHitsEntries: [TimelineEntry!]!
    totalOaFoldersEntries: [TimelineEntry!]!
    totalStaleFilesHitsEntries: [TimelineEntry!]!
    totalStaleOaFilesEntries: [TimelineEntry!]!
}

type GetSMTPConfigurationReply {
    defaultFromEmail: String!
    hostname: String!
    isValid: Boolean!
    port: Int!
    securityType: SMTPSecurityTypeEnum!
    trustedCerts: String!
    username: String!
}

type GetSPExplicitReply {
    applicationCallbackUrl: String!
    encryptionCertificate: String!
    signingCertificate: String!
    spEntityId: String!
}

"""

Supported in m3.2.0-m4.2.0
Schema Response Object carrying details of schema for the table and request status details.
"""
type GetSchemaResponse {
    """

    Supported in m3.2.0-m4.2.0
    Object with schema details.
    """
    data: CassandraSchemaObject
    """

    Supported in m3.2.0-m4.2.0
    Response Message string.
    """
    message: String
    """

    Supported in m3.2.0-m4.2.0
    Return Code.
    """
    returnCode: Long
    """

    Supported in m3.2.0-m4.2.0
    Status of the request.
    """
    status: Boolean
}

"Reply Object for GetSmbConfiguration."
type GetSmbConfigurationReply {
    output: SmbConfig
}

type GetSyslogConfigurationReply {
    conf: [SyslogConfig!]!
}

"Taskchain status reply."
type GetTaskchainStatusReply {
    taskchain: Taskchain
}

"TOTP status for a user."
type GetTotpStatusReply {
    "TOTP as 2FA is enabled."
    isEnabled: Boolean!
    "TOTP as 2FA is enforced."
    isEnforced: Boolean!
    isEnforcedUserLevel: Boolean!
    "Specifies whether TOTP is supported for the user."
    isSupported: Boolean!
    "Timestamp of last TOTP configuration update."
    totpConfigUpdateAt: DateTime
    "Integer value indicating the period of showing TOTP configuration reminder in hours."
    totpReminderHours: Int!
}

type GetUserDetailReply {
    location: String!
    name: String!
    numFilesAccessible: Int!
    risk: RiskLevelType!
}

"Get IP whitelist configuration."
type GetWhitelistReply {
    enabled: Boolean!
    ipCidrs: [String!]!
    mode: WhitelistModeEnum!
}

"Specifies the Ransomware Investigation alert enablement for a workload."
type GetWorkloadAlertSettingReply {
    "Specifies whether anomaly alerts are enabled or not."
    enabled: Boolean!
}

"Information about a certificate on RSC."
type GlobalCertificate {
    "The usages for the certificate on Rubrik clusters."
    cdmUsages: [CdmCertificateUsageInfo!]!
    "The certificate in raw PEM format."
    certificate: String!
    "The ID of the certificate."
    certificateId: String!
    "The Rubrik clusters on which the certificate has been uploaded."
    clusters: [CertificateClusterInfo!]
    "The description of the certificate."
    description: String!
    "The expiration date of the certificate."
    expiringAt: DateTime
    "Specifies whether the certificate has a private key."
    hasKey: Boolean!
    "Specifies if the certificate is signed by a Certificate Authority."
    isCaSigned: Boolean!
    "The issuer of the certificate."
    issuedBy: String!
    "The date on which the certificate was issued."
    issuedOn: DateTime
    "To whom the certificate was issued."
    issuedTo: String!
    "The display name of the certificate."
    name: String!
    "The serial number of the certificate, in hexadecimal format."
    serialNumber: String!
    "The SHA-1 fingerprint of the certificate, in hexadecimal format."
    sha1Fingerprint: String!
    "The SHA-256 fingerprint of the certificate, in hexadecimal format."
    sha256Fingerprint: String!
    "The expiration status of the certificate."
    status: GlobalCertificateStatus!
}

"Paginated list of GlobalCertificate objects."
type GlobalCertificateConnection {
    "Total number of GlobalCertificate objects matching the request arguments."
    count: Int!
    "List of GlobalCertificate objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GlobalCertificateEdge!]!
    "List of GlobalCertificate objects."
    nodes: [GlobalCertificate!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GlobalCertificate object. This wrapper is used for pagination."
type GlobalCertificateEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GlobalCertificate object wrapped by this edge."
    node: GlobalCertificate!
}

"Supported in v5.1+"
type GlobalFileSearchReply {
    """

    Supported in v5.1+
    List of matching objects.
    """
    data: [GlobalSearchFile!]!
    """

    Supported in v5.1+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.1+
    Total list responses.
    """
    total: Long
}

"Global manager connectivity status."
type GlobalManagerConnectivity {
    "URLs pinged to check connectivity."
    urls: [GlobalManagerUrl!]!
}

"URLs pinged to check connectivity."
type GlobalManagerUrl {
    "Whether or not the URL check has passed."
    isReachable: Boolean!
    "URL pinged to check connectivity."
    url: String!
}

"Supported in v5.1+"
type GlobalSearchFile {
    """

    Required. Supported in v5.1+
    List of directories containing the file.
    """
    dirs: [String!]!
    """

    Required. Supported in v5.1+
    Filename of the file.
    """
    filename: String!
    """

    Required. Supported in v5.1+
    True if the returned path is not a directory.
    """
    isFile: Boolean!
    """

    Supported in v7.0+
    Last time, in seconds, this file was modified since epoch.
    """
    modifiedTime: Long
    """

    Supported in v7.0+
    Number of snapshots containing the file.
    """
    numSnapshots: Int
    """

    Supported in v7.0+
    Size, in bytes, of the file.
    """
    sizeInBytes: Long
    "Required. Supported in v5.1+ Managed ID of the workload containing the file."
    snappableId: String!
    "Required. Supported in v5.1+ Name of the workload containing the file."
    snappableName: String!
    """

    Supported in v7.0+
    Time latest, in milliseconds, snapshot was taken with this file since epoch.
    """
    snapshotTime: Long
}

"Metadata for rendering a sla for filter."
type GlobalSlaForFilter {
    id: String!
    name: String!
}

"Paginated list of GlobalSlaForFilter objects."
type GlobalSlaForFilterConnection {
    "Total number of GlobalSlaForFilter objects matching the request arguments."
    count: Int!
    "List of GlobalSlaForFilter objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GlobalSlaForFilterEdge!]!
    "List of GlobalSlaForFilter objects."
    nodes: [GlobalSlaForFilter!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the GlobalSlaForFilter object. This wrapper is used for pagination."
type GlobalSlaForFilterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual GlobalSlaForFilter object wrapped by this edge."
    node: GlobalSlaForFilter!
}

"Metadata for rendering an SLA Domain."
type GlobalSlaReply implements SlaDomain {
    "Specifies the list of organizations that have view access for the SLA Domain."
    allOrgsWithAccess: [Org!]!
    "Archiving specification for the SLA Domain."
    archivalSpec: ArchivalSpec
    "List of archival specifications for SLA Domain."
    archivalSpecs: [ArchivalSpec!]!
    "Backup windows for the SLA Domain."
    backupWindows: [BackupWindow!]!
    "Base frequency for the SLA Domain."
    baseFrequency: Duration
    "Sync status of the clusters."
    clusterToSyncStatusMap: [GlobalSlaSyncStatus!]!
    "Rubrik cluster ID of the SLA Domain."
    clusterUuid: String!
    "Description of the SLA Domain."
    description: String!
    "First full backup windows."
    firstFullBackupWindows: [BackupWindow!]!
    "SLA Domain ID."
    id: String!
    "Specifies whether the SLA Domain is archived or not."
    isArchived: Boolean!
    "Specifies whether the SLA Domain is a default SLA Domain or not."
    isDefault: Boolean!
    "Specifies if this SLA Domain is retention-locked or not."
    isRetentionLockedSla: Boolean!
    "Local retention limit."
    localRetentionLimit: Duration
    "Log configuration of the SLA Domain."
    logConfig: LogConfigResult
    "SLA Domain name."
    name: String!
    "The object-specific configurations of the SLA Domain."
    objectSpecificConfigs: ObjectSpecificConfigs
    "The object-types supported by the SLA Domain."
    objectTypes: [SlaObjectType!]!
    "Information about Rubrik clusters where this SLA Domain is paused."
    pausedClustersInfo: PausedClustersInfo
    "Workload count for the SLA Domain."
    protectedObjectCount: Int!
    "Replication specification for the SLA Domain."
    replicationSpec: ReplicationSpec
    "Replication specification for the SLA Domain."
    replicationSpecsV2: [ReplicationSpecV2!]!
    "Snapshot schedule for the SLA Domain."
    snapshotSchedule: SnapshotSchedule
    "Last update timestamp of the snapshot schedule of the SLA Domain."
    snapshotScheduleLastUpdatedAt: DateTime
    "State version of the SLA Domain."
    stateVersion: Long!
    "Color of the SLA Domain on the User Interface."
    uiColor: String!
    "SLA Domain upgrade information."
    upgradeInfo: SlaUpgradeInfo
    "Version for the SLA Domain."
    version: String
}

"SLA Domain sync status for a specified Rubrik cluster."
type GlobalSlaSyncStatus {
    "Cluster UUID."
    clusterUuid: String!
    "SLA Domain sync status."
    slaSyncStatus: SlaSyncStatus!
}

"User group details."
type Group {
    "The suborganizations in which the user group has roles."
    allOrgs: [Org!]!
    "The ID of the user group."
    groupId: String!
    "The name of the user group."
    groupName: String!
    "User group roles in the context organization."
    roles: [Role!]!
    "Users from the user group who are logged-in to the account."
    users: [User!]!
}

"Paginated list of Group objects."
type GroupConnection {
    "Total number of Group objects matching the request arguments."
    count: Int!
    "List of Group objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [GroupEdge!]!
    "List of Group objects."
    nodes: [Group!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Represents count of clusters grouped by upgrade status."
type GroupCount {
    "Group member count."
    count: Int!
    "Group name."
    group: String!
}

"Represents total count of clusters in each group of upgrade type."
type GroupCountListWithTotal {
    "List of clusters grouped by upgrade status."
    groupList: [GroupCount!]!
    "Total count of Rubrik clusters."
    totalCount: Int!
}

"Wrapper around the Group object. This wrapper is used for pagination."
type GroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Group object wrapped by this edge."
    node: Group!
}

"Supported in v5.0+"
type GuestCredentialDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [CreateGuestCredentialReply!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v6.0+"
type HashDetail {
    """

    Required. Supported in v6.0+
    Hash algorithm type.
    """
    hashType: String!
    """

    Required. Supported in v6.0+
    Hash value of the content at path.
    """
    hashValue: String!
}

"Supported in v5.2+"
type HdfsBaseConfig {
    """

    Supported in v5.2+
    API token to access Hdfs.
    """
    apiToken: String
    """

    Required. Supported in v5.2+
    List of Hdfs Namenode Hosts.
    """
    hosts: [HdfsHost!]!
    """

    Supported in v5.2+
    Ticket Cache Path of Kerberos Ticket.
    """
    kerberosTicket: String
    """

    Supported in v5.2+
    Logical name for nameservice for Hdfs HA.
    """
    nameservices: String
    """

    Supported in v5.2+
    Username to access Hdfs API.
    """
    username: String
}

"Supported in v5.2+"
type HdfsHost {
    """

    Required. Supported in v5.2+
    Hostname or Ip of Namenode.
    """
    hostname: String!
    """

    Required. Supported in v5.2+
    Port number of Namenode.
    """
    port: Int!
}

"Health-check status."
type HealthPolicyStatus {
    "Result of the hardware health check."
    isHealthy: Boolean!
    "Output from the hardware health-check policy."
    message: String!
    "Name of the policy used for the hardware component health check."
    policyName: HardwareHealthPolicyName!
}

"A snippet of help content."
type HelpContentSnippet {
    "Summary of the help content."
    description: String!
    "ID of the help content."
    id: String!
    "URL pointing to the complete help content."
    link: URL
    "Datasource for help content."
    source: HelpContentSource!
    "Title of the help content."
    title: String!
}

"Paginated list of HelpContentSnippet objects."
type HelpContentSnippetConnection {
    "Total number of HelpContentSnippet objects matching the request arguments."
    count: Int!
    "List of HelpContentSnippet objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HelpContentSnippetEdge!]!
    "List of HelpContentSnippet objects."
    nodes: [HelpContentSnippet!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HelpContentSnippet object. This wrapper is used for pagination."
type HelpContentSnippetEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HelpContentSnippet object wrapped by this edge."
    node: HelpContentSnippet!
}

"Common object definition."
type HierarchyObjectCommon {
    "The object ID."
    fid: UUID!
    "The object Name."
    name: String!
    "The object Type."
    objectType: HierarchyObjectTypeEnum!
}

"Paginated list of HierarchyObject objects."
type HierarchyObjectConnection {
    "Total number of HierarchyObject objects matching the request arguments."
    count: Int!
    "List of HierarchyObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HierarchyObjectEdge!]!
    "List of HierarchyObject objects."
    nodes: [HierarchyObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HierarchyObject object. This wrapper is used for pagination."
type HierarchyObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HierarchyObject object wrapped by this edge."
    node: HierarchyObject!
}

"Paginated list of HierarchySnappable objects."
type HierarchySnappableConnection {
    "Total number of HierarchySnappable objects matching the request arguments."
    count: Int!
    "List of HierarchySnappable objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HierarchySnappableEdge!]!
    "List of HierarchySnappable objects."
    nodes: [HierarchySnappable!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HierarchySnappable object. This wrapper is used for pagination."
type HierarchySnappableEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HierarchySnappable object wrapped by this edge."
    node: HierarchySnappable!
}

type HierarchySnappableFileVersion {
    fileMode: FileModeEnum!
    lastModified: DateTime!
    "Quarantine information corresponding to the path."
    quarantineInfo: QuarantineInfo
    size: Long!
    snapshot: CdmSnapshot
    snapshotId: String!
    source: FileVersionSourceEnum!
}

"Warning details for an SLA Domain with a high archival retention value."
type HighArchivalRetentionWarningsDetails implements SpecificArchivalLocationWarningDetails {
    "Archival retention configured in the SLA Domain for the archival location, in days."
    archivalRetentionInDaysProvided: Int!
    "Frequency configured in the SLA Domain for this archival location."
    frequencyType: RetentionUnit!
    "Archival location ID."
    id: UUID!
    "Immutability lock duration for the archival location, in days."
    lockDurationDays: Int!
    "Maximum immutability lock duration required for the archival location to be configured with an SLA Domain, in days."
    maxLockDurationDaysRequired: Int!
    "Minimum immutability lock duration required for the archival location to be configured with an SLA Domain, in days."
    minLockDurationDaysRequired: Int!
    "Archival location name."
    name: String!
}

type Hits {
    permittedHits: Int!
    permittedHitsDelta: Int!
    totalHits: Int!
    totalHitsDelta: Int!
    violations: Int!
    violationsDelta: Int!
}

"The connection status of a host."
type HostConnectionStatus {
    connectivity: HostConnectivityStatusEnum!
    timestampMillis: DateTime
}

"Supported in v5.0+"
type HostConnectivitySummary {
    "Required. Supported in v5.0+"
    action: String!
    "Required. Supported in v5.0+"
    status: String!
}

"Supported in v5.0+"
type HostDetail {
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: ID of the Rubrik Backup Service (RBS) installed on the host.
    """
    agentId: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.
    """
    compressionEnabled: Boolean
    hostSummary: HostSummary
    hostVfdDriverState: HostVfdState!
    hostVfdEnabled: HostVfdInstallConfig
    """

    Supported in v5.2+
    v5.2: Specifies whether the host is an Oracle host. When the host is an Oracle host, the UI displays the Oracle discovery fields.
    v5.3: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
    v6.0+: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
    """
    isOracleHost: Boolean
    """

    Required. Supported in v5.0+
    A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).
    """
    isRelic: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Boolean value that indicates whether the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
    v5.3: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
    v6.0+: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.
    """
    mssqlCbtDriverInstalled: Boolean!
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with sysdba privileges.
    """
    oracleSysDbaUser: String
}

"Supported in v5.0+"
type HostDiagnosisSummary {
    "Supported in v5.0+"
    connectivity: [HostConnectivitySummary!]!
}

"Host failover cluster."
type HostFailoverCluster implements CdmHierarchyObject & FailoverClusterTopLevelDescendantType & HierarchyObject {
    "The list of Hosts making up this Host Failover Cluster."
    allNodes: [PhysicalHost!]!
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the CDM cluster."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HostFailoverClusterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Boolean variable denoting if archived."
    isArchived: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The OS type of the host failover cluster."
    nodesOsType: GuestOsType
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HostFailoverClusterPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Connectivity status of failover cluster."
    status: FailoverClusterStatus
}

"Paginated list of HostFailoverCluster objects."
type HostFailoverClusterConnection {
    "Total number of HostFailoverCluster objects matching the request arguments."
    count: Int!
    "List of HostFailoverCluster objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HostFailoverClusterEdge!]!
    "List of HostFailoverCluster objects."
    nodes: [HostFailoverCluster!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of HostFailoverClusterDescendantType objects."
type HostFailoverClusterDescendantTypeConnection {
    "Total number of HostFailoverClusterDescendantType objects matching the request arguments."
    count: Int!
    "List of HostFailoverClusterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HostFailoverClusterDescendantTypeEdge!]!
    "List of HostFailoverClusterDescendantType objects."
    nodes: [HostFailoverClusterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HostFailoverClusterDescendantType object. This wrapper is used for pagination."
type HostFailoverClusterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HostFailoverClusterDescendantType object wrapped by this edge."
    node: HostFailoverClusterDescendantType!
}

"Wrapper around the HostFailoverCluster object. This wrapper is used for pagination."
type HostFailoverClusterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HostFailoverCluster object wrapped by this edge."
    node: HostFailoverCluster!
}

"Paginated list of HostFailoverClusterPhysicalChildType objects."
type HostFailoverClusterPhysicalChildTypeConnection {
    "Total number of HostFailoverClusterPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of HostFailoverClusterPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HostFailoverClusterPhysicalChildTypeEdge!]!
    "List of HostFailoverClusterPhysicalChildType objects."
    nodes: [HostFailoverClusterPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HostFailoverClusterPhysicalChildType object. This wrapper is used for pagination."
type HostFailoverClusterPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HostFailoverClusterPhysicalChildType object wrapped by this edge."
    node: HostFailoverClusterPhysicalChildType!
}

"Supported in v6.0+"
type HostGroupInfo {
    """

    Supported in v6.0+
    ID of the host group.
    """
    id: String
    """

    Required. Supported in v6.0+
    Name of the host group.
    """
    name: String!
}

"Supported in v5.3+"
type HostInfo {
    """

    Required. Supported in v5.3+
    Name of the host.
    """
    hostname: String!
    """

    Required. Supported in v5.3+
    The managed id of the host.
    """
    id: String!
    """

    Required. Supported in v5.3+
    Oracle discovery user.
    """
    oracleQueryUser: String!
    """

    Required. Supported in v5.3+
    Oracle sysdba user to use on the host.
    """
    oracleSysDbaUser: String!
}

"Host share type."
type HostShare implements CdmHierarchyObject & HierarchyObject & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HostShareDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HostSharePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of HostShare objects."
type HostShareConnection {
    "Total number of HostShare objects matching the request arguments."
    count: Int!
    "List of HostShare objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HostShareEdge!]!
    "List of HostShare objects."
    nodes: [HostShare!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of HostShareDescendantType objects."
type HostShareDescendantTypeConnection {
    "Total number of HostShareDescendantType objects matching the request arguments."
    count: Int!
    "List of HostShareDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HostShareDescendantTypeEdge!]!
    "List of HostShareDescendantType objects."
    nodes: [HostShareDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HostShareDescendantType object. This wrapper is used for pagination."
type HostShareDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HostShareDescendantType object wrapped by this edge."
    node: HostShareDescendantType!
}

"Wrapper around the HostShare object. This wrapper is used for pagination."
type HostShareEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HostShare object wrapped by this edge."
    node: HostShare!
}

"Paginated list of HostSharePhysicalChildType objects."
type HostSharePhysicalChildTypeConnection {
    "Total number of HostSharePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of HostSharePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HostSharePhysicalChildTypeEdge!]!
    "List of HostSharePhysicalChildType objects."
    nodes: [HostSharePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HostSharePhysicalChildType object. This wrapper is used for pagination."
type HostSharePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HostSharePhysicalChildType object wrapped by this edge."
    node: HostSharePhysicalChildType!
}

"Supported in v5.0+"
type HostSummary {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    "Supported in v5.2+"
    hdfsBaseConfig: HdfsBaseConfig
    """

    Required. Supported in v5.0+
    Deprecated. Please use 'name' instead.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Unique identifier for host.
    """
    id: String!
    mssqlCbtEffectiveStatus: MssqlCbtEffectiveStatusType
    mssqlCbtEnabled: MssqlCbtStatusType
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: IP address or hostname of the host.
    """
    name: String
    "Supported in v5.0+"
    nasBaseConfig: NasBaseConfig
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.
    """
    operatingSystem: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.
    """
    operatingSystemType: String
    """

    Supported in v5.0+
    The ID of the organization to which the host is assigned (set by envoy).
    """
    organizationId: String
    """

    Supported in v5.0+
    The name of the organization to which the host is assigned (set by envoy).
    """
    organizationName: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: ID of the Rubrik cluster to which the host belongs.
    """
    primaryClusterId: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.
    """
    status: String
}

"Supported in v5.0+"
type HostVfdInstallResponse {
    "Supported in v5.0+"
    errorInfo: String
    "Required. Supported in v5.0+"
    hostId: String!
    hostVfdDriverState: HostVfdState!
}

"Supported in v5.0+"
type HostVolumeSummary {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: A boolean value that describes whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
    v5.3+: Indicates whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
    """
    isCurrentlyPresentOnSystem: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Windows ID on the Host
    v5.3+: The unique ID of the volume on the Windows host.
    """
    naturalId: String!
    """

    Supported in v5.0+
    v5.0-v5.2: The Volume Group ID of the volume.
    v5.3+: The unique ID of the Volume Group.
    """
    volumeGroupId: String
    volumeGroupSnapshotVolumeSummary: VolumeGroupSnapshotVolumeSummary
}

"Supported in v5.3+"
type HotAddBandwidthInfo {
    """

    Required. Supported in v5.3+
    The HotAdd bandwidth limit in Mbps for export.
    """
    exportLimit: Int!
    """

    Required. Supported in v5.3+
    The HotAdd bandwidth limit in Mbps for ingest.
    """
    ingestLimit: Int!
}

"Supported in v5.3+"
type HotAddNetworkConfigWithName {
    """

    Supported in v5.3+
    The name of the HotAdd proxy virtual machine network.
    """
    networkName: String
    "Supported in v5.3+"
    staticIpConfig: StaticIpInfo
}

"Supported in v5.3+"
type HotAddProxyVmInfo {
    """

    Supported in v5.3+
    The name of the compute cluster that contains the HotAdd proxy virtual machine.
    """
    computeClusterName: String
    """

    Required. Supported in v5.3+
    The name of the datastore that the HotAdd proxy virtual machine uses.
    """
    datastoreName: String!
    """

    Supported in v5.3+
    The name of the ESX host that contains the HotAdd proxy virtual machine.
    """
    hostName: String
    """

    Required. Supported in v5.3+
    The ID of the HotAdd proxy virtual machine.
    """
    id: String!
    """

    Required. Supported in v5.3+
    The name of the HotAdd proxy virtual machine.
    """
    name: String!
    """

    Supported in v5.3+
    The network configuration of the HotAdd proxy virtual machine.
    """
    proxyNetworkInfo: HotAddNetworkConfigWithName
    "Supported in v5.3+"
    status: HotAddProxyVmStatusType!
    """

    Required. Supported in v5.3+
    The number of port in use for the HotAdd proxy virtual machine.
    """
    usedPortCount: Int!
    """

    Required. Supported in v5.3+
    The name of the vCenter that contains the HotAdd proxy virtual machine.
    """
    vcenterName: String!
}

"Supported in v5.3+"
type HotAddProxyVmInfoListResponse {
    """

    Supported in v5.3+
    List of matching objects.
    """
    data: [HotAddProxyVmInfo!]!
    """

    Supported in v5.3+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.3+
    Total list responses.
    """
    total: Int
}

"Hourly snapshot schedule."
type HourlySnapshotSchedule {
    "Basic hourly snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
}

"Hyper-V cluster details."
type HyperVCluster implements CdmHierarchyObject & HierarchyObject & HyperVSCVMMDescendantType & HyperVSCVMMLogicalChildType & HypervTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Connectivity Status of HyperV Cluster."
    connectionStatus: HypervHostStatusType!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HyperVClusterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HyperVClusterLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "List of HyperV Server IDs in the cluster."
    serverIds: [String!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of HyperVClusterDescendantType objects."
type HyperVClusterDescendantTypeConnection {
    "Total number of HyperVClusterDescendantType objects matching the request arguments."
    count: Int!
    "List of HyperVClusterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVClusterDescendantTypeEdge!]!
    "List of HyperVClusterDescendantType objects."
    nodes: [HyperVClusterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HyperVClusterDescendantType object. This wrapper is used for pagination."
type HyperVClusterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVClusterDescendantType object wrapped by this edge."
    node: HyperVClusterDescendantType!
}

"Paginated list of HyperVClusterLogicalChildType objects."
type HyperVClusterLogicalChildTypeConnection {
    "Total number of HyperVClusterLogicalChildType objects matching the request arguments."
    count: Int!
    "List of HyperVClusterLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVClusterLogicalChildTypeEdge!]!
    "List of HyperVClusterLogicalChildType objects."
    nodes: [HyperVClusterLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HyperVClusterLogicalChildType object. This wrapper is used for pagination."
type HyperVClusterLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVClusterLogicalChildType object wrapped by this edge."
    node: HyperVClusterLogicalChildType!
}

"HyperV live mount."
type HyperVLiveMount {
    "Cluster of the live mount."
    cluster: Cluster!
    "Fid of the live mount."
    id: UUID!
    "Describes if the live mount is ready."
    isVmReady: Boolean!
    "Specification of the live mount in JSON string."
    mountSpec: String!
    "ID of the mounted virtual machine.."
    mountedVmFid: UUID!
    "Power Status of HyperV Live Mount."
    mountedVmStatus: HypervMountedVmStatusType!
    "Name of the live mount."
    name: String!
    "ID of the HyperV server."
    serverFid: UUID!
    "Host name of the server where Hyper-V virtual machine is live mounted."
    serverName: String!
    "Source snapshot of the live mount."
    sourceSnapshot: CdmSnapshot
    "Name of the source HyperV VM."
    sourceVm: String!
    "ID of the source virtual machine.."
    sourceVmFid: UUID!
}

"Paginated list of HyperVLiveMount objects."
type HyperVLiveMountConnection {
    "Total number of HyperVLiveMount objects matching the request arguments."
    count: Int!
    "List of HyperVLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVLiveMountEdge!]!
    "List of HyperVLiveMount objects."
    nodes: [HyperVLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HyperVLiveMount object. This wrapper is used for pagination."
type HyperVLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVLiveMount object wrapped by this edge."
    node: HyperVLiveMount!
}

"Hyper-V SCVMM details."
type HyperVSCVMM implements CdmHierarchyObject & HierarchyObject & HypervTopLevelDescendantType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Connectivity Status of SCVMM Host."
    connectionStatus: HypervHostStatusType!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HyperVSCVMMDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Name or IP Address of SCVMM Host."
    hostName: String!
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HyperVSCVMMLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The RunAs account which will be used to install the Rubrik Backup Service on the hosts."
    runAsAccount: String!
    "Flag to specify if Rubrik can deploy the Rubrik Backup Service to the hosts. If true, Rubrik tries to deploy the Rubrik Backup Service to the Hyper-V hosts. If false, the deployment of the Rubrik Backup Service will be handled by the client."
    shouldDeployAgent: Boolean!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Connection status of the SCVMM server."
    status: HyperVStatus!
}

"Paginated list of HyperVSCVMM objects."
type HyperVSCVMMConnection {
    "Total number of HyperVSCVMM objects matching the request arguments."
    count: Int!
    "List of HyperVSCVMM objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVSCVMMEdge!]!
    "List of HyperVSCVMM objects."
    nodes: [HyperVSCVMM!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of HyperVSCVMMDescendantType objects."
type HyperVSCVMMDescendantTypeConnection {
    "Total number of HyperVSCVMMDescendantType objects matching the request arguments."
    count: Int!
    "List of HyperVSCVMMDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVSCVMMDescendantTypeEdge!]!
    "List of HyperVSCVMMDescendantType objects."
    nodes: [HyperVSCVMMDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HyperVSCVMMDescendantType object. This wrapper is used for pagination."
type HyperVSCVMMDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVSCVMMDescendantType object wrapped by this edge."
    node: HyperVSCVMMDescendantType!
}

"Wrapper around the HyperVSCVMM object. This wrapper is used for pagination."
type HyperVSCVMMEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVSCVMM object wrapped by this edge."
    node: HyperVSCVMM!
}

"Paginated list of HyperVSCVMMLogicalChildType objects."
type HyperVSCVMMLogicalChildTypeConnection {
    "Total number of HyperVSCVMMLogicalChildType objects matching the request arguments."
    count: Int!
    "List of HyperVSCVMMLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVSCVMMLogicalChildTypeEdge!]!
    "List of HyperVSCVMMLogicalChildType objects."
    nodes: [HyperVSCVMMLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HyperVSCVMMLogicalChildType object. This wrapper is used for pagination."
type HyperVSCVMMLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVSCVMMLogicalChildType object wrapped by this edge."
    node: HyperVSCVMMLogicalChildType!
}

"Additional information about the status of a Hyperv SCVMM."
type HyperVStatus {
    "Connection status of the SCVMM server."
    connectivity: String!
    "Timestamp when status was updated."
    timestampMillis: DateTime
}

"Hyper-V virtual machine details."
type HyperVVirtualMachine implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HyperVClusterDescendantType & HyperVSCVMMDescendantType & HypervServerDescendantType & HypervServerLogicalChildType & HypervTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the virtual machine in Rubrik CDM."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Hyper-V virtual machine Live Count Connection."
    hypervVmMountCount: Int!
    "The FID of the hierarchy object."
    id: UUID!
    "Flag to indicate whether the virtual machine is a relic."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Type of operating system used by the Hyper-V virtual machine."
    osType: String
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Stats for Hyper-V virtual machine (e.g., capacity)."
    reportWorkload: Snappable
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
}

"Paginated list of HyperVVirtualMachine objects."
type HyperVVirtualMachineConnection {
    "Total number of HyperVVirtualMachine objects matching the request arguments."
    count: Int!
    "List of HyperVVirtualMachine objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HyperVVirtualMachineEdge!]!
    "List of HyperVVirtualMachine objects."
    nodes: [HyperVVirtualMachine!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HyperVVirtualMachine object. This wrapper is used for pagination."
type HyperVVirtualMachineEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HyperVVirtualMachine object wrapped by this edge."
    node: HyperVVirtualMachine!
}

"Supported in v7.0+"
type HypervAsyncRequestFailureSummary {
    """

    Required. Supported in v7.0+
    Information about why the request failed.
    """
    error: String!
    """

    Required. Supported in v7.0+
    ID of the Hyper-V virtual machine.
    """
    vmId: String!
}

"Supported in v7.0+"
type HypervAsyncRequestSuccessSummary {
    """

    Required. Supported in v7.0+
    Information for tracking the status of asynchronous requests.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    ID of the Hyper-V virtual machine.
    """
    vmId: String!
}

"Supported in v5.0+"
type HypervHostSummary {
    """

    Required. Supported in v5.0+
    IP Address or the hostname using which the host was added.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    The ID of the Hyper-V host.
    """
    id: String!
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    "Name of the Hyper-V Server."
    serverName: String!
}

"Supported in v5.0+"
type HypervHostSummaryListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [HypervHostSummary!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type HypervScvmmSummary {
    """

    Required. Supported in v5.0+
    The ID of the Hyper-V SCVMM.
    """
    id: String!
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    """

    Required. Supported in v5.0+
    The RunAs account which will be used to install connector on hosts.
    """
    runAsAccount: String!
    """

    Required. Supported in v5.0+
    Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
    """
    shouldDeployAgent: Boolean!
    slaAssignable: SlaAssignable
    """

    Required. Supported in v5.0+
    Connection status of the SCVMM server.
    """
    status: String!
}

"Supported in v5.0+"
type HypervScvmmUpdate {
    """

    Supported in v5.0+
    v5.0-v5.1: Assign this SCVMM to the given SLA domain.
    v5.2+: Assign this SCVMM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    Name of the SCVMM host.
    """
    hostname: String
    """

    Supported in v5.0+
    The RunAs account which will be used to install connector on hosts.
    """
    runAsAccount: String
    """

    Supported in v5.0+
    Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
    """
    shouldDeployAgent: Boolean
}

"Supported in v5.0+"
type HypervScvmmUpdateReply {
    hypervScvmmSummary: HypervScvmmSummary
    "Properties of Hyper-V SCVMM object."
    hypervScvmmUpdate: HypervScvmmUpdate
}

"Hyper-V server details."
type HypervServer implements CdmHierarchyObject & HierarchyObject & HyperVClusterDescendantType & HyperVClusterLogicalChildType & HyperVSCVMMDescendantType & HyperVSCVMMLogicalChildType & HypervTopLevelDescendantType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Connectivity Status of HyperV Host."
    connectionStatus: HypervHostStatusType!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HypervServerDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HypervServerLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Status of the Hyper-V server."
    status: HyperVStatus!
}

"Paginated list of HypervServerDescendantType objects."
type HypervServerDescendantTypeConnection {
    "Total number of HypervServerDescendantType objects matching the request arguments."
    count: Int!
    "List of HypervServerDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HypervServerDescendantTypeEdge!]!
    "List of HypervServerDescendantType objects."
    nodes: [HypervServerDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HypervServerDescendantType object. This wrapper is used for pagination."
type HypervServerDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HypervServerDescendantType object wrapped by this edge."
    node: HypervServerDescendantType!
}

"Paginated list of HypervServerLogicalChildType objects."
type HypervServerLogicalChildTypeConnection {
    "Total number of HypervServerLogicalChildType objects matching the request arguments."
    count: Int!
    "List of HypervServerLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HypervServerLogicalChildTypeEdge!]!
    "List of HypervServerLogicalChildType objects."
    nodes: [HypervServerLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HypervServerLogicalChildType object. This wrapper is used for pagination."
type HypervServerLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HypervServerLogicalChildType object wrapped by this edge."
    node: HypervServerLogicalChildType!
}

"Paginated list of HypervTopLevelDescendantType objects."
type HypervTopLevelDescendantTypeConnection {
    "Total number of HypervTopLevelDescendantType objects matching the request arguments."
    count: Int!
    "List of HypervTopLevelDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [HypervTopLevelDescendantTypeEdge!]!
    "List of HypervTopLevelDescendantType objects."
    nodes: [HypervTopLevelDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the HypervTopLevelDescendantType object. This wrapper is used for pagination."
type HypervTopLevelDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual HypervTopLevelDescendantType object wrapped by this edge."
    node: HypervTopLevelDescendantType!
}

"Supported in v5.2+"
type HypervVirtualDiskInfo {
    """

    Required. Supported in v5.2+
    The ID of the Hyper-V virtual disk.
    """
    id: String!
    """

    Required. Supported in v5.2+
    The name of the Hyper-V virtual disk.
    """
    name: String!
    """

    Required. Supported in v5.2+
    The path of the Hyper-V virtual disk.
    """
    path: String!
}

"Supported in v5.0+"
type HypervVirtualMachineDetail {
    guestOsType: HypervVirtualMachineDetailGuestOsType!
    hypervVirtualMachineSummary: HypervVirtualMachineSummary
    hypervVirtualMachineUpdate: HypervVirtualMachineUpdate
    """

    Supported in v5.0+
    Returns whether the Rubrik connector is installed and service is registered.
    """
    isAgentRegistered: Boolean
    operatingSystemType: HypervVirtualMachineDetailOperatingSystemType
    """

    Supported in v5.2+
    Brief information about all virtual disks of the selected virtual machine.
    """
    virtualDiskInfo(
        "Filter Hyper-V virtual disk by name."
        diskNameFilter: String
    ): [HypervVirtualDiskInfo!]!
}

"Supported in v5.0+"
type HypervVirtualMachineMountSummary {
    "Supported in v5.0+"
    hostId: String
    "Supported in v5.0+"
    hostName: String
    "Required. Supported in v5.0+"
    id: String!
    "Required. Supported in v5.0+"
    isReady: Boolean!
    "Supported in v5.0+"
    mountRequestId: String
    "Supported in v5.0+"
    mountedVmId: String
    "Supported in v5.0+"
    mountedVmName: String
    powerStatus: HypervVirtualMachineMountSummaryPowerStatus!
    "Required. Supported in v5.0+"
    snapshotDate: DateTime
    "Supported in v5.0+"
    unmountRequestId: String
    "Required. Supported in v5.0+"
    vmId: String!
    "Required. Supported in v5.0+"
    vmName: String!
}

"Supported in v5.0+"
type HypervVirtualMachineSummary {
    """

    Supported in v5.0+
    Cloud instantiation specification for the selected virtual machine.
    """
    cloudInstantiationSpec: CloudInstantiationSpec
    """

    Supported in v6.0+
    Indicates if the Hyper-V virtual machine is configured to perform a full snapshot for the next backup.
    """
    forceFull: Boolean
    """

    Required. Supported in v5.0+
    The ID of the Hyper-V host.
    """
    hostId: String!
    "Required. Supported in v5.0+"
    id: String!
    """

    Required. Supported in v5.0+
    Brief info of all the objects in the infrastructure path to this VM.
    """
    infraPath: [ManagedHierarchyObjectAncestor!]!
    "Required. Supported in v5.0+"
    isRelic: Boolean!
    "Required. Supported in v5.0+"
    name: String!
    """

    Supported in v5.3+
    Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    snappable: CdmWorkload
}

"Supported in v5.0+"
type HypervVirtualMachineUpdate {
    """

    Supported in v5.0+
    Cloud instantiation specification for the selected virtual machine.
    """
    cloudInstantiationSpec: CloudInstantiationSpec
    """

    Supported in v5.0+
    v5.0-v5.1: Assign this VM to the given SLA domain.
    v5.2+: Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    A comma-separated list of Hyper-V virtual disk IDs that are excluded from backup.
    """
    virtualDiskIdsExcludedFromSnapshot: [String!]!
}

"Identity Provider is an entity responsible for authenticating a user account."
type IdentityProvider {
    "EntityId of the Identity provider."
    entityId: String!
    "Expiration date of the identity providers metadata."
    expirationDate: DateTime
    "Name of the Identity provider."
    name: String!
    "ID of the organization that owns the identity provider."
    ownerOrgId: String!
    "URL of single sign-on endpoint."
    signInUrl: String!
    "URL of the single sign-out endpoint."
    signOutUrl: String!
    "URL of service provider initiated single sign-on."
    spInitiatedSignInUrl: String!
    "URL of service provider initiated single sign-on for the purpose of testing a configured identity provider."
    spInitiatedTestUrl: String!
}

"Indicator of Compromise."
type IndicatorOfCompromise {
    "IOC kind."
    iocKind: IndicatorOfCompromiseKind!
    "IOC value as a string."
    iocValue: String!
}

type InfrastructureChart {
    focus: ReportFocusEnum!
    groupBy: [ClusterGroupByEnum!]
    name: String!
}

type InfrastructureTable {
    focus: ReportFocusEnum!
    groupBy: [ClusterGroupByEnum!]
    name: String!
    selectedColumns: [InfrastructureTableColumnEnum!]!
    sortBy: ClusterSortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

"Represents count of clusters grouped by cluster version."
type InstalledVersionGroupCount {
    "Count of clusters in each version."
    count: Int!
    "Version name."
    group: String!
    "Upgrade recommendation value."
    isUpgradeRecommended: Boolean!
}

"Interface CIDR Info."
type InterfaceCidr {
    cidr: String!
    interfaceType: InterfaceType!
    selected: Boolean!
}

type InternalBulkUpdateHostResponse {
    items: [HostDetail!]!
}

type InternalChangeVfdOnHostResponse {
    items: [HostVfdInstallResponse!]!
}

type InternalGetClusterIpsResponse {
    items: [String!]!
}

type InternalGetDefaultGatewayResponse {
    items: [RouteConfig!]!
}

type InventoryRoot {
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HierarchyObjectConnection!
}

type InventorySubHierarchyRoot {
    "List of children."
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HierarchyObjectConnection!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): HierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)."
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
}

"Link to download investigation results as CSV."
type InvestigationCsvDownloadLinkReply {
    "Link for the CSV file which can be downloaded."
    downloadLink: String!
}

"IP Rules for Azure storage account."
type IpRule {
    "IP for which the network access should be allowed."
    ip: String!
}

"Supported in v5.0+"
type IpmiAccess {
    "Required. Supported in v5.0+"
    https: Boolean!
    "Required. Supported in v5.0+"
    iKvm: Boolean!
}

"Determines if the rule name is unique or not."
type IsCloudNativeTagRuleNameUniqueReply {
    "Indicates whether the rule name is unique or not."
    isUnique: Boolean!
}

"Specifies whether the volume snapshot is restorable."
type IsVolumeSnapshotRestorableReply {
    "Specifies whether the EBS volume snapshot is restorable. The snapshot would be restorable only if the EBS volume exists in the AWS account, and is attached to exactly one EC2 instance."
    isRestorable: Boolean!
}

type Issue {
    events: [IssueEvent!]!
    fileResult: FileResult!
    id: String!
    latestPolicyObj: PolicyObj!
    openTime: Long!
    paginationId: String!
    policies: [ClassificationPolicySummary!]!
    resolvedTime: Long!
    violations: Int!
}

"Paginated list of Issue objects."
type IssueConnection {
    "Total number of Issue objects matching the request arguments."
    count: Int!
    "List of Issue objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [IssueEdge!]!
    "List of Issue objects."
    nodes: [Issue!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Issue object. This wrapper is used for pagination."
type IssueEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Issue object wrapped by this edge."
    node: Issue!
}

type IssueEvent {
    snapshotFid: String!
    timestamp: Long!
    type: IssueEventType!
    violations: Int!
    violationsDelta: Int!
}

type JobMetadata {
    createdAt: DateTime
    currentInstance: Int!
    id: Long!
    info: String!
    jobType: String!
    lastFailure: DateTime
    lastOwner: String!
    lastSkipped: DateTime
    lastSuccess: DateTime
    logLevel: LogLevel!
    numScheduledRuns: Int!
    numSuccessfulRuns: Int!
    owner: String!
    progress: String!
    progressedAt: DateTime
    retryAttempts: Int!
    startTime: DateTime
    startedAt: DateTime
    state: String!
    updatedAt: DateTime
}

type JobReply {
    clusterName: String!
    clusterUuid: String!
    customerAccount: String!
    metadata: JobMetadata
    version: String!
}

type JobsReply {
    jobs: [JobReply!]!
}

"Basic information about Rubrik Kubernetes Agent manifest."
type K8sAgentManifestInfo {
    "UUID of the kubernetes Cluster."
    clusterId: UUID!
    "SignedURL containing the created manifest."
    signedUrl: String!
}

"Response of the query that retrieves the Kubernetes app manifest."
type K8sAppManifest {
    "Specifies the success or failure status."
    isSuccessful: Boolean!
    "Manifest information to apply the new version."
    toApply: AppManifestInfo
    "Manifest information to delete the old version."
    toDelete: AppManifestInfo
    "Kubernetes Rubrik Backup Service version."
    version: String!
}

"Kubernetes cluster."
type K8sCluster implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Information about the Kubernetes cluster."
    clusterInfo: K8sClusterInfo!
    "List of IPs for the Kubernetes cluster."
    clusterIp: [String!]!
    "Ranges for ports used for backup and recovery."
    clusterPortRanges: [K8sClusterPortsInfo!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): K8sClusterDescendantConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Namespaces belonging to the Kubernetes cluster."
    k8sDescendantNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): K8sNamespaceConnection!
    "Time of the last successful refresh task on the Kubernetes cluster."
    lastRefreshTime: DateTime
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Deprecated. Use clusterPortRanges instead."
    rbsPortRanges: [K8sRbsInfo!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Connection status of the Kubernetes cluster."
    status: K8sClusterStatus!
}

"Paginated list of K8sCluster objects."
type K8sClusterConnection {
    "Total number of K8sCluster objects matching the request arguments."
    count: Int!
    "List of K8sCluster objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [K8sClusterEdge!]!
    "List of K8sCluster objects."
    nodes: [K8sCluster!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of K8sClusterDescendant objects."
type K8sClusterDescendantConnection {
    "Total number of K8sClusterDescendant objects matching the request arguments."
    count: Int!
    "List of K8sClusterDescendant objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [K8sClusterDescendantEdge!]!
    "List of K8sClusterDescendant objects."
    nodes: [K8sClusterDescendant!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the K8sClusterDescendant object. This wrapper is used for pagination."
type K8sClusterDescendantEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual K8sClusterDescendant object wrapped by this edge."
    node: K8sClusterDescendant!
}

"Wrapper around the K8sCluster object. This wrapper is used for pagination."
type K8sClusterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual K8sCluster object wrapped by this edge."
    node: K8sCluster!
}

"Information of the Kubernetes cluster."
type K8sClusterInfo {
    "Rubrik CDM cluster associated with the the Kubernetes cluster."
    associatedCdm: Cluster
    "Kubernetes version."
    k8sVersion: String
    "UUID of the Kubernetes cluster."
    kuprClusterUuid: UUID!
    "Port on the Kubernetes cluster used for communication with RSC."
    port: Int!
    "Type of the Kubernetes cluster."
    type: K8sClusterType!
}

"Represents a range of ports for a Kubernetes cluster."
type K8sClusterPortsInfo {
    "UUID of the Kubernetes cluster."
    kuprClusterUuid: UUID!
    "The upper bound (inclusive) of the port range."
    maxPort: Int!
    "The lower bound (inclusive) of the port range."
    minPort: Int!
    "The type of the port range. Allowed values: 'BACKUP' and 'USER_DRIVEN'. BACKUP type of ports are used for backup and USER_DRIVEN type of ports are used for recovery."
    portRangeType: KuprClusterPortsType!
}

"Kubernetes namespace."
type K8sNamespace implements HierarchyObject & HierarchySnappable & K8sClusterDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "API version of the namespace."
    apiVersion: String!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Specifies whether the namespace contains Kubernetes cluster-scoped resources."
    clusterScoped: Boolean!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Specifies whether the namespace is a relic."
    isRelic: Boolean!
    "Kubernetes cluster ID."
    k8sClusterId: String!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Name of the namespace."
    namespaceName: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "Number of persistent volume claims."
    numPvcs: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "Number of workloads."
    numWorkloads: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Version of the namespace on the Kubernetes cluster."
    resourceVersion: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of K8sNamespace objects."
type K8sNamespaceConnection {
    "The aggregate persistent volume claims (PVC) across namespaces based on applied filters and pagination arguments."
    aggregateK8sPvcs: Int!
    "The aggregate workloads across namespaces based on applied filters and pagination arguments."
    aggregateK8sWorkloads: Int!
    "Total number of K8sNamespace objects matching the request arguments."
    count: Int!
    "List of K8sNamespace objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [K8sNamespaceEdge!]!
    "List of K8sNamespace objects."
    nodes: [K8sNamespace!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the K8sNamespace object. This wrapper is used for pagination."
type K8sNamespaceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual K8sNamespace object wrapped by this edge."
    node: K8sNamespace!
}

"Deprecated. Use KuprClusterPortsInfoType instead."
type K8sRbsInfo {
    "UUID of the Kubernetes cluster."
    kuprClusterUuid: UUID!
    "The upper bound (inclusive) of a particular the port range."
    maxPort: Int!
    "The lower bound (inclusive) of a particular the port range."
    minPort: Int!
}

"Response of the query that retrieves the Kubernetes snapshot information."
type K8sSnapshotInfo {
    "Expiration time of the snapshot."
    expirationTime: DateTime
    "Specifies whether the snapshot is archived."
    isArchived: Boolean!
    "Kubernetes namespace name."
    namespace: String!
    "List of information about PVCs in the namespace."
    pvcList: [PvcInformation!]!
    "Creation time of the snapshot."
    snapshotTime: DateTime!
}

type KMSKey {
    arn: String!
    id: String!
    name: String!
}

"A Key management system (KMS) key in AWS realm."
type KmsEncryptionKey {
    "Aliases of KMS key."
    aliases: [String!]!
    "Amazon Resource Name (ARN) of the KMS key."
    arn: String!
    "ID of KMS key."
    id: String!
}

"Parameters to build KMS."
type KmsSpec {
    "The ID of the client app."
    appId: String!
    "The secret of the client app. Deprecated and will be removed soon."
    appSecret: String!
    "The cloud type. The allowed values are PUBLIC and USGOV."
    cloudType: O365AzureCloudType!
    "The key encryption key (KeK) name for Colossus."
    kekNameColossus: String!
    "The key encryption key (KeK) name."
    keyName: String!
    "The complete ID of the Azure Key Vault."
    kmsId: String!
    "The tenant hosting the Azure Key Vault."
    tenantId: String!
}

"A knowledge base article."
type KnowledgeBaseArticle {
    "Article number of the knowledge base article."
    articleNumber: String!
    "A flattened list of nodes representing the cause section of the knowledge base article."
    cause: [ContentNode!]!
    "Summary of the knowledge base article."
    description: String!
    "A flattened list of nodes representing the environment section of the knowledge base article."
    environment: [ContentNode!]!
    "ID of the knowledge base article."
    id: String!
    "A flattened list of nodes representing the notes section of the knowledge base article."
    notes: [ContentNode!]!
    "A flattened list of nodes representing the resolution section of the knowledge base article."
    resolution: [ContentNode!]!
    "A flattened list of nodes representing the summary section of the knowledge base article."
    summary: [ContentNode!]!
    "Title of the knowledge base article."
    title: String!
}

type Label {
    key: String!
    value: String!
}

"A single label Rule."
type LabelRule {
    "Does this tag rule apply to all cloud accounts."
    applyToAllCloudAccounts: Boolean!
    "List of cloud-native accounts."
    cloudNativeAccounts: [CloudNativeAccountIdWithName!]!
    "Effective SLA Domain defined in the label rule."
    effectiveSla: TagRuleEffectiveSla
    "Specifies whether the user has permissions to modify the label rule."
    hasPermissionToModify: Boolean!
    "ID of the label rule."
    id: String!
    "Label key and value."
    label: CloudNativeLabel
    "Name of the label rule."
    name: String!
    "Object type for which the label rule is applicable."
    objectType: ManagedObjectType!
}

"History of Ransomware Investigation and Sensitive Data Discovery features."
type LambdaFeatureHistory {
    "True if Ransomware Investigation was ever enabled."
    wasRansomwareInvestigationEverEnabled: Boolean!
    "True if Sensitive Data Discovery was ever enabled."
    wasSensitiveDataDiscoveryEverEnabled: Boolean!
}

type LambdaSettings {
    anomalyThreshold: Float
    isAnomalyAlertEnabled: Boolean
    ransomwareThreshold: Float
}

type LastTestStatus {
    enumValue: LastTestStatusEnum!
}

"Latest user note information."
type LatestUserNote {
    "Object ID where note is attached."
    objectId: String!
    "User note attachment time."
    time: DateTime!
    "Name of the user who attached the note."
    userName: String
    "User note text."
    userNote: String
}

"LDAP integration information."
type LdapIntegration {
    "BaseDn for your LDAP integration."
    baseDn: String!
    "BindUserName for your LDAP integration."
    bindUserName: String!
    "Dynamic DNS name for your LDAP integration."
    dynamicDnsName: String!
    "Group member attribute for your LDAP integration."
    groupMemberAttr: String
    "Group membership attribute for your LDAP integration."
    groupMembershipAttr: String
    "Group search filter for your LDAP integration."
    groupSearchFilter: String
    "ID for your LDAP integration."
    id: String!
    "Whether TOTP as 2FA is enforced for the LDAP integration."
    isTotpEnforced: Boolean!
    "LdapServers for your LDAP integration."
    ldapServers: [LdapServer!]!
    "Name for your LDAP integration."
    name: String!
    "TrustedCerts for your LDAP integration."
    trustedCerts: String
    "User name attribute for your LDAP integration."
    userNameAttr: String
    "User search filter for your LDAP integration."
    userSearchFilter: String
}

"Paginated list of LdapIntegration objects."
type LdapIntegrationConnection {
    "Total number of LdapIntegration objects matching the request arguments."
    count: Int!
    "List of LdapIntegration objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [LdapIntegrationEdge!]!
    "List of LdapIntegration objects."
    nodes: [LdapIntegration!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the LdapIntegration object. This wrapper is used for pagination."
type LdapIntegrationEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual LdapIntegration object wrapped by this edge."
    node: LdapIntegration!
}

"LDAP server information."
type LdapServer {
    "Hostname for the LDAP server."
    hostname: String!
    "Port used by the LDAP server."
    port: Int!
    "Whether the LDAP server uses TLS."
    useTls: Boolean!
}

"TOTP status for a LDAP principal."
type LdapTotpStatus {
    "TOTP as 2FA is enabled."
    isEnabled: Boolean!
    "TOTP as 2FA is enforced."
    isEnforced: Boolean!
    "Whether TOTP is supported for the LDAP principal."
    isSupported: Boolean!
}

"Contains information about the legal hold placed on the Snapshot."
type LegalHoldInfo {
    "Boolean which describes whether snapshot has to be held in place."
    shouldHoldInPlace: Boolean!
}

"LegalHoldSnappableDetails."
type LegalHoldSnappableDetail {
    "Snappable id."
    id: String!
    "Snappable name."
    name: String!
    "Physical path to this object."
    physicalLocation: [LocationPathPoint!]!
    "Snappable type."
    snappableType: ManagedObjectType!
    "Snapshots count with legal hold."
    snapshotCount: Int!
    "Snapshot details."
    snapshotDetails: [LegalHoldSnapshotDetail!]!
}

"Paginated list of LegalHoldSnappableDetail objects."
type LegalHoldSnappableDetailConnection {
    "Total number of LegalHoldSnappableDetail objects matching the request arguments."
    count: Int!
    "List of LegalHoldSnappableDetail objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [LegalHoldSnappableDetailEdge!]!
    "List of LegalHoldSnappableDetail objects."
    nodes: [LegalHoldSnappableDetail!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the LegalHoldSnappableDetail object. This wrapper is used for pagination."
type LegalHoldSnappableDetailEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual LegalHoldSnappableDetail object wrapped by this edge."
    node: LegalHoldSnappableDetail!
}

"LegalHoldSnapshotDetails."
type LegalHoldSnapshotDetail {
    "Snapshot id."
    id: String!
    "Legal hold time."
    legalHoldTime: DateTime
    "Snapshot time."
    snapshotTime: DateTime
    "Snapshot type."
    type: SnapshotTypeEnum!
}

"Paginated list of LegalHoldSnapshotDetail objects."
type LegalHoldSnapshotDetailConnection {
    "Total number of LegalHoldSnapshotDetail objects matching the request arguments."
    count: Int!
    "List of LegalHoldSnapshotDetail objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [LegalHoldSnapshotDetailEdge!]!
    "List of LegalHoldSnapshotDetail objects."
    nodes: [LegalHoldSnapshotDetail!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the LegalHoldSnapshotDetail object. This wrapper is used for pagination."
type LegalHoldSnapshotDetailEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual LegalHoldSnapshotDetail object wrapped by this edge."
    node: LegalHoldSnapshotDetail!
}

"Information about a license."
type License {
    "The product for which this license can be used."
    product: Product!
    "The quantity of licenses."
    quantity: Float!
    "The end date of the support term."
    termEndDate: DateTime
    "The start date of the support term."
    termStartDate: DateTime
}

"Represents a single licensed product."
type LicensedClusterProduct {
    "The contributions from other products that make up the used capacity of this product. Only valid when product type is Scale."
    contributions: [CapacityContribution!]!
    "The amount of bytes under the license with the nearest expiry date."
    nextExpiringBytes: Float!
    "The next expiry date of a license under this product."
    nextExpiringTime: DateTime
    "The number of Rubrik clusters included in this product."
    numClusters: Int!
    "The name of the product."
    product: Product!
    "The product types under this product that the customer has."
    productTypes: [String!]!
    "The total purchased capacity of this product, in bytes."
    purchasedCapacityBytes: Float!
    "The total registered capacity of this product, in bytes."
    registeredCapacityBytes: Float!
}

"Licenses for a cluster product grouped by product types."
type LicensesForClusterProductReply {
    "Information about the distinct product types of this product."
    infos: [ProductTypeInfo!]!
    "Aggregated information about the cluster product."
    overview: LicensedClusterProduct
}

"Supported in v5.0+"
type Link {
    """

    Required. Supported in v5.0+
    v5.0: The link's destination.
    v5.1+: The destination of the link.
    """
    href: String!
    """

    Required. Supported in v5.0+
    v5.0: The relation of this link's destination to the current resource.
    v5.1+: The relation of the destination of this link to the current resource.
    """
    rel: String!
}

"Linux fileset type."
type LinuxFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FailoverClusterAppDescendantType & FailoverClusterAppPhysicalChildType & FailoverClusterTopLevelDescendantType & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the CDM cluster."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Failover cluster app."
    failoverClusterApp: FailoverClusterApp
    "Boolean variable denoting if hard link support is enabled."
    hardlinkSupportEnabled: Boolean!
    "Host of the linux fileset."
    host: PhysicalHost
    "The FID of the hierarchy object."
    id: UUID!
    "Boolean variable denoting if hard link support is enabled."
    isPassThrough: Boolean!
    "Boolean variable denoting if hard link support is enabled."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Boolean variable denoting if hard link support is enabled."
    pathExceptions: [String!]!
    "Paths excluded from fileset."
    pathExcluded: [String!]!
    "Boolean variable denoting if hard link support is enabled."
    pathIncluded: [String!]!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Boolean variable denoting if hard link support is enabled."
    symlinkResolutionEnabled: Boolean!
}

"Response to list CIDRs for compute settings."
type ListCidrsForComputeSettingReply {
    "List of cluster interface CIDR map."
    clusterInterfaceCidrs: [ClusterInfCidrs!]!
}

"List of Ransomware Investigation workload locations."
type ListLocationsReply {
    "List of Ransomware Investigation workload locations."
    locations: [String!]!
}

"""

Supported in m3.2.0-m4.2.0
Response object for list store on mosaic.
"""
type ListStoreResponse {
    """

    Supported in m3.2.0-m4.2.0
    Object with Response from ListStore.
    """
    data: [MosaicStoreObject!]!
    """

    Supported in m3.2.0-m4.2.0
    Error message in case of failure.
    """
    message: String
    """

    Supported in m3.2.0-m4.2.0
    Return Code.
    """
    returnCode: Long
    """

    Supported in m3.2.0-m4.2.0
    Status of the request.
    """
    status: Boolean
}

"List of locations where your GCP disks are present."
type ListStoredDiskLocationsReply {
    "List of regions where your GCP disks are present."
    regions: [String!]!
    "List of zones where your GCP disks are present."
    zones: [String!]!
}

"""

Supported in m3.2.0-m4.2.0
Response object for list version on mosaic.
"""
type ListVersionResponse {
    """

    Supported in m3.2.0-m4.2.0
    Object with Response from ListVersion.
    """
    data: [MosaicVersionObject!]!
    """

    Supported in m3.2.0-m4.2.0
    Error message in case of failure.
    """
    message: String
    """

    Supported in m3.2.0-m4.2.0
    Return Code.
    """
    returnCode: Long
    """

    Supported in m3.2.0-m4.2.0
    Status of the request.
    """
    status: Boolean
}

"Location Path Point."
type LocationPathPoint {
    "Managed ID."
    managedId: String!
    "Location name."
    name: String!
}

"Specifies information about lockout configuration."
type LockoutConfig {
    "Specifies the time after which the account is unlocked automatically."
    accountAutoUnlockDurationInMins: Int!
    "Specifies whether the auto unlock feature is enabled on the UI."
    isAutoUnlockFeatureEnabled: Boolean!
    "Specifies whether the account lockout feature is enabled on the UI."
    isBruteForceLockoutEnabled: Boolean!
    "Specifies whether self service is enabled for all users in this organization."
    isSelfServiceEnabled: Boolean!
    "Specifies the number of failed login attempts allowed after which the account is locked."
    loginAttemptsLimit: Int!
    "Specifies the number of times self-service is allowed to unlock the account."
    selfServiceAttemptsLimit: Int!
    "Specifies the validity of the current self service token."
    selfServiceTokenValidityInMins: Int!
}

"User account lockout details."
type LockoutState {
    "Specifies whether the account is locked."
    isLocked: Boolean!
    "Mechanism for locking the user account."
    lockMethod: LockMethod!
    "The time at which the account was previously locked."
    lockedAt: DateTime
    "Method for unlocking the locked account. Possible values are: self-service, administrative-unlocking, support-unlocking."
    unlockMethod: UnlockMethod!
    "The time at which the account was previously unlocked."
    unlockedAt: DateTime
}

"Input to configure the log settings for databases in an SLA Domain."
type LogConfigResult {
    "SLA Domain log frequency configuration."
    slaLogFrequencyConfig: SlaLogFrequencyConfigResult
}

"Represents Microsoft 365 region as described in the Microsoft Multi-Geo documentation."
type M365Region {
    "The three-letter code identifying the region."
    code: String!
    "The human-readable name of the region."
    name: String!
}

"The M365 regions of the organization."
type M365RegionsResp {
    "The list of regions."
    regions: [M365Region!]!
}

"Supported in v6.0+"
type MalwareMatch {
    """

    Required. Supported in v6.0+
    Index into MalwareScanConfig.indicators_of_compromise.
    """
    indicatorIndex: Int!
    "Required. Supported in v6.0+"
    paths: [PathInfo!]!
}

"Supported in v6.0+"
type MalwareScanConfig {
    """

    Supported in v6.0+
    Criteria to restrict files to scan.
    """
    fileScanCriteria: MalwareScanFileCriteria
    """

    Required. Supported in v6.0+
    List of IOCs to scan for.
    """
    indicatorsOfCompromise: [CdmIndicatorOfCompromise!]!
    """

    Supported in v6.0+
    Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one.
    """
    maxMatchesPerSnapshot: Int
    """

    Supported in v6.0+
    Name of this scan.
    """
    name: String
    """

    Supported in v6.0+
    Notes to describe this scan.
    """
    notes: String
    """

    Required. Supported in v6.0+
    Snappable IDs to scan for malware.
    """
    objectIds: [String!]!
    """

    Supported in v6.0+
    Additional information required for files with malware matches.
    """
    requestedMatchDetails: RequestedMatchDetails
    """

    Supported in v6.0+
    Specifies whether features that rely on the accuracy of filesystem metadata, like creation time and modification time of files, are enabled or not. These features include backend optimizations to skip re-scanning files that have not changed across snapshots, as indicated by the unchanged timestamps of files. This flag also gates access to some filters that can be specified in this API. Note that this flag should be used with caution, as relying on file timestamps may make the system vulnerable to adversarial techniques such as timestamp manipulation.
    """
    shouldTrustFilesystemTimeInfo: Boolean
    """

    Supported in v6.0+
    Limit which snapshots to include in the malware scan.
    """
    snapshotScanLimit: MalwareScanSnapshotLimit
}

"Supported in v6.0+"
type MalwareScanDetail {
    """

    Required. Supported in v6.0+
    The malware scan config.
    """
    config: MalwareScanConfig
    """

    Supported in v6.0+
    The end time of the scan.
    """
    endTime: DateTime
    """

    Required. Supported in v6.0+
    The malware scan ID.
    """
    id: String!
    """

    Required. Supported in v6.0+
    A array of object ID and list of snapshot IDs which are the the target of the scan.
    """
    snapshots: [ObjectIdToSnapshotIds!]!
    """

    Supported in v6.0+
    The start time of the scan.
    """
    startTime: DateTime
}

"Supported in v6.0+"
type MalwareScanDetailListResponse {
    """

    Supported in v6.0+
    List of matching objects.
    """
    data: [MalwareScanDetail!]!
    """

    Supported in v6.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v6.0+
    Total list responses.
    """
    total: Int
}

"Supported in v6.0+"
type MalwareScanFileCriteria {
    """

    Supported in v6.0+
    Specify the smallest and largest files to scan.
    """
    fileSizeLimits: MalwareScanFileSizeLimits
    """

    Supported in v6.0+
    Specify limits around file creation and modification time. The top-level API field `shouldTrustFilesystemTimeInfo` must be set to true when this field is specified.
    """
    fileTimeLimits: MalwareScanFileTimeLimits
    "Supported in v6.0+. For more information on interpretation of includes, exclusions, and exceptions, see /fileset_template."
    pathFilter: MalwareScanPathFilter
}

"Supported in v6.0+"
type MalwareScanFileSizeLimits {
    """

    Supported in v6.0+
    Maximum size of files to scan. Files that are bigger than this size are ignored.
    """
    maximumSizeInBytes: Long
    """

    Supported in v6.0+
    Minimum size of files to scan. Files smaller than this size are ignored.
    """
    minimumSizeInBytes: Long
}

"Supported in v6.0+"
type MalwareScanFileTimeLimits {
    """

    Supported in v6.0+
    Earliest file creation time.  Any files created before this time will be elided.
    """
    earliestCreationTime: DateTime
    """

    Supported in v6.0+
    Earliest file modification time.  Any files last modified before this time will be elided.
    """
    earliestModificationTime: DateTime
    """

    Supported in v6.0+
    Latest file creation time.  Any files created after this time will be elided.
    """
    latestCreationTime: DateTime
    """

    Supported in v6.0+
    Latest file modification time.  Any files modified after this time will be elided.
    """
    latestModificationTime: DateTime
}

"Malware scan result for a snapshot."
type MalwareScanInSnapshotResult {
    "Specifies whether the snapshot has expired."
    isSnapshotExpired: Boolean!
    "ID of the most recent job run against this snapshot, if any."
    lastJobId: String
    "List of malware matches found in this snapshot."
    matches: [MalwareMatch!]!
    "The snapshot's quarantine details."
    quarantineDetails: QuarantineSpec
    "Stats collected during the scan.  Note that the stats capture what was actually scanned.  It's possible a scan for a snapshot terminates early;  it's also possible a scan is retried after an error. This means the counts could be less than or more than the actual count of entites (files, bytes, etc.) in the snapshot."
    scanStats: MalwareScanStats
    "Date of the snapshot."
    snapshotDate: DateTime
    "ID of the snapshot."
    snapshotId: String!
    "Status of the scan."
    status: MalwareScanInSnapshotStatus!
}

"Supported in v6.0+. For more information on the interpretation of includes, exclusions, and exceptions, see v1/fileset_template."
type MalwareScanPathFilter {
    """

    Supported in v6.0+
    Paths to exempt from exclusion.
    """
    exceptions: [String!]!
    """

    Supported in v6.0+
    Paths to exclude.
    """
    excludes: [String!]!
    """

    Supported in v6.0+
    Paths to include.
    """
    includes: [String!]!
}

"Malware scan results for an object."
type MalwareScanResult {
    "The object location."
    location: String!
    "The scanned object."
    object: CdmHierarchySnappableNew
    "Results for each scanned snapshot."
    snapshotResults: [MalwareScanInSnapshotResult!]!
}

"Supported in v6.0+"
type MalwareScanResults {
    """

    Required. Supported in v6.0+
    ID of the malware detection.
    """
    id: String!
    """

    Required. Supported in v6.0+
    List of IOCs to scan for.
    """
    indicatorsOfCompromise: [CdmIndicatorOfCompromise!]!
    "Required. Supported in v6.0+"
    results: [CdmMalwareScanResult!]!
}

"Supported in v6.0+"
type MalwareScanSnapshotLimit {
    """

    Supported in v6.0+
    Maximum snapshot time.  Any snapshots taken after this time will be elided.
    """
    endTime: DateTime
    """

    Supported in v6.0+
    Maximum number of snapshots to scan per object.  The snapshots of each object are scanned in reverse chronological order, so this is equivalent to scan-last-n-snapshots.
    """
    maxSnapshotsPerObject: Int
    """

    Supported in v6.0+
    A array of object ID and list of snapshots of that object to scan. If this field is specified, none of the other `MalwareScanSnapshotLimit` fields may be specified.
    """
    snapshotsToScanPerObject: [ObjectIdToSnapshotIds!]!
    """

    Supported in v6.0+
    Minimum snapshot time.  Any snapshots taken before this time will be elided.
    """
    startTime: DateTime
}

"Supported in v6.0+"
type MalwareScanStats {
    """

    Required. Supported in v6.0+
    The number of files encountered during the scan.  This may be less than the total number of files in the snapshot if the scan terminates early.
    """
    numFiles: Long!
    """

    Required. Supported in v6.0+
    The number of files scanned.
    """
    numFilesScanned: Long!
    """

    Required. Supported in v6.0+
    The total file size of the files scanned.  This may differ from the actual number of bytes read as part of the scan.  For example a YARA rule might only need to read a part of a file at a specific offset, whereas other rules might need to read the entire file to compute a hash.
    """
    totalFilesScannedSizeBytes: Long!
}

"Supported in v5.0+"
type ManagedHierarchyObjectAncestor {
    "Required. Supported in v5.0+"
    id: String!
    "Required. Supported in v5.0+"
    name: String!
}

"Supported in v5.2+"
type ManagedObjectPendingSlaInfo {
    "Supported in v5.2+"
    isPendingSlaDomainRetentionLocked: Boolean
    """

    Required. Supported in v5.2+
    Managed ID of the object.
    """
    objectId: String!
    "Required. Supported in v5.2+"
    pendingSlaDomainId: String!
    "Required. Supported in v5.2+"
    pendingSlaDomainName: String!
}

"Supported in v5.2+"
type ManagedObjectSlaInfo {
    "Required. Supported in v5.2+"
    configuredSlaDomainId: String!
    "Required. Supported in v5.2+"
    configuredSlaDomainName: String!
    "Required. Supported in v5.2+"
    effectiveSlaDomainId: String!
    "Required. Supported in v5.2+"
    effectiveSlaDomainName: String!
    "Supported in v5.2+"
    effectiveSlaDomainSourceId: String
    "Supported in v5.2+"
    effectiveSlaDomainSourceName: String
    "Supported in v5.2+"
    effectiveSlaPolarisManagedId: String
    "Supported in v5.2+"
    isEffectiveSlaDomainRetentionLocked: Boolean
    """

    Required. Supported in v5.2+
    Managed ID of the object.
    """
    objectId: String!
    slaAssignment: SlaAssignment!
}

"Managed Volume information."
type ManagedVolume implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Mount protocol used for Managed Volume."
    applicationTag: ManagedVolumeApplicationTag
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The ID of the workload on the Rubrik CDM cluster."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Client configuration related to backup scripts."
    clientConfig: ManagedVolumeSlaClientConfig
    "Allowed host names."
    clientNamePatterns: [String!]!
    "Cdm cluster information."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): ManagedVolumeDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Physical Host for the Managed Volume."
    host: PhysicalHost
    "Specifies host details for the SLA Managed Volume."
    hostDetail: ManagedVolumeHostDetail
    "The FID of the hierarchy object."
    id: UUID!
    "If the managed volume is in relic state."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "Paginated list of Live Mounts for Managed Volume."
    liveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ManagedVolumeMountConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Main Mount for the Managed Volume."
    mainMount: ManagedVolumeMount
    "The type of the Managed Volume."
    managedVolumeType: ManagedVolumeType!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "Mount state of the Managed Volume."
    mountState: MountState
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "Number of channels in the Managed Volume."
    numChannels: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): ManagedVolumePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The Managed Volume's physical size in bytes."
    physicalUsedSize: Long!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The date on which the effective SLA Domain was assigned or inherited."
    protectionDate: DateTime
    "Mount protocol used for Managed Volume."
    protocol: ManagedVolumeShareType!
    "Size provisioned for the Managed Volume in bytes."
    provisionedSize: Long!
    "The list of Managed Volume queued snapshots for this workload."
    queuedSnapshotGroupBys(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter queued snapshots by date."
        filter: ManagedVolumeQueuedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: ManagedVolumeQueuedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): ManagedVolumeQueuedSnapshotGroupByConnection
    "The list of queued snapshots for this Managed Volume."
    queuedSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter queued snapshots by date."
        filter: ManagedVolumeQueuedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): ManagedVolumeQueuedSnapshotConnection
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Includes statistics for the protected objects, for example, archive Storage."
    reportWorkload: Snappable
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "SMB share details of the Managed Volume."
    smbShare: ManagedVolumeSmbShare
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "State of the Managed Volume."
    state: ManagedVolumeState!
    "Subnet of the Managed Volume."
    subnet: String
}

"Managed Volume workload related app metadata for a snapshot."
type ManagedVolumeAppMetadata {
    "Stats related to Managed Volume snapshot."
    stats: ManagedVolumeSnapshotStats!
}

"Supported in v5.0+"
type ManagedVolumeChannelConfig {
    """

    Supported in v5.3+
    Directory path on the host machine used to export the NFS mount or SMB share.
    """
    hostMountPoint: String
    """

    Required. Supported in v5.0+
    v5.0-v6.0: IP address of channel export.
    v7.0+: IP address of the channel export.
    """
    ipAddress: String!
    """

    Required. Supported in v5.0+
    The path of the NFS mount if exported over NFS, or the SMB share name if exported over SMB.
    """
    mountPoint: String!
}

"Paginated list of ManagedVolume objects."
type ManagedVolumeConnection {
    "Total number of ManagedVolume objects matching the request arguments."
    count: Int!
    "List of ManagedVolume objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeEdge!]!
    "List of ManagedVolume objects."
    nodes: [ManagedVolume!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of ManagedVolumeDescendantType objects."
type ManagedVolumeDescendantTypeConnection {
    "Total number of ManagedVolumeDescendantType objects matching the request arguments."
    count: Int!
    "List of ManagedVolumeDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeDescendantTypeEdge!]!
    "List of ManagedVolumeDescendantType objects."
    nodes: [ManagedVolumeDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ManagedVolumeDescendantType object. This wrapper is used for pagination."
type ManagedVolumeDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumeDescendantType object wrapped by this edge."
    node: ManagedVolumeDescendantType!
}

"Wrapper around the ManagedVolume object. This wrapper is used for pagination."
type ManagedVolumeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolume object wrapped by this edge."
    node: ManagedVolume!
}

"Supported in v5.0+"
type ManagedVolumeExport {
    """

    Required. Supported in v5.0+
    Channels of this export.
    """
    channels: [ManagedVolumeChannelConfig!]!
    """

    Required. Supported in v5.0+
    v5.0-v8.0:
    v9.0: Config for a Managed Volume Export.
    """
    config: ManagedVolumeExportConfig
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Is export active.
    v7.0+: Indicates if export is active.
    """
    isActive: Boolean!
}

"Export channel metadata of the Managed Volume."
type ManagedVolumeExportChannel {
    "Stats of the Managed Volume Export Channel."
    channelStats: ManagedVolumeExportChannelStats!
    "Export date of the Managed Volume channel."
    exportDate: DateTime!
    "Floating IP address of a Managed Volume channel."
    floatingIpAddress: String!
    "Id of the Managed Volume export channel."
    id: String!
    "Path of the Managed Volume mount."
    mountPath: String!
    "Mount Specification for the Managed Volume."
    mountSpec: ManagedVolumeMountSpec!
}

"Stats of the Managed Volume Export Channel."
type ManagedVolumeExportChannelStats {
    "Total size in bytes."
    totalSize: Long!
    "Used size in bytes."
    usedSize: Long!
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Config for a Managed Volume Export.
"""
type ManagedVolumeExportConfig {
    "Configuration for updating a Managed Volume."
    managedVolumePatchConfig: ManagedVolumePatchConfig
    "Mount protocol used for Managed Volume."
    shareType: ManagedVolumeShareType
    """

    Supported in v5.0+
    v5.0-v6.0: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces.
    v7.0: IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
    v8.0+: IP subnet specifing an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
    """
    subnet: String
}

"Specifies host details for the SLA Managed Volume."
type ManagedVolumeHostDetail {
    "Specifies the Rubrik FID of the host."
    id: String!
    "Specifies the host name."
    name: String!
    "Specifies connectivity status of the host."
    status: HostConnectivityStatusEnum!
}

"Managed Volume inventory statistics."
type ManagedVolumeInventoryStats {
    "Always-mounted Managed Volume inventory statistics."
    alwaysMounted: ManagedVolumeStats!
    "SLA-based Managed Volume inventory statistics."
    slaBased: ManagedVolumeStats!
}

"Managed Volume Export details object."
type ManagedVolumeMount implements CdmHierarchyObject & HierarchyObject & ManagedVolumeDescendantType & ManagedVolumePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Channel metadata of the Managed Volume mount."
    channels: [ManagedVolumeExportChannel!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): ManagedVolumeMountDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Fid of the Managed Volume Export."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Logical size used by the Managed Volume in bytes."
    logicalUsedSize: Long!
    "Managed Volume for the export."
    managedVolume: ManagedVolume!
    "The name of the hierarchy object."
    name: String!
    "Number of channels in the Managed Volume Export."
    numChannels: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): ManagedVolumeMountPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Source snapshot of the Live Mount."
    sourceSnapshot: CdmSnapshot!
}

"Paginated list of ManagedVolumeMount objects."
type ManagedVolumeMountConnection {
    "Total number of ManagedVolumeMount objects matching the request arguments."
    count: Int!
    "List of ManagedVolumeMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeMountEdge!]!
    "List of ManagedVolumeMount objects."
    nodes: [ManagedVolumeMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of ManagedVolumeMountDescendantType objects."
type ManagedVolumeMountDescendantTypeConnection {
    "Total number of ManagedVolumeMountDescendantType objects matching the request arguments."
    count: Int!
    "List of ManagedVolumeMountDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeMountDescendantTypeEdge!]!
    "List of ManagedVolumeMountDescendantType objects."
    nodes: [ManagedVolumeMountDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ManagedVolumeMountDescendantType object. This wrapper is used for pagination."
type ManagedVolumeMountDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumeMountDescendantType object wrapped by this edge."
    node: ManagedVolumeMountDescendantType!
}

"Wrapper around the ManagedVolumeMount object. This wrapper is used for pagination."
type ManagedVolumeMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumeMount object wrapped by this edge."
    node: ManagedVolumeMount!
}

"Paginated list of ManagedVolumeMountPhysicalChildType objects."
type ManagedVolumeMountPhysicalChildTypeConnection {
    "Total number of ManagedVolumeMountPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of ManagedVolumeMountPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeMountPhysicalChildTypeEdge!]!
    "List of ManagedVolumeMountPhysicalChildType objects."
    nodes: [ManagedVolumeMountPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ManagedVolumeMountPhysicalChildType object. This wrapper is used for pagination."
type ManagedVolumeMountPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumeMountPhysicalChildType object wrapped by this edge."
    node: ManagedVolumeMountPhysicalChildType!
}

"Mount Specification for the Managed Volume."
type ManagedVolumeMountSpec {
    "Size of the mount image."
    imageSizeOpt: Long
    "Mount Directory for the export channel."
    mountDir: String!
    "CDM node specification for the channel mount."
    node: ClusterNode
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Config for updating a Managed Volume.
"""
type ManagedVolumePatchConfig {
    """

    Supported in v5.0+
    v5.0-v5.3: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?
    v6.0: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
    v7.0: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards *, or ?.
    v8.0+: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
    """
    hostPatterns: [String!]!
    """

    Supported in v5.0+
    v5.0-v6.0: List of node-ids to use for mounting this managed volume channels. Caller should specify at least one node per channel in the managed volume. If the nodeHint is not provided, system will randomly select a subset of nodes in cluster to mount the channels.
    v7.0+: List of node-IDs to use for mounting the channels of this Managed Volume. Caller should specify at least one node per channel in the Managed Volume. If nodeHint is not provided, the system randomly selects a subset of Rubrik cluster nodes to mount the channels.
    """
    nodeHint: [String!]!
    """

    Supported in v5.0+
    v5.0-v5.3: Valid Active Directory domain name for users accessing this managed volume over SMB
    v6.0: Valid Active Directory domain name for users accessing this managed volume over SMB.
    v7.0+: Valid Active Directory domain name for users accessing this Managed Volume over SMB.
    """
    smbDomainName: String
    """

    Supported in v5.0+
    v5.0-v5.3: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
    v6.0: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
    v7.0+: List of valid SMB host IP addresses that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
    """
    smbValidIps: [String!]!
    """

    Supported in v5.0+
    v5.0-v5.3: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
    v6.0: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
    v7.0+: List of valid usersnames in the domain that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
    """
    smbValidUsers: [String!]!
}

"Paginated list of ManagedVolumePhysicalChildType objects."
type ManagedVolumePhysicalChildTypeConnection {
    "Total number of ManagedVolumePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of ManagedVolumePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumePhysicalChildTypeEdge!]!
    "List of ManagedVolumePhysicalChildType objects."
    nodes: [ManagedVolumePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ManagedVolumePhysicalChildType object. This wrapper is used for pagination."
type ManagedVolumePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumePhysicalChildType object wrapped by this edge."
    node: ManagedVolumePhysicalChildType!
}

"The Queued snapshot object associated with the Managed Volume."
type ManagedVolumeQueuedSnapshot {
    "Date and time of the snapshot."
    date: DateTime!
}

"Paginated list of ManagedVolumeQueuedSnapshot objects."
type ManagedVolumeQueuedSnapshotConnection {
    "Total number of ManagedVolumeQueuedSnapshot objects matching the request arguments."
    count: Int!
    "List of ManagedVolumeQueuedSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeQueuedSnapshotEdge!]!
    "List of ManagedVolumeQueuedSnapshot objects."
    nodes: [ManagedVolumeQueuedSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ManagedVolumeQueuedSnapshot object. This wrapper is used for pagination."
type ManagedVolumeQueuedSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumeQueuedSnapshot object wrapped by this edge."
    node: ManagedVolumeQueuedSnapshot!
}

"ManagedVolumeQueued Snapshot data with groupby info applied to it."
type ManagedVolumeQueuedSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: ManagedVolumeQueuedSnapshotGroupByInfo!
    "Paginated ManagedVolumeQueued snapshot data."
    managedVolumeQueuedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Sorts snapshots by field."
        sortBy: ManagedVolumeQueuedSnapshotSortBy = DATE,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ManagedVolumeQueuedSnapshotConnection!
    "Provides further groupings for the data."
    managedVolumeQueuedSnapshotGroupBy(
        "Groups snapshots by field."
        groupBy: ManagedVolumeQueuedSnapshotGroupByTime!
    ): [ManagedVolumeQueuedSnapshotGroupBy!]!
}

"Paginated list of ManagedVolumeQueuedSnapshotGroupBy objects."
type ManagedVolumeQueuedSnapshotGroupByConnection {
    "Total number of ManagedVolumeQueuedSnapshotGroupBy objects matching the request arguments."
    count: Int!
    "List of ManagedVolumeQueuedSnapshotGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ManagedVolumeQueuedSnapshotGroupByEdge!]!
    "List of ManagedVolumeQueuedSnapshotGroupBy objects."
    nodes: [ManagedVolumeQueuedSnapshotGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ManagedVolumeQueuedSnapshotGroupBy object. This wrapper is used for pagination."
type ManagedVolumeQueuedSnapshotGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ManagedVolumeQueuedSnapshotGroupBy object wrapped by this edge."
    node: ManagedVolumeQueuedSnapshotGroupBy!
}

"Client configuration related to backup scripts."
type ManagedVolumeSlaClientConfig {
    "Backup script configuration."
    backupScript: ManagedVolumeSlaScriptConfig!
    "Host mount path for the channels."
    channelHostMountPaths: [String!]!
    "Post failed backup script configuration."
    failedPostBackupScript: ManagedVolumeSlaScriptConfig
    "Host ID for the channels."
    hostId: String!
    "Pre backup script configuration."
    preBackupScript: ManagedVolumeSlaScriptConfig
    "Cancel backup if pre backup script fails."
    shouldCancelBackupOnPreBackupScriptFailure: Boolean!
    "Post successful backup script configuration."
    successfulPostBackupScript: ManagedVolumeSlaScriptConfig
    "Client username."
    username: String!
}

"Backup script configurations."
type ManagedVolumeSlaScriptConfig {
    "Full command with arguments to run the script."
    scriptCommand: String!
    "Timeout for the script in seconds."
    timeout: Long!
}

"SMB share information of the channel."
type ManagedVolumeSmbShare {
    "List of active directory groups."
    activeDirectoryGroups: [String!]!
    "Domain name of the Managed Volume."
    domainName: String!
    "List of valid IPs."
    validIps: [String!]!
    "List of valid users."
    validUsers: [String!]!
}

"Supported in v5.0+"
type ManagedVolumeSnapshotLinks {
    """

    Supported in v5.0+
    v5.0-v6.0:
    v7.0+: Reference to Managed Volume snapshot related object.
    """
    exportLink: Link
    "Supported in v5.0+"
    self: Link
}

"Stats related to managed volume snapshot."
type ManagedVolumeSnapshotStats {
    "The amount of logical space used."
    logicalBytes: Long!
    "The amount of physical space used."
    physicalBytes: Long!
    "Total number of inodes."
    totalInodes: Long
    "The number of used inodes."
    usedInodes: Long
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Summary of the managed volume snapshot.
"""
type ManagedVolumeSnapshotSummary {
    "The base snapshot summary for Managed Volume snapshot."
    baseSnapshotSummary: BaseSnapshotSummary
    """

    Supported in v5.2+
    A Boolean that specifies whether the snapshot is queued to be stored as a patch file. When this value is 'true', the snapshot is in queue and not yet stored as a patch file.
    """
    isQueuedSnapshot: Boolean
    """

    Required. Supported in v5.0+
    Links to actions available on the snapshot.
    """
    links: ManagedVolumeSnapshotLinks
}

"Managed Volume inventory card information."
type ManagedVolumeStats {
    "Total number of Managed Volumes."
    count: Int!
    "Total size provisioned for all the Managed Volumes, in bytes."
    provisionedSize: Long!
    "Total physical size used by all the Managed Volumes, in bytes."
    usedSize: Long!
}

"Response of the operation to map Azure cloud accounts to an exocompute subscription."
type MapAzureCloudAccountExocomputeSubscriptionReply {
    "Specifies whether the mapping was completed successfully."
    isSuccess: Boolean!
}

"Response of the operation to map Azure cloud accounts to a persistent storage location."
type MapAzureCloudAccountToPersistentStorageLocationReply {
    "Specifies whether the mapping was completed successfully."
    isSuccess: Boolean!
}

type Metadata {
    key: String!
    value: Value
}

"Microsoft 365 subscription on which ransomware detection can be enabled."
type Microsoft365RansomwareInvestigationEnablement {
    "Whether ransomware detection is enabled."
    enabled: Boolean!
    "Microsoft 365 subscription information."
    subscription: HierarchyObjectCommon!
}

"Minute snapshot schedule."
type MinuteSnapshotSchedule {
    "Basic minute snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
}

"Supported in v5.0+"
type MissedSnapshot {
    "Required. Supported in v5.0+"
    archivalLocationType: [String!]!
    "Required. Supported in v5.0+"
    missedSnapshotTime: DateTime
    "Required. Supported in v5.0+"
    missedSnapshotTimeUnits: [MissedSnapshotTimeUnitConfig!]!
}

"The missed snapshot object associated with the virtual machine."
type MissedSnapshotCommon {
    archivalLocationType: [String!]!
    date: DateTime!
}

"Paginated list of MissedSnapshotCommon objects."
type MissedSnapshotCommonConnection {
    "Total number of MissedSnapshotCommon objects matching the request arguments."
    count: Int!
    "List of MissedSnapshotCommon objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MissedSnapshotCommonEdge!]!
    "List of MissedSnapshotCommon objects."
    nodes: [MissedSnapshotCommon!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MissedSnapshotCommon object. This wrapper is used for pagination."
type MissedSnapshotCommonEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MissedSnapshotCommon object wrapped by this edge."
    node: MissedSnapshotCommon!
}

"Missed Snapshot data with groupby info applied to it."
type MissedSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: MissedSnapshotGroupByInfo!
    "Paginated missed snapshot data."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Sorts snapshots by field."
        sortBy: MissedSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MissedSnapshotCommonConnection!
    "Provides further groupings for the data."
    missedSnapshotGroupBy(
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!
    ): [MissedSnapshotGroupBy!]!
}

"Paginated list of MissedSnapshotGroupBy objects."
type MissedSnapshotGroupByConnection {
    "Total number of MissedSnapshotGroupBy objects matching the request arguments."
    count: Int!
    "List of MissedSnapshotGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MissedSnapshotGroupByEdge!]!
    "List of MissedSnapshotGroupBy objects."
    nodes: [MissedSnapshotGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MissedSnapshotGroupBy object. This wrapper is used for pagination."
type MissedSnapshotGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MissedSnapshotGroupBy object wrapped by this edge."
    node: MissedSnapshotGroupBy!
}

"Supported in v5.0+"
type MissedSnapshotListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MissedSnapshot!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type MissedSnapshotTimeUnitConfig {
    dayOfTime: MissedSnapshotDayOfTimeUnit
    "Required. Supported in v5.0+"
    frequency: Int!
    "Required. Supported in v5.0+"
    retention: Int!
    timeUnit: SlaTimeUnit!
}

"Supported in v5.0+"
type ModifyIpmiReply {
    "Required. Supported in v5.0+"
    access: IpmiAccess
    "Required. Supported in v5.0+"
    isAvailable: Boolean!
}

"Information about MongoDB Collection."
type MongoCollection implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & MongoDatabaseDescendantType & MongoDatabasePhysicalChildType & MongoSourceDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the MongoDB collection."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "Identifier of the host cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Parent database connection."
    database: MongoDatabase!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the MongoDB collection is a relic in CDM."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Identifier of the primary host cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Parent source connection."
    source: MongoSource!
}

"Paginated list of MongoCollection objects."
type MongoCollectionConnection {
    "Total number of MongoCollection objects matching the request arguments."
    count: Int!
    "List of MongoCollection objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoCollectionEdge!]!
    "List of MongoCollection objects."
    nodes: [MongoCollection!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongoCollection object. This wrapper is used for pagination."
type MongoCollectionEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoCollection object wrapped by this edge."
    node: MongoCollection!
}

"Information about MongoDB Database."
type MongoDatabase implements CdmHierarchyObject & HierarchyObject & MongoSourceDescendantType & MongoSourcePhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the MongoDB database."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "Identifier of the host cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongoDatabaseDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the MongoDB database is a relic in CDM."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongoDatabasePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Identifier of the primary host cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Parent source connection."
    source: MongoSource!
}

"Paginated list of MongoDatabase objects."
type MongoDatabaseConnection {
    "Total number of MongoDatabase objects matching the request arguments."
    count: Int!
    "List of MongoDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoDatabaseEdge!]!
    "List of MongoDatabase objects."
    nodes: [MongoDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of MongoDatabaseDescendantType objects."
type MongoDatabaseDescendantTypeConnection {
    "Total number of MongoDatabaseDescendantType objects matching the request arguments."
    count: Int!
    "List of MongoDatabaseDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoDatabaseDescendantTypeEdge!]!
    "List of MongoDatabaseDescendantType objects."
    nodes: [MongoDatabaseDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongoDatabaseDescendantType object. This wrapper is used for pagination."
type MongoDatabaseDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoDatabaseDescendantType object wrapped by this edge."
    node: MongoDatabaseDescendantType!
}

"Wrapper around the MongoDatabase object. This wrapper is used for pagination."
type MongoDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoDatabase object wrapped by this edge."
    node: MongoDatabase!
}

"Paginated list of MongoDatabasePhysicalChildType objects."
type MongoDatabasePhysicalChildTypeConnection {
    "Total number of MongoDatabasePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of MongoDatabasePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoDatabasePhysicalChildTypeEdge!]!
    "List of MongoDatabasePhysicalChildType objects."
    nodes: [MongoDatabasePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongoDatabasePhysicalChildType object. This wrapper is used for pagination."
type MongoDatabasePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoDatabasePhysicalChildType object wrapped by this edge."
    node: MongoDatabasePhysicalChildType!
}

"Information about MongoDB Source."
type MongoSource implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the MongoDB source."
    cdmId: String!
    "Information about CDM cluster for this MongoDB cluster."
    cluster: Cluster!
    "UUID of the CDM cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongoSourceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the MongoDB source is a relic in CDM."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongoSourcePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "IP of the MongoDB source."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "List of source nodes."
    sourceNodes: String!
    "Type of the MongoDB source."
    sourceType: MongoSourceType!
    "SSL Options."
    sslParams: CdmMongoSslParams
    "Status of the MongoDB source."
    status: MongoSourceStatus!
    "MongoDB username."
    username: String!
}

"Paginated list of MongoSource objects."
type MongoSourceConnection {
    "Total number of MongoSource objects matching the request arguments."
    count: Int!
    "List of MongoSource objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoSourceEdge!]!
    "List of MongoSource objects."
    nodes: [MongoSource!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of MongoSourceDescendantType objects."
type MongoSourceDescendantTypeConnection {
    "Total number of MongoSourceDescendantType objects matching the request arguments."
    count: Int!
    "List of MongoSourceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoSourceDescendantTypeEdge!]!
    "List of MongoSourceDescendantType objects."
    nodes: [MongoSourceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongoSourceDescendantType object. This wrapper is used for pagination."
type MongoSourceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoSourceDescendantType object wrapped by this edge."
    node: MongoSourceDescendantType!
}

"Wrapper around the MongoSource object. This wrapper is used for pagination."
type MongoSourceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoSource object wrapped by this edge."
    node: MongoSource!
}

"Paginated list of MongoSourcePhysicalChildType objects."
type MongoSourcePhysicalChildTypeConnection {
    "Total number of MongoSourcePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of MongoSourcePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongoSourcePhysicalChildTypeEdge!]!
    "List of MongoSourcePhysicalChildType objects."
    nodes: [MongoSourcePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongoSourcePhysicalChildType object. This wrapper is used for pagination."
type MongoSourcePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongoSourcePhysicalChildType object wrapped by this edge."
    node: MongoSourcePhysicalChildType!
}

"Backup parameters configured on the management object."
type MongodbBackupParams {
    "Name of the store used to store backups."
    storeName: String!
    "Monitoring frequency used by watcher."
    watcherFrequency: Long!
}

"Information about MongoDB Collection."
type MongodbCollection implements HierarchyObject & MongodbDatabaseDescendantType & MongodbDatabasePhysicalChildType & MongodbSourceDescendantType & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Number of backups for the MongoDB collection."
    backupCount: Int
    "Backup parameters for the MongoDB collection."
    backupParams: MongodbBackupParams
    "Mosaic cluster information."
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Parent database connection."
    database: MongodbDatabase!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The MongoDB collection ID."
    id: UUID!
    "Specifies whether MongoDB collection is relic."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The most recent snapshot of this workload."
    newestSnapshot: MosaicSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: MosaicSnapshot
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Group By paginated list for mongodb snapshots."
    snapshotGroupBys(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter mosaic snapshot connection."
        filter: MosaicSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group mosaic snapshots by field."
        groupBy: MosaicSnapshotGroupBy!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MosaicSnapshotGroupByTypeConnection
    "Paginated list of snapshots for Mongodb collection."
    snapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter mosaic snapshot connection."
        filter: MosaicSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort mosaic snapshots by field."
        sortBy: MosaicSnapshotSortBy = DATE,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MosaicSnapshotConnection!
    "Parent source connection."
    source: MongodbSource!
}

"Paginated list of MongodbCollection objects."
type MongodbCollectionConnection {
    "Total number of MongodbCollection objects matching the request arguments."
    count: Int!
    "List of MongodbCollection objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbCollectionEdge!]!
    "List of MongodbCollection objects."
    nodes: [MongodbCollection!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongodbCollection object. This wrapper is used for pagination."
type MongodbCollectionEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbCollection object wrapped by this edge."
    node: MongodbCollection!
}

"Information about MongoDB Database."
type MongodbDatabase implements HierarchyObject & MongodbSourceDescendantType & MongodbSourcePhysicalChildType & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Backup count for the MongoDB database."
    backupCount: Int
    "Backup parameters for the MongoDB database."
    backupParams: MongodbBackupParams
    "Mosaic cluster information."
    cluster: Cluster!
    "UUID of the Nosql cluster."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongodbDatabaseDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether MongoDB database is relic."
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongodbDatabasePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Parent source connection."
    source: MongodbSource!
    "Watcher status of this MongoDB database."
    watcherEnabled: Boolean!
}

"Paginated list of MongodbDatabase objects."
type MongodbDatabaseConnection {
    "Total number of MongodbDatabase objects matching the request arguments."
    count: Int!
    "List of MongodbDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbDatabaseEdge!]!
    "List of MongodbDatabase objects."
    nodes: [MongodbDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of MongodbDatabaseDescendantType objects."
type MongodbDatabaseDescendantTypeConnection {
    "Total number of MongodbDatabaseDescendantType objects matching the request arguments."
    count: Int!
    "List of MongodbDatabaseDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbDatabaseDescendantTypeEdge!]!
    "List of MongodbDatabaseDescendantType objects."
    nodes: [MongodbDatabaseDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongodbDatabaseDescendantType object. This wrapper is used for pagination."
type MongodbDatabaseDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbDatabaseDescendantType object wrapped by this edge."
    node: MongodbDatabaseDescendantType!
}

"Wrapper around the MongodbDatabase object. This wrapper is used for pagination."
type MongodbDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbDatabase object wrapped by this edge."
    node: MongodbDatabase!
}

"Paginated list of MongodbDatabasePhysicalChildType objects."
type MongodbDatabasePhysicalChildTypeConnection {
    "Total number of MongodbDatabasePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of MongodbDatabasePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbDatabasePhysicalChildTypeEdge!]!
    "List of MongodbDatabasePhysicalChildType objects."
    nodes: [MongodbDatabasePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongodbDatabasePhysicalChildType object. This wrapper is used for pagination."
type MongodbDatabasePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbDatabasePhysicalChildType object wrapped by this edge."
    node: MongodbDatabasePhysicalChildType!
}

"Host description for MongoDB source object."
type MongodbHost {
    "Host address of MongoDB."
    hostname: String!
    "Port on which MongoDB is running."
    port: String!
}

"Information about MongoDB Source."
type MongodbSource implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Number of backups for the MongoDB source cluster."
    backupCount: Int
    "Backup Parameters for the MongoDB source cluster."
    backupParams: MongodbBackupParams
    "Information about NoSql cluster for this MongoDB cluster."
    cluster: Cluster!
    "UUID of the Nosql cluster."
    clusterUuid: UUID!
    "Configuration Params for the MongoDB source cluster."
    configParams: MongodbSourceConfigParams
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongodbSourceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Number of nodes in MongoDB source node."
    nodeCount: Int
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MongodbSourcePhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Overall data size of MongoDB source cluster in bytes."
    size: Long
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "IP of the MongoDB source."
    sourceIp: String!
    "Source connectivity status."
    status: MongodbSourceStatus!
    "Watcher status for the MongoDB source cluster."
    watcherEnabled: Boolean!
}

"Configuration parameters for the MongoDB source object."
type MongodbSourceConfigParams {
    "We do not backup the secondary nodes if this configuration is true."
    ignoreSecondaries: [MongodbHost!]!
    "List of seed hosts for establishing connection to source cluster."
    mongodbHosts: [MongodbHost!]!
    "Username for MongoDB source ."
    sourceDbUser: String!
    "SSH user name for the source nodes."
    sourceNodeUser: String!
    "SSH Port."
    sourceSshPort: Int!
    "SSL configuration for the source cluster."
    sslOptions: MongodbSslOptions
}

"Paginated list of MongodbSource objects."
type MongodbSourceConnection {
    "Total number of MongodbSource objects matching the request arguments."
    count: Int!
    "List of MongodbSource objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbSourceEdge!]!
    "List of MongodbSource objects."
    nodes: [MongodbSource!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of MongodbSourceDescendantType objects."
type MongodbSourceDescendantTypeConnection {
    "Total number of MongodbSourceDescendantType objects matching the request arguments."
    count: Int!
    "List of MongodbSourceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbSourceDescendantTypeEdge!]!
    "List of MongodbSourceDescendantType objects."
    nodes: [MongodbSourceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongodbSourceDescendantType object. This wrapper is used for pagination."
type MongodbSourceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbSourceDescendantType object wrapped by this edge."
    node: MongodbSourceDescendantType!
}

"Wrapper around the MongodbSource object. This wrapper is used for pagination."
type MongodbSourceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbSource object wrapped by this edge."
    node: MongodbSource!
}

"Paginated list of MongodbSourcePhysicalChildType objects."
type MongodbSourcePhysicalChildTypeConnection {
    "Total number of MongodbSourcePhysicalChildType objects matching the request arguments."
    count: Int!
    "List of MongodbSourcePhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MongodbSourcePhysicalChildTypeEdge!]!
    "List of MongodbSourcePhysicalChildType objects."
    nodes: [MongodbSourcePhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MongodbSourcePhysicalChildType object. This wrapper is used for pagination."
type MongodbSourcePhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MongodbSourcePhysicalChildType object wrapped by this edge."
    node: MongodbSourcePhysicalChildType!
}

"SSL Configuration for MongoDB source object."
type MongodbSslOptions {
    "Whether ssl is enabled or not."
    ssl: Boolean!
    "Path to CA certificate."
    sslCaCerts: String!
    "SSL certificate requirements."
    sslCertRequirements: SourceSslCertReqs!
    "Path to SSL Certificate."
    sslCertfile: String!
    "Path to SSL Key."
    sslKeyfile: String!
}

"Monthly snapshot schedule."
type MonthlySnapshotSchedule {
    "Basic monthly snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
    "Day of the month."
    dayOfMonth: DayOfMonth!
}

"""

Supported in m3.2.0-m4.2.0
Response object from an async request to mosaic.
"""
type MosaicAsyncResponse {
    """

    Supported in m3.2.0-m4.2.0
    Mosaic Job ID of submitted job in case of successful job submission. This job id can be used to track progress of the request.
    """
    data: String
    """

    Supported in m3.2.0-m4.2.0
    Error message in case of failure.
    """
    message: String
    """

    Supported in m3.2.0-m4.2.0
    Return Code from Mosaic.
    """
    returnCode: Long
    """

    Supported in m3.2.0-m4.2.0
    Status of the request.
    """
    status: Boolean
}

"""

Supported in m3.2.0-m4.2.0
Object with details of Any Point In Time restore Range.
"""
type MosaicRecoverableRangeObject {
    """

    Supported in m3.2.0-m4.2.0
    Start timestamp of recoverable range.
    """
    earliestTimestamp: String
    """

    Supported in m3.2.0-m4.2.0
    End timestamp of recoverable range.
    """
    latestTimestamp: String
}

"""

Supported in m3.2.0-m4.2.0
Recovery range object for mosaic.
"""
type MosaicRecoveryRangeObject {
    """

    Supported in m3.2.0-m4.2.0
    Start timestamp of recovery range.
    """
    earliestTimestamp: String
    """

    Supported in m3.2.0-m4.2.0
    End timestamp of recovery range.
    """
    latestTimestamp: String
}

"""

Supported in m3.2.0-m4.2.0
Response object for recovery range object on mosaic.
"""
type MosaicRecoveryRangeResponse {
    """

    Supported in m3.2.0-m4.2.0
    Object with details of Any Point In Time restore Range.
    """
    data: MosaicRecoveryRangeObject
    """

    Supported in m3.2.0-m4.2.0
    Response Message string.
    """
    message: String
    """

    Supported in m3.2.0-m4.2.0
    Return Code.
    """
    returnCode: Long
    """

    Supported in m3.2.0-m4.2.0
    Status of the request.
    """
    status: Boolean
}

"Mosaic Snapshot information."
type MosaicSnapshot {
    "ID of the Mosaic cluster."
    clusterUuid: UUID!
    "Snapshot size information."
    dbInfo: String
    "Time of expiration."
    expirationTime: DateTime
    "ID of the snapshot."
    id: String!
    "Duration of the snapshot job."
    jobDuration: Int
    "SLA domain of the snapshot."
    slaDomain: SlaDomain
    "Snapshot type."
    snapshotType: MosaicSnapshotType!
    "Time of the snapshot version."
    version: DateTime!
    "State of the snapshot version."
    versionState: String
    "The workload ID."
    workloadId: String!
}

"Paginated list of MosaicSnapshot objects."
type MosaicSnapshotConnection {
    "Total number of MosaicSnapshot objects matching the request arguments."
    count: Int!
    "List of MosaicSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MosaicSnapshotEdge!]!
    "List of MosaicSnapshot objects."
    nodes: [MosaicSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MosaicSnapshot object. This wrapper is used for pagination."
type MosaicSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MosaicSnapshot object wrapped by this edge."
    node: MosaicSnapshot!
}

"Mosaic Snapshot data with group by info applied to it."
type MosaicSnapshotGroupByType {
    "Provides further groupings for the data."
    allSnapshotGroupBys(
        "Group mosaic snapshots by field."
        groupBy: MosaicSnapshotGroupBy!
    ): [MosaicSnapshotGroupByType!]!
    "The data group by info."
    groupByInfo: MosaicSnapshotGroupByInfo!
    "Paginated snapshot data."
    snapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort mosaic snapshots by field."
        sortBy: MosaicSnapshotSortBy = DATE,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MosaicSnapshotConnection!
}

"Paginated list of MosaicSnapshotGroupByType objects."
type MosaicSnapshotGroupByTypeConnection {
    "Total number of MosaicSnapshotGroupByType objects matching the request arguments."
    count: Int!
    "List of MosaicSnapshotGroupByType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MosaicSnapshotGroupByTypeEdge!]!
    "List of MosaicSnapshotGroupByType objects."
    nodes: [MosaicSnapshotGroupByType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MosaicSnapshotGroupByType object. This wrapper is used for pagination."
type MosaicSnapshotGroupByTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MosaicSnapshotGroupByType object wrapped by this edge."
    node: MosaicSnapshotGroupByType!
}

"Response object for list store on mosaic."
type MosaicStorageLocation {
    "Count of backups stored in storage location."
    backupCount: Int!
    "UUID of Mosaic Cluster."
    clusterUuid: String!
    "Various parameters used for connecting with store."
    connectionParameters: MosaicStoreConnectionParameters
    "Fid of Mosaic Storage Locations."
    fid: String!
    "Geographic Location of Store."
    geographicLocation: String!
    "Mosaic ID of Storage Location."
    id: String!
    "Space consumed on storage location."
    spaceConsumedBytes: Long!
    "Name of Storage Location."
    storageLocationName: String!
    "Connection Status of Mosaic with Store."
    storeConnectionStatus: MosaicStoreConnectionStatus!
    "Type of Mosaic Store."
    storeType: MosaicStoreType!
}

"Response object for list store on mosaic."
type MosaicStoreConnectionParameters {
    "NFS server IP."
    nfsServer: String!
    "Mount Path on NFS Server."
    nfsServerMountPath: String!
    "URL of store."
    storeUrl: String!
}

"""

Supported in m3.2.0-m4.2.0
Object for stores added on mosaic.
"""
type MosaicStoreObject {
    """

    Required. Supported in m3.2.0-m4.2.0
    UUID of the store.
    """
    id: String!
    """

    Supported in m3.2.0-m4.2.0
    Metadata information for store.
    """
    storeMetadata: StoreMetadata
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the store.
    """
    storeName: String!
    storeType: MosaicStoreObjectStoreType!
    """

    Required. Supported in m3.2.0-m4.2.0
    Store path/url.
    """
    storeUrl: String!
    """

    Supported in m3.2.0-m4.2.0
    Url for nfs server.
    """
    surlNfs: String
}

"""

Supported in m3.2.0-m4.2.0
Object for mosaic versions.
"""
type MosaicVersionObject {
    """

    Supported in m3.2.0-m4.2.0
    Information of version space.
    """
    dbInfo: String
    """

    Supported in m3.2.0-m4.2.0
    Expiration time of the version.
    """
    expirationTime: Int
    """

    Supported in m3.2.0-m4.2.0
    UUID of group policy.
    """
    groupPolicyId: String
    """

    Supported in m3.2.0-m4.2.0
    UUID of the version.
    """
    id: String
    """

    Supported in m3.2.0-m4.2.0
    Type of interval.
    """
    intervalType: Int
    """

    Supported in m3.2.0-m4.2.0
    Duration of the backup job.
    """
    jobDuration: Int
    """

    Supported in m3.2.0-m4.2.0
    Need sstable loader.
    """
    needSstableLoaderStr: String
    """

    Supported in m3.2.0-m4.2.0
    Replica set.
    """
    rsList: String
    """

    Supported in m3.2.0-m4.2.0
    Name of the management object.
    """
    sourceMgmtObj: String
    """

    Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String
    """

    Supported in m3.2.0-m4.2.0
    Type of the source.
    """
    sourceType: String
    """

    Supported in m3.2.0-m4.2.0
    UUID of system policy.
    """
    systemPolicyId: String
    """

    Supported in m3.2.0-m4.2.0
    Timestamp of the version.
    """
    timestamp: Int
    versionState: MosaicVersionObjectVersionState
}

"Details about the mounted volume."
type MountedVolume {
    "Volume's file system type."
    fileSystemType: String!
    "Mount path in host."
    hostMountPath: String
    "Id of the mounted volume."
    id: String!
    "Volume's mount points."
    originalMountPoints: [String!]!
    "Size of the mounted volume."
    size: Long!
    "Volume's Smb Path."
    smbPath: String
}

type MssqlAvailabilityGroup implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "CopyOnly flag of the availability group."
    copyOnly: Boolean!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MssqlAvailabilityGroupDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Boolean flag indicating if the availability group derives log backup configurations from SLA."
    hasLogConfigFromSla: Boolean!
    "The FID of the hierarchy object."
    id: UUID!
    "The list of instances associated with an Availability Group."
    instances: [MssqlInstance!]!
    "Latest User note information."
    latestUserNote: LatestUserNote
    logBackupFrequencyInSeconds: Long!
    logBackupRetentionInHours: Int!
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MssqlAvailabilityGroupLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of MssqlAvailabilityGroupDescendantType objects."
type MssqlAvailabilityGroupDescendantTypeConnection {
    "Total number of MssqlAvailabilityGroupDescendantType objects matching the request arguments."
    count: Int!
    "List of MssqlAvailabilityGroupDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlAvailabilityGroupDescendantTypeEdge!]!
    "List of MssqlAvailabilityGroupDescendantType objects."
    nodes: [MssqlAvailabilityGroupDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlAvailabilityGroupDescendantType object. This wrapper is used for pagination."
type MssqlAvailabilityGroupDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlAvailabilityGroupDescendantType object wrapped by this edge."
    node: MssqlAvailabilityGroupDescendantType!
}

"Paginated list of MssqlAvailabilityGroupLogicalChildType objects."
type MssqlAvailabilityGroupLogicalChildTypeConnection {
    "Total number of MssqlAvailabilityGroupLogicalChildType objects matching the request arguments."
    count: Int!
    "List of MssqlAvailabilityGroupLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlAvailabilityGroupLogicalChildTypeEdge!]!
    "List of MssqlAvailabilityGroupLogicalChildType objects."
    nodes: [MssqlAvailabilityGroupLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlAvailabilityGroupLogicalChildType object. This wrapper is used for pagination."
type MssqlAvailabilityGroupLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlAvailabilityGroupLogicalChildType object wrapped by this edge."
    node: MssqlAvailabilityGroupLogicalChildType!
}

"Supported in v5.2+"
type MssqlBackup {
    """

    Required. Supported in v5.2+
    The unique identifier for the object.
    """
    backupId: String!
    """

    Required. Supported in v5.2+
    The total uncompressed size of the files in bytes.
    """
    backupSize: Long!
    backupType: MssqlBackupType!
    """

    Required. Supported in v5.2+
    Timestamp of the backup.
    """
    date: DateTime
    """

    Required. Supported in v5.2+
    LSN of the backup.
    """
    lsn: String!
    """

    Required. Supported in v5.2+
    The file path the backup will be stored at in downloaded zip files containing it.
    """
    path: String!
    """

    Required. Supported in v5.2+
    GUID of the recovery fork attached to the LSN.
    """
    recoveryForkGuid: String!
}

"The SLA Domain configuration for SQL Server database."
type MssqlConfig {
    "Frequency value for log backups of SQL Server databases."
    frequency: Duration
    "Specifies the duration for which the logs will be retained."
    logRetention: Duration
}

type MssqlDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & MssqlAvailabilityGroupDescendantType & MssqlAvailabilityGroupLogicalChildType & MssqlInstanceDescendantType & MssqlInstanceLogicalChildType & MssqlTopLevelDescendantType & PhysicalHostDescendantType & WindowsClusterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "List of snapshots taken for a CDM snappable grouped by attributes."
    cdmGroupedSnapshots(
        "Filter CDM snapshots."
        CdmSnapshotFilter: [CdmSnapshotFilter!],
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmGroupedSnapshotConnection!
    "CDM ID of the MSSQL database."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "The newest snapshot taken for a CDM workload."
    cdmNewestSnapshot: CdmWorkloadSnapshot
    "The oldest snapshot taken for a CDM workload."
    cdmOldestSnapshot: CdmWorkloadSnapshot
    "The count of on demand snapshots for an MSSQL database."
    cdmOnDemandSnapshotCount: Int!
    "The list of snapshots taken for an MSSQL database."
    cdmSnapshots(
        "Filter CDM snapshots."
        CdmSnapshotFilter: [CdmSnapshotFilter!],
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmWorkloadSnapshotConnection!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Specifies if copy-only backups are enabled. When false, database backups are full backups."
    copyOnly: Boolean!
    "Fid of the associated MSSQL DAG object."
    dagId: UUID!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Boolean flag indicating if the database derives log backup configurations from SLA."
    hasLogConfigFromSla: Boolean!
    "Specifies whether the the cluster has permission to backup an MSSQL database."
    hasPermissions: Boolean!
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies if the MSSQL database is in an Availability Group."
    isInAvailabilityGroup: Boolean!
    "Specifies if the MSSQL database is a Log Shipping Secondary."
    isLogShippingSecondary: Boolean!
    "Specifies if the MSSQL database is a live mount."
    isMount: Boolean!
    "Specifies if the MSSQL database is online."
    isOnline: Boolean!
    "Specifies if the MSSQL database is a relic."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of live mounts for a MSSQL database."
    liveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for Mssql database live mounts."
        filters: [MssqlDatabaseLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Mssql database live mounts."
        sortBy: MssqlDatabaseLiveMountSortByInput
    ): MssqlDatabaseLiveMountConnection!
    "Seconds between two log backups. A value of 0 disables log backup."
    logBackupFrequencyInSeconds: Float!
    "Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired."
    logBackupRetentionInHours: Int!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Information about the script run after a backup."
    postBackupScript: String!
    "Information about the script run before a backup."
    preBackupScript: String!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Specifies if the recovery model is simple, full, or bulk-logged."
    recoveryModel: String!
    "List of the replicas available for the MSSQL database."
    replicas: [CdmMssqlDbReplica!]!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "List of reasons that an MSSQL database cannot be protected."
    unprotectableReasons: [String!]!
}

"Paginated list of MssqlDatabase objects."
type MssqlDatabaseConnection {
    "Total number of MssqlDatabase objects matching the request arguments."
    count: Int!
    "List of MssqlDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlDatabaseEdge!]!
    "List of MssqlDatabase objects."
    nodes: [MssqlDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlDatabase object. This wrapper is used for pagination."
type MssqlDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlDatabase object wrapped by this edge."
    node: MssqlDatabase!
}

"Live mount of a MSSQL database."
type MssqlDatabaseLiveMount {
    "Internal ID of the live mount."
    cdmId: String!
    "Cluster of the live mount."
    cluster: Cluster
    "Timestamp when the mount was created."
    creationDate: DateTime
    "Forever ID of the live mount."
    fid: String!
    "Status of the live mount."
    isReady: Boolean!
    "ID of the database mount request job."
    mountRequestId: String!
    "Internal ID of the mounted database."
    mountedDatabaseId: String!
    "Name of the mounted database."
    mountedDatabaseName: String!
    "Owner ID of the live mount."
    ownerId: String!
    "Recovery point of the live mount."
    recoveryPoint: DateTime
    "Source database of the live mount."
    sourceDatabase: MssqlDatabase
    "Target instance of the live mount."
    targetInstance: MssqlInstance
    "ID of the database unmount request job."
    unmountRequestId: String!
}

"Paginated list of MssqlDatabaseLiveMount objects."
type MssqlDatabaseLiveMountConnection {
    "Total number of MssqlDatabaseLiveMount objects matching the request arguments."
    count: Int!
    "List of MssqlDatabaseLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlDatabaseLiveMountEdge!]!
    "List of MssqlDatabaseLiveMount objects."
    nodes: [MssqlDatabaseLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlDatabaseLiveMount object. This wrapper is used for pagination."
type MssqlDatabaseLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlDatabaseLiveMount object wrapped by this edge."
    node: MssqlDatabaseLiveMount!
}

"Supported in v5.0+"
type MssqlDbDetail {
    "Supported in v5.0+"
    archiveStorage: Long
    blackoutWindowResponseInfo: BlackoutWindowResponseInfo
    "Supported in v5.0+"
    isLocal: Boolean
    """

    Supported in v5.0+
    This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    isStandby: Boolean
    latestRecoveryPointV50: String
    latestRecoveryPointV51: String
    latestRecoveryPointV52: String
    latestRecoveryPointV53: String
    latestRecoveryPointV60: DateTime
    latestRecoveryPointV70: DateTime
    latestRecoveryPointV80: DateTime
    latestRecoveryPointV90: DateTime
    "Supported in v5.0+"
    localStorage: Long
    "Supported in v5.0+"
    maxDataStreams: Int
    mssqlDbSummary: MssqlDbSummary
    oldestRecoveryPointV50: String
    oldestRecoveryPointV51: String
    oldestRecoveryPointV52: String
    oldestRecoveryPointV53: String
    oldestRecoveryPointV60: DateTime
    oldestRecoveryPointV70: DateTime
    oldestRecoveryPointV80: DateTime
    oldestRecoveryPointV90: DateTime
    "Supported in v5.0+"
    postBackupScript: MssqlScriptDetail
    "Supported in v5.0+"
    preBackupScript: MssqlScriptDetail
    protectionDateV50: String
    protectionDateV51: String
    protectionDateV52: String
    protectionDateV53: String
    protectionDateV60: DateTime
    protectionDateV70: DateTime
    protectionDateV80: DateTime
    protectionDateV90: DateTime
    """

    Supported in v5.0+
    This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    recoveryForkGuid: String
    "Required. Supported in v5.0+"
    snapshotCount: Int!
}

"Supported in v5.0+"
type MssqlDbReplica {
    """

    Supported in v5.0+
    For an availability database, provides additional information about a database replica.
    """
    availabilityInfo: MssqlDbReplicaAvailabilityInfo
    """

    Required. Supported in v5.0+
    `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.
    """
    hasPermissions: Boolean!
    """

    Required. Supported in v5.0+
    ID of the SQL Server instance managing the replica.
    """
    instanceId: String!
    """

    Required. Supported in v5.0+
    Name of the SQL Server instance managing the replica.
    """
    instanceName: String!
    """

    Required. Supported in v5.0+
    Deprecated. Please use 'isDeleted' instead.
    """
    isArchived: Boolean!
    """

    Required. Supported in v5.0+
    `True` when the replica is deleted.
    """
    isDeleted: Boolean!
    """

    Required. Supported in v5.0+
    `True` when the replica is in standby mode.
    """
    isStandby: Boolean!
    """

    Supported in v5.0+
    The recovery fork GUID of the replica.
    """
    recoveryForkGuid: String
    recoveryModel: MssqlDbReplicaRecoveryModel!
    "Required. Supported in v5.0+"
    rootProperties: MssqlRootProperties
    """

    Required. Supported in v5.0+
    The state of the replica.
    """
    state: String!
}

"Supported in v5.0+"
type MssqlDbReplicaAvailabilityInfo {
    """

    Supported in v5.0+
    Role of the availability database replica. Possible values are: `PRIMARY`, `SECONDARY`, or `RESOLVING`.
    """
    role: MssqlDbReplicaAvailabilityInfoRole!
}

"Supported in v5.0+"
type MssqlDbSummary {
    """

    Supported in v5.0+
    For an availability database, the ID of the availability group that the database belongs to.
    """
    availabilityGroupId: String
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean!
    """

    Supported in v5.1+
    Information about the current backup task.
    """
    currentBackupTaskInfo: BackupTaskDiagnosticInfo
    """

    Supported in v7.0+
    A boolean value that specifies whether the database derives the log backup configurations from SLA.
    """
    hasLogConfigFromSla: Boolean
    """

    Required. Supported in v5.0+
    v5.0: Boolean value that specifies whether the cluster has permission to backup the database.
    v5.1: Boolean value that specifies whether the cluster has permission to back up the database.
    v5.2+: A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.
    """
    hasPermissions: Boolean!
    "Required. Supported in v5.0+"
    id: String!
    """

    Supported in v5.1+
    True/false value indicating if backup task information is included in the response.
    """
    includeBackupTaskInfo: Boolean
    """

    Supported in v5.0+
    This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    instanceId: String
    """

    Supported in v5.0+
    This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    instanceName: String
    "Required. Supported in v5.0+"
    isInAvailabilityGroup: Boolean!
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.
    """
    isLiveMount: Boolean!
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.
    """
    isLogShippingSecondary: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.1: Boolean value that specifies whether the database state is ONLINE.
    v5.2+: A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.
    """
    isOnline: Boolean!
    "Required. Supported in v5.0+"
    isRelic: Boolean!
    """

    Supported in v5.1+
    v5.1: The timestamp of the previous snapshot
    v5.2-v5.3: The timestamp of the previous snapshot. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
    v6.0+: The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
    """
    lastSnapshotTime: DateTime
    "Required. Supported in v5.0+"
    logBackupFrequencyInSeconds: Int!
    """

    Required. Supported in v5.0+
    Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.
    """
    logBackupRetentionHours: Int!
    "Required. Supported in v5.0+"
    name: String!
    """

    Supported in v5.1+
    v5.1: An integer that specifies the number of missed snapshots.
    v5.2+: An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
    """
    numMissedSnapshot: Int
    """

    Supported in v5.2+
    v5.2: Describes any pending SLA assignment on this object.
    v5.3+: Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    recoveryModel: MssqlDbSummaryRecoveryModel
    """

    Required. Supported in v5.0+
    List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.
    """
    replicas: [MssqlDbReplica!]!
    "Required. Supported in v5.0+"
    rootProperties: MssqlRootProperties
    snappable: CdmWorkload
    """

    Supported in v5.0+
    This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    state: String
    "A list of reasons that a SQL Server database cannot be protected by Rubrik."
    unprotectableReasonsV50: [MssqlUnprotectableReason!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV51: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV52: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV53: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV60: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV70: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV80: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV90: [String!]!
}

type MssqlInstance implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType & WindowsClusterDescendantType & WindowsClusterLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MssqlInstanceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Boolean flag indicating if the instance derives log backup configurations from SLA."
    hasLogConfigFromSla: Boolean!
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    logBackupFrequencyInSeconds: Long!
    logBackupRetentionInHours: Int!
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): MssqlInstanceLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    unprotectableReasons: [String!]!
}

"Paginated list of MssqlInstanceDescendantType objects."
type MssqlInstanceDescendantTypeConnection {
    "Total number of MssqlInstanceDescendantType objects matching the request arguments."
    count: Int!
    "List of MssqlInstanceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlInstanceDescendantTypeEdge!]!
    "List of MssqlInstanceDescendantType objects."
    nodes: [MssqlInstanceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlInstanceDescendantType object. This wrapper is used for pagination."
type MssqlInstanceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlInstanceDescendantType object wrapped by this edge."
    node: MssqlInstanceDescendantType!
}

"Paginated list of MssqlInstanceLogicalChildType objects."
type MssqlInstanceLogicalChildTypeConnection {
    "Total number of MssqlInstanceLogicalChildType objects matching the request arguments."
    count: Int!
    "List of MssqlInstanceLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlInstanceLogicalChildTypeEdge!]!
    "List of MssqlInstanceLogicalChildType objects."
    nodes: [MssqlInstanceLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlInstanceLogicalChildType object. This wrapper is used for pagination."
type MssqlInstanceLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlInstanceLogicalChildType object wrapped by this edge."
    node: MssqlInstanceLogicalChildType!
}

"Supported in v5.0+"
type MssqlInstanceSummary {
    """

    Supported in v5.0+
    The address of the instance in a Windows server failover cluster, populated only if it belongs to one.
    """
    clusterInstanceAddress: String
    """

    Supported in v5.0+
    SLA Domain ID assigned to instance.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    SLA Domain name assigned to instance.
    """
    configuredSlaDomainName: String
    """

    Supported in v5.2+
    Specifies whether the SLA Domain is used for protection or retention.
    """
    configuredSlaDomainType: String
    "Required. Supported in v5.0+"
    id: String!
    "Supported in v5.0+"
    internalTimestamp: Long
    """

    Supported in v5.1+
    Boolean value that identifies a Retention Lock SLA Domain. Value is true when the SLA Domain assigned to the instance is Retention Locked and false when it is not.
    """
    isRetentionLocked: Boolean
    mssqlNonSlaProperties: MssqlNonSlaProperties
    mssqlSlaRelatedProperties: MssqlSlaRelatedProperties
    "Supported in v5.0+"
    name: String
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    protectionDateV50: String
    protectionDateV51: String
    protectionDateV52: String
    protectionDateV53: String
    protectionDateV60: DateTime
    protectionDateV70: DateTime
    protectionDateV80: DateTime
    protectionDateV90: DateTime
    "Required. Supported in v5.0+"
    rootProperties: MssqlRootProperties
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by Rubrik."
    unprotectableReasonsV50: [MssqlUnprotectableReason!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV51: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV52: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV53: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV60: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV70: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV80: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV90: [String!]!
    "Supported in v5.0+"
    version: String
}

"Supported in v5.0+"
type MssqlInstanceSummaryListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MssqlInstanceSummary!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type MssqlLogShippingLinks {
    "Required. Supported in v5.0+"
    primaryDatabase: Link
    "Supported in v5.0+"
    secondaryDatabase: Link
    "Required. Supported in v5.0+"
    secondaryInstance: Link
    "Supported in v5.0+"
    seedRequest: Link
}

"Supported in v5.0+"
type MssqlLogShippingStatusInfo {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Detailed message describing the current status of the log shipping configuration.
    v5.3+: Detailed message describing the status of the log shipping configuration.
    """
    message: String!
    "Supported in v5.0+"
    status: MssqlLogShippingStatus!
}

"Supported in v5.0+"
type MssqlLogShippingSummary {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The ID assigned to the log shipping configuration object.
    v5.3+: ID assigned to the log shipping configuration object.
    """
    id: String!
    """

    Supported in v5.0+
    v5.0-v5.2: The number of milliseconds between the time the latest backup was applied to the secondary database and when that backup was taken on the primary database.
    v5.3+: Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.
    """
    lagTime: Long
    """

    Supported in v5.0+
    v5.0-v5.2: The timestamp of the last transaction that was applied using the specified log shipping configuration object.
    v5.3+: Timestamp of the last transaction applied using the specified log shipping configuration object.
    """
    lastAppliedPoint: DateTime
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The location of a specified secondary database in the format "host/instance".
    v5.3+: Location of a specified secondary database. Location uses this format: "host/instance".
    """
    location: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The ID of the primary database.
    v5.3+: ID of the primary database.
    """
    primaryDatabaseId: String!
    """

    Supported in v5.2+
    v5.2: Configured log backup frequency of the primary database, in seconds.
    v5.3+: Log backup frequency, in seconds, of the primary database.
    """
    primaryDatabaseLogBackupFrequency: Long
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The name of the primary database.
    v5.3+: Name of the primary database.
    """
    primaryDatabaseName: String!
    """

    Supported in v5.0+
    v5.0-v5.2: The ID of the secondary database.
    v5.3+: ID of the secondary database.
    """
    secondaryDatabaseId: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The name of the secondary database.
    v5.3+: Name of the secondary database.
    """
    secondaryDatabaseName: String!
    """

    Supported in v5.0+
    The current state of the secondary database.
    """
    state: String
    "Required. Supported in v5.0+"
    status: MssqlLogShippingStatusInfo
}

"Supported in v5.3+"
type MssqlLogShippingSummaryV2 {
    """

    Supported in v5.3+
    Maximum number of makeup reseed attempts during a 24 hour period.
    """
    makeupReseedLimit: Int
    mssqlLogShippingSummary: MssqlLogShippingSummary
}

"Supported in v5.3+"
type MssqlLogShippingSummaryV2ListResponse {
    """

    Supported in v5.3+
    List of matching objects.
    """
    data: [MssqlLogShippingSummaryV2!]!
    """

    Supported in v5.3+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.3+
    Total list responses.
    """
    total: Int
}

"MSSQL Log shipping target."
type MssqlLogShippingTarget {
    "Internal ID of the log shipping target."
    cdmId: String!
    "Cluster of the log shipping target."
    cluster: Cluster
    "Forever ID of the log shipping target."
    fid: String!
    "Lag time of the log shipping target."
    lagTimeFromPrimary: Long!
    "Last applied point of the log shipping target."
    lastAppliedPoint: DateTime
    "Location of the log shipping target."
    location: String!
    "Frequency that the primary database takes log backups."
    logFrequency: Long!
    "Primary cluster of the log shipping target."
    primaryCluster: Cluster
    "Primary database of the log shipping target."
    primaryDatabase: MssqlDatabase
    "Secondary database of the log shipping target."
    secondaryDatabase: MssqlDatabase
    "Secondary instance of the log shipping target."
    secondaryInstance: MssqlInstance
    "State of the log shipping target."
    state: String!
    "Status of the log shipping target."
    status: String!
}

"Paginated list of MssqlLogShippingTarget objects."
type MssqlLogShippingTargetConnection {
    "Total number of MssqlLogShippingTarget objects matching the request arguments."
    count: Int!
    "List of MssqlLogShippingTarget objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlLogShippingTargetEdge!]!
    "List of MssqlLogShippingTarget objects."
    nodes: [MssqlLogShippingTarget!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlLogShippingTarget object. This wrapper is used for pagination."
type MssqlLogShippingTargetEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlLogShippingTarget object wrapped by this edge."
    node: MssqlLogShippingTarget!
}

"Supported in v5.0+"
type MssqlMissedRecoverableRange {
    "Required. Supported in v5.0+"
    beginTime: DateTime
    "Required. Supported in v5.0+"
    description: String!
    "Required. Supported in v5.0+"
    endTime: DateTime
    "Required. Supported in v5.0+"
    errorType: String!
    "Supported in v5.0+"
    firstError: MssqlMissedRecoverableRangeError
    "Supported in v5.0+"
    lastError: MssqlMissedRecoverableRangeError
}

"Supported in v5.0+"
type MssqlMissedRecoverableRangeError {
    "Supported in v5.0+"
    eventMessage: String
    "Supported in v5.0+"
    eventSeriesId: String
    "Required. Supported in v5.0+"
    time: DateTime
}

"Supported in v5.0+"
type MssqlMissedRecoverableRangeListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MssqlMissedRecoverableRange!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0"
type MssqlNonSlaProperties {
    """

    Supported in v5.0
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v5.0
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.0
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"Supported in v5.0+"
type MssqlRecoverableRange {
    "Required. Supported in v5.0+"
    beginTime: DateTime
    "Required. Supported in v5.0+"
    endTime: DateTime
    "Required. Supported in v5.0+"
    isMountAllowed: Boolean!
    "Required. Supported in v5.0+"
    status: String!
}

"Supported in v5.0+"
type MssqlRecoverableRangeListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MssqlRecoverableRange!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type MssqlRestoreEstimateResult {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Estimate of number of bytes that need to be downloaded from the cloud.
    v5.3+: Estimate of the number of bytes to be downloaded from the cloud.
    """
    bytesFromCloud: Long!
}

"Supported in v5.0+"
type MssqlRestoreFile {
    """

    Required. Supported in v5.0+
    Original file ID of the database file to be restored.
    """
    fileId: Long!
    fileType: MssqlDatabaseFileType!
    """

    Required. Supported in v5.0+
    Logical name of the database file to be restored.
    """
    logicalName: String!
    """

    Required. Supported in v5.0+
    Original filename of the database file to be restored.
    """
    originalName: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Original path of the database file to be restored.
    v5.3+: Original path to the database file to be restored.
    """
    originalPath: String!
}

"Supported in v5.0+"
type MssqlRootProperties {
    """

    Supported in v5.0+
    ID of the root of this object.
    """
    rootId: String
    """

    Required. Supported in v5.0+
    Name of the root of this object.
    """
    rootName: String!
    """

    Supported in v5.3+
    Role of the root object for this object if the root object is a Host and part of a **_MssqlAvailabilityGroup_**.
    """
    rootRole: String
    rootType: MssqlRootPropertiesRootType!
}

"Supported in v5.0+"
type MssqlScriptDetail {
    scriptErrorAction: ScriptErrorAction!
    """

    Required. Supported in v5.0+
    The script to be run.
    """
    scriptPath: String!
    """

    Required. Supported in v5.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"Supported in v5.1+"
type MssqlSlaRelatedProperties {
    """

    Supported in v5.1+
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v7.0+
    A boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
    """
    hasLogConfigFromSla: Boolean
    """

    Supported in v5.1+
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.1+
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"Paginated list of MssqlTopLevelDescendantType objects."
type MssqlTopLevelDescendantTypeConnection {
    "Total number of MssqlTopLevelDescendantType objects matching the request arguments."
    count: Int!
    "List of MssqlTopLevelDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [MssqlTopLevelDescendantTypeEdge!]!
    "List of MssqlTopLevelDescendantType objects."
    nodes: [MssqlTopLevelDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the MssqlTopLevelDescendantType object. This wrapper is used for pagination."
type MssqlTopLevelDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual MssqlTopLevelDescendantType object wrapped by this edge."
    node: MssqlTopLevelDescendantType!
}

"Supported in v5.0"
type MssqlUnprotectableReason {
    """

    Required. Supported in v5.0
    A reason that a SQL Server database or instance cannot be protected by Rubrik.
    """
    message: String!
    unprotectableType: MssqlUnprotectableType!
}

type Mutation {
    "Add AD Groups to O365 hierarchy."
    addAdGroupsToHierarchy(
        "The input for the AddAdGroupsToHierarchy mutation."
        input: AddAdGroupsToHierarchyInput!
    ): RequestStatus!
    """

    Add a new domain

    Supported in v5.0+
    Add a new domain manually and join Active Directory.
    """
    addAndJoinSmbDomain(
        "Input for InternalAddAndJoinSmbDomain."
        input: AddAndJoinSmbDomainInput!
    ): AddAndJoinSmbDomainReply!
    "Validates and adds an authentication server-based AWS cloud account. When validation succeeds, the AWS cloud account is added and the features specified in the request are enabled. When validation fails, an error is not returned, but the cause of the failure is specified in the \"message\" field of the response object."
    addAwsAuthenticationServerBasedCloudAccount(
        "Input to add authentication server-based AWS cloud account for native protection."
        input: AddAwsAuthenticationServerBasedCloudAccountInput!
    ): AddAwsAuthenticationServerBasedCloudAccountReply!
    "Adds an IAM user-based AWS cloud account and enables the features specified in the input after successful validation of the request."
    addAwsIamUserBasedCloudAccount(
        "Input to add IAM user-based AWS cloud account for native protection."
        input: AddAwsIamUserBasedCloudAccountInput!
    ): AddAwsIamUserBasedCloudAccountReply!
    "Add the Azure Subscriptions cloud account for the given feature."
    addAzureCloudAccount(
        "Input for adding an Azure Cloud Account."
        input: AddAzureCloudAccountInput!
    ): AddAzureCloudAccountReply!
    "Add Exocompute configurations for an Azure Cloud Account."
    addAzureCloudAccountExocomputeConfigurations(
        "Input for adding Exocompute configurations for an Azure Cloud Account."
        input: AddAzureCloudAccountExocomputeConfigurationsInput!
    ): AddAzureCloudAccountExocomputeConfigurationsReply!
    "Add the Azure Subscription cloud account for the given feature without OAuth."
    addAzureCloudAccountWithoutOauth(
        "Input for adding an Azure Cloud Account without OAuth."
        input: AddAzureCloudAccountWithoutOauthInput!
    ): AddAzureCloudAccountWithoutOauthReply!
    "Add Certificate."
    addCertificate(
        "Certificate."
        certificate: String!,
        "CSR ID."
        csrId: Long,
        "Certificate description."
        description: String,
        "Certificate name."
        name: String!,
        "Certificate private key."
        privateKey: String
    ): Long!
    "Add credentials for the user in the databases with authorization to perform backups."
    addCloudNativeSqlServerBackupCredentials(
        "Input required to add credentials for performing SQL Server backups."
        input: AddCloudNativeSqlServerBackupCredentialsInput!
    ): AddCloudNativeSqlServerBackupCredentialsReply!
    """

    Import a certificate

    Supported in v5.1+
    Import a certificate.
    """
    addClusterCertificate(
        "Input for V1ImportCertificate."
        input: AddClusterCertificateInput!
    ): AddClusterCertificateReply!
    "Add nodes to the CDM cluster."
    addClusterNodes(
        "Input for add nodes."
        AddClusterNodesInput: AddClusterNodesInput!
    ): AddClusterNodesReply!
    "Add a Configured Group to the O365 hierarchy."
    addConfiguredGroupToHierarchy(
        "The input for the AddConfiguredGroupToHierarchy mutation."
        input: AddConfiguredGroupToHierarchyInput!
    ): AddConfiguredGroupToHierarchyReply!
    "Mutation to add a new Db2 instance."
    addDb2Instance(
        "Input for V1AddDb2Instance."
        input: AddDb2InstanceInput!
    ): AddDb2InstanceReply!
    "Add a global certificate."
    addGlobalCertificate(
        "Input to add a global certificate."
        input: AddGlobalCertificateInput!
    ): AddGlobalCertificateReply!
    "Add account level inventory workloads."
    addInventoryWorkloads(
        "Inventory workloads to add for an account."
        input: AddInventoryWorkloadsInput!
    ): Boolean!
    """

    Create a Managed Volume

    Supported in v7.0+
    v7.0: Initiates an asynchronous job to create a Managed Volume stack.
    v8.0+: Start an asynchronous job to create a Managed Volume stack.
    """
    addManagedVolume(
        "Input for V1CreateManagedVolumeV1."
        input: AddManagedVolumeInput!
    ): AddManagedVolumeReply!
    """

    Add a new MongoDB source

    Supported in v9.0
    Adds a new MongoDB source to the Rubrik Cluster.
    """
    addMongoSource(
        "Input for V1AddMongoSource."
        input: AddMongoSourceInput!
    ): AddMongoSourceReply!
    """

    Add a New Store

    Supported in m3.2.0-m4.2.0
    Add a new store to Mosaic cluster.
    """
    addMosaicStore(
        "Input for V2AddMosaicStore."
        input: AddMosaicStoreInput!
    ): MosaicAsyncResponse!
    "Add nodes to cloud cluster."
    addNodesToCloudCluster(
        "Input for adding nodes to cloud cluster."
        input: AddNodesToCloudClusterInput!
    ): CcProvisionJobReply!
    "Adds an O365 org to the account."
    addO365Org(
        "The input for the AddO365Org mutation."
        input: AddO365OrgInput!
    ): AddO365OrgResponse!
    "Add policies to objects."
    addPolicyObjects(objectIds: [String!]!, policyIds: [String!]!): String!
    addRoleAssignments(
        "List of group IDs."
        groupIds: [String!],
        roleIds: [String!]!,
        "List of user IDs."
        userIds: [String!]
    ): Boolean!
    """

    Add a SAP HANA system

    Supported in v5.3+
    Add a SAP HANA system to the Rubrik cluster.
    """
    addSapHanaSystem(
        "Input for V1AddSapHanaSystem."
        input: AddSapHanaSystemInput!
    ): AddSapHanaSystemReply!
    "Add storage arrays to Rubrik clusters."
    addStorageArrays(
        "List of storage arrays to add."
        input: AddStorageArraysInput!
    ): AddStorageArraysReply!
    addSyslogConfiguration(
        "Host name for your SMTP configuration."
        hostName: String!,
        "Network type to use."
        networkProtocolType: NetworkProtocolTypeEnum!,
        "Port number for your SMTP configuration."
        port: Int!,
        "Filter syslog by facility."
        syslogFacility: SyslogFacilityTypeEnum!,
        "Filter syslog by severity."
        syslogSeverity: SyslogSeverityTypeEnum!,
        "Trusted certificate to use for your SMTP configuration."
        trustedCerts: String!,
        "Specifies whether to use TLS or not."
        useTLS: Boolean!
    ): Boolean!
    """

    Add a new syslog export rule

    Supported in v5.1+
    Adds a new rule specifying where to export the specified syslog information.
    """
    addSyslogExportRule(
        "Input for V1AddSyslogExportRule."
        input: AddSyslogExportRuleInput!
    ): AddSyslogExportRuleReply!
    "Add vCD instances to Rubrik clusters."
    addVcdInstances(
        "List of vCD instances to add."
        input: AddVcdInstancesInput!
    ): AddVcdInstancesReply!
    "Add VLAN to Rubrik cluster."
    addVlan(
        "Input for InternalAddVlan."
        input: AddVlanInput!
    ): ResponseSuccess!
    "Add Vm App consistent specs info"
    addVmAppConsistentSpecs(
        "Input required to add Azure native virtual machine application consistency specifications."
        input: AddVmAppConsistentSpecsInput!
    ): AddVmAppConsistentSpecsReply!
    "Archive a crawl."
    archiveCrawl(crawlId: String!): String!
    "Archive a Kubernetes cluster."
    archiveK8sCluster(
        "Request for archiving a Kubernetes cluster."
        input: ArchiveK8sClusterInput!
    ): ArchiveK8sClusterReply!
    "Archive Recovery Plan."
    archiveRecoveryPlan(
        "Archive Recovery Plan configuration."
        recoveryPlanConfig: ArchiveRecoveryPlanInput!
    ): Void
    "Assign SLA domain properties to Mssql objects."
    assignMssqlSlaDomainProperties(
        "Input for V1AssignMssqlSlaProperties."
        input: AssignMssqlSlaDomainPropertiesInput!
    ): ResponseSuccess!
    "Assign SLA domain properties to Mssql objects."
    assignMssqlSlaDomainPropertiesAsync(
        "Input for V2AssignMssqlSlaPropertiesAsync."
        input: AssignMssqlSlaDomainPropertiesAsyncInput!
    ): AssignMssqlSlaDomainPropertiesAsyncReply!
    "Assign protection to cassandra objects."
    assignProtection(
        "Arguments for protection backup."
        input: AssignProtectionInput!
    ): SlaAssignResult!
    assignRetentionSLAToSnappables(
        "Provide optional snappable type under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. This allows an SLA to be set for one/more specific snappable types under the object, instead of applying the SLA for all the snappable types. For example, an AWS account object can potentially have 2 different snappable types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA only gets applied to snappables of the selected type under that account. If the SLA must be applicable for all the snappable types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA to a snappable or to an object that does not support multiple snappable types."
        applicableSnappableType: WorkloadLevelHierarchy,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Global SLA Domain forever UUID."
        globalSlaOptionalFid: UUID,
        "A list of object forever UUIDs to assign to the global SLA Domain."
        objectIds: [UUID!]!,
        "Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain."
        shouldApplyToNonPolicySnapshots: Boolean,
        "Optional User note."
        userNote: String
    ): SlaAssignResult!
    assignRetentionSLAToSnapshots(
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Global SLA Domain forever UUID."
        globalSlaOptionalFid: UUID,
        "List of UUIDs of objects."
        snapshotFids: [UUID!]!,
        "Optional User note."
        userNote: String
    ): SlaAssignResult!
    "Endpoint to assign SLA Domain."
    assignSla(
        "Assign SLA Domain Request."
        input: AssignSlaInput!
    ): SlaAssignResult!
    assignSlasForSnappableHierarchies(
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [WorkloadLevelHierarchy!],
        "Choose what to do with existing snapshot in case of do not protect slas"
        globalExistingSnapshotRetention: GlobalExistingSnapshotRetention,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Global SLA Domain forever UUID."
        globalSlaOptionalFid: UUID,
        "A list of object forever UUIDs to assign to the global SLA Domain."
        objectIds: [UUID!]!,
        "Boolean value to indicate whether to apply changes made to the SLA to existing snapshots."
        shouldApplyToExistingSnapshots: Boolean,
        "Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain."
        shouldApplyToNonPolicySnapshots: Boolean,
        "Optional User note."
        userNote: String
    ): [SlaAssignResult!]!
    "This endpoint is deprecated."
    awsCloudAccountInitiate(
        "Arguments for initiate aws cloud accounts for creation."
        awsCloudAccountInitiateArg: AwsCloudAccountInitiateInput!
    ): AwsCloudAccountCreateResponse! @deprecated(reason: "Please use validateAndCreateAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsCloudAccountUpdateFeature(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Features."
        features: [CloudAccountFeature!]!
    ): AwsCloudAccountUpdateFeatureResponse! @deprecated(reason: "Please use prepareFeatureUpdateForAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsCloudAccountValidate(
        "Arguments for validate aws cloud accounts."
        awsCloudAccountValidateArg: AwsCloudAccountValidateInput!
    ): AwsCloudAccountValidateResponse! @deprecated(reason: "Please use validateAndCreateAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsNativeProtectionAccountAdd(
        "Arguments to add account for native protection."
        awsNativeProtectionAccountAddArg: AwsNativeProtectionAccountAddRequest!
    ): AwsNativeProtectionAccountAddResponse! @deprecated(reason: "Please use validateAndCreateAwsCloudAccount and finalizeAwsCloudAccountProtection instead.")
    "Completes an OAuth consent flow for Azure resource access."
    azureOauthConsentComplete(
        "The input for the AzureOauthConsentComplete mutation."
        input: AzureOauthConsentCompleteInput!
    ): RequestStatus!
    "Kicks off an OAuth consent flow for Azure resource access."
    azureOauthConsentKickoff: AzureOauthConsentKickoffReply!
    "Backup mailbox workload."
    backupO365Mailbox(
        "The list of mailbox UUIDs to backup."
        mailboxIds: [UUID!]!
    ): BatchAsyncJobStatus!
    "Take on-demand snapshot for Onedrive."
    backupO365Onedrive(
        "The input for the BackupO365Onedrive mutation."
        input: BackupO365OnedriveInput!
    ): BatchAsyncJobStatus!
    "Take on-demand snapshot for a SharePoint site."
    backupO365SharePointSite(
        "The input for taking an on-demand snapshot of a SharePoint site."
        input: BackupO365SharePointSiteInput!
    ): CreateOnDemandJobReply!
    "Take on-demand snapshot for Sharepoint drive."
    backupO365SharepointDrive(
        "The input for the BackupO365SharepointDrive mutation."
        input: BackupO365SharepointDriveInput!
    ): BatchAsyncJobStatus!
    "Take on-demand snapshot for SharePoint list."
    backupO365SharepointList(
        "The input for the BackupO365SharepointList mutation."
        input: BackupO365SharePointListInput!
    ): CreateOnDemandJobReply!
    "Take on-demand snapshot for Teams."
    backupO365Team(
        "The input for the BackupO365Team mutation."
        input: BackupO365TeamInput!
    ): BatchAsyncJobStatus!
    batchDeassignRoleFromUserGroups(userGroupToRoles: [UserGroupToRolesInput!]!): Boolean!
    """

    Exports a snapshot from each member of a set of virtual machines

    Supported in v7.0+
    Export a snapshot from each member of a set of virtual machines.
    """
    batchExportHypervVm(
        "Input for V1BatchExportHypervVm."
        input: BatchExportHypervVmInput!
    ): BatchExportHypervVmReply!
    """

    Exports a snapshot from each member of a set of virtual machines

    Supported in v7.0+
    Export a snapshot from each member of a set of virtual machines.
    """
    batchExportNutanixVm(
        "Input for V1BatchExportNutanixVm."
        input: BatchExportNutanixVmInput!
    ): BatchExportNutanixVmReply!
    """

    Instantly recovers snapshots from multiple virtual machines

    Supported in v7.0+
    Instantly recovers a batch of snapshots from a group of specified virtual machines.
    """
    batchInstantRecoverHypervVm(
        "Input for V1BatchInstantRecoverHypervVm."
        input: BatchInstantRecoverHypervVmInput!
    ): BatchInstantRecoverHypervVmReply!
    """

    Mount snapshots from multiple virtual machines

    Supported in v7.0+
    Mounts a batch of snapshots from a group of specified virtual machines.
    """
    batchMountHypervVm(
        "Input for V1BatchMountHypervVm."
        input: BatchMountHypervVmInput!
    ): BatchMountHypervVmReply!
    """

    Mount snapshots from multiple virtual machines

    Supported in v7.0+
    Mounts a batch of snapshots from a group of specified virtual machines.
    """
    batchMountNutanixVm(
        "Input for V1BatchMountNutanixVm."
        input: BatchMountNutanixVmInput!
    ): BatchMountNutanixVmReply!
    "Batch quarantine snapshots."
    batchQuarantineSnapshot(
        "Config to batch quarantine snapshot."
        input: BatchQuarantineSnapshotInput!
    ): BatchQuarantineSnapshotReply!
    "Release snapshots from quarantine."
    batchReleaseFromQuarantineSnapshot(
        "Config to batch release from quarantine snapshot."
        input: BatchReleaseFromQuarantineSnapshotInput!
    ): BatchReleaseFromQuarantineSnapshotReply!
    """

    Begin Managed Volume snapshot

    Supported in v7.0+
    Opens the Managed Volume for writes. All data written to the Managed Volume until the next end-snapshot call will be part of this snapshot.
    """
    beginManagedVolumeSnapshot(
        "Input for V1OpenWritesV1."
        input: BeginManagedVolumeSnapshotInput!
    ): BeginManagedVolumeSnapshotReply!
    blueprintFailoverReportGenerate(failoverReportGeneratorJobConfig: BlueprintFailoverReportGeneratorJobInfo!): CreateOnDemandJobReply!
    "List snapshots and logs from a Mssql Database. This endpoint is only used to fetch data, but uses a mutation instead of a query due to limitations with the CDM API."
    browseMssqlDatabaseSnapshot(
        "Input for V1BrowseMssqlBackupFiles."
        input: BrowseMssqlDatabaseSnapshotInput!
    ): BrowseMssqlDatabaseSnapshotReply!
    "Cancel multiple failovers."
    bulkCancelFailovers(
        "List of Recovery Plan IDs."
        cancelFailoversConfig: BulkCancelFailoversInput!
    ): Void
    bulkCreateFilesetTemplates(
        "Input for InternalBulkCreateFilesetTemplate."
        input: BulkCreateFilesetTemplatesInput!
    ): BulkCreateFilesetTemplatesReply!
    bulkCreateFilesets(
        "Input for InternalBulkCreateFileset."
        input: BulkCreateFilesetsInput!
    ): BulkCreateFilesetsReply!
    """

    Create filesets in bulk for NAS shares

    Supported in v7.0+
    Create primary filesets for a list of NAS shares.
    """
    bulkCreateNasFilesets(
        "Input for V1BulkCreatePolarisNasFilesets."
        input: BulkCreateNasFilesetsInput!
    ): BulkCreateNasFilesetsReply!
    "Take a bulk on-demand backup of a Microsoft SQL Database."
    bulkCreateOnDemandMssqlBackup(
        "Input for V1CreateOnDemandMssqlBatchBackupV1."
        input: BulkCreateOnDemandMssqlBackupInput!
    ): AsyncRequestStatus!
    "Bulk Delete cassandra sources."
    bulkDeleteCassandraSources(
        "Input for V2BulkDeleteMosaicSources."
        input: BulkDeleteMosaicSourcesInput!
    ): MosaicAsyncResponse!
    """

    Delete the provided failover clusters

    Supported in v5.3+
    Delete the provided failover clusters.
    """
    bulkDeleteFailoverCluster(
        "Input for V1BulkDeleteFailoverCluster."
        input: BulkDeleteFailoverClusterInput!
    ): ResponseSuccess!
    """

    Delete failover cluster applications

    Supported in v5.3+
    Delete failover cluster applications from Rubrik cluster.
    """
    bulkDeleteFailoverClusterApp(
        "Input for V1BulkDeleteFailoverClusterApp."
        input: BulkDeleteFailoverClusterAppInput!
    ): ResponseSuccess!
    """

    Delete filesets

    Supported in v5.0+
    Delete filesets by specifying the fileset IDs.
    """
    bulkDeleteFileset(
        "Input for InternalBulkDeleteFileset."
        input: BulkDeleteFilesetInput!
    ): ResponseSuccess!
    """

    Delete fileset templates

    Supported in v5.0+
    Deletes specfied fileset templates. Detaches and retains all associated filesets as independent filesets with the existing values.
    """
    bulkDeleteFilesetTemplate(
        "Input for InternalBulkDeleteFilesetTemplate."
        input: BulkDeleteFilesetTemplateInput!
    ): ResponseSuccess!
    bulkDeleteHost(
        "Input for InternalBulkDeleteHost."
        input: BulkDeleteHostInput!
    ): ResponseSuccess!
    """

    Bulk Delete Sources

    Supported in m3.2.0-m4.2.0.
    """
    bulkDeleteMongodbSources(
        "Input for V2BulkDeleteMosaicSources."
        input: BulkDeleteMosaicSourcesInput!
    ): MosaicAsyncResponse!
    """

    Delete multiple NAS systems

    Supported in v7.0+
    Triggers a delete of the specified NAS systems. Returns an asynchronous request to check their delete status.
    """
    bulkDeleteNasSystems(
        "Input for V1BulkDeleteNasSystems."
        input: BulkDeleteNasSystemsInput!
    ): BatchAsyncRequestStatus!
    "Refresh multiple hosts with a single request."
    bulkRefreshHosts(
        "Input for refreshing multiple hosts with a single request."
        input: BulkRefreshHostsInput!
    ): BulkRefreshHostsReply!
    """

    Register hosts

    Supported in v5.0+
    Register hosts with Rubrik clusters.
    """
    bulkRegisterHost(
        "Input for InternalBulkRegisterHost."
        input: BulkRegisterHostInput!
    ): BulkRegisterHostReply!
    """

    Update multiple Exchange DAGs

    Supported in v8.0+
    Update multiple Exchange DAGs with the specified properties.
    """
    bulkUpdateExchangeDag(
        "Input for V1BulkUpdateExchangeDag."
        input: BulkUpdateExchangeDagInput!
    ): V1BulkUpdateExchangeDagResponse!
    """

    Modify fileset templates

    Supported in v5.0+
    Modify the values of specified fileset templates.
    """
    bulkUpdateFilesetTemplate(
        "Input for InternalBulkUpdateFilesetTemplate."
        input: BulkUpdateFilesetTemplateInput!
    ): BulkUpdateFilesetTemplateReply!
    bulkUpdateHost(
        "Input for InternalBulkUpdateHost."
        input: BulkUpdateHostInput!
    ): BulkUpdateHostReply!
    "Update multiple Microsoft SQL databases with the specified properties."
    bulkUpdateMssqlDbs(
        "Input for V1BulkUpdateMssqlDbV1."
        input: BulkUpdateMssqlDbsInput!
    ): BulkUpdateMssqlDbsReply!
    """

    Update Oracle Databases

    Supported in v5.2+
    Update the properties of the objects that represent the specified Oracle Databases.
    """
    bulkUpdateOracleDatabases(
        "Input for V1BulkUpdateOracleDb."
        input: BulkUpdateOracleDatabasesInput!
    ): BulkUpdateOracleDatabasesReply!
    """

    Update Oracle Hosts

    Supported in v5.2+
    Update properties to Oracle Host objects.
    """
    bulkUpdateOracleHosts(
        "Input for V1BulkUpdateOracleHost."
        input: BulkUpdateOracleHostsInput!
    ): BulkUpdateOracleHostsReply!
    """

    Update Oracle RACs

    Supported in v5.2+
    Update the properties of the objects that represent the specified Oracle RAC.
    """
    bulkUpdateOracleRacs(
        "Input for V1BulkUpdateOracleRac."
        input: BulkUpdateOracleRacsInput!
    ): BulkUpdateOracleRacsReply!
    """

    Update SnapMirror Cloud objects

    Supported in v7.0+
    Update properties of the specified SnapMirror Cloud objects.
    """
    bulkUpdateSnapMirrorCloud(
        "Input for V1BulkUpdateSnapMirrorCloud."
        input: BulkUpdateSnapMirrorCloudInput!
    ): BulkUpdateSnapMirrorCloudReply!
    "Cancel an activity series."
    cancelActivitySeries(
        "Input for canceling an activity series."
        input: CancelActivitySeriesInput!
    ): Boolean!
    cancelBlueprintFailover(taskchainId: UUID!): Result!
    "Cancels download package job of a cluster."
    cancelDownloadPackage(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): CancelJobReply!
    "Cancels scheduled upgrade job of a cluster."
    cancelScheduledUpgrade(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): CancelJobReply!
    "Cancels the taskchain."
    cancelTaskchain(taskchainId: String!): RequestStatus!
    "Cancel an in-progress threat hunt."
    cancelThreatHunt(
        "The details of the threat hunt to cancel."
        input: CancelThreatHuntInput!
    ): Void
    changePassword(
        "User credentials required to change a user's password."
        input: ChangePasswordInput!
    ): Boolean!
    "Install or uninstall volume filter driver on hosts."
    changeVfdOnHost(
        "Input for InternalChangeVfdOnHost."
        input: ChangeVfdOnHostInput!
    ): ChangeVfdOnHostReply!
    cleanupBlueprintFailover(cleanupJobconfig: CleanupFailoverJobInfo!): CreateOnDemandJobReply!
    cleanupIsolatedRecovery(cleanupIsolatedRecoveryJobconfig: CleanupIsolatedRecoveryJobInfo!): CreateOnDemandJobReply!
    "Clear credentials for the user with authorization to perform database backups. Credentials are cleared from the object to which they were assigned directly."
    clearCloudNativeSqlServerBackupCredentials(
        "Input required to clear the credentials used for SQL Server backups."
        input: ClearCloudNativeSqlServerBackupCredentialsInput!
    ): ClearCloudNativeSqlServerBackupCredentialsReply!
    "Check Rubrik Backup Agent (RBA) connectivity for the VMs."
    cloudNativeCheckRbaConnectivity(
        "Input required to check Rubrik Backup Agent (RBA) connectivity for the VMs."
        input: CloudNativeCheckRbaConnectivityInput!
    ): CloudNativeCheckRbaConnectivityReply!
    "Download files from a cloud-native snapshot to a cloud download location or a virtual machine."
    cloudNativeDownloadFiles(
        "Input required to download indexed cloud-native snapshot files."
        input: CloudNativeDownloadFilesInput!
    ): DownloadFilesReply!
    "Complete the Azure OAuth flow and pass the authorization code."
    completeAzureCloudAccountOauth(
        "Input for completing authentication of the Azure Cloud Accounts."
        input: CompleteAzureCloudAccountOauthInput!
    ): CompleteAzureCloudAccountOauthReply!
    "Configure DNS server addresses."
    configureDns(
        "DNS Addresses."
        dnsAddresses: [String!]!
    ): Boolean!
    "Configure NTP server addresses."
    configureNtp(
        "NTP Addresses."
        ntpAddresses: [String!]!
    ): Boolean!
    """

    Configure the target database for system copy restore

    Supported in v6.0+
    Initiates a job to configure the specified target database for a system copy restore by sending metadata about the source database. System copy restore in SAP HANA is done across different databases.
    """
    configureSapHanaRestore(
        "Input for V1ConfigureSapHanaRestore."
        input: ConfigureSapHanaRestoreInput!
    ): AsyncRequestStatus!
    createAppBlueprint(children: [AppBlueprintChildInput!]!, name: String!, primaryClusterUuid: UUID!): Blueprint!
    createAppBlueprintDownloadSnapshotJobFromCloud(appSnapshotFid: UUID!): Result!
    createAppBlueprintExport(
        exportJobConfig: AppBlueprintExportSnapshotJobConfig!,
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Result!
    createAppBlueprintInstantRecovery(
        "The Rubrik UUID for the object."
        fid: UUID!,
        instantRecoveryJobConfig: InstantRecoveryJobConfig
    ): Result!
    createAppBlueprintMount(
        "The Rubrik UUID for the object."
        fid: UUID!,
        mountJobConfig: AppBlueprintMountSnapshotJobConfig!
    ): Result!
    createAutomaticAwsTargetMapping(
        "Request for creating a new AWS target mapping."
        input: CreateAutomaticAwsTargetMappingInput!
    ): TargetMapping!
    createAutomaticAzureTargetMapping(
        "Request for creating a new Azure target mapping."
        input: CreateAutomaticAzureTargetMappingInput!
    ): TargetMapping!
    createAutomaticRcsTargetMapping(
        "Request argument for creating a new Rubrik Cloud Vault location."
        input: CreateAutomaticRcsTargetMappingInput!
    ): TargetMapping!
    createAwsAccount(
        "Request argument for creating a new AWS account."
        input: CreateAwsAccountInput!
    ): CloudAccount!
    "Create a cluster in Aws."
    createAwsCluster(
        "CreateAwsClusterArg params for Aws."
        input: CreateAwsClusterInput!
    ): CcProvisionJobReply!
    createAwsComputeSetting(
        "Request for creating a new Aws Compute Setting."
        input: CreateAwsComputeSettingInput!
    ): AwsComputeSettings!
    "Create AWS Exocompute configs."
    createAwsExocomputeConfigs(
        "Input to create AWS exocompute configurations."
        input: CreateAwsExocomputeConfigsInput!
    ): CreateAwsExocomputeConfigsReply!
    "Create a reader type for AWS archival location on a Rubrik cluster."
    createAwsReaderTarget(
        "Input for creating a new AWS reader target."
        input: CreateAwsReaderTargetInput!
    ): Target!
    createAwsTarget(
        "Request for creating a new AWS target."
        input: CreateAwsTargetInput!
    ): Target!
    createAzureAccount(
        "Input for creating an Azure account."
        input: CreateAzureAccountInput!
    ): CloudAccount!
    "Create a cluster in Azure."
    createAzureCluster(
        "CreateAzureClusterArg params for Azure."
        input: CreateAzureClusterInput!
    ): CcProvisionJobReply!
    "Creates reader type for Azure archival location on a CDM cluster."
    createAzureReaderTarget(
        "Input for creating a new Azure reader target."
        input: CreateAzureReaderTargetInput!
    ): Target!
    "Creates an Azure archival target on the Rubrik cluster."
    createAzureTarget(
        "Request for creating a new Azure target."
        input: CreateAzureTargetInput!
    ): Target!
    createBlueprint(
        "Recovery type of the Recovery Plan."
        blueprintRecoveryType: BlueprintRecoveryType,
        children: [AppBlueprintChildInput!]!,
        "Specifies whether hydration is enabled for the Recovery Plan."
        enableHydration: Boolean,
        "Flag to enable visibility of Isolated Recovery Plan."
        isBlueprintVisible: Boolean,
        name: String!,
        "The ID of the source location."
        sourceLocationId: String!,
        "The type of the source location."
        sourceLocationType: BlueprintLocationType! = CDM,
        "The status of the Recovery Plan."
        status: BlueprintStatus! = INCOMPLETE,
        "The ID of the intended remote target location."
        targetLocationId: String,
        "The type of the intended remote target location."
        targetLocationType: BlueprintLocationType = CDM,
        "A list of numbers representing the length of time, in minutes, to pause between each priority group during recovery. The numbers are ordered to align with the order of the priority groups. For example, consider a Blueprint with 3 priority groups. For this Blueprint, a value of [5,10,0] implies that there is a 5-minute pause between the 1st and 2nd priority groups and a 10-minute pause between the 2nd and 3rd priority groups. The last value in the list is always 0."
        timeoutBetweenPriorityGroups: [Long!]
    ): BlueprintNew!
    "create a list of blueprint recovery specs with a list of child snappable/snapshot recovery specs"
    createBlueprintRecoverySpec(
        "The Blueprint ID."
        blueprintId: UUID!,
        "Indicate if its not a default recovery spec request."
        isDefaultRecoverySpec: Boolean,
        "configurations of the recovery specs"
        recoveryConfigs: [AppBlueprintRecoverySpecCreateReqInputType!]!,
        "the type of the recovery specs (AWS_EC2, VMWARE_VM)"
        specType: RecoverySpecType!
    ): [BlueprintRecoverySpec!]!
    createBlueprintSnapshot(
        BaseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfig,
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Result!
    "Create a cassandra source."
    createCassandraSource(
        "Input for V2AddMosaicSource."
        input: AddMosaicSourceInput!
    ): MosaicAsyncResponse!
    createCloudNativeAwsStorageSetting(input: CreateCloudNativeAwsStorageSettingInput!): CreateCloudNativeAwsStorageSettingReply!
    "Creates Storage Settings for the archival of azure cloud native protected objects"
    createCloudNativeAzureStorageSetting(input: CreateCloudNativeAzureStorageSettingInput!): CreateCloudNativeAzureStorageSettingReply!
    "Create cloud native label rule"
    createCloudNativeLabelRule(
        "Input required to create a cloud-native label rule."
        input: CreateCloudNativeLabelRuleInput!
    ): CreateCloudNativeLabelRuleReply!
    "Create Rubrik Cloud Vault storage settings for archiving azure cloud native protected objects."
    createCloudNativeRcvAzureStorageSetting(
        "Create Rubrik Cloud Vault Azure cloud native storage setting."
        input: CreateCloudNativeRcvAzureStorageSettingInput!
    ): CreateCloudNativeRcvAzureStorageSettingReply!
    "Create cloud native tag rule"
    createCloudNativeTagRule(
        "Input required to create a cloud-native tag rule."
        input: CreateCloudNativeTagRuleInput!
    ): CreateCloudNativeTagRuleReply!
    "Set up configuration protection for a cluster."
    createConfigProtectionSetup(
        "Settings to set up configuration protection."
        input: CreateConfigProtectionSetupInput!
    ): BatchAsyncJobStatus!
    "Create a new custom analyzer."
    createCustomAnalyzer(input: CreateCustomAnalyzerInput!): Analyzer!
    "Create a custom report."
    createCustomReport(input: CreateCustomReportInput!): CreateCustomReportReply!
    """

    Creates a download from archival request

    Supported in v5.0+
    Download a snapshot from archival.
    """
    createDownloadSnapshotForVolumeGroup(
        "Input for InternalCreateDownloadSnapshotForVolumeGroup."
        input: CreateDownloadSnapshotForVolumeGroupInput!
    ): AsyncRequestStatus!
    """

    Create a request to mount a Microsoft Exchange database snapshot

    Supported in v8.0+
    Create a request to mount a Microsoft Exchange database snapshot.
    """
    createExchangeMount(
        "Input for V1CreateExchangeSnapshotMount."
        input: CreateExchangeSnapshotMountInput!
    ): AsyncRequestStatus!
    """

    Create a failover cluster

    Supported in v5.2+
    Create a failover cluster.
    """
    createFailoverCluster(
        "Input for V1CreateFailoverCluster."
        input: CreateFailoverClusterInput!
    ): CreateFailoverClusterReply!
    """

    Create a failover cluster app

    Supported in v5.2+
    Create a failover cluster app.
    """
    createFailoverClusterApp(
        "Input for V1CreateFailoverClusterApp."
        input: CreateFailoverClusterAppInput!
    ): CreateFailoverClusterAppReply!
    createFilesetSnapshot(
        "Input for V1CreateFilesetBackupJob."
        input: CreateFilesetSnapshotInput!
    ): AsyncRequestStatus!
    "Creates reader type for GCP archival location on a CDM cluster."
    createGcpReaderTarget(
        "Request for creating a new Gcp reader target."
        input: CreateGcpReaderTargetInput!
    ): Target!
    createGcpTarget(
        "Request for creating a new Gcp target."
        input: CreateGcpTargetInput!
    ): Target!
    "Create a reader target of type Glacier on a Rubrik cluster."
    createGlacierReaderTarget(
        "Request for creating a new Glacier reader target."
        input: CreateGlacierReaderTargetInput!
    ): Target!
    "Create SLA Domain."
    createGlobalSla(input: CreateGlobalSlaInput!): GlobalSlaReply!
    createGuestCredential(
        "Input for InternalCreateGuestCredential."
        input: CreateGuestCredentialInput!
    ): CreateGuestCredentialReply!
    """

    Create a live mount request

    Supported in v5.0+
    Create a live mount request with given configuration.
    """
    createHypervVirtualMachineSnapshotMount(
        "Input for InternalCreateHypervVirtualMachineSnapshotMount."
        input: CreateHypervVirtualMachineSnapshotMountInput!
    ): AsyncRequestStatus!
    "Create a Rubrik Kubernetes agent manifest."
    createK8sAgentManifest(
        "Request to create a new Rubrik Kubernetes agent manifest."
        input: CreateK8sAgentManifestInput!
    ): CreateK8sAgentManifestReply!
    "Add a Kubernetes cluster."
    createK8sCluster(
        "Request for creating a Kubernetes cluster."
        input: CreateK8sClusterInput!
    ): CreateK8sClusterReply!
    "Snapshot Kubernetes Namespace."
    createK8sNamespaceSnapshots(
        "Request for snapshot of Kubernetes Namespaces."
        input: CreateK8sNamespaceSnapshotsInput!
    ): [CreateOnDemandJobReply!]!
    "Place legal hold on snapshots."
    createLegalHold(
        "Create Legal Hold Request."
        input: CreateLegalHoldInput!
    ): CreateLegalHoldReply!
    createManualTargetMapping(
        "Request for creating manual target mapping."
        input: CreateManualTargetMappingInput!
    ): TargetMapping!
    """

    Register a new MongoDB source to NoSQL cluster.
    For MongoDB, the term "source" is usually used for either a replica set or a sharded cluster.
    For more info on MongoDB cluster, refer to: https://docs.mongodb.com/manual/introduction/.
    """
    createMongodbSource(
        "Input for V2AddMosaicSource."
        input: AddMosaicSourceInput!
    ): MosaicAsyncResponse!
    "Create live mount of a Microsoft SQL Database."
    createMssqlLiveMount(
        "Input for V1CreateMssqlMount."
        input: CreateMssqlLiveMountInput!
    ): AsyncRequestStatus!
    "Create log shipping configuration of a Microsoft SQL Database."
    createMssqlLogShippingConfiguration(
        "Input for V2CreateLogShippingConfigurationV2."
        input: CreateMssqlLogShippingConfigurationInput!
    ): AsyncRequestStatus!
    "Creates reader type for NFS archival location on a CDM cluster."
    createNfsReaderTarget(
        "Input for creating a new NFS reader target."
        input: CreateNfsReaderTargetInput!
    ): Target!
    createNfsTarget(
        "Request for creating a new NFS target."
        input: CreateNfsTargetInput!
    ): Target!
    """

    Add Nutanix cluster

    Supported in v5.0+
    Create a Nutanix cluster object by providing an address and account credentials for Prism. Initiates an asynchronous job to establish a connection with the cluster and retrieve all metadata. Use GET /nutanix_cluster/{id}/status to check status.
    """
    createNutanixCluster(
        "Input for InternalCreateNutanixCluster."
        input: CreateNutanixClusterInput!
    ): AsyncRequestStatus!
    "Completes the creation flow for an O365 Azure AD App."
    createO365AppComplete(
        "The input for the CreateO365AppComplete mutation."
        input: CreateO365AppCompleteInput!
    ): RequestStatus!
    "Kicks off the creation flow for an O365 Azure AD App."
    createO365AppKickoff(
        "The input for the CreateO365AppKickoff mutation."
        input: CreateO365AppKickoffInput!
    ): CreateO365AppKickoffResp!
    """

    Create on demand database snapshot

    Supported in v8.0+
    Initiates a job to take an on demand, full snapshot of a specified Db2 database object. Use the GET /db2/db/request/{id} endpoint to monitor the progress of the job.
    """
    createOnDemandDb2Backup(
        "Input for V1CreateOnDemandDb2Backup."
        input: CreateOnDemandDb2BackupInput!
    ): AsyncRequestStatus!
    """

    Take an on-demand backup of a Microsoft Exchange database

    Supported in v8.0+
    Takes an on-demand backup of a Microsoft Exchange database. The forceFullSnapshot property can be set to true to force a full snapshot. To check the result of the request, poll /exchange/request/{id}.
    """
    createOnDemandExchangeBackup(
        "Input for V1CreateOnDemandExchangeDatabaseBackup."
        input: CreateOnDemandExchangeDatabaseBackupInput!
    ): AsyncRequestStatus!
    "Take an on-demand backup of a Microsoft SQL Database"
    createOnDemandMssqlBackup(
        "Input for V1CreateOnDemandMssqlBackup."
        input: CreateOnDemandMssqlBackupInput!
    ): AsyncRequestStatus!
    """

    v5.0-v8.0: Create on-demand VM snapshot
    v9.0: Create on-demand virtual machine snapshot

    Supported in v5.0+
    v5.0-v5.3: Create an on-demand snapshot for the given VM ID
    v6.0-v8.0: Create an on-demand snapshot for the given VM ID.
    v9.0: Create an on-demand snapshot for the given virtual machine ID.
    """
    createOnDemandNutanixBackup(
        "Input for InternalCreateOnDemandNutanixBackup."
        input: CreateOnDemandNutanixBackupInput!
    ): AsyncRequestStatus!
    """

    Create on demand database snapshot

    Supported in v5.3+
    Initiates a job to take an on demand full snapshot of a specified SAP HANA database object. The GET /sap_hana/db/request/{id} endpoint can be used to monitor the progress of the job.
    """
    createOnDemandSapHanaBackup(
        "Input for V1CreateOnDemandSapHanaBackup."
        input: CreateOnDemandSapHanaBackupInput!
    ): AsyncRequestStatus!
    """

    Create on-demand snapshot for the Volume Group

    Supported in v5.3+
    Create an on-demand snapshot for the given Volume Group ID.
    """
    createOnDemandVolumeGroupBackup(
        "Input for V1CreateOnDemandVolumeGroupBackup."
        input: CreateOnDemandVolumeGroupBackupInput!
    ): AsyncRequestStatus!
    """

    Restore PDBs on an Oracle database

    Supported in v8.0+
    Initiates an asynchronous request to restore PDBs on an Oracle database from a specified snapshot or timestamp.
    """
    createOraclePdbRestore(
        "Input for V1CreateOraclePdbRestore."
        input: CreateOraclePdbRestoreInput!
    ): AsyncRequestStatus!
    "Create a new organization under global org."
    createOrg(
        "Input required for org creation."
        input: CreateOrgInput!
    ): CreateOrgReply!
    "Create a new report with the specified configuration."
    createPolarisReport(
        "Input configuration of creating a report."
        input: CreatePolarisReportInput!
    ): CreatePolarisReportReply!
    "Create a classification policy."
    createPolicy(input: CreatePolicyInput!): ClassificationPolicyDetail!
    "Creates reader type for RCS Azure archival location on a CDM cluster."
    createRcsReaderTarget(
        "Input for creating a new RCS reader target."
        input: CreateRcsReaderTargetInput!
    ): Target!
    createRcsTarget(
        "Request for creating a new RCS Azure location."
        input: CreateRcsTargetInput!
    ): Target!
    "Creates Rubrik Cloud Vault locations from given location template."
    createRcvLocationsFromTemplate(
        "Request argument for creating a new Rubrik Cloud Vault location."
        input: CreateRcvLocationsFromTemplateInput!
    ): [Target!]!
    "Create RCV private endpoint approval request."
    createRcvPrivateEndpointApprovalRequest(
        "Input for creating a private endpoint approval request for an RCV location."
        input: CreateRcvPrivateEndpointApprovalRequestInput!
    ): CreateRcvPrivateEndpointApprovalRequestReply!
    "Create Recovery Plan."
    createRecoveryPlan(
        "Recovery Plan configuration."
        recoveryPlanConfig: CreateRecoveryPlanInput!
    ): CreateRecoveryPlanReply!
    "Creates replication pairing between two Rubrik clusters."
    createReplicationPair(
        "Request to create a replication pair between two Rubrik clusters."
        input: CreateReplicationPairInput!
    ): Void
    createReport(reportConfig: ReportConfigInput!): Int!
    "This endpoint is deprecated."
    createRole(
        description: String!,
        name: String!,
        "Permissions in the role."
        permissions: [PermissionInput!]!
    ): UUID!
    "Creates reader type for S3Compatible archival location on a CDM cluster."
    createS3CompatibleReaderTarget(
        "Input for creating a new S3Compatible reader target."
        input: CreateS3CompatibleReaderTargetInput!
    ): Target!
    createS3CompatibleTarget(
        "Request for creating a new S3-compatible target."
        input: CreateS3CompatibleTargetInput!
    ): Target!
    """

    Refresh SAP HANA system metadata

    Supported in v5.3+
    Initiates a job to refresh metadata of a SAP HANA system object. The GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
    """
    createSapHanaSystemRefresh(
        "Input for V1CreateSapHanaSystemRefresh."
        input: CreateSapHanaSystemRefreshInput!
    ): AsyncRequestStatus!
    "Create a scheduled report."
    createScheduledReport(input: CreateScheduledReportInput!): CreateScheduledReportReply!
    "Create a service account."
    createServiceAccount(
        "Input for creating of service account."
        input: CreateServiceAccountInput!
    ): CreateServiceAccountReply!
    """

    v7.0-v8.0: Create a SnapMirror Cloud protected object for a NetApp volume
    v9.0: Create a SnapMirror Cloud workload for a NetApp volume

    Supported in v7.0+
    v7.0-v8.0: Create a SnapMirror Cloud protected object for a NetApp volume.
    v9.0: Create a SnapMirror Cloud workload for a NetApp volume.
    """
    createSnapMirrorCloud(
        "Input for V1CreateSnapMirrorCloud."
        input: CreateSnapMirrorCloudInput!
    ): CreateSnapMirrorCloudReply!
    """

    Create a SnapMirrorCloud relationship on NetApp server between the volume and the cloud target

    Supported in v7.0+
    Creates a SnapMirrorCloud relationship on NetApp server between the volume and the cloud target which are configured on the SnapMirrorCloud protected object.
    """
    createSnapMirrorCloudRelationship(
        "Input for V1CreateSnapMirrorCloudRelationship."
        input: CreateSnapMirrorCloudRelationshipInput!
    ): CreateSnapMirrorCloudRelationshipReply!
    """

    Create restore job to restore multiple files/directories or the NetApp volume

    Supported in v7.0+
    Launches a job to restore a source NetApp volume or a subset of the files and directories in that volume to a target volume. The target volume can be the same as the source volume.
    """
    createSnapMirrorCloudRestoreJob(
        "Input for V1CreateSnapMirrorCloudRestoreJob."
        input: CreateSnapMirrorCloudRestoreJobInput!
    ): AsyncRequestStatus!
    """

    v7.0-v8.0: Initiate an on-demand backup for SnapMirror Cloud protected object
    v9.0: Initiate an on-demand backup for SnapMirror Cloud workload

    Supported in v7.0+
    v7.0-v8.0: Create an on-demand backup request for the specified SnapMirror Cloud protected object.
    v9.0: Create an on-demand backup request for the specified SnapMirror Cloud workload.
    """
    createSnapMirrorCloudSnapshot(
        "Input for V1CreateSnapMirrorCloudBackupJob."
        input: CreateSnapMirrorCloudSnapshotInput!
    ): AsyncRequestStatus!
    "Create a support case."
    createSupportCase(
        "Input for creating a support case."
        input: CreateSupportCaseInput!
    ): CreateSupportCaseReply!
    createUser(email: String!, roleIds: [String!]!): String!
    createUserWithPassword(
        "User credentials required to create a new user."
        input: CreateUserWithPasswordInput!
    ): String!
    "Export vCD a vApp snapshot."
    createVappExport(
        "Specify snapshot id to export."
        input: CreateVappExportInput!
    ): [AsyncRequestStatus!]!
    "Create Vapp Snapshots."
    createVappSnapshots(
        "List of vApp to create snapshots."
        input: CreateVappSnapshotsInput!
    ): CreateVappSnapshotsReply!
    "Initiate instant recovery from vApp snapshots."
    createVappsInstantRecovery(
        "List of vApp snapshots to be instantly recovered."
        input: CreateVappsInstantRecoveryInput!
    ): CreateVappsInstantRecoveryReply!
    """

    Create a multi-tag filter for vSphere tags

    Supported in v7.0+
    Create a filter consisting of vSphere tags joined with logical operators.
    """
    createVsphereAdvancedTag(
        "Input for V1CreateFilter."
        input: CreateVsphereAdvancedTagInput!
    ): CreateVsphereAdvancedTagReply!
    "Add a vCenter server."
    createVsphereVcenter(
        "Input for V2CreateVcenterV2."
        input: CreateVsphereVcenterInput!
    ): CreateVsphereVcenterReply!
    "Create a webhook."
    createWebhook(
        "The webhook configuration to create."
        input: CreateWebhookInput!
    ): CreateWebhookReply!
    "Deactivate a custom analyzer."
    deactivateCustomAnalyzer(analyzerId: String!): String!
    "Deactivate a classification policy."
    deactivatePolicy(policyId: String!, runAsync: Boolean!): [String!]!
    "Delete account settings value."
    deleteAccountSettingValue(
        "Name of component that uses ASP in account setting table."
        aspComponent: ComponentEnum!,
        "Name of Account Setting Parameter (ASP) in account setting table."
        aspName: String!
    ): Boolean!
    "Delete AD Groups from O365 hierarchy."
    deleteAdGroupsFromHierarchy(
        "The input for the DeleteAdGroupsFromHierarchy mutation."
        input: DeleteAdGroupsFromHierarchyInput!
    ): RequestStatus!
    """

    Delete Oracle database snapshots

    Supported in v5.0+
    Delete all snapshots for a specified Oracle database object. For the operation to succeed the referenced database must not be assigned to an SLA Domain.
    """
    deleteAllOracleDatabaseSnapshots(
        "Input for InternalDeleteAllOracleDbSnapshots."
        input: DeleteAllOracleDatabaseSnapshotsInput!
    ): Void
    """

    Delete all snapshots for a SnapMirror Cloud object

    Supported in v7.0+
    Deletes all snapshots for a given SnapMirror Cloud object. For this operation to work as intended, the SnapMirror Cloud object must be unprotected.
    """
    deleteAllSnapMirrorCloudSnapshots(
        "Input for V1DeleteAllSnapMirrorCloudSnapshots."
        input: DeleteAllSnapMirrorCloudSnapshotsInput!
    ): ResponseSuccess!
    deleteAppBlueprint(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Boolean!
    deleteAppBlueprintSnapshot(
        "The Rubrik UUID for the object."
        fid: UUID!,
        location: String!
    ): Result!
    deleteAppBlueprintSnapshots(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Result!
    "Removes AWS cloud account without cleaning up the associated permissions from the AWS cloud account. Customer needs to clean up the permissions in the AWS account themselves. This mutation is supported only for IAM user-based and authentication server-based AWS cloud accounts."
    deleteAwsCloudAccountWithoutCft(
        "Input to remove AWS cloud account without altering permissions in the cloud account."
        input: DeleteAwsCloudAccountWithoutCftInput!
    ): DeleteAwsCloudAccountWithoutCftReply!
    "Delete a cluster in Aws."
    deleteAwsCluster(
        "DeleteAwsClusterInput params for Aws."
        input: DeleteAwsClusterInput!
    ): CcProvisionJobReply!
    deleteAwsComputeSetting(
        "Request arguments for deleting a Aws Compute Setting."
        input: DeleteAwsComputeSettingInput!
    ): Void
    "Deletes AWS Exocompute configs."
    deleteAwsExocomputeConfigs(
        "List of AWS exocompute configuration IDs."
        input: DeleteAwsExocomputeConfigsInput!
    ): DeleteAwsExocomputeConfigsReply!
    "Deletes IAM user-based AWS cloud account."
    deleteAwsIamUserBasedCloudAccount(
        "Input to delete IAM user-based AWS cloud account."
        input: DeleteAwsIamUserBasedCloudAccountInput!
    ): DeleteAwsIamUserBasedCloudAccountReply!
    "Delete the Azure Subscriptions cloud account for the given feature."
    deleteAzureCloudAccount(
        "Input for deleting an Azure Cloud Account."
        input: DeleteAzureCloudAccountInput!
    ): DeleteAzureCloudAccountReply!
    "Delete Exocompute configurations for an Azure Cloud Account."
    deleteAzureCloudAccountExocomputeConfigurations(
        "Input for adding Exocompute configurations for an Azure Cloud Account."
        input: DeleteAzureCloudAccountExocomputeConfigurationsInput!
    ): DeleteAzureCloudAccountExocomputeConfigurationsReply!
    "Delete the Azure Subscriptions cloud account for the given feature without OAuth."
    deleteAzureCloudAccountWithoutOauth(
        "Input for deleting an Azure Cloud Account without OAuth."
        input: DeleteAzureCloudAccountWithoutOauthInput!
    ): DeleteAzureCloudAccountWithoutOauthReply!
    "Delete a cluster in Azure."
    deleteAzureCluster(
        "DeleteAzureClusterInput params for Azure."
        input: DeleteAzureClusterInput!
    ): CcProvisionJobReply!
    deleteBlueprint(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Boolean!
    "Delete multiple Blueprints."
    deleteBlueprints(
        "List of Recovery Plan IDs."
        input: DeleteBlueprintsInput!
    ): Boolean!
    "Delete a cassandra source."
    deleteCassandraSource(
        "Input for V2DeleteMosaicSource."
        input: DeleteMosaicSourceInput!
    ): MosaicAsyncResponse!
    "Delete Certificate."
    deleteCertificate(
        "Certificate ID."
        certificateId: Long!
    ): Boolean!
    "Delete cloud native label rule."
    deleteCloudNativeLabelRule(
        "Input required to delete a label rule."
        input: DeleteCloudNativeLabelRuleInput!
    ): Void
    "Delete cloud native tag rule."
    deleteCloudNativeTagRule(
        "Input required to delete a tag rule."
        input: DeleteCloudNativeTagRuleInput!
    ): Void
    "Delete Certificate Signing Request."
    deleteCsr(
        "Certificate Signing Request IDs."
        input: DeleteCsrInput!
    ): Void
    "Delete a custom report."
    deleteCustomReport(input: DeleteCustomReportInput!): Void
    """

    Delete Db2 database

    Supported in v9.0
    Deletes a Db2 database.
    """
    deleteDb2Database(
        "Input for V1DeleteDb2Database."
        input: DeleteDb2DatabaseInput!
    ): AsyncRequestStatus!
    "Mutation to delete existing Db2 instance."
    deleteDb2Instance(
        "Input for V1DeleteDb2Instance."
        input: DeleteDb2InstanceInput!
    ): AsyncRequestStatus!
    "Delete event digests for specific recipients."
    deleteEventDigest(
        "Input for deleting an event digest."
        input: DeleteEventDigestInput!
    ): Void
    """

    Request to delete a mount for the Microsoft Exchange database snapshot

    Supported in v8.0+
    Request to delete a mount for Microsoft Exchange database snapshot.
    """
    deleteExchangeSnapshotMount(
        "Input for V1DeleteExchangeSnapshotMount."
        input: DeleteExchangeSnapshotMountInput!
    ): AsyncRequestStatus!
    """

    Delete a failover cluster

    Supported in v5.2+
    Delete a failover cluster.
    """
    deleteFailoverCluster(
        "Input for V1DeleteFailoverCluster."
        input: DeleteFailoverClusterInput!
    ): ResponseSuccess!
    """

    Delete a failover cluster

    Supported in v5.2+
    Delete a failover cluster.
    """
    deleteFailoverClusterApp(
        "Input for V1DeleteFailoverClusterApp."
        input: DeleteFailoverClusterAppInput!
    ): ResponseSuccess!
    deleteFilesetSnapshots(
        "Input for V1DeleteFilesetSnapshots."
        input: DeleteFilesetSnapshotsInput!
    ): ResponseSuccess!
    "Delete an existing global certificate."
    deleteGlobalCertificate(
        "Input to delete a global certificate."
        input: DeleteGlobalCertificateInput!
    ): DeleteGlobalCertificateReply!
    deleteGlobalSla(
        "SLA Domain ID."
        id: UUID!,
        "Optional User note."
        userNote: String
    ): SlaResult!
    deleteGuestCredentialById(
        "Input for InternalDeleteGuestCredentialById."
        input: DeleteGuestCredentialByIdInput!
    ): Boolean!
    """

    Delete VM snapshot

    Supported in v5.0+
    Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected vm.
    """
    deleteHypervVirtualMachineSnapshot(
        "Input for InternalDeleteHypervVirtualMachineSnapshot."
        input: DeleteHypervVirtualMachineSnapshotInput!
    ): RequestSuccess!
    """

    Requst to delete a live mount

    Supported in v5.0+
    Create a request to delete a live mount.
    """
    deleteHypervVirtualMachineSnapshotMount(
        "Input for InternalDeleteHypervVirtualMachineSnapshotMount."
        input: DeleteHypervVirtualMachineSnapshotMountInput!
    ): AsyncRequestStatus!
    deleteIdentityProvider: IdentityProvider!
    deleteLdapPrincipals(principalIds: [String!]!): Boolean!
    "Delete a specified log shipping configuration."
    deleteLogShipping(
        "Input for V1DeleteLogShippingConfiguration."
        input: DeleteLogShippingInput!
    ): AsyncRequestStatus!
    """

    Delete a Managed Volume

    Supported in v7.0+
    Delete a Managed Volume.
    """
    deleteManagedVolume(
        "Input for V1DeleteManagedVolumeV1."
        input: DeleteManagedVolumeInput!
    ): DeleteManagedVolumeReply!
    """

    Delete an exported Managed Volume snapshot

    Supported in v7.0+
    Deletes an exported Managed Volume snapshot, identified by the snapshot ID.
    """
    deleteManagedVolumeSnapshotExport(
        "Input for V1DeleteManagedVolumeSnapshotExportV1."
        input: DeleteManagedVolumeSnapshotExportInput!
    ): AsyncRequestStatus!
    """

    Delete a MongoDB source

    Supported in v9.0
    Deletes a specific MongoDB source.
    """
    deleteMongoSource(
        "Input for V1DeleteMongoSource."
        input: DeleteMongoSourceInput!
    ): AsyncRequestStatus!
    "Remove a registered MongoDB source from NoSQL cluster."
    deleteMongodbSource(
        "Input for V2DeleteMosaicSource."
        input: DeleteMosaicSourceInput!
    ): MosaicAsyncResponse!
    """

    Remove the store by store_name

    Supported in m3.2.0-m4.2.0
    Remove a store from Mosaic cluster.
    """
    deleteMosaicStore(
        "Input for V2DeleteMosaicStore."
        input: DeleteMosaicStoreInput!
    ): MosaicAsyncResponse!
    "Delete snapshots of a Microsoft SQL Database."
    deleteMssqlDbSnapshots(
        "Input for V1DeleteMssqlDbSnapshots."
        input: DeleteMssqlDbSnapshotsInput!
    ): ResponseSuccess!
    """

    Delete a Live Mount of a SQL Server database

    Supported in v5.0+
    Create an async request to delete a Live Mount of a SQL Server database. Poll the task status by using /mssql/request/{id}.
    """
    deleteMssqlLiveMount(
        "Input for V1CreateMssqlUnmount."
        input: DeleteMssqlLiveMountInput!
    ): AsyncRequestStatus!
    """

    Delete a registered NAS system

    Supported in v7.0+
    Delete a NAS system by specifying the NAS system ID.
    """
    deleteNasSystem(
        "Input for V1DeleteNasSystem."
        input: DeleteNasSystemInput!
    ): AsyncRequestStatus!
    """

    Remove Nutanix cluster

    Supported in v5.0+
    Initiates an asynchronous job to remove a Nutanix cluster object. The Nutanix cluster cannot have VMs mounted through the Rubrik cluster.
    """
    deleteNutanixCluster(
        "Input for InternalDeleteNutanixCluster."
        input: DeleteNutanixClusterInput!
    ): AsyncRequestStatus!
    """

    Remove a Live Mount of a Nutanix virtual machine snapshot

    Supported in v6.0+
    Initiates a request to remove a Live Mount of a Nutanix virtual machine snapshot identified by the ID of the Live Mount.
    """
    deleteNutanixMountV1(
        "Input for V1CreateNutanixUnmount."
        input: DeleteNutanixMountV1Input!
    ): AsyncRequestStatus!
    """

    v5.0-v8.0: Delete VM snapshot
    v9.0: Delete virtual machine snapshot

    Supported in v5.0+
    v5.0-v8.0: Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected vm.
    v9.0: Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected virtual machine.
    """
    deleteNutanixSnapshot(
        "Input for InternalDeleteNutanixSnapshot."
        input: DeleteNutanixSnapshotInput!
    ): RequestSuccess!
    """

    v5.0-v8.0: Delete all snapshots of VM
    v9.0: Delete all snapshots of virtual machine

    Supported in v5.0+
    Delete all snapshots of a virtual machine.
    """
    deleteNutanixSnapshots(
        "Input for InternalDeleteNutanixSnapshots."
        input: DeleteNutanixSnapshotsInput!
    ): RequestSuccess!
    "Deletes an O365 Azure AD App from the account."
    deleteO365AzureApp(o365AppClientId: String!, o365AppType: String!): RequestStatus!
    "Deletes an O365 org from the account."
    deleteO365Org(
        "Org UUID."
        orgId: UUID!
    ): CreateOnDemandJobReply!
    "Deletes the service account for an org."
    deleteO365ServiceAccount(
        "Org UUID."
        orgId: UUID!
    ): RequestStatus!
    """

    Delete an Oracle database Live Mount

    Supported in v5.0+
    Request an asynchronous job to delete a specified Live Mount of an Oracle database snapshot. Poll the job status by using /oracle/request/{id}.
    """
    deleteOracleMount(
        "Input for InternalCreateOracleUnmount."
        input: DeleteOracleMountInput!
    ): AsyncRequestStatus!
    "Delete an organization."
    deleteOrg(
        "Input required for org delete."
        input: DeleteOrgInput!
    ): Boolean!
    "Deletes the Rubrik Security Cloud on-demand snapshot by ID."
    deletePolarisSnapshot(
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!
    ): Boolean!
    "Delete one or more recovery specifications associated with the Blueprint ID or failover summary ID."
    deleteRecoverySpec(
        "The Blueprint ID."
        blueprintId: UUID!,
        "List of plan types (PROD, TEST, PROD_LOCAL) that will be excluded from spec deletion."
        excludePlanTypes: [PlanName!]!,
        "Failover summary ID."
        failoverId: UUID
    ): DeleteBlueprintRecoverySpecReply!
    "Deletes replication pairing between two Rubrik clusters."
    deleteReplicationPair(
        "Request for deleting an existing replication pair."
        input: DeleteReplicationPairInput!
    ): Void
    deleteReport(
        "The report ID."
        reportID: Int!
    ): Boolean!
    deleteRole(roleId: String!): Boolean!
    """

    Delete a particular full snapshot of a SAP HANA database

    Supported in v5.3+
    Initiates a request to delete a particular full snapshot of a SAP HANA database. If the log retention period for the database is still in effect, the snapshot will be deleted when the log retention period ends.
    """
    deleteSapHanaDbSnapshot(
        "Input for V1DeleteSapHanaDbSnapshot."
        input: DeleteSapHanaDbSnapshotInput!
    ): ResponseSuccess!
    """

    Delete a SAP HANA system

    Supported in v5.3+
    Initiates a job to delete a SAP HANA system object. GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
    """
    deleteSapHanaSystem(
        "Input for V1DeleteSapHanaSystem."
        input: DeleteSapHanaSystemInput!
    ): AsyncRequestStatus!
    "Delete a scheduled report."
    deleteScheduledReport(input: DeleteScheduledReportInput!): Void
    "Delete specified service accounts."
    deleteServiceAccountsFromAccount(
        "Input for deleting service accounts."
        input: DeleteServiceAccountsFromAccountInput!
    ): Boolean!
    """

    Delete Active Directory from Rubrik

    Supported in v5.0+
    Delete Active Directory from Rubrik.
    """
    deleteSmbDomain(
        "Input for InternalDeleteSmbDomain."
        input: DeleteSmbDomainInput!
    ): Void
    "Delete SMTP configuration value."
    deleteSmtpConfiguration: Boolean!
    """

    v7.0-v8.0: Delete a SnapMirror Cloud protected object
    v9.0: Delete a SnapMirror Cloud workload

    Supported in v7.0+
    v7.0-v8.0: Delete a SnapMirror Cloud protected object specified by the object ID.
    v9.0: Delete a SnapMirror Cloud workload specified by the object ID.
    """
    deleteSnapMirrorCloud(
        "Input for V1DeleteSnapMirrorCloud."
        input: DeleteSnapMirrorCloudInput!
    ): ResponseSuccess!
    """

    Delete the SnapMirrorCloud relationship on the NetApp server between the volume and the cloud target

    Supported in v7.0+
    Deletes the SnapMirrorCloud relationship on the NetApp server between the volume and the cloud target. Also deletes objects on the NetApp server used to establish the relationship.
    """
    deleteSnapMirrorCloudRelationship(
        "Input for V1DeleteSnapMirrorCloudRelationship."
        input: DeleteSnapMirrorCloudRelationshipInput!
    ): ResponseSuccess!
    """

    Delete a SnapMirror Cloud snapshot

    Supported in v7.0+
    Deletes a SnapMirror Cloud snapshot. A snapshot can be deleted only if it is an on-demand snapshot or a snapshot of an unprotected SnapMirror Cloud object.
    """
    deleteSnapMirrorCloudSnapshot(
        "Input for V1DeleteSnapMirrorCloudSnapshot."
        input: DeleteSnapMirrorCloudSnapshotInput!
    ): ResponseSuccess!
    deleteSnapshotsOfUnmanagedObjects(
        "List of UUIDs of objects."
        objectIds: [UUID!]!
    ): RequestSuccess!
    "Delete storage arrays from Rubrik clusters."
    deleteStorageArrays(
        "List of Storage arrays to delete."
        input: DeleteStorageArraysInput!
    ): DeleteStorageArraysReply!
    deleteSyslogConfiguration(
        "List of Syslog IDs to be deleted."
        ids: [String!]!
    ): Boolean!
    """

    Delete the specified syslog export rule

    Supported in v5.1+
    Delete the syslog export rule specified by the given id.
    """
    deleteSyslogExportRule(
        "Input for V1DeleteSyslogExportRule."
        input: DeleteSyslogExportRuleInput!
    ): Void
    "Deletes an archival location."
    deleteTarget(
        "Request for deleting an archival location."
        input: DeleteTargetInput!
    ): Void
    "Deletes mapping of a target."
    deleteTargetMapping(
        "Request for deleting the mapping of a target."
        input: DeleteTargetMappingInput!
    ): Void
    "Reset TOTP configuration for a user. Return true when the operation succeeds."
    deleteTotpConfig(
        "Specifies the user ID."
        userId: String!
    ): Boolean!
    "Reset TOTP configuration for users in batch. Return true when the operation succeeds."
    deleteTotpConfigs(
        "Input required for resetting TOTP for users in batch."
        input: DeleteTotpConfigsInput!
    ): Boolean!
    deleteUnmanagedSnapshots(
        "List of UUIDs of snapshots."
        snapshotIds: [UUID!]!
    ): RequestSuccess!
    deleteUsersFromAccount(
        "List of IDs."
        ids: [String!]!
    ): Boolean!
    "Delete vApp snapshots."
    deleteVappSnapshots(
        "List of vApp snapshots to delete."
        input: DeleteVappSnapshotsInput!
    ): DeleteVappSnapshotsReply!
    "Delete vCD instances from Rubrik clusters."
    deleteVcdInstances(
        "List of vCD instances to delete."
        input: DeleteVcdInstancesInput!
    ): DeleteVcdInstancesReply!
    """

    Requst to delete a mount

    Supported in v5.0+
    Create a request to delete a mount. If there are volumes mounted on a target host, this will use best-effort to unmount those volumes from the host, and proceed to unmount storage on Rubrik.
    """
    deleteVolumeGroupMount(
        "Input for InternalDeleteVolumeGroupSnapshotMount."
        input: DeleteVolumeGroupMountInput!
    ): AsyncRequestStatus!
    """

    Remove the multi-tag filter

    Supported in v7.0+
    Remove the multi-tag filter.
    """
    deleteVsphereAdvancedTag(
        "Input for V1DeleteFilter."
        input: DeleteVsphereAdvancedTagInput!
    ): RequestSuccess!
    """

    Delete a Live Mount VM

    Supported in v5.0+
    Create a request to delete a Live Mount virtual machine.
    """
    deleteVsphereLiveMount(
        "Input for V1CreateUnmount."
        input: DeleteVsphereLiveMountInput!
    ): AsyncRequestStatus!
    "Delete a webhook."
    deleteWebhook(
        "The webhook to delete from the account."
        input: DeleteWebhookInput!
    ): Void
    "A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this resumes replication from that source cluster to the target cluster."
    disableReplicationPause(
        "Input for V1DisablePerLocationPause."
        input: DisableReplicationPauseInput!
    ): ResponseSuccess!
    "Disables a Rubrik Support representative's access to the customer's account."
    disableSupportUserAccess(
        "Input for the request to disable a Rubrik Support representative to access customer account."
        input: DisableSupportUserAccessInput!
    ): Void
    "Disables an Archival Location."
    disableTarget(
        "Request for disabling an Archival Location."
        input: DisableTargetInput!
    ): DisableTargetReply!
    """

    On-demand discovery of a Db2 instance

    Supported in v7.0+
    Initiates an on-demand job to discover a Db2 instance.
    """
    discoverDb2Instance(
        "Input for V1DiscoverDb2Instance."
        input: DiscoverDb2InstanceInput!
    ): AsyncRequestStatus!
    """

    Discover a MongoDB source on-demand

    Supported in v9.0
    Initiates an on-demand job to discover a MongoDB source.
    """
    discoverMongoSource(
        "Input for V1DiscoverMongoSource."
        input: DiscoverMongoSourceInput!
    ): AsyncRequestStatus!
    "Dissolve legal hold on snapshots."
    dissolveLegalHold(
        "Dissolve Legal Hold Request."
        input: DissolveLegalHoldInput!
    ): DissolveLegalHoldReply!
    """

    Download Db2 database snapshot from archive

    Supported in v8.0+
    Downloads a specific Db2 database snapshot from the specified archival location.
    """
    downloadDb2Snapshot(
        "Input for V1DownloadDb2Snapshot."
        input: DownloadDb2SnapshotInput!
    ): AsyncRequestStatus!
    """

    Download Db2 database snapshots from archive for a point in time recovery

    Supported in v8.0+
    Downloads the most recent full snapshot and the log snapshots taken after the full snapshot, required for the point in time recovery of a Db2 database.
    """
    downloadDb2SnapshotsForPointInTimeRecovery(
        "Input for V1DownloadDb2SnapshotsForPointInTimeRecovery."
        input: DownloadDb2SnapshotsForPointInTimeRecoveryInput!
    ): AsyncRequestStatus!
    """

    Download exchange database snapshot from archive

    Supported in v8.0+
    Downloads a Microsoft Exchange database snapshot from the specified archival location.
    """
    downloadExchangeSnapshot(
        "Input for V1DownloadExchangeSnapshot."
        input: DownloadExchangeSnapshotInput!
    ): AsyncRequestStatus!
    downloadFile(
        fileType: FileTypeEnum!,
        reportConfig: ReportConfigInput,
        "The report ID."
        reportID: Int!
    ): AsyncDownloadReply!
    """

    v5.0-v8.0: Download files from a Nutanix VM backup
    v9.0: Download files from a Nutanix virtual machine backup

    Supported in v5.0+
    v5.0-v8.0: Start an asynchronous job to download multiple files and folders from a specified Nutanix VM backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
    v9.0: Start an asynchronous job to download multiple files and folders from a specified Nutanix virtual machine backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
    """
    downloadFilesNutanixSnapshot(
        "Input for InternalCreateNutanixDownloadFilesJob."
        input: DownloadFilesNutanixSnapshotInput!
    ): AsyncRequestStatus!
    downloadFilesetSnapshot(
        "Input for V1CreateDownloadFilesetSnapshotFromCloud."
        input: DownloadFilesetSnapshotInput!
    ): AsyncRequestStatus!
    """

    Download a snapshot from a replication target

    Supported in v7.0+
    Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
    """
    downloadFilesetSnapshotFromLocation(
        "Input for V2DownloadFilesetSnapshotFromLocation."
        input: DownloadFilesetSnapshotFromLocationInput!
    ): AsyncRequestStatus!
    """

    Download a snapshot from a replication target

    Supported in v7.0+
    Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
    """
    downloadHypervSnapshotFromLocation(
        "Input for DownloadHyperVSnapshotFromLocationRequest."
        input: DownloadHypervSnapshotFromLocationInput!
    ): AsyncRequestStatus!
    """

    Creates a download from archival request

    Supported in v5.0+
    Download a snapshot from archival.
    """
    downloadHypervVirtualMachineSnapshot(
        "Input for InternalDownloadHypervVirtualMachineSnapshot."
        input: DownloadHypervVirtualMachineSnapshotInput!
    ): AsyncRequestStatus!
    """

    Download files from a Hyper-V VM backup

    Supported in v5.0+
    Start an asynchronous job to download multiple files and folders from a specified Hyper-V VM backup. The response returns an asynchrounous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'hyperv/vm/request/{id}'.
    """
    downloadHypervVirtualMachineSnapshotFiles(
        "Input for DownloadHypervVMSnapshotFilesRequest."
        input: DownloadHypervVirtualMachineSnapshotFilesInput!
    ): AsyncRequestStatus!
    """

    Download files from a managed volume backup

    Supported in v5.0+
    Start an asynchronous job to download multiple files and folders from a specified managed volume backup. The response returns an asynchronous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'managed-volume/request/{id}'.
    """
    downloadManagedVolumeFiles(
        "Input for InternalCreateManagedVolumeDownloadFilesJob."
        input: DownloadManagedVolumeFilesInput!
    ): AsyncRequestStatus!
    """

    Downloads a list of snapshot and log backups from a Microsoft SQL database

    Supported in v5.2+
    Downloads a list of snapshot and log backups from a Microsoft SQL database.
    """
    downloadMssqlDatabaseBackupFiles(
        "Input for V1CreateDownloadMssqlBackupFilesById."
        input: DownloadMssqlDatabaseBackupFilesInput!
    ): AsyncRequestStatus!
    "Download Microsoft SQL Database backup files from archival location."
    downloadMssqlDatabaseFilesFromArchivalLocation(
        "Input for V1DownloadFromArchive."
        input: DownloadMssqlDatabaseFilesFromArchivalLocationInput!
    ): AsyncRequestStatus!
    """

    Creates a download from archival request

    Supported in v5.0+
    Download a snapshot from archival.
    """
    downloadNutanixSnapshot(
        "Input for InternalCreateDownloadSnapshotForNutanix."
        input: DownloadNutanixSnapshotInput!
    ): AsyncRequestStatus!
    """

    Download a snapshot from a replication target

    Supported in v7.0+
    Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
    """
    downloadNutanixVmFromLocation(
        "Input for V1DownloadNutanixVmFromLocation."
        input: DownloadNutanixVmFromLocationInput!
    ): AsyncRequestStatus!
    "Schedule a download CSV job for cross object files."
    downloadObjectFilesCsv(
        "Request for scheduling a download CSV job for cross object files."
        input: DownloadObjectFilesCsvInput!
    ): DownloadCsvReply!
    "Schedule a download CSV job for objects list."
    downloadObjectsListCsv(
        "Request for scheduling a download CSV job for objects list."
        input: DownloadObjectsListCsvInput!
    ): DownloadCsvReply!
    """

    Download Oracle snapshot from cloud

    Supported in v5.0+
    Create an asynchronous job to download an Oracle database snapshot and associated logs using the snapshot ID. The response includes the ID of the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
    """
    downloadOracleDatabaseSnapshot(
        "Input for InternalDownloadOracleDbSnapshot."
        input: DownloadOracleDatabaseSnapshotInput!
    ): AsyncRequestStatus!
    "Download a report in CSV format asynchronously."
    downloadReportCsvAsync(input: DownloadReportCsvAsyncInput!): AsyncDownloadReply!
    "Download a report asynchronously in PDF format."
    downloadReportPdfAsync(input: DownloadReportPdfAsyncInput!): AsyncDownloadReply!
    "Download file results in CSV format."
    downloadResultsCsv(crawlId: String!, downloadFilter: DownloadResultsCsvFiltersInput): DownloadResultsCsvReply!
    """

    Download SAP HANA database snapshot from archive

    Supported in v8.0+
    Downloads a specific SAP HANA database snapshot from the specified archival location.
    """
    downloadSapHanaSnapshot(
        "Input for V1DownloadSapHanaSnapshot."
        input: DownloadSapHanaSnapshotInput!
    ): AsyncRequestStatus!
    """

    Download SAP HANA database snapshots from archive for a point in time recovery

    Supported in v8.0+
    Downloads the most recent full snapshot and the log snapshots taken after the full snapshot, required for the point in time recovery of an SAP HANA database.
    """
    downloadSapHanaSnapshotsForPointInTimeRecovery(
        "Input for V1DownloadSapHanaSnapshotsForPointInTimeRecovery."
        input: DownloadSapHanaSnapshotsForPointInTimeRecoveryInput!
    ): AsyncRequestStatus!
    "Download snapshot policy results in CSV format."
    downloadSnapshotResultsCsv(downloadFilter: DownloadResultsCsvFiltersInput, snappableFid: String!, snapshotFid: String!): DownloadCsvReply!
    "Download threat hunt result in CSV format."
    downloadThreatHuntCsv(
        "The ID of the threat hunt."
        input: DownloadThreatHuntCsvInput!
    ): DownloadThreatHuntCsvReply!
    "Schedule a download CSV job for a user's activity."
    downloadUserActivityCsv(
        "Request for scheduling a download CSV job for a user's activity."
        input: DownloadUserActivityCsvInput!
    ): DownloadCsvReply!
    "Schedule a download CSV job for user activity on a specific file."
    downloadUserFileActivityCsv(
        "Request for scheduling a download CSV job for a user activity on a specific file."
        input: DownloadUserFileActivityCsvInput!
    ): DownloadCsvReply!
    """

    Download files from Volume Group snapshot

    Supported in v5.0+
    Create a download files request.
    """
    downloadVolumeGroupSnapshotFiles(
        "Input for downloadVolumeGroupSnapshotFiles."
        input: DownloadVolumeGroupSnapshotFilesInput!
    ): AsyncRequestStatus!
    """

    Download a snapshot from a replication target

    Supported in v7.0+
    Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
    """
    downloadVolumeGroupSnapshotFromLocation(
        "Input for V1DownloadVolumeGroupSnapshotFromLocation."
        input: DownloadVolumeGroupSnapshotFromLocationInput!
    ): AsyncRequestStatus!
    editGlobalSla(globalSlaEditRequest: GlobalSlaEditRequest!): GlobalSlaReply!
    "Enable/disable auto fmd upload on given cluster."
    enableAutomaticFmdUpload(
        "Request for enableAutomaticFmdUpload."
        input: EnableAutomaticFmdUploadInput!
    ): EnableAutomaticFmdUploadReply!
    "Enable/ Disable App consistency for a VM"
    enableDisableAppConsistency(
        "Input required to enable application consistent snapshots."
        input: EnableDisableAppConsistencyInput!
    ): EnableDisableAppConsistencyReply!
    "Enable/disable lambda service for given workload on given cluster."
    enableLambdaForWorkload(
        "Enable or disable diff FMD upload."
        enableDiffFmd: Boolean!,
        "Enable or disable full FMD upload."
        enableFullFmd: Boolean!,
        "The FID of the workload."
        snappableId: UUID!
    ): EnableLambdaForSnappableReply!
    "Enables SharePoint protection in the exocompute cluster."
    enableO365SharePoint(
        "Input to enable o365 sharepoint."
        input: EnableO365SharePointInput!
    ): RequestStatus!
    "Enables Teams protection in the exocompute cluster."
    enableO365Teams(exocomputeClusterId: String!): RequestStatus!
    "A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this pauses replication from that source cluster to the target cluster."
    enableReplicationPause(
        "Input for V1EnablePerLocationPause."
        input: EnablePerLocationPauseInputVariable!
    ): ResponseSuccess!
    "Enables a Rubrik Support representative's access to the customer's account."
    enableSupportUserAccess(
        "Input for the request to enable a Rubrik Support representative to access customer account."
        input: EnableSupportUserAccessInput!
    ): Void
    "Enables an Archival Location."
    enableTarget(
        "Request for enabling an Archival Location."
        input: EnableTargetInput!
    ): EnableTargetReply!
    """

    End Managed Volume snapshot

    Supported in v7.0+
    Close a Managed Volume for writes. A snapshot will be created containing all writes since the last begin-snapshot call.
    """
    endManagedVolumeSnapshot(
        "Input for V1CloseWritesV1."
        input: EndManagedVolumeSnapshotInput!
    ): EndManagedVolumeSnapshotReply!
    "Mark AWS Native EBS Volumes to be excluded from EC2 Instance snapshot. By default, all EBS Volumes are marked as included."
    excludeAwsNativeEbsVolumesFromSnapshot(
        "Input to mark EBS volumes to be excluded for EC2 snapshot."
        input: ExcludeAwsNativeEbsVolumesFromSnapshotInput!
    ): Void
    "Exclude the Managed Disks from snapshots, for the specified virtual machines."
    excludeAzureNativeManagedDisksFromSnapshot(
        "Input for excluding Azure Native Managed Disks from Snapshot."
        input: ExcludeAzureNativeManagedDisksFromSnapshotInput!
    ): Void
    "Exclude Sharepoint site objects from protection."
    excludeSharepointObjectsFromProtection(
        "The input for the operation to exclude Sharepoint objects from protection."
        input: ExcludeSharepointObjectsFromProtectionInput!
    ): Void
    """

    Expire downloaded snapshots of a Db2 database

    Supported in v8.0+
    Requests an asynchronous job to expire all downloaded data and log snapshots. You can specify a begin time or an end time or both to provide a time range to expire only the downloaded data and log snapshots that were taken within the specified time range. The time is relative to when the snapshot was originally taken, not when it was downloaded. You can also configure a flag to expire only the log snapshots.
    """
    expireDownloadedDb2Snapshots(
        "Input for V1ExpireDownloadedDb2Snapshots."
        input: ExpireDownloadedDb2SnapshotsInput!
    ): AsyncRequestStatus!
    """

    Expire downloaded snapshots of an SAP HANA database

    Supported in v8.0+
    Requests an asynchronous job to expire all downloaded data and log snapshots. You can specify a begin time or an end time or both to provide a time range to expire only the downloaded data and log snapshots that were taken within the specified time range. The time is relative to when the snapshot was originally taken, not when it was downloaded. You can also configure a flag to expire only the log snapshots.
    """
    expireDownloadedSapHanaSnapshots(
        "Input for V1ExpireDownloadedSapHanaSnapshots."
        input: ExpireDownloadedSapHanaSnapshotsInput!
    ): AsyncRequestStatus!
    """

    Export VM snapshot

    Supported in v5.0+
    Export snapshot of a vm.
    """
    exportHypervVirtualMachine(
        "Input for ExportHypervVirtualMachineRequest."
        input: ExportHypervVirtualMachineInput!
    ): AsyncRequestStatus!
    "Export Kubernetes Namespace snapshot."
    exportK8sNamespace(
        "Request for exporting a Kubernetes namespace snapshot."
        input: ExportK8sNamespaceInput!
    ): CreateOnDemandJobReply!
    """

    Create a request to export a snapshot

    Supported in v5.0+
    Export a managed volume snapshot as a share.
    """
    exportManagedVolumeSnapshot(
        "Input for the mutation to export a Managed Volume snapshot."
        input: ExportManagedVolumeSnapshotInput!
    ): AsyncRequestStatus!
    "Create a request to export a Microsoft SQL database."
    exportMssqlDatabase(
        "Input for V1CreateExportMssqlDb."
        input: ExportMssqlDatabaseInput!
    ): AsyncRequestStatus!
    """

    v5.0-v8.0: Export VM snapshot
    v9.0: Export virtual machine snapshot

    Supported in v5.0+
    v5.0-v8.0: Export snapshot of a vm.
    v9.0: Export snapshot of a virtual machine.
    """
    exportNutanixSnapshot(
        "Input for InternalCreateNutanixExport."
        input: ExportNutanixSnapshotInput!
    ): AsyncRequestStatus!
    "Exports an Exchange mailbox."
    exportO365Mailbox(exportConfig: ExportO365MailboxInput!): CreateOnDemandJobReply!
    """

    Export an Oracle database

    Supported in v5.0+
    Request an asynchronous job to export an Oracle database from a specified snapshot or timestamp.
    """
    exportOracleDatabase(
        "Input for ExportOracleDatabase."
        input: ExportOracleDatabaseInput!
    ): AsyncRequestStatus!
    """

    Export an Oracle tablespace

    Supported in v5.0+
    Request an asynchronous job to export an Oracle tablespace from a specified snapshot or timestamp.
    """
    exportOracleTablespace(
        "Input for InternalCreateExportOracleTablespace."
        input: ExportOracleTablespaceInput!
    ): AsyncRequestStatus!
    """

    Create a request to export a snapshot and mount it on a host

    Supported in v5.3+
    Export a managed volume snapshot as a share and mount it on a given host.
    """
    exportSlaManagedVolumeSnapshot(
        "Input for the mutation to export an SLA Managed Volume snapshot."
        input: ExportSlaManagedVolumeSnapshotInput!
    ): AsyncRequestStatus!
    """

    Download files from a fileset backup

    Supported in v5.0+
    Start an asynchronous job to download multiple files and folders from a specified fileset backup. The response returns an asynchronous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'fileset/request/{id}'.
    """
    filesetDownloadSnapshotFiles(
        "Input for fileset download snapshot files."
        input: FilesetDownloadSnapshotFilesInput!
    ): AsyncRequestStatus!
    """

    Create an export job to export multiple files or directories

    Supported in v5.0+
    Starts a job that exports one or more files or folders from a fileset backup to the destination host. Returns the job status as of the job creation time. This job status includes the job ID.
    """
    filesetExportSnapshotFiles(
        "Input for fileset download snapshot files."
        input: FilesetExportSnapshotFilesInput!
    ): AsyncRequestStatus!
    """

    Create restore job to restore multiple files/directories

    Supported in v5.0+
    Initiate a job to copy one or more file or folder from a fileset backup to the source host. Returns the job instance ID.
    """
    filesetRecoverFiles(
        "Input for fileset recover files."
        input: FilesetRecoverFilesInput!
    ): AsyncRequestStatus!
    "Process and finalize deletion of cloud account is the last step in deletion of a feature from cloud account. This endpoint is a MUST for deletion of disconnected features."
    finalizeAwsCloudAccountDeletion(
        "Arguments to process AWS cloud accounts for deletion."
        input: FinalizeAwsCloudAccountDeletionInput!
    ): FinalizeAwsCloudAccountDeletionReply!
    "Process cloud account. This is the second step after validate and create in addition of a feature for cloud account.The CloudFormation stack should be created after this step using the CloudFormation URL provided in the first step."
    finalizeAwsCloudAccountProtection(
        "Arguments for process cloud accounts."
        input: FinalizeAwsCloudAccountProtectionInput!
    ): FinalizeAwsCloudAccountProtectionReply!
    "Adds a new cloud account for the GCP project which is not already added."
    gcpCloudAccountAddManualAuthProject(
        "Input required to add a GCP cloud account manually."
        input: GcpCloudAccountAddManualAuthProjectInput!
    ): Boolean!
    "Add cloud account for GCP projects for the given features."
    gcpCloudAccountAddProjects(
        "Input required to add a GCP cloud account."
        input: GcpCloudAccountAddProjectsInput!
    ): GcpCloudAccountAddProjectsReply!
    "Delete cloud account for the given GCP project cloud account IDs and feature."
    gcpCloudAccountDeleteProjects(
        "Input required to delete a list of GCP projects."
        input: GcpCloudAccountDeleteProjectsInput!
    ): GcpCloudAccountDeleteProjectsReply!
    "Complete the OAuth flow and pass the authorization code."
    gcpCloudAccountOauthComplete(
        "Input to complete the GCP cloud account OAuth flow."
        input: GcpCloudAccountOauthCompleteInput!
    ): GcpCloudAccountOauthCompleteReply!
    "Initiate a session before doing Gcp OAuth flow."
    gcpCloudAccountOauthInitiate(
        "Input to initiate the GCP cloud account OAuth flow."
        input: GcpCloudAccountOauthInitiateInput!
    ): GcpCloudAccountOauthInitiateReply!
    "Upgrade cloud account for the given GCP project cloud account IDs and feature."
    gcpCloudAccountUpgradeProjects(
        "Input required to upgrade a list of GCP projects."
        input: GcpCloudAccountUpgradeProjectsInput!
    ): GcpCloudAccountUpgradeProjectsReply!
    "Triggers GCP native disable project job for the given project ID."
    gcpNativeDisableProject(
        "Input required to disable protection for a GCP native project."
        input: GcpNativeDisableProjectInput!
    ): AsyncJobStatus!
    gcpNativeExcludeDisksFromInstanceSnapshot(
        "Input required to exclude GCP native disks from GCE instance snapshots."
        input: GcpNativeExcludeDisksFromInstanceSnapshotInput!
    ): Void
    "Triggers GCP native export disk job for the given disk snapshot."
    gcpNativeExportDisk(
        "Input required to export a GCP native disk snapshot."
        input: GcpNativeExportDiskInput!
    ): AsyncJobStatus!
    "Triggers GCP native export instance job for the given GCE instance."
    gcpNativeExportGceInstance(
        "Input required to export a GCP GCE instance snapshot."
        input: GcpNativeExportGceInstanceInput!
    ): AsyncJobStatus!
    "Trigger GCP native refresh project job for the given project IDs"
    gcpNativeRefreshProjects(
        "Input to refresh GCP native projects."
        input: GcpNativeRefreshProjectsInput!
    ): BatchAsyncJobStatus!
    "Triggers GCP native restore instance job for the given snapshot Rubrik ID."
    gcpNativeRestoreGceInstance(
        "Input required to restore a GCP GCE instance snapshot."
        input: GcpNativeRestoreGceInstanceInput!
    ): AsyncJobStatus!
    "Sets the default GCP service account authorization key."
    gcpSetDefaultServiceAccountJwtConfig(
        "Input required to set default GCP service account JWT configuration."
        input: GcpSetDefaultServiceAccountJwtConfigInput!
    ): Boolean!
    "Generate a JWT that can be used to register clusters with Rubrik. If ManagedByRubrikArg is not given, the product type is inferred automatically."
    generateClusterRegistrationToken(
        "Input required for cluster token generation based on cluster details."
        input: GenerateClusterRegistrationTokenInput
    ): ClusterRegistrationToken!
    "Generate restore form for the configuration backup file."
    generateConfigProtectionRestoreForm(
        "Input for V1GenerateRestoreForm."
        input: GenerateConfigProtectionRestoreFormInput!
    ): GenerateConfigProtectionRestoreFormReply!
    "Generate CSR."
    generateCsr(
        "City for your CSR."
        city: String,
        "Country for your CSR."
        country: String,
        "Email for your CSR."
        email: String,
        "Hostnames for your CSR."
        hostnames: [String!]!,
        "Name for your CSR."
        name: String!,
        "Organization for your CSR."
        organization: String,
        "Organization unit for your CSR."
        organizationUnit: String,
        "State for your CSR."
        state: String,
        "Surname for your CSR."
        surname: String,
        "User ID for your CSR."
        userId: String
    ): Csr!
    "Generate TOTP secret for a user."
    generateTotpSecret(
        "Specifies the user ID."
        userId: String!
    ): GenerateTotpSecretReply!
    getDownloadUrl(downloadId: Long!): UserDownloadUrl!
    """

    Get pending SLA Domain assignments on selected managed objects

    Supported in v5.2+
    Retrieve the details of pending SLA Domain assignments on the given managed objects. For objects with pending assignments, return the SLA Domain that is pending. For objects without pending assignments, return the current SLA Domain information. Explicitly list invalid object IDs.
    """
    getPendingSlaAssignments(
        "Input for V2GetPendingSlaAssignments."
        input: GetPendingSlaAssignmentsInput!
    ): PendingSlaOperations!
    """

    Hide and reveal NAS namespaces

    Supported in v7.0+
    Hide individually selected NAS namespaces by setting the "action" field to "Hide". Reveal the selected NAS namespaces by setting the "action" field to "Reveal".
    """
    hideRevealNasNamespaces(
        "Input for V1HideRevealNasNamespaces."
        input: HideRevealNasNamespacesInput!
    ): Void
    """

    Hide or reveal NAS shares

    Supported in v7.0+
    Hide individually selected NAS shares by setting the "action" field to "Hide". Reveal selected NAS shares by setting the "action" field to "Reveal".
    """
    hideRevealNasShares(
        "Input for V1HideRevealNasShares."
        input: HideRevealNasSharesInput!
    ): ResponseSuccess!
    """

    Delete all snapshots of VM

    Supported in v5.0+
    Delete all snapshots of a virtual machine.
    """
    hypervDeleteAllSnapshots(
        "Input for HypervDeleteAllSnapshotsRequest."
        input: HypervDeleteAllSnapshotsInput!
    ): RequestSuccess!
    """

    Create on-demand VM snapshot

    Supported in v5.0+
    Create an on-demand snapshot for the given VM ID.
    """
    hypervOnDemandSnapshot(
        "Input for HypervOnDemandSnapshotRequest."
        input: HypervOnDemandSnapshotInput!
    ): AsyncRequestStatus!
    "Delete a given HyperV SCVMM."
    hypervScvmmDelete(
        "Input for deleting Hyper-V SCVMM."
        input: HypervScvmmDeleteInput!
    ): ResponseSuccess!
    "Update properties for a given HyperV SCVMM."
    hypervScvmmUpdate(
        "Input for InternalUpdateHypervScvmm"
        input: HypervScvmmUpdateInput!
    ): HypervScvmmUpdateReply!
    "Inserts a Customer-hosted O365 Azure AD App."
    insertCustomerO365App(
        "The input for the InsertCustomerO365App mutation."
        input: InsertCustomerO365AppInput!
    ): RequestStatus!
    """

    Install the Rubrik ioFilter to the VMware cluster with a specific ID

    Supported in v5.1+
    Install the latest version of Rubrik ioFilter to the VMware cluster with a specific ID. The cluster must be in maintenance mode to install the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
    """
    installIoFilter(
        "Input for V1InstallIoFilter."
        input: InstallIoFilterInput!
    ): RequestSuccess!
    """

    Creates an instant recover request that restores a target VM from the given Rubrik-hosted-snapshot

    Supported in v5.0+
    The VM will be started with networking enabled. If the VM does not exist anymore, a new VM will be created.
    """
    instantRecoverHypervVirtualMachineSnapshot(
        "InstantRecoverHypervVMSnapshotRequest."
        input: InstantRecoverHypervVirtualMachineSnapshotInput!
    ): AsyncRequestStatus!
    """

    Instant recovery of a database

    Supported in v5.0+
    Creates an instant recover request that restores a target database from the given snapshot.
    """
    instantRecoverOracleSnapshot(
        "Input for InternalInstantRecoverOracleSnapshot."
        input: InstantRecoverOracleSnapshotInput!
    ): AsyncRequestStatus!
    "Assigns roles to SSO groups in the current organization using the given group name and role IDs."
    inviteSsoGroup(
        "Specifies the input required for inviting new SSO groups to the current organization."
        input: InviteSsoGroupInput!
    ): Boolean!
    """

    Join Active Directory

    Supported in v5.0+
    Join Active Directory.
    """
    joinSmbDomain(
        "Input for InternalJoinSmbDomain."
        input: JoinSmbDomainInput!
    ): Void
    "List CIDRs for compute setting."
    listCidrsForComputeSetting(
        "Input to get the list of CIDRs for compute settings."
        input: ListCidrsForComputeSettingInput!
    ): ListCidrsForComputeSettingReply!
    "Specifies the endpoint through which the admin can lock the user accounts."
    lockUsersByAdmin(
        "Specifies the list of user IDs."
        input: LockUsersByAdminInput!
    ): Void
    "Logout from Rubrik support portal using username."
    logoutFromRubrikSupportPortal: SupportPortalLogoutReply!
    "Map Azure cloud accounts to an Exocompute subscription."
    mapAzureCloudAccountExocomputeSubscription(
        "Input for mapping Azure cloud accounts to an Exocompute subscription."
        input: MapAzureCloudAccountExocomputeSubscriptionInput!
    ): MapAzureCloudAccountExocomputeSubscriptionReply!
    "Map Azure cloud accounts to a persistent storage location."
    mapAzureCloudAccountToPersistentStorageLocation(
        "Input for mapping Azure cloud accounts to a persistent storage location."
        input: MapAzureCloudAccountToPersistentStorageLocationInput!
    ): MapAzureCloudAccountToPersistentStorageLocationReply!
    """

    Relocate a Nutanix virtual machine to another storage container

    Supported in v6.0+
    Initiate a request to migrate the virtual disks of a specified Nutanix Live Mount to another storage container. The destination storage container has been specified when the Live Mount was created. The Live Mount will be deleted when the relocation succeeds.
    """
    migrateNutanixMountV1(
        "Input for V1CreateNutanixVmMountMigration."
        input: MigrateNutanixMountV1Input!
    ): AsyncRequestStatus!
    """

    Modify IPMI settings

    Supported in v5.0+
    modify IPMI settings.
    """
    modifyIpmi(
        "Input for InternalModifyIpmi."
        input: ModifyIpmiInput!
    ): ModifyIpmiReply!
    """

    Initiate a Live Mount of a Nutanix virtual machine snapshot

    Supported in v6.0+
    Initiates a request to perform a Live Mount of a Nutanix virtual machine snapshot identified by the snapshot ID.
    """
    mountNutanixSnapshotV1(
        "Input for V1CreateNutanixMount."
        input: MountNutanixSnapshotV1Input!
    ): AsyncRequestStatus!
    """

    Live Mount an Oracle database snapshot

    Supported in v5.0+
    Create an asynchronous job to Live Mount an Oracle database from a snapshot.
    """
    mountOracleDatabase(
        "Input for MountOracleDatabase."
        input: MountOracleDatabaseInput!
    ): AsyncRequestStatus!
    mutateRole(
        description: String!,
        name: String!,
        "Permissions in the role."
        permissions: [PermissionInput!]!,
        protectableClusters: [String!]!,
        roleId: String
    ): UUID!
    "Completes the OAuth consent flow for an O365 Azure AD App."
    o365OauthConsentComplete(
        "The input for the O365OauthConsentComplete mutation."
        input: O365OauthConsentCompleteInput!
    ): O365OauthConsentCompleteReply!
    "Kicks off the OAuth consent flow for an O365 Azure AD App."
    o365OauthConsentKickoff(
        "The input for the O365OauthConsentKickoff mutation."
        input: O365OauthConsentKickoffInput!
    ): O365OauthConsentKickoffReply!
    o365SaaSSetupKickoff: O365SaasSetupKickoffReply!
    "Completes a Rubrik-Hosted setup flow."
    o365SaasSetupComplete(
        "The input for the O365SaasSetupComplete mutation."
        input: O365SaasSetupCompleteInput!
    ): AddO365OrgResponse!
    "Kicks off an O365 subscription setup flow."
    o365SetupKickoff: O365SetupKickoffResp!
    "Updates authentication server-based AWS cloud account. Use this mutation to update account details related to role name, certificates, features. The mutation can update one or more certificates associated to an account in a single request. All input fields except account identifier are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message."
    patchAwsAuthenticationServerBasedCloudAccount(
        "Input to update authentication server-based AWS cloud account."
        input: PatchAwsAuthenticationServerBasedCloudAccountInput!
    ): Boolean!
    "Updates IAM user-based AWS cloud account. Use this mutation to update account details access/secret keys, role ARN and regions. All input fields except account ID are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message."
    patchAwsIamUserBasedCloudAccount(
        "Input to update IAM user-based AWS cloud account."
        input: PatchAwsIamUserBasedCloudAccountInput!
    ): Boolean!
    "Mutation to update an existing Db2 instance."
    patchDb2Instance(
        "Input for V1PatchDb2Instance."
        input: PatchDb2InstanceInput!
    ): PatchDb2InstanceReply!
    """

    Edit a MongoDB source

    Supported in v9.0
    Edits the properties of a MongoDB source. Hosts, name, and type of MongoDB cannot be changed once added.
    """
    patchMongoSource(
        "Input for V1PatchMongoSource."
        input: PatchMongoSourceInput!
    ): AsyncRequestStatus!
    """

    Change Nutanix Live Mount power status

    Supported in v6.0+
    Changes the power status of a mounted Nutanix virtual machine.
    """
    patchNutanixMountV1(
        "Input for V1PatchNutanixVmMount."
        input: PatchNutanixMountV1Input!
    ): PatchNutanixMountV1Reply!
    """

    Update the SLA Domain for a SAP HANA system

    Supported in v5.3+
    Update the SLA Domain that is configured for a SAP HANA system.
    """
    patchSapHanaSystem(
        "Input for V1PatchSapHanaSystem."
        input: PatchSapHanaSystemInput!
    ): PatchSapHanaSystemReply!
    "Pause/Resume Global SLA on the given clusters."
    pauseSla(
        "Pause SLA request."
        input: PauseSlaRequest!
    ): SlaResult!
    pauseTarget(
        "Request for pausing an Archival Location."
        input: PauseTargetInput!
    ): PauseTargetReply!
    "Prepare deletion of cloud account. This is the first step to delete AWS cloud account. It generated template for deletion of cloud account and does not change any state of account."
    prepareAwsCloudAccountDeletion(
        "Args for initiate aws cloud accounts for deletion."
        input: PrepareAwsCloudAccountDeletionInput!
    ): PrepareAwsCloudAccountDeletionReply!
    "Prepare manual update features to latest version."
    prepareFeatureUpdateForAwsCloudAccount(
        "Input to prepare feature update for AWS cloud account."
        input: PrepareFeatureUpdateForAwsCloudAccountInput!
    ): PrepareFeatureUpdateForAwsCloudAccountReply!
    "Promotes a reader Archival Location."
    promoteReaderTarget(
        "Request for promoting a reader Archival Location."
        input: PromoteReaderTargetInput!
    ): Void
    """

    SMB configuration

    Supported in v5.0+
    SMB configuration.
    """
    putSmbConfiguration(
        "Input for InternalPutSmbConfiguration."
        input: PutSmbConfigurationInput!
    ): PutSmbConfigurationReply!
    "Recover a cassandra source."
    recoverCassandraSource(
        "Input for V2MosaicRestoreData."
        input: MosaicRestoreDataInput!
    ): MosaicAsyncResponse!
    "Recover a MongoDB source from NoSQL cluster."
    recoverMongodbSource(
        "Input for V2MosaicRestoreData."
        input: MosaicRestoreDataInput!
    ): MosaicAsyncResponse!
    """

    On-demand refresh of a Db2 database

    Supported in v9.0
    Initiates an on-demand job to refresh a Db2 database. Currently, this is allowed only for Db2 HADR databases.
    """
    refreshDb2Database(
        "Input for V1RefreshDb2Database."
        input: RefreshDb2DatabaseInput!
    ): AsyncRequestStatus!
    refreshGlobalManagerConnectivityStatus(
        "The Rubrik cluster ID."
        clusterUuid: UUID!
    ): GlobalManagerConnectivity!
    refreshHost(
        "Input for V1RefreshHost."
        input: RefreshHostInput!
    ): RefreshHostReply!
    "Refresh a given HyperV SCVMM."
    refreshHypervScvmm(
        "Input for refreshing Hyper-V SCVMM."
        input: RefreshHypervScvmmInput!
    ): AsyncRequestStatus!
    """

    Refresh Hyper-V host metadata

    Supported in v5.0+
    Create a job to refresh the metadata for the specified Hyper-V host.
    """
    refreshHypervServer(
        "Input for InternalRefreshHypervHost."
        input: RefreshHypervServerInput!
    ): AsyncRequestStatus!
    "Refresh resources of a Kubernetes cluster."
    refreshK8sCluster(
        "Request for refreshing resources in a Kubernetes cluster."
        input: RefreshK8sClusterInput!
    ): CreateOnDemandJobReply!
    """

    On-demand discovery of a list of NAS systems

    Supported in v7.0+
    Runs the NAS_DISCOVER job for autodiscovery/refresh of NAS systems.
    """
    refreshNasSystems(
        "Input for V1DiscoverNasSystems."
        input: RefreshNasSystemsInput!
    ): RefreshNasSystemsReply!
    """

    Refresh Nutanix cluster metadata

    Supported in v5.0+
    Create a job to refresh the metadata for the specified Nutanix cluster.
    """
    refreshNutanixCluster(
        "Input for InternalCreateNutanixClusterRefresh."
        input: RefreshNutanixClusterInput!
    ): AsyncRequestStatus!
    "Refreshes an O365 org."
    refreshO365Org(
        "Org UUID."
        orgId: UUID!
    ): CreateOnDemandJobReply!
    """

    Refresh an Oracle database

    Supported in v6.0+
    Starts an asynchronous job to refresh the Oracle database metadata by querying the database instances on all the underlying hosts.
    """
    refreshOracleDatabase(
        "Input for V1RefreshOracleDb."
        input: RefreshOracleDatabaseInput!
    ): AsyncRequestStatus!
    "Refreshes a reader Archival Location."
    refreshReaderTarget(
        "Request for refreshing a reader Archival Location."
        input: RefreshReaderTargetInput!
    ): Void
    "Refresh storage arrays in Rubrik clusters."
    refreshStorageArrays(
        "List of storage arrays to refresh."
        input: RefreshStorageArraysInput!
    ): RefreshStorageArraysReply!
    "Refresh vCD instances from Rubrik clusters."
    refreshVcdInstances(
        "List of vCD instances to refresh."
        input: RefreshVcdInstancesInput!
    ): RefreshVcdInstancesReply!
    """

    Refresh vCenter Server metadata

    Supported in v5.0+
    Create a job to refresh the metadata for the specified vCenter Server.
    """
    refreshVsphereVcenter(
        "Refresh vcenter input."
        input: RefreshVsphereVcenterInput!
    ): AsyncRequestStatus!
    """

    Register the agent installed in VM

    Supported in v5.0+
    Register the agent that installed in VM.
    """
    registerAgentHypervVirtualMachine(
        "Input for RegisterAgentHypervVirtualMachineRequest."
        input: RegisterAgentHypervVirtualMachineInput!
    ): RequestSuccess!
    """

    v5.0-v8.0: Register the agent installed on the Nutanix VM
    v9.0: Register the agent installed on the Nutanix virtual machine

    Supported in v5.0+
    v5.0-v5.3: Register the agent installed on the Nutanix VM
    v6.0-v8.0: Register the agent installed on the Nutanix VM.
    v9.0: Register the agent installed on the Nutanix virtual machine.
    """
    registerAgentNutanixVm(
        "Input for InternalNutanixVmRegisterAgent."
        input: RegisterAgentNutanixVmInput!
    ): RequestSuccess!
    "Register a cloud cluster."
    registerCloudCluster(
        "Input for cloud cluster registration."
        input: RegisterCloudClusterInput!
    ): RegisterCloudClusterReply!
    "Register HyperV SCVMM to Rubrik Cluster."
    registerHypervScvmm(
        "Input for register Hyper-V SCVMM."
        input: RegisterHypervScvmmInput!
    ): AsyncRequestStatus!
    """

    Register a NAS System

    Supported in v7.0+
    Register a NAS system such as a NetApp or an Isilon cluster to be protected.
    """
    registerNasSystem(
        "Input for V1RegisterNasSystem."
        input: RegisterNasSystemInput!
    ): RegisterNasSystemReply!
    removeCdmCluster(
        "UUID of the Rubrik cluster."
        clusterUUID: UUID!,
        "Number of days after which data from Rubrik is removed."
        expireInDays: Long,
        isForce: Boolean!
    ): Boolean!
    "Remove healthy nodes from a cloud cluster."
    removeCloudClusterNodes(
        "Input for removing nodes from a cloud cluster."
        input: RemoveCloudClusterNodesInput!
    ): CcProvisionJobReply!
    "Remove healthy nodes from a cluster."
    removeClusterNodes(
        "Input for removing nodes from a cluster."
        input: RemoveClusterNodesInput!
    ): CcProvisionJobReply!
    "Marks the disk removed and updates cluster metadata"
    removeDisk(
        "Input for InternalRemoveDisk."
        input: RemoveDiskInput!
    ): ResponseSuccess!
    "Remove account level inventory workloads."
    removeInventoryWorkloads(
        "Inventory workloads to remove from an account."
        input: RemoveInventoryWorkloadsInput!
    ): Boolean!
    "Remove LDAP integration."
    removeLdapIntegration(
        "ID for your LDAP integration."
        id: UUID!
    ): Boolean!
    "Remove policies from objects."
    removePolicyObjects(objectIds: [String!]!, policyIds: [String!]!, runAsync: Boolean!): [String!]!
    "Remove private endpoint connection to RCV location."
    removePrivateEndpointConnection(
        "Request for removing the private endpoint connection to an RCV location."
        input: RemovePrivateEndpointConnectionInput!
    ): Void
    """

    Delete existing proxy configuration

    Supported in v5.0+
    Delete an existing proxy that was configured.
    """
    removeProxyConfig(
        "Input for InternalDeleteProxyConfig."
        input: RemoveProxyConfigInput!
    ): ResponseSuccess!
    "Delete cluster VLAN(s)."
    removeVlans(
        "Input for RemoveVlans."
        input: RemoveVlansInput!
    ): RemoveVlansReply!
    "Reseed a secondary database."
    reseedLogShippingSecondary(
        "Input for V1ReseedSecondary."
        input: ReseedLogShippingSecondaryInput!
    ): AsyncRequestStatus!
    """

    Resize managed volume

    Supported in v5.3+
    Resize the managed volume to a larger size. Once a volume size has been increased, it can not be decreased.
    """
    resizeManagedVolume(
        "Input for InternalResizeApiForManagedVolume."
        input: ResizeManagedVolumeInput!
    ): AsyncRequestStatus!
    """

    Marks that the user has resolved that there are no conflicting volume groups on the host where this Exchange server exists

    Supported in v8.0+
    Marks that the user has resolved that there are no conflicting volume groups on the host where this Exchange server exists.
    """
    resolveVolumeGroupsConflict(
        "Input for V1ResolveVolumeGroupsConflict."
        input: ResolveVolumeGroupsConflictInput!
    ): RequestSuccess!
    """

    Restore files

    Supported in v5.0+
    Restore files from a snapshot to the source Nutanix virtual machine.
    """
    restoreFilesNutanixSnapshot(
        "Input for InternalRestoreNutanixVmSnapshotFiles."
        input: RestoreFilesNutanixSnapshotInput!
    ): AsyncRequestStatus!
    """

    Restore files from snapshot

    Supported in v5.0+
    Restore files from a snapshot to the original source location.
    """
    restoreHypervVirtualMachineSnapshotFiles(
        "Input for RestoreHypervVMSnapshotFilesRequest."
        input: RestoreHypervVirtualMachineSnapshotFilesInput!
    ): AsyncRequestStatus!
    "Restores Kubernetes namespace snapshot."
    restoreK8sNamespace(
        "Request to restore a snapshot of a Kubernetes namespace."
        input: RestoreK8sNamespaceInput!
    ): CreateOnDemandJobReply!
    "Create a request to restore a Microsoft SQL database."
    restoreMssqlDatabase(
        "Input for V1CreateRestoreMssqlDb."
        input: RestoreMssqlDatabaseInput!
    ): AsyncRequestStatus!
    "Restores an Exchange mailbox."
    restoreO365Mailbox(restoreConfig: RestoreO365MailboxInput!): CreateOnDemandJobReply!
    "Restores an O365 snappable."
    restoreO365Snappable(
        "The input for restore O365 snappable mutation."
        input: RestoreO365SnappableInput!
    ): CreateOnDemandJobReply!
    "Restore Team conversations."
    restoreO365TeamsConversations(
        "The input for the operation to restore conversations for O365 teams."
        input: RestoreO365TeamsConversationsInput!
    ): CreateOnDemandJobReply!
    "Restore Team files."
    restoreO365TeamsFiles(
        "The input for the operation to restore files for O365 teams."
        input: RestoreO365TeamsFilesInput!
    ): CreateOnDemandJobReply!
    """

    Restore archive logs of an Oracle database

    Supported in v6.0+
    v6.0: Create an asynchronous job to restore archive logs of an Oracle database.
    v7.0+: Starts an asynchronous job to restore archive logs of an Oracle database.
    """
    restoreOracleLogs(
        "Input for V1RestoreOracleLogs."
        input: RestoreOracleLogsInput!
    ): AsyncRequestStatus!
    """

    Restore files from the Volume Group snapshot

    Supported in v5.0+
    Restore filess to the original Host.
    """
    restoreVolumeGroupSnapshotFiles(
        "Input for restoreVolumeGroupSnapshotFiles."
        input: RestoreVolumeGroupSnapshotFilesInput!
    ): AsyncRequestStatus!
    resumeTarget(
        "Request for resuming an Archival Location."
        input: ResumeTargetInput!
    ): ResumeTargetReply!
    """

    Update a MongoDB source

    Supported in v9.0
    Updates a MongoDB source details. You can use this endpoint for updating MongoDB source details when the request to add a source fails.
    """
    retryAddMongoSource(
        "Input for V1PutMongoSource."
        input: RetryAddMongoSourceInput!
    ): AsyncRequestStatus!
    "Initiates a retry of a failed job."
    retryBackup(backupObjects: [BackupObject!]!, backupRunConfig: BackupRunConfig): RetryBackupResp!
    "Retry the previous failed download package CDM job."
    retryDownloadPackageJob(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): DownloadPackageReply!
    "Revoke all roles of the current organization from the specified users and groups."
    revokeAllOrgRoles(
        "Input required for revoking all roles of the current organization from the specified users and groups."
        input: RevokeAllOrgRolesInput!
    ): Void
    "Rotate service account secret."
    rotateServiceAccountSecret(
        "Input for rotating a service account secret."
        input: RotateServiceAccountSecretInput!
    ): RotateServiceAccountSecretReply!
    runCustomAnalyzer(input: RunCustomAnalyzerInput!): RunCustomAnalyzerReply!
    "Schedule an upgrade job in batch."
    scheduleUpgradeBatchJob(
        "Specifies the upgrade action."
        action: ActionType!,
        "Specifies the Context tag."
        context_tag: String = "{\"client\": \"polaris\"}",
        "Specifies the list of cluster UUIDs."
        listClusterUuid: [UUID!]!,
        "Specifies the upgrade mode."
        mode: String!,
        "Specifies the ISO8601 timestamp string."
        scheduleAt: DateTime!,
        "Specifies the Rubrik CDM upgrade tarball version."
        version: String!
    ): [UpgradeJobReplyWithUuid!]!
    "Seed account with enabled policies."
    seedEnabledPolicies: SeedEnabledPoliciesReply!
    "DEPRECATED (use seedEnabledPolicies instead) Seed account with initial policies."
    seedInitialPolicies: SeedInitialPoliciesReply!
    sendEmailNow(
        recipients: [String!]!,
        reportConfig: ReportConfigInput,
        "The report ID."
        reportID: Int!
    ): reportGenerateReply!
    "Send a scheduled report via email. Returns true if the report was sent successfully, false otherwise."
    sendScheduledReport(input: SendScheduledReportInput!): Boolean!
    "Send a scheduled report now asynchronously via email."
    sendScheduledReportAsync(
        "Input required for generating and sending report email."
        input: SendScheduledReportAsyncInput!
    ): AsyncDownloadReply!
    sendTestSmtpEmail(
        "Email address used to identify the sender for your SMTP configuration."
        defaultFromEmail: String,
        "Host name for your SMTP configuration."
        hostName: String,
        "Password for your SMTP configuration."
        password: String,
        "Port number for your SMTP configuration."
        port: Int,
        "Recipient of test email."
        recipient: String!,
        "Security type to use."
        securityType: SMTPSecurityTypeEnum,
        "Trusted certificate to use for your SMTP configuration."
        trustedCerts: String,
        "Specifies whether to use existing configuration or configuration that is passed in."
        useExisting: Boolean!,
        "User name for your SMTP configuration."
        userName: String
    ): Boolean!
    sendTestSyslog(
        "Syslog configuration to use."
        config: SyslogConfigInputType
    ): Boolean!
    "Create (or update if already exists) the account settings value."
    setAccountSettingValue(
        "Name of component that uses ASP in account setting table."
        aspComponent: ComponentEnum!,
        "Name of Account Setting Parameter (ASP) in account setting table."
        aspName: String!,
        "Value of ASP in account setting table."
        aspValue: String!
    ): ASPValue!
    "Set credentials for the customer application, for the tenant domain name."
    setAzureCloudAccountCustomerAppCredentials(
        "Input for setting the app credentials in the Azure Cloud Accounts."
        input: SetAzureCloudAccountCustomerAppCredentialsInput!
    ): Boolean!
    "Set datastore freespace thresholds."
    setDatastoreFreespaceThresholds(
        "Datastore freespace thresholds to set."
        input: SetDatastoreFreespaceThresholdsInput!
    ): SetDatastoreFreespaceThresholdsReply!
    "Set federated login status."
    setFederatedLoginStatus(
        "Federated login status configuration."
        federatedLoginStatusArg: FederatedLoginStatusInput!
    ): Boolean!
    setIdentityProvider(
        "Entity ID of your identity provider."
        entityId: String!,
        "Sign-in URL ID of your identity provider."
        signInUrl: String!,
        "Signing certificate of your identity provider."
        signingCertificate: String!
    ): IdentityProvider!
    setIpWhitelistEnabled(enabled: Boolean!): Boolean!
    "Update the MFA settings for the given LDAP integration. Return true when the operation succeeds."
    setLdapMfaSetting(
        "Input required for updating LDAP MFA settings."
        input: SetLdapMfaSettingInput!
    ): Boolean!
    "Update the MFA settings for the account. Return true when the operation succeeds."
    setMfaSetting(
        "Input required for updating MFA settings."
        input: SetMfaSettingInput!
    ): Boolean!
    "Sets the service account for the org."
    setO365ServiceAccount(
        appPassword: String!,
        "Org UUID."
        orgId: UUID!,
        username: String!
    ): RequestStatus!
    "Set whether randomware detection is enabled or not."
    setRansomwareInvestigationEnabled(
        "Enable Ransomware Investigation on an entity."
        input: SetRansomwareInvestigationEnabledInput!
    ): Void
    setSmtpConfiguration(
        "Email address used to identify the sender for your SMTP configuration."
        defaultFromEmail: String!,
        "Host name for your SMTP configuration."
        hostName: String!,
        "Password for your SMTP configuration."
        password: String!,
        "Port number for your SMTP configuration."
        port: Int!,
        "Security type to use."
        securityType: SMTPSecurityTypeEnum!,
        "Trusted certificate to use for your SMTP configuration."
        trustedCerts: String!,
        "User name for your SMTP configuration."
        userName: String!
    ): Boolean!
    "Setup TOTP configuration for a user. Return true when the operation succeeds."
    setTotpConfig(
        "Input required for setting up TOTP configuration."
        input: SetTotpConfigInput!
    ): Boolean!
    "Sets upgrade type of a cluster."
    setUpgradeType(
        "Specifies the type of upgrade to be set for the cluster."
        input: SetUpgradeTypeInput!
    ): SetUpgradeTypeReply!
    "Update the user-level TOTP enforcement for given users. Return true when the operation succeeds."
    setUserLevelTotpEnforcement(
        "Input required for updating user-level TOTP enforcement."
        input: SetUserLevelTotpEnforcementInput!
    ): Boolean!
    "Set user-specific settings."
    setUserSetting(
        "Settings to add for a specific user."
        userSetting: UserSettingInputType
    ): UserSetting!
    """

    Set a signed certificate for Web server

    Supported in v5.3+
    Setting the given certificate for each node's web server to use.
    """
    setWebSignedCertificate(
        "Input for V1SetWebSignedCertificate."
        input: SetWebSignedCertificateInput!
    ): AsyncRequestStatus!
    "Enable/disable alerts for given workload on given cluster."
    setWorkloadAlertSetting(
        "Request to enable or not enable alerts for workloads."
        input: SetWorkloadAlertSettingInput!
    ): SetWorkloadAlertSettingReply!
    "Set WWW TLS certificate."
    setWwwTlsCert(
        "SetWwwTlsCert Input."
        input: SetWwwTlsCertInputType!
    ): Boolean!
    "Sets up Exocompute for an O365 subscription."
    setupAzureO365Exocompute(exocomputeConfig: AzureO365ExocomputeConfig!, subscriptionId: UUID!, tenantId: String!): SetupAzureO365ExocomputeResp!
    "Setup backups on the SQL Server databases using the admin credentials."
    setupCloudNativeSqlServerBackup(
        "Input required to setup SQL Server backups."
        input: SetupCloudNativeSqlServerBackupInput!
    ): BatchAsyncJobStatus!
    "Setup an unformatted disk"
    setupDisk(
        "Input for InternalSetupDisk."
        input: SetupDiskInput!
    ): DiskInfo!
    "Starts a job to disable AWS Exocompute feature. When complete, the job will disable exocompute feature for the specified AWS Native account."
    startAwsExocomputeDisableJob(
        "Input required to start the job to disable AWS Exocompute."
        input: StartAwsExocomputeDisableJobInput!
    ): AsyncJobStatus!
    "Starts a job to disable a specific AWS Native account. When complete, the job will disable protection for the specified AWS Native account."
    startAwsNativeAccountDisableJob(
        "Input for AWS native account disable job."
        input: StartAwsNativeAccountDisableJobInput!
    ): AsyncJobStatus!
    "Start an on demand create snapshot job for AWS EC2 Instances.When completed, this will start taking an on-demand snapshot of the selected EC2 Instances  as per the SLA Policy assigned to the respective instances."
    startAwsNativeEc2InstanceSnapshotsJob(
        "Input for create AWS EC2 Instance snapshots job."
        input: StartAwsNativeEc2InstanceSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start job to create snapshots of RDS Instance with given IDs. When completed, this will start taking an on-demand snapshot of the selected RDS Instances  as per the SLA Policy assigned to the respective instances."
    startAwsNativeRdsInstanceSnapshotsJob(
        "Input to trigger job to create AWS RDS Instance snapshots."
        input: StartAwsNativeRdsInstanceSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Initiates a session before doing Azure OAuth flow. If a custom app is configured for the tenant, the client ID of the custom app is returned. Otherwise, the client ID of the default app is returned."
    startAzureCloudAccountOauth(
        "Input for initiating authentication of the Azure Cloud Accounts."
        input: StartAzureCloudAccountOauthInput!
    ): StartAzureCloudAccountOauthReply!
    startBlueprintFailover(failoverJobConfig: BlueprintFailoverJobConfig!): CreateOnDemandJobReply!
    "Start failover jobs for multiple blueprints."
    startBlueprintsFailover(failoverJobConfigs: [BlueprintFailoverJobConfig!]!): [CreateOnDemandJobReply!]!
    "Start bulk recovery."
    startBulkRecovery(
        "Input for start bulk recovery."
        input: StartBulkRecoveryInput!
    ): StartBulkRecoveryReply!
    "Create index of cloudnative snapshots"
    startCloudNativeSnapshotsIndexJob(
        "Input for create snapshots index job."
        input: StartCloudNativeSnapshotsIndexJobInput!
    ): BatchAsyncJobStatus!
    "Start a crawl."
    startCrawl(analyzerGroups: [AnalyzerGroupInput!]!, extWhiteList: [String!], name: String!, resources: [ResourceInput!]!): StartCrawlReply!
    "Start job to create snapshots of EBS Volumes with given IDs. When completed, this will start taking an on-demand snapshot of the selected EBS Volumes  as per the SLA Policy assigned to the respective volumes."
    startCreateAwsNativeEbsVolumeSnapshotsJob(
        "Input for create AWS EBS volume create snapshots job."
        input: StartCreateAwsNativeEbsVolumeSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to create snapshots of the Azure Native Managed Disks identified by the given IDs. When started, this will start taking an on-demand snapshot of the selected disks as per the SLA Policy assigned to the respective disks."
    startCreateAzureNativeManagedDiskSnapshotsJob(
        "Input for the job to create Azure Native Managed Disk Snapshots."
        input: StartCreateAzureNativeManagedDiskSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to create a snapshot for the Azure Native virtual machine identified by the IDs. When started, this will start taking an on-demand snapshot of the selected VMs as per the SLA Policy assigned to the respective VMs."
    startCreateAzureNativeVirtualMachineSnapshotsJob(
        "Input for the job to create Azure Native Virtual Machine snapshots."
        input: StartCreateAzureNativeVirtualMachineSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    startCyberRecovery(input: StartCyberRecoveryInput!): CreateOnDemandJobReply!
    "Start on-demand jobs to disable the feature for the given Azure Cloud Accounts. When completed, the status of cloud account feature will change to Disabled and the feature will become eligible to be deleted."
    startDisableAzureCloudAccountJob(
        "Input for starting jobs to disable a cloud account feature for a list of Azure Cloud Accounts."
        input: StartDisableAzureCloudAccountJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to disable protection for a specified Azure subscription."
    startDisableAzureNativeSubscriptionProtectionJob(
        "Input for the job to start disabling protection from the Azure Native Subscription."
        input: StartDisableAzureNativeSubscriptionProtectionJobInput!
    ): AsyncJobStatus!
    "Starts CDM job to download installer package in batch."
    startDownloadPackageBatchJob(
        "Specifies the Rubrik CDM download package version."
        downloadVersion: String,
        "Specifies the list of cluster UUIDs."
        listClusterUuid: [UUID!]!,
        "Specifies the MD5CheckSum of the Rubrik CDM installer package."
        md5checksum: String!,
        "Specifies the Rubrik CDM upgrade package URL."
        packageUrl: String!,
        "Specifies the size in bytes of the Rubrik CDM package."
        size: Long
    ): [DownloadPackageReplyWithUuid!]!
    "Starts a job to export an EC2 Instance snapshot. The job creates a new EC2 Instance with the same properties as that of the snapshot that is exported."
    startEc2InstanceSnapshotExportJob(
        "Input to trigger export AWS native EC2 Instance snapshot job."
        input: StartEc2InstanceSnapshotExportJobInput!
    ): AsyncJobStatus!
    "Start a job to export EBS Volume. The job creates a new EBS Volume with the same properties as that of the snapshot that is exported."
    startExportAwsNativeEbsVolumeSnapshotJob(
        "Input to trigger export AWS native EBS volume snapshot job."
        input: StartExportAwsNativeEbsVolumeSnapshotJobInput!
    ): AsyncJobStatus!
    "Start a job to export the specified Azure Native Managed Disks to the desired destination."
    startExportAzureNativeManagedDiskJob(
        "Input for the job to export the specified Azure Native Managed Disk to the specified destination."
        input: StartExportAzureNativeManagedDiskJobInput!
    ): AsyncJobStatus!
    "Start a job to export the Azure native virtual machine for a specified snapshot to a specified destination."
    startExportAzureNativeVirtualMachineJob(
        "Input for the job to export the specified Azure Native Virtual Machine to the specified destination."
        input: StartExportAzureNativeVirtualMachineJobInput!
    ): AsyncJobStatus!
    "Start a job to export Azure SQL Database. The job creates a new Azure SQL Database with the same properties as that of the instance that is exported."
    startExportAzureSqlDatabaseDbJob(
        "Input for the job to export the specified Azure SQL Database."
        input: StartExportAzureSqlDatabaseDbJobInput!
    ): AsyncJobStatus!
    "Start a job to export Azure SQL Managed Instance database. The job creates a new Azure SQL Managed Instance database with the same properties as that of the instance that is exported."
    startExportAzureSqlManagedInstanceDbJob(
        "Input for the job to export the specified Azure SQL Managed Instance database."
        input: StartExportAzureSqlManagedInstanceDbJobInput!
    ): AsyncJobStatus!
    "Start a job to export RDS Instance. The job creates a new RDS Instance with the same properties as that of the instance that is exported."
    startExportRdsInstanceJob(
        "Input to trigger export AWS native RDS Instance job."
        input: StartExportRdsInstanceJobInput!
    ): AsyncJobStatus!
    """

    Detect malware

    Supported in v6.0+
    Initiate an asynchronous malware detection.
    """
    startMalwareDetection(
        "Input for InternalRunDetectMalware."
        input: RunDetectMalwareInput!
    ): AsyncRequestStatus!
    "Starts an on demand periodic upgrade prechecks job in CDM cluster."
    startPeriodicUpgradePrechecksOnDemandJob(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): PrechecksJobReply!
    "Start Recovery Plan failover."
    startRecoveryPlan(
        "Start Recovery Plan configuration."
        input: StartRecoveryPlanInput!
    ): StartRecoveryPlanReply!
    "Start an on demand job to refresh AWS accounts. The job updates the Rubrik platform with changes to the AWS Native accounts."
    startRefreshAwsNativeAccountsJob(
        "Input for refresh AWS native accounts job."
        input: StartRefreshAwsNativeAccountsJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to refresh Azure Native subscription for the given subscription IDs. When started, this job will update the Rubrik platform with any changes that have been done on Azure for the respective subscription."
    startRefreshAzureNativeSubscriptionsJob(
        "Input for the job to refresh Azure Native subscriptions."
        input: StartRefreshAzureNativeSubscriptionsJobInput!
    ): BatchAsyncJobStatus!
    "Start an on demand restore snapshot job for AWS EC2 Instance. When completed, this will replace the original EC2 Instance with the selected snapshot."
    startRestoreAwsNativeEc2InstanceSnapshotJob(
        "Input for restore AWS EC2 Instance snapshot job."
        input: StartRestoreAwsNativeEc2InstanceSnapshotJobInput!
    ): AsyncJobStatus!
    "Start a job to restore Azure Native virtual machine with the selected snapshot. When started, this will replace the original VM with the selected snapshot."
    startRestoreAzureNativeVirtualMachineJob(
        "Input for the job to restore Azure Native Virtual Machine."
        input: StartRestoreAzureNativeVirtualMachineJobInput!
    ): AsyncJobStatus!
    "Start a threat hunt on a cluster."
    startThreatHunt(
        "Config to start a threat hunt."
        input: StartThreatHuntInput!
    ): StartThreatHuntReply!
    "Starts cdm upgrades instantly, monitors the upgrade until terminal state is reached."
    startUpgradeBatchJob(
        "Specifies the upgrade action."
        action: ActionType!,
        "Specifies the Context tag."
        context_tag: String = "{\"client\": \"polaris\"}",
        "Specifies the list of cluster UUIDs."
        listClusterUuid: [UUID!]!,
        "Specifies the upgrade mode."
        mode: String!,
        "Specifies the Rubrik CDM upgrade tarball version."
        version: String!
    ): [UpgradeJobReplyWithUuid!]!
    """

    Initiate a live mount for a given Volume Group snapshot

    Supported in v5.0+
    Create a live mount request for a Volume Group snapshot.
    """
    startVolumeGroupMount(
        "Input for InternalCreateVolumeGroupMount."
        input: StartVolumeGroupMountInput!
    ): AsyncRequestStatus!
    "Issue request to stop a job instance. If successful, stop process for job instance is initiated. Job instance is stopped asynchronously in the background. The input must contain either the job instance ID or the event series ID. If it contains the job instance ID, this will stop the job instance corresponding to the ID. If it contains the event series ID, it will retrieve the latest job instance associated with the event series, and stop it."
    stopJobInstance(
        "Input to stop a job instance. The input must contain either the job instance ID or the event series ID. "
        input: StopJobInstanceInput!
    ): StopJobInstanceReply!
    "Log in to the Rubrik Support portal using username and password."
    supportPortalLogin(
        "Input for supportPortalLogin."
        input: SupportPortalLoginInput!
    ): SupportPortalLoginReply!
    """

    Take an on-demand snapshot of an SLA Managed Volume

    Supported in v5.3+
    Create a job for an on-demand snapshot of an SLA Managed Volume. The response returns a request ID. To see the status of the request, poll 'managed-volume/request/{id}' with the request ID obtained in the response.
    """
    takeManagedVolumeOnDemandSnapshot(
        "Input for InternalTakeManagedVolumeOnDemandSnapshot."
        input: TakeManagedVolumeOnDemandSnapshotInput!
    ): AsyncRequestStatus!
    "Take an on-demand log backup for a Microsoft SQL database."
    takeMssqlLogBackup(
        "Input for V1CreateOnDemandMssqlLogBackup."
        input: TakeMssqlLogBackupInput!
    ): AsyncRequestStatus!
    """

    On-demand backup of an Oracle database

    Supported in v5.0+
    Create an asynchronous job for an on-demand snapshot of an Oracle database. The response includes an ID for the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
    """
    takeOnDemandOracleDatabaseSnapshot(
        "Input for InternalCreateOnDemandOracleBackup."
        input: TakeOnDemandOracleDatabaseSnapshotInput!
    ): AsyncRequestStatus!
    """

    On-demand log backup for an Oracle database log

    Supported in v5.0+
    Create an asynchronous job for an on-demand backup of an Oracle database log. The response includes an ID for the asynchronous job request.  To see the status of the request, poll /oracle/request/{id}.
    """
    takeOnDemandOracleLogSnapshot(
        "Input for InternalCreateOnDemandOracleLogBackup."
        input: TakeOnDemandOracleLogSnapshotInput!
    ): AsyncRequestStatus!
    "Triggers on-demand snapshot for the given workloads."
    takeOnDemandSnapshot(
        "Input for taking on demand snapshot of workloads."
        input: TakeOnDemandSnapshotInput!
    ): TakeOnDemandSnapshotReply!
    "Test an existing webhook."
    testExistingWebhook(
        "The existing webhook to test."
        input: TestExistingWebhookInput!
    ): TestExistingWebhookReply!
    """

    Test the specified syslog export rule

    Supported in v5.1+
    Send a test message using the syslog export rule specified by the given id.
    """
    testSyslogExportRule(
        "Input for V1TestSyslogExportRule."
        input: TestSyslogExportRuleInput!
    ): TestSyslogExportRuleReply!
    "Test a webhook configuration."
    testWebhook(
        "The webhook configuration to test."
        input: TestWebhookInput!
    ): TestWebhookReply!
    toggleFeatureEnabled(enableFeature: Boolean!, featureName: FeatureName!): Boolean!
    toggleVMwareManagementEnabled(enableVmwareManagement: Boolean!): Boolean!
    """

    Trigger cloud compute connectivity check

    Supported in v6.0+
    Triggers a background job to perform the cloud compute connectivity check for the specified archival location.
    """
    triggerCloudComputeConnectivityCheck(
        "Input for V1TriggerCloudComputeConnectivityCheck."
        input: TriggerCloudComputeConnectivityCheckInput!
    ): AsyncRequestStatus!
    "Initiates on-demand Exocompute health check."
    triggerExocomputeHealthCheck(
        "Input to initiate Exocompute health check."
        input: TriggerExocomputeHealthCheckInput!
    ): TriggerExocomputeHealthCheckReply!
    "Trigger detect ransomware job for given snapshot."
    triggerRansomwareDetection(
        "Enable automatic file metadata upload input."
        input: TriggerRansomwareDetectionInput!
    ): TriggerRansomwareDetectionReply!
    """

    Reset the configuration for system copy restore on target database

    Supported in v6.0+
    Initiates a job to reset the configuration for the system copy restore on the specified target database. System copy restore in SAP HANA is done across different databases.
    """
    unconfigureSapHanaRestore(
        "Input for V1UnconfigureSapHanaRestore."
        input: UnconfigureSapHanaRestoreInput!
    ): AsyncRequestStatus!
    """

    Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID

    Supported in v5.1+
    Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID. The cluster must be in maintenance mode to uninstall the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
    """
    uninstallIoFilter(
        "Input for V1UninstallIoFilter."
        input: UninstallIoFilterInput!
    ): RequestSuccess!
    "Specifies the endpoint through which the admin can unlock the user accounts."
    unlockUsersByAdmin(
        "Specifies the list of user IDs."
        input: UnlockUsersByAdminInput!
    ): Void
    "Unmap Azure cloud accounts from the mapped Exocompute subscription."
    unmapAzureCloudAccountExocomputeSubscription(
        "Input for unmapping Azure cloud accounts from the mapped Exocompute subscription."
        input: UnmapAzureCloudAccountExocomputeSubscriptionInput!
    ): UnmapAzureCloudAccountExocomputeSubscriptionReply!
    updateAccountOwner(
        "Specifies the user ID."
        userId: String!
    ): Boolean!
    "This endpoint is deprecated."
    updateAccountSettings(
        "Flag to represent if email notification is enabled."
        isEmailNotificationEnabled: Boolean,
        "Flag to represent if the EULA has been accepted."
        isEulaAccepted: Boolean
    ): AccountSetting!
    updateAppBlueprint(
        children: [AppBlueprintChildInput!]!,
        "The Rubrik UUID for the object."
        fid: UUID!,
        name: String!,
        primaryClusterUuid: UUID!
    ): Blueprint!
    "Update Rubrik cluster configuration to enable or not enable the Auto-enabled Data Discovery Policies feature."
    updateAutoEnablePolicyClusterConfig(
        "Rubrik cluster configuration to enable or not enable the Auto-enabled Data Discovery Policies feature."
        input: UpdateAutoEnablePolicyClusterConfigInput!
    ): UpdateAutoEnablePolicyClusterConfigReply!
    updateAutomaticAwsTargetMapping(
        "Update AWS automatic target mapping."
        input: UpdateAutomaticAwsTargetMappingInput!
    ): TargetMapping!
    updateAutomaticAzureTargetMapping(
        "Update Azure automatic target mapping."
        input: UpdateAutomaticAzureTargetMappingInput!
    ): TargetMapping!
    updateAwsAccount(
        "Request for editing an existing AWS account."
        input: UpdateAwsAccountInput!
    ): CloudAccount!
    "Update properties for a given AWS cloud account."
    updateAwsCloudAccount(
        "Arguments to update properties of AWS cloud account."
        input: UpdateAwsCloudAccountInput!
    ): Void
    "Updates regions, stack ARN, and role ARN for a feature for a given cloud account."
    updateAwsCloudAccountFeature(
        "Arguments to update AWS cloud account feature."
        input: UpdateAwsCloudAccountFeatureInput!
    ): UpdateAwsCloudAccountFeatureReply!
    updateAwsComputeSetting(
        "Request arguments for updating a Aws Compute Setting."
        input: UpdateAwsComputeSettingInput!
    ): AwsComputeSettings!
    updateAwsTarget(
        "Request for updating an existing AWS target."
        input: UpdateAwsTargetInput!
    ): Target!
    updateAzureAccount(
        "Input for editing an Azure account."
        input: UpdateAzureAccountInput!
    ): CloudAccount!
    "Update names of the Azure Subscriptions cloud account and regions for the given feature."
    updateAzureCloudAccount(
        "Input for updating an Azure Cloud Account."
        input: UpdateAzureCloudAccountInput!
    ): UpdateAzureCloudAccountReply!
    updateAzureTarget(
        "Request for updating an existing Azure target."
        input: UpdateAzureTargetInput!
    ): Target!
    "Find bad disk of a node in the CDM cluster."
    updateBadDiskLedStatus(
        "Input for InternalFindBadDisk."
        input: UpdateBadDiskLedStatusInput!
    ): UpdateBadDiskLedStatusReply!
    updateBlueprint(
        "Recovery type of the Recovery Plan."
        blueprintRecoveryType: BlueprintRecoveryType,
        children: [AppBlueprintChildInput!]!,
        "Specifies whether hydration is enabled for the Recovery Plan."
        enableHydration: Boolean,
        "The Rubrik UUID for the object."
        fid: UUID!,
        "Flag to enable visibility of Isolated Recovery Plan."
        isBlueprintVisible: Boolean,
        name: String!,
        "The ID of the source location."
        sourceLocationId: String!,
        "The type of the source location."
        sourceLocationType: BlueprintLocationType! = CDM,
        "The status of the Recovery Plan."
        status: BlueprintStatus! = INCOMPLETE,
        "The ID of the intended remote target location."
        targetLocationId: String,
        "The type of the intended remote target location."
        targetLocationType: BlueprintLocationType = CDM,
        "A list of numbers representing the length of time, in minutes, to pause between each priority group during recovery. The numbers are ordered to align with the order of the priority groups. For example, consider a Blueprint with 3 priority groups. For this Blueprint, a value of [5,10,0] implies that there is a 5-minute pause between the 1st and 2nd priority groups and a 10-minute pause between the 2nd and 3rd priority groups. The last value in the list is always 0."
        timeoutBetweenPriorityGroups: [Long!],
        "The version of the Recovery Plan."
        version: Int!
    ): BlueprintNew!
    "Update a cassandra source."
    updateCassandraSource(
        "Input for V2ModifyMosaicSource."
        input: ModifyMosaicSourceInput!
    ): MosaicAsyncResponse!
    "Edit Certificate."
    updateCertificate(
        "Certificate."
        certificate: String,
        "Certificate ID."
        certificateId: Long!,
        "Certificate description."
        description: String,
        "Certificate name."
        name: String
    ): Boolean!
    updateCertificateHost(
        "Input for V1UpdateCertificateHost."
        input: UpdateCertificateHostInput!
    ): UpdateCertificateHostReply!
    updateClassificationBannerEnabled: Boolean!
    updateClassificationBannerSettings(
        "The classification banner settings to add or change for account."
        classificationBannerSettingsArg: ClassificationBannerSettingsInputType!
    ): Boolean!
    updateClassificationLoginEnabled: Boolean!
    updateClassificationLoginSettings(
        "The classification login settings to add or change for account."
        classificationLoginSettingsArg: ClassificationLoginSettingsInputType!
    ): Boolean!
    updateCloudNativeAwsStorageSetting(input: UpdateCloudNativeAwsStorageSettingInput!): UpdateCloudNativeAwsStorageSettingReply!
    updateCloudNativeAzureStorageSetting(input: UpdateCloudNativeAzureStorageSettingInput!): UpdateCloudNativeAzureStorageSettingReply!
    "Update indexing status for cloudnative snappables"
    updateCloudNativeIndexingStatus(
        "Input required to update file indexing status of cloud native snappables."
        input: UpdateCloudNativeIndexingStatusInput!
    ): UpdateCloudNativeIndexingStatusReply!
    "Update cloud native label rule"
    updateCloudNativeLabelRule(
        "Input required to update a cloud-native label rule."
        input: UpdateCloudNativeLabelRuleInput!
    ): Void
    "Updates an existing Rubrik Cloud Vault Storage Settings for the archival of azure cloud native protected objects."
    updateCloudNativeRcvAzureStorageSetting(
        "Request for updating an existing Rubrik Cloud Vault (RCV) Azure storage setting."
        input: UpdateCloudNativeRcvAzureStorageSettingInput!
    ): UpdateCloudNativeRcvAzureStorageSettingReply!
    "Update cloud native tag rule"
    updateCloudNativeTagRule(
        "Input required to update a cloud-native tag rule."
        input: UpdateCloudNativeTagRuleInput!
    ): Void
    "Update the default address of a Rubrik cluster."
    updateClusterDefaultAddress(
        "Set the default address of a cluster."
        input: UpdateClusterDefaultAddressInput!
    ): UpdateClusterDefaultAddressReply!
    updateClusterLocation(
        clusterLocation: ClusterLocationEdit!,
        "The Rubrik cluster ID."
        clusterUuid: UUID!
    ): Cluster!
    """

    Assign NTP servers to Rubrik cluster

    Supported in v5.0+
    Assign NTP servers to Rubrik cluster.
    """
    updateClusterNtpServers(
        "Input for InternalSetClusterNtpServers."
        input: UpdateClusterNtpServersInput!
    ): ResponseSuccess!
    "Pauses or resumes protection on the Rubrik clusters specified by UUIDs."
    updateClusterPauseStatus(
        "Request to pause or resume protection on Rubrik clusters."
        input: UpdateClusterPauseStatusInput!
    ): UpdateClusterPauseStatusReply!
    "Update Rubrik CDM cluster settings."
    updateClusterSettings(
        "Input for update cluster."
        input: UpdateClusterSettingsInput!
    ): UpdateClusterSettingsReply!
    "Update configuration protection setup for a cluster."
    updateConfigProtectionSetup(
        "Settings to update configuration protection set up."
        input: UpdateConfigProtectionSetupInput!
    ): BatchAsyncJobStatus!
    "Update the configuration, name, or deletion status of a configured group."
    updateConfiguredGroup(
        "The input for the UpdateConfiguredGroup mutation."
        input: UpdateConfiguredGroupInput!
    ): Void
    "Update a custom analyzer."
    updateCustomAnalyzer(input: CreateCustomAnalyzerInput!): Analyzer!
    "Update a custom report."
    updateCustomReport(input: UpdateCustomReportInput!): UpdateCustomReportReply!
    "Updates the Azure app for the specified account in an idempotent manner to support Azure SQL Database and  Managed Instance Database authentication."
    updateCustomerAppPermissionForAzureSql: Void
    "Update cluster DNS servers and search domains."
    updateDnsServersAndSearchDomains(
        "Input for UpdateDnsServersAndSearchDomains."
        input: UpdateDnsServersAndSearchDomainsInput!
    ): ResponseSuccess!
    "Update Eula Acceptance details."
    updateEulaAccepted: Boolean!
    "Update event digests for specific recipients."
    updateEventDigest(
        "Information required to save an event digest."
        input: UpdateEventDigestInput!
    ): UpdateEventDigestReply!
    """

    Update a failover cluster

    Supported in v5.2+
    Update failover cluster with specified properties.
    """
    updateFailoverCluster(
        "Input for V1UpdateFailoverCluster."
        input: UpdateFailoverClusterInput!
    ): UpdateFailoverClusterReply!
    """

    Update a failover cluster app

    Supported in v5.2+
    Update the failover cluster app with specified properties.
    """
    updateFailoverClusterApp(
        "Input for V1UpdateFailoverClusterApp."
        input: UpdateFailoverClusterAppInput!
    ): UpdateFailoverClusterAppReply!
    """

    Modify the list of cluster IPs

    Supported in v5.0+
    Modify the list of cluster IPs.
    """
    updateFloatingIps(
        "Input for InternalUpdateClusterIps."
        input: UpdateFloatingIpsInput!
    ): UpdateFloatingIpsReply!
    updateGcpTarget(
        "Request for updating an existing Gcp target."
        input: UpdateGcpTargetInput!
    ): Target!
    "Edit a reader target of type Glacier on a Rubrik cluster."
    updateGlacierTarget(
        "Input for updating an existing Glacier target."
        input: UpdateGlacierTargetInput!
    ): Target!
    "Edit an existing global certificate."
    updateGlobalCertificate(
        "Input to edit a global certificate."
        input: UpdateGlobalCertificateInput!
    ): UpdateGlobalCertificateReply!
    "Update SLA Domain."
    updateGlobalSla(input: UpdateGlobalSlaInput!): GlobalSlaReply!
    updateGuestCredential(
        "Input for InternalUpdateGuestCredential."
        input: UpdateGuestCredentialInput!
    ): UpdateGuestCredentialReply!
    "Run health monitor policies on the CDM cluster."
    updateHealthMonitorPolicyStatus(
        "Input for V1RunPolicies."
        input: UpdateHealthMonitorPolicyStatusInput!
    ): UpdateHealthMonitorPolicyStatusReply!
    """

    Update VM

    Supported in v5.0+
    Update VM with specified properties.
    """
    updateHypervVirtualMachine(
        "Input for InternalUpdateHypervVirtualMachine."
        input: UpdateHypervVirtualMachineInput!
    ): UpdateHypervVirtualMachineReply!
    """

    Power a Live Mount on and off

    Supported in v5.0+
    Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
    """
    updateHypervVirtualMachineSnapshotMount(
        "Input for InternalUpdateHypervVirtualMachineSnapshotMount."
        input: UpdateHypervVirtualMachineSnapshotMountInput!
    ): UpdateHypervVirtualMachineSnapshotMountReply!
    "Create or update existing custom claims."
    updateIdentityProvider(
        "Attributes to add for an organization's identity provider."
        input: UpdateIdentityProviderInput!
    ): UpdateIdentityProviderReply!
    updateIpWhitelist(ipCidrs: [String!]!, whitelistMode: WhitelistModeEnum!): Boolean!
    updateLambdaSettings(
        "Probability threshold for anomaly detector."
        anomalyThreshold: Float,
        "Flag to represent if alert on anomaly workload is enabled."
        isAnomalyAlertEnabled: Boolean,
        "Probability threshold for ransomware detector."
        ransomwareThreshold: Float
    ): LambdaSettings!
    "Mutate LDAP integration."
    updateLdapIntegration(
        "BaseDn for your LDAP integration."
        baseDn: String,
        "BindUserName for your LDAP integration."
        bindUserName: String!,
        "BindUserPassword for your LDAP integration."
        bindUserPassword: String!,
        "Dynamic DNS name for your LDAP integration."
        dynamicDnsName: String,
        "Group member attribute for your LDAP integration."
        groupMemberAttr: String,
        "Group membership attribute for your LDAP integration."
        groupMembershipAttr: String,
        "Group search filter for your LDAP integration."
        groupSearchFilter: String,
        "ID for your LDAP integration."
        id: UUID,
        "LdapServers for your LDAP integration."
        ldapServers: [LdapServerInput!],
        "Name for your LDAP integration."
        name: String!,
        "TrustedCerts for your LDAP integration."
        trustedCerts: String,
        "User name attribute for your LDAP integration."
        userNameAttr: String,
        "User search filter for your LDAP integration."
        userSearchFilter: String
    ): String!
    "Used by the org admin to update the configuration settings relatedto the account lockout."
    updateLockoutConfig(
        "Specifies all fields related to lockout configurations in one object."
        input: UpdateLockoutConfigInput!
    ): UpdateLockoutConfigReply!
    "Mutation to update an existing Managed Volume."
    updateManagedVolume(
        "Input for InternalUpdateManagedVolume."
        input: UpdateManagedVolumeInput!
    ): UpdateManagedVolumeReply!
    updateManualTargetMapping(
        "Update manual target mapping."
        input: UpdateManualTargetMappingInput!
    ): TargetMapping!
    "Modifies configuration for a registered MongoDB source in NoSQL cluster."
    updateMongodbSource(
        "Input for V2ModifyMosaicSource."
        input: ModifyMosaicSourceInput!
    ): MosaicAsyncResponse!
    """

    Modify a store

    Supported in m3.2.0-m4.2.0.
    """
    updateMosaicStore(
        "Input for V2ModifyMosaicStore."
        input: ModifyMosaicStoreInput!
    ): MosaicAsyncResponse!
    "Update the default properties for Microsoft SQL databases."
    updateMssqlDefaultProperties(
        "Input for V1UpdateDefaultDbPropertiesV1."
        input: UpdateMssqlDefaultPropertiesInput!
    ): UpdateMssqlDefaultPropertiesReply!
    "Update log shipping configuration of a Microsoft SQL Database."
    updateMssqlLogShippingConfiguration(
        "Input for V2UpdateLogShippingConfigurationV2."
        input: UpdateMssqlLogShippingConfigurationInput!
    ): UpdateMssqlLogShippingConfigurationReply!
    """

    Bulk update multiple NAS shares

    Supported in v7.0+
    Updates fields like changelist of multiple NAS shares.
    """
    updateNasShares(
        "Input for V1UpdateNasShares."
        input: UpdateNasSharesInput!
    ): Void
    """

    Modify the information for a registered NAS system

    Supported in v7.0+
    Change the hostname that is associated with a NAS system. Update the credentials used to access the vendor-specific APIs.
    """
    updateNasSystem(
        "Input for V1UpdateNasSystem."
        input: UpdateNasSystemInput!
    ): UpdateNasSystemReply!
    updateNetworkThrottle(
        "Input for InternalUpdateNetworkThrottle."
        input: UpdateNetworkThrottleInput!
    ): UpdateNetworkThrottleReply!
    updateNfsTarget(
        "Request for updating an existing NFS target."
        input: UpdateNfsTargetInput!
    ): Target!
    """

    Patch Nutanix cluster

    Supported in v5.0+
    Patch the host, credentials, and/or CA certs of the specified Nutanix cluster object.
    """
    updateNutanixCluster(
        "Input for InternalPatchNutanixCluster."
        input: UpdateNutanixClusterInput!
    ): UpdateNutanixClusterReply!
    """

    v5.0-v8.0: Patch VM
    v9.0: Patch virtual machine

    Supported in v5.0+
    v5.0-v5.3: Patch VM with specified properties
    v6.0-v8.0: Patch VM with specified properties.
    v9.0: Patch virtual machine with specified properties.
    """
    updateNutanixVm(
        "Input for InternalPatchNutanixVm."
        input: UpdateNutanixVmInput!
    ): Void
    "Update O365 App authentication status to applicable app version."
    updateO365AppAuthStatus(
        "Input for updating O365 App authentication status."
        input: UpdateO365AppAuthStatusInput!
    ): UpdateO365AppAuthStatusReply!
    "Update O365 Azure app permission in Azure AD portal."
    updateO365AppPermissions(
        "Input for updating O365 app permissions."
        input: UpdateO365AppPermissionsInput!
    ): Void
    "Update the custom name for an O365 Organization."
    updateO365OrgCustomName(
        "Config for updating an O365 Org custom name."
        input: UpdateO365OrgCustomNameInput!
    ): UpdateO365OrgCustomNameReply!
    """

    Update an Oracle Data Guard group

    Supported in v6.0+
    Update properties of an Oracle Data Guard group object.
    """
    updateOracleDataGuardGroup(
        "Input for V1UpdateOracleDataGuardGroup."
        input: UpdateOracleDataGuardGroupInput!
    ): OracleDbDetail!
    "Update an organization."
    updateOrg(
        "Input required for org update."
        input: UpdateOrgInput!
    ): UpdateOrgReply!
    "Update organization security policy."
    updateOrgSecurityPolicy(
        "Input required for updating organization security policy."
        input: UpdateOrgSecurityPolicyInput!
    ): Void
    "Update whether the user has signed the EULA."
    updatePactsafeEulaAccepted(
        "Input required to sign the EULA."
        input: UpdatePactsafeEulaAcceptedInput!
    ): UpdatePactsafeEulaAcceptedReply!
    "Update whether the user has seen the EULA."
    updatePactsafeEulaSeen: UpdatePactsafeEulaSeenReply!
    "Update the configuration of a report."
    updatePolarisReport(
        "Input configuration of updating a report."
        input: UpdatePolarisReportInput!
    ): Void
    "Update a classification policy."
    updatePolicy(input: UpdatePolicyInput!): ClassificationPolicyDetail!
    "Update previewer cluster configuration."
    updatePreviewerClusterConfig(previewerClusterConfig: PreviewerClusterConfigInput!): Cluster!
    """

    Update proxy config

    Supported in v5.0+
    Update proxy config.
    """
    updateProxyConfig(
        "Input for InternalUpdateProxyConfig."
        input: UpdateProxyConfigInput!
    ): UpdateProxyConfigReply!
    "Update RCS automatic target mapping."
    updateRcsAutomaticTargetMapping(
        "Update RCS automatic target mapping."
        input: UpdateRcsAutomaticTargetMappingInput!
    ): TargetMapping!
    "Updates the Rubrik Cloud Vault archival location."
    updateRcvTarget(
        "Request for updating a new Rubrik Cloud Vault location."
        input: UpdateRcvTargetInput!
    ): Target!
    "Update Recovery Plan."
    updateRecoveryPlan(
        "Update Recovery Plan configuration."
        recoveryPlanConfig: UpdateRecoveryPlanInput!
    ): UpdateRecoveryPlanReply!
    "Update the setup information, address, username, and password for the replication target."
    updateReplicationTarget(
        "Request to update a replication target on the replication source."
        input: UpdateReplicationTargetInput!
    ): Void
    updateReport(
        reportConfig: ReportConfigInput!,
        "The report ID."
        reportID: Int!
    ): Boolean!
    "This endpoint is deprecated."
    updateRole(
        description: String!,
        name: String!,
        "Permissions in the role."
        permissions: [PermissionInput!]!,
        roleId: String!
    ): Boolean!
    updateRoleAssignments(
        "List of group IDs."
        groupIds: [String!],
        roleIds: [String!]!,
        "List of user IDs."
        userIds: [String!]
    ): Boolean!
    updateS3CompatibleTarget(
        "Request for updating an existing S3Compatible target."
        input: UpdateS3CompatibleTargetInput!
    ): Target!
    "Update a scheduled report."
    updateScheduledReport(input: UpdateScheduledReportInput!): UpdateScheduledReportReply!
    "Update the specified service account."
    updateServiceAccount(
        "Input for updating a service account."
        input: UpdateServiceAccountInput!
    ): UpdateServiceAccountReply!
    """

    Update a SnapMirror Cloud

    Supported in v7.0+
    Updates a SnapMirror Cloud with the specified properties.
    """
    updateSnapMirrorCloud(
        "Input for V1UpdateSnapMirrorCloud."
        input: UpdateSnapMirrorCloudInput!
    ): UpdateSnapMirrorCloudReply!
    """

    Update SNMP configuration

    Supported in v5.0+
    Update the SNMP configuration for a specified Rubrik cluster.
    """
    updateSnmpConfig(
        "Input for InternalUpdateSnmpConfig."
        input: UpdateSnmpConfigInput!
    ): UpdateSnmpConfigReply!
    "Update storage arrays in Rubrik clusters."
    updateStorageArrays(
        "List of storage arrays to update."
        input: UpdateStorageArraysInput!
    ): UpdateStorageArraysReply!
    "Update a support case."
    updateSupportCase(
        "Input for updating a support case."
        input: UpdateSupportCaseInput!
    ): UpdateSupportCaseReply!
    "Updates a Rubrik Support representative's access to the customer's account."
    updateSupportUserAccess(
        "Input for the request to update a Rubrik Support representative's access to customer account."
        input: UpdateSupportUserAccessInput!
    ): Void
    """

    Update the specified syslog export rule

    Supported in v5.1+
    Update the syslog export rule specified by the given id.
    """
    updateSyslogExportRule(
        "Input for V1UpdateSyslogExportRule."
        input: UpdateSyslogExportRuleInput!
    ): UpdateSyslogExportRuleReply!
    """

    Enable or disable the SSH Tunnel for Support Access

    Supported in v5.0+
    To be used by Admin to open or close a SSH tunnel for support. When enabling the support tunnel, the node 'id' must be *me* or the current node's 'id', because remote open is not supported. When disabling a support tunnel, the node 'id' can be that of any node in the cluster.
    """
    updateTunnelStatus(
        "Input for InternalUpdateTunnelStatus."
        input: UpdateTunnelStatusInput!
    ): UpdateTunnelStatusReply!
    "Update vCD instances in Rubrik clusters."
    updateVcdInstances(
        "List of vCD instances to update."
        input: UpdateVcdInstancesInput!
    ): UpdateVcdInstancesReply!
    "Update a VCD vApp in a Rubrik cluster."
    updateVcdVapp(
        "Input for V1UpdateVcdVappV1."
        input: UpdateVcdVappInput!
    ): Void
    """

    Update vCenter Server

    Supported in v5.0+
    Update the address, username and password of the specified vCenter Server object.
    """
    updateVcenter(
        "Input for V1UpdateVcenter."
        input: UpdateVcenterInput!
    ): UpdateVcenterReply!
    """

    Set the ingest and export bandwidth limits for HotAdd with the vCenter

    Supported in v5.3+
    Set the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
    """
    updateVcenterHotAddBandwidth(
        "Input for V1SetHotAddBandwidth."
        input: UpdateVcenterHotAddBandwidthInput!
    ): RequestSuccess!
    """

    Set the user-configured network for HotAdd backup and recovery

    Supported in v5.3+
    Set the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
    """
    updateVcenterHotAddNetwork(
        "Input for V1SetHotAddNetwork."
        input: UpdateVcenterHotAddNetworkInput!
    ): RequestSuccess!
    """

    Update Volume Group properties

    Supported in v5.3+
    Patch Volume Group with specified properties.
    """
    updateVolumeGroup(
        "Input for V1PatchVolumeGroup."
        input: UpdateVolumeGroupInput!
    ): UpdateVolumeGroupReply!
    """

    Update the multi-tag filter

    Supported in v7.0+
    Updates the name, condition, and description of the specified multi-tag filter.
    """
    updateVsphereAdvancedTag(
        "Input for V1UpdateFilter."
        input: UpdateVsphereAdvancedTagInput!
    ): UpdateVsphereAdvancedTagReply!
    """

    Update VM

    Supported in v5.0+
    Update a virtual machine with specified properties. Use the guestCredential field to update the guest credential for a specified virtual machine.
    """
    updateVsphereVm(
        "Input for V1UpdateVm."
        input: UpdateVsphereVmInput!
    ): RequestSuccess!
    "Update a webhook."
    updateWebhook(
        "The webhook configuration to update."
        input: UpdateWebhookInput!
    ): UpdateWebhookReply!
    "Update whitelisted analyzers for a path."
    updateWhitelistedAnalyzers(analyzerIds: [String!]!, runAsync: Boolean!, snappableFid: String!, snapshotFid: String!, stdPath: String!): String!
    "Updates status of AWS cloud account features to connected if they are in update permissions state. This mutation should be used with caution. It should be invoked only after the latest required permissions are granted to the AWS cloud account user used by Rubrik. This mutation does not verify if the required permissions are actually granted to the user or not. Its usage is restricted to only IAM user-based and authentication server-based AWS cloud accounts."
    upgradeAwsCloudAccountFeaturesWithoutCft(
        "Input to update status of AWS cloud account features to connected from update permissions state."
        input: UpgradeAwsCloudAccountFeaturesWithoutCftInput!
    ): Boolean!
    "Set IAM user-based AWS account features status to Connected from Update Permissions state. It should be used by caution from cloud accounts only after latest required permissions are granted to authorized IAM user."
    upgradeAwsIamUserBasedCloudAccountPermissions(
        "Input to set status of IAM user-based AWS cloud account to connected from update permissions state."
        input: UpgradeAwsIamUserBasedCloudAccountPermissionsInput!
    ): Boolean!
    "Update permissions of the Azure Subscriptions cloud account for given feature."
    upgradeAzureCloudAccount(
        "Input for upgrading an Azure Cloud Account."
        input: UpgradeAzureCloudAccountInput!
    ): UpgradeAzureCloudAccountReply!
    "Set Azure Cloud Account feature status to Connected from Update Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding the latest permissions that are required."
    upgradeAzureCloudAccountPermissionsWithoutOauth(
        "Input to set status of azure cloud account to connected from update permissions state without OAuth."
        input: UpgradeAzureCloudAccountPermissionsWithoutOauthInput!
    ): UpgradeAzureCloudAccountPermissionsWithoutOauthReply!
    "Set GCP Cloud Account feature status to Connected from Update Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding the latest permissions that are required."
    upgradeGcpCloudAccountPermissionsWithoutOauth(
        "Input to set status of GCP cloud account to connected from update permissions state without OAuth."
        input: UpgradeGcpCloudAccountPermissionsWithoutOauthInput!
    ): UpgradeGcpCloudAccountPermissionsWithoutOauthReply!
    """

    Upgrade the Rubrik ioFilter for the VMware cluster with a specific ID

    Supported in v5.1+
    Upgrade the Rubrik ioFilter for a VMware cluster with a specific ID. The cluster must be in maintenance mode to upgrade the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
    """
    upgradeIoFilter(
        "Input for V1UpgradeIoFilter."
        input: UpgradeIoFilterInput!
    ): RequestSuccess!
    "Upgrade SLA Domains from the Rubrik clusters."
    upgradeSlas(
        "Upgrade SLA Domain Request."
        input: UpgradeSlasInput!
    ): UpgradeSlasReply!
    "Converts a GPS account to an RSC account."
    upgradeToRsc: Void
    "Start a job to upload a database snapshot to a target blobstore."
    uploadDatabaseSnapshotToBlobstore(
        "Input required to upload a database snapshot to a target blobstore."
        input: UploadDatabaseSnapshotToBlobstoreInput!
    ): AsyncJobStatus!
    vSphereVMBatchLiveMount(
        clusterUuid: UUID!,
        "Configuration object containing an array of virtual machine IDs, a way to indicate the snapshot to be chosen and mount configs."
        config: BatchMountSnapshotJobConfigInput!
    ): BatchAsyncRequestStatus!
    "Validate and create AWS cloud account. If validation fails, no error is returned and the cause is present in the \"message\" field of return object or within admin/child accounts of return object. In case validation succeeds, it initiates creation of AWS cloud account. This is the first step to set up native protection."
    validateAndCreateAwsCloudAccount(
        "Input to validate AWS cloud account arguments."
        input: ValidateAndCreateAwsCloudAccountInput!
    ): ValidateAndCreateAwsCloudAccountReply!
    "Validate KMS input provided on O365 subscription setup."
    validateAndSaveCustomerKmsInfo(
        "KMS details to be validated."
        input: ValidateAndSaveCustomerKmsInfoInput!
    ): ValidateAndSaveCustomerKmsInfoReply!
    "Validate the resource mapping, RBA status, cluster version of the given blueprint."
    validateBlueprint(
        "Blueprint validation config."
        input: ValidateBlueprintInput!
    ): ValidateBlueprintReply!
    "Validate the recovery specs with the given app blueprint snappable or snapshot fid."
    validateBlueprintRecoverySpec(
        "The Blueprint ID."
        blueprintId: UUID!,
        "Flag to represent if it should validate snapshot recovery spec"
        validateSnapshotRecoverySpec: Boolean
    ): ValidateBlueprintRecoverySpecReply!
    "Validate the resource mapping, RBA status, cluster version of all the given blueprints."
    validateBlueprints(
        "Multiple blueprint validation config."
        input: ValidateBlueprintsInput!
    ): ValidateBlueprintsReply!
    """

    Validate Oracle ACO file

    Supported in v6.0+
    Validate the provided Oracle ACO (Advanced Cloning Options) file.
    """
    validateOracleAcoFile(
        "Specifies input for ValidateOracleAcoFileRequest including the Oracle database ID."
        input: ValidateOracleAcoFileInput!
    ): ValidateOracleAcoFileReply!
    """

    Validate Oracle database backups

    Supported in v5.3+
    Queue a job to validate Oracle backups for a database snapshot or a specified timestamp.
    """
    validateOracleDatabaseBackups(
        "Input for V1CreateOracleValidateBackupJob."
        input: ValidateOracleDatabaseBackupsInput!
    ): AsyncRequestStatus!
    vmwareDownloadSnapshotFromLocation(
        "Input for V2VmwareDownloadSnapshotFromLocation."
        input: VmwareDownloadSnapshotFromLocationInput!
    ): AsyncRequestStatus!
    vpshereVMRecoveryPointMount(createDatastoreOnly: Boolean, datastoreName: String, disableNetwork: Boolean, hostID: String, keepMacAddresses: Boolean, powerOn: Boolean, recoveryPoint: String, removeNetworkDevices: Boolean, shouldRecoverTags: Boolean, snappableFid: UUID!, snapshotFid: UUID, unregsiterVm: Boolean, vlan: Int, vmName: String): VsphereAsyncRequestStatus!
    "Trigger a bulk on demand snapshot."
    vsphereBulkOnDemandSnapshot(
        "Input for V1BulkCreateOnDemandBackup."
        input: VsphereBulkOnDemandSnapshotInput!
    ): BatchAsyncRequestStatus!
    vsphereCreateVCenter(caCert: String, clusterUuid: UUID!, conflictResolutionAuthz: ConflictResolutionAuthzEnum!, hostname: String!, password: String!, username: String!): VsphereAsyncRequestStatus!
    """

    Remove vCenter Server

    Supported in v5.0+
    Initiates an asynchronous job to remove a vCenter Server object. The vCenter Server cannot have VMs mounted through the Rubrik cluster.
    """
    vsphereDeleteVcenter(
        "Input for V1DeleteVcenter."
        input: VsphereDeleteVcenterInput!
    ): AsyncRequestStatus!
    vsphereEditVCenter(caCert: String, conflictResolutionAuthz: ConflictResolutionAuthzEnum!, hostname: String!, password: String!, username: String!, vcenterId: UUID!): RequestSuccess!
    "Exclude or include virtual disks during snapshot."
    vsphereExcludeVmDisks(
        "Input to include/exclude disk for taking snapshot."
        input: [VsphereExcludeVmDisksInput!]!
    ): RequestSuccess!
    vsphereExportSnapshotToStandaloneHost(
        datastoreName: String!,
        disableNetwork: Boolean,
        hostIpAddress: String!,
        hostPassword: String!,
        hostUsername: String!,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!,
        vmName: String
    ): VsphereAsyncRequestStatus!
    "Export snapshot of a virtual machine to standalone ESXi server."
    vsphereExportSnapshotToStandaloneHostV2(
        "Input for InternalCreateStandaloneExport."
        input: VsphereExportSnapshotToStandaloneHostV2Input!
    ): AsyncRequestStatus!
    vsphereOnDemandSnapshot(
        "Input for V1CreateOnDemandBackup."
        input: VsphereOnDemandSnapshotInput!
    ): AsyncRequestStatus!
    vsphereRefreshVCenter(vcenterId: UUID!): VsphereAsyncRequestStatus!
    vsphereVMDeleteLiveMount(force: Boolean, livemountId: UUID!): VsphereAsyncRequestStatus!
    vsphereVMExportSnapshot(
        datastoreId: UUID!,
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!,
        unregsiterVm: Boolean,
        vmName: String
    ): VsphereAsyncRequestStatus!
    vsphereVMInitiateDiskMount(
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!,
        targetVmID: String,
        vlan: Int,
        vmdkIDs: [String!]!
    ): VsphereAsyncRequestStatus!
    vsphereVMInitiateInstantRecovery(
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        preserveMOID: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!,
        vlan: Int,
        vmName: String
    ): VsphereAsyncRequestStatus!
    vsphereVMInitiateLiveMount(
        createDatastoreOnly: Boolean,
        datastoreName: String,
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!,
        vlan: Int,
        vmName: String
    ): VsphereAsyncRequestStatus!
    "Retrieve a list of the datastores for a specified ESXi host"
    vsphereVMListESXiDatastores(clusterUuid: UUID!, ipAddress: String!, password: String!, username: String!): DatastoresListResponse!
    vsphereVMMountRelocate(datastoreId: UUID!, livemountId: UUID!): VsphereAsyncRequestStatus!
    vsphereVMUpdate(
        isArrayIntegrationEnabled: Boolean,
        postBackupScript: PostBackupScriptInputType,
        postSnapScript: PostSnapScriptInputType,
        preBackupScript: PreBackupScriptInputType,
        snappableFid: UUID!,
        "The snapshot consistency mandate of the workload."
        snapshotConsistencyMandate: String
    ): RequestSuccess!
    "Create a mass export for a group of virtual machines."
    vsphereVmBatchExport(
        "Input for V2BatchExport."
        input: VsphereVmBatchExportInput!
    ): BatchAsyncRequestStatus!
    "Supported in v6.0+. Export a snapshot each from a set of virtual machines."
    vsphereVmBatchInPlaceRecovery(
        "Input for V2BatchInPlaceRecover."
        input: VsphereVmBatchInPlaceRecoveryInput!
    ): BatchAsyncRequestStatus!
    "Designate a snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a virtual machine that is not assigned to an SLA Domain."
    vsphereVmDeleteSnapshot(
        "Input for V1DeleteVmwareSnapshot."
        input: VsphereVmDeleteSnapshotInput!
    ): Void
    """

    Download snapshot from archive

    Supported in v5.0+
    Provides a method for retrieving a snapshot, that is not available locally, from an archival location.
    """
    vsphereVmDownloadSnapshot(
        "Input for V1CreateDownloadSnapshotFromCloud."
        input: VsphereVmDownloadSnapshotInput!
    ): AsyncRequestStatus!
    "Download files from snapshot."
    vsphereVmDownloadSnapshotFiles(
        "Input for downloading vSphere snapshot files."
        input: VsphereVmDownloadSnapshotFilesInput!
    ): AsyncRequestStatus!
    "Create a vSphere Export from a snapshot or a point-in-time."
    vsphereVmExportSnapshotV2(
        "Input for V2CreateExportV2."
        input: VsphereVmExportSnapshotV2Input!
    ): AsyncRequestStatus!
    "Create a vSphere Export from a snapshot or a point-in-time with datastore cluster and virtual disk mapping support."
    vsphereVmExportSnapshotV3(
        "Input for V3CreateExportV3."
        input: VsphereVmExportSnapshotV3Input!
    ): AsyncRequestStatus!
    """

    Download a snapshot from an archival location, then export a virtual machine using the downloaded snapshot

    Supported in v5.3+
    Download a snapshot from an archival location and then export a virtual machine using the downloaded snapshot.
    """
    vsphereVmExportSnapshotWithDownloadFromCloud(
        "Input for V2CreateExportWithDownloadFromCloudV2."
        input: VsphereVmExportSnapshotWithDownloadFromCloudInput!
    ): AsyncRequestStatus!
    "Initiate a mass instant recovery for a group of VMs."
    vsphereVmInitiateBatchInstantRecovery(
        "Input for V2BatchInstantRecover."
        input: VsphereVmInitiateBatchInstantRecoveryInput!
    ): BatchAsyncRequestStatus!
    "Initiate a mass live mount for a group of VMs."
    vsphereVmInitiateBatchLiveMountV2(
        "Input for V2BatchMountSnapshotV2."
        input: VsphereVmInitiateBatchLiveMountV2Input!
    ): BatchAsyncRequestStatus!
    """

    Attaching disks from a snapshot to an existing virtual machine

    Supported in v5.0+
    Requests a snapshot mount to attach disks to an existing virtual machine.
    """
    vsphereVmInitiateDiskMount(
        "Input for InternalCreateMountDiskJob."
        input: VsphereVmInitiateDiskMountInput!
    ): AsyncRequestStatus!
    "Trigger an in-place recovery from a snapshot or point-in-time."
    vsphereVmInitiateInPlaceRecovery(
        "Input for V2CreateInPlaceRecoveryV2."
        input: VsphereVmInitiateInPlaceRecoveryInput!
    ): AsyncRequestStatus!
    "Instantly recover a vSphere virtual machine from a snapshot or point-in-time."
    vsphereVmInitiateInstantRecoveryV2(
        "Input for V2CreateInstantRecoveryV2."
        input: VsphereVmInitiateInstantRecoveryV2Input!
    ): AsyncRequestStatus!
    "Create a vSphere Live Mount from a snapshot or point-in-time."
    vsphereVmInitiateLiveMountV2(
        "Input for V2CreateMountV2."
        input: VsphereVmInitiateLiveMountV2Input!
    ): AsyncRequestStatus!
    """

    List ESXi datastores

    Supported in v5.0+
    Retrieve a list of the datastores for a specified ESXi host.
    """
    vsphereVmListEsxiDatastores(
        "Input for InternalGetEsxiDatastores."
        input: VsphereVmListEsxiDatastoresInput!
    ): VsphereVmListEsxiDatastoresReply!
    """

    Relocate a virtual machine to another datastore

    Supported in v5.0+
    Run storage VMotion to relocate a specified Live Mount into another data store.
    """
    vsphereVmMountRelocate(
        "Input for V1RelocateMount."
        input: VsphereVmMountRelocateInput!
    ): AsyncRequestStatus!
    "Create a Live Mount migration to a datastore or datastore cluster with virtual disk mapping support."
    vsphereVmMountRelocateV2(
        "Input for V2RelocateMountV2."
        input: VsphereVmMountRelocateV2Input!
    ): AsyncRequestStatus!
    """

    Power a Live Mount on and off

    Supported in v5.0+
    Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
    """
    vsphereVmPowerOnOffLiveMount(
        "Input for V1UpdateMount."
        input: VsphereVmPowerOnOffLiveMountInput!
    ): VsphereVmPowerOnOffLiveMountReply!
    "Restores multiple files/directories from snapshot."
    vsphereVmRecoverFiles(
        "Vsphere recover files input."
        input: VsphereVmRecoverFilesInput!
    ): VsphereAsyncRequestStatus!
    "Restores multiple files/directories from snapshot."
    vsphereVmRecoverFilesNew(
        "Vsphere recover files input."
        input: VsphereVmRecoverFilesNewInput!
    ): AsyncRequestStatus!
    """

    Register Rubrik Backup Service

    Supported in v5.0+
    Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
    """
    vsphereVmRegisterAgent(
        "Input for V1VmRegisterAgent."
        input: VsphereVmRegisterAgentInput!
    ): RequestSuccess!
    "Warm cache for search in cloud native snappables"
    warmCloudNativeIndexCache(
        "Workload ID."
        workloadId: UUID!
    ): Boolean!
    "Warms the search cache for an O365 workload."
    warmSearchCache(
        "The input for warm search cache for an O365 workload."
        input: WarmSearchCacheInput!
    ): Boolean!
}

"Supported in v5.0+"
type NasBaseConfig {
    """

    Supported in v5.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v5.0+
    API endpoint to access NAS API 'FLASHBLADE'.
    """
    apiEndpoint: String
    """

    Supported in v5.0+
    Hostname or IP used in the NAS API calls.
    """
    apiHostname: String
    """

    Supported in v5.0+
    v5.0-v5.3: username to access NAS API
    v6.0+: Username to access NAS API.
    """
    apiUsername: String
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isIsilonChangelistEnabled: Boolean
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isNetAppSnapDiffEnabled: Boolean
    """

    Supported in v6.0+
    Indicates whether CFT (Change File Tracking) is enabled on the Nutanix NAS share. When this value is 'true', metadata fetches during backup operations use the Nutanix CFT feature. The CFT feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time  during a backup job.
    """
    isNutanixCftEnabled: Boolean
    """

    Supported in v5.3+
    Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
    """
    isShareAutoDiscoveryEnabled: Boolean
    """

    Supported in v5.1
    If snapdiff is enabled on NetApp NAS host
    """
    isSnapdiffEnabled: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'
    v6.0+: Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
    """
    vendorType: String!
    """

    Supported in v5.0+
    Name of the Isilon zone that data IP belongs to.
    """
    zoneName: String
}

"NAS Fileset protected object."
type NasFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & NasNamespaceDescendantType & NasShareDescendantType & NasShareLogicalChildType & NasSystemDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The CDM-assigned UUID of the NAS fileset."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Whether optimized backup of hardlinks is supported on this fileset."
    hardlinkSupportEnabled: Boolean!
    "The object's FID."
    id: UUID!
    "Whether this is a NAS Direct Archive fileset."
    isPassThrough: Boolean!
    "Whether this object is a relic."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The NAS share to which this fileset belongs."
    nasShare: NasShare
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "The exceptions to the fileset's exclusion rules."
    pathsExceptions: [String!]!
    "The paths to be excluded from the fileset's inclusion rules."
    pathsExcluded: [String!]!
    "The paths to include in the backup of the fileset."
    pathsIncluded: [String!]!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Whether resolution of symlinks is supported on this fileset."
    symlinkResolutionEnabled: Boolean!
    "The associated fileset template's FID."
    templateFid: UUID!
}

"NAS namespace instance associated with registered NAS system."
type NasNamespace implements CdmHierarchyObject & HierarchyObject & NasSystemDescendantType & NasSystemLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasNamespaceDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasNamespaceLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of NasNamespace objects."
type NasNamespaceConnection {
    "Total number of NasNamespace objects matching the request arguments."
    count: Int!
    "List of NasNamespace objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasNamespaceEdge!]!
    "List of NasNamespace objects."
    nodes: [NasNamespace!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of NasNamespaceDescendantType objects."
type NasNamespaceDescendantTypeConnection {
    "Total number of NasNamespaceDescendantType objects matching the request arguments."
    count: Int!
    "List of NasNamespaceDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasNamespaceDescendantTypeEdge!]!
    "List of NasNamespaceDescendantType objects."
    nodes: [NasNamespaceDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasNamespaceDescendantType object. This wrapper is used for pagination."
type NasNamespaceDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasNamespaceDescendantType object wrapped by this edge."
    node: NasNamespaceDescendantType!
}

"Wrapper around the NasNamespace object. This wrapper is used for pagination."
type NasNamespaceEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasNamespace object wrapped by this edge."
    node: NasNamespace!
}

"Paginated list of NasNamespaceLogicalChildType objects."
type NasNamespaceLogicalChildTypeConnection {
    "Total number of NasNamespaceLogicalChildType objects matching the request arguments."
    count: Int!
    "List of NasNamespaceLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasNamespaceLogicalChildTypeEdge!]!
    "List of NasNamespaceLogicalChildType objects."
    nodes: [NasNamespaceLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasNamespaceLogicalChildType object. This wrapper is used for pagination."
type NasNamespaceLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasNamespaceLogicalChildType object wrapped by this edge."
    node: NasNamespaceLogicalChildType!
}

"NAS share instance of a registered NAS system."
type NasShare implements CdmHierarchyObject & HierarchyObject & NasNamespaceDescendantType & NasNamespaceLogicalChildType & NasSystemDescendantType & NasSystemLogicalChildType & NasVolumeDescendantType & NasVolumeLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The source of the NAS Share: CDM or NAS-DA."
    connectedThrough: ConnectedThroughEnumType!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasShareDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "NFS/SMB export path for the NAS share."
    exportPoint: String!
    "Host address of the NAS Share."
    hostAddress: String!
    "The host ID needed to restore to this share."
    hostIdForRestore: String!
    "Object ID."
    id: UUID!
    "Specifies whether the Changelist option is enabled."
    isChangelistEnabled: Boolean!
    "Specifies if the share is hidden."
    isHidden: Boolean!
    "Specifies whether this object is a relic."
    isRelic: Boolean!
    "Specifies if the share is deleted on the NAS System."
    isStale: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasShareLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The NAS System to which this NAS Share belongs."
    nasSystem: NasSystem!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "NAS Share Protection Fileset."
    primaryFileset: NasFileset
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "File sharing protocol (NFS or SMB)."
    shareType: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of NasShareDescendantType objects."
type NasShareDescendantTypeConnection {
    "Total number of NasShareDescendantType objects matching the request arguments."
    count: Int!
    "List of NasShareDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasShareDescendantTypeEdge!]!
    "List of NasShareDescendantType objects."
    nodes: [NasShareDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasShareDescendantType object. This wrapper is used for pagination."
type NasShareDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasShareDescendantType object wrapped by this edge."
    node: NasShareDescendantType!
}

"Paginated list of NasShareLogicalChildType objects."
type NasShareLogicalChildTypeConnection {
    "Total number of NasShareLogicalChildType objects matching the request arguments."
    count: Int!
    "List of NasShareLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasShareLogicalChildTypeEdge!]!
    "List of NasShareLogicalChildType objects."
    nodes: [NasShareLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasShareLogicalChildType object. This wrapper is used for pagination."
type NasShareLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasShareLogicalChildType object wrapped by this edge."
    node: NasShareLogicalChildType!
}

"Instance of a registered NAS system."
type NasSystem implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasSystemDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Specifies whether the Changelist option is enabled."
    isChangelistEnabled: Boolean!
    "Specifies whether NFS is supported by the NAS System."
    isNfsSupported: Boolean!
    "Specifies whether this object is a relic."
    isRelic: Boolean!
    "Specifies whether SMB is supported by the NAS System."
    isSmbSupported: Boolean!
    "UTC timestamp of the most recent NAS system refresh job instance."
    lastRefreshTime: DateTime
    "Specifies the connectivity status of the NAS System."
    lastStatus: NasSystemConnectivityStatus!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasSystemLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The total number of namespaces in this NAS system."
    namespaceCount: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "OS version of the registered NAS system."
    osVersion: String
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The total number of shares in this NAS system."
    shareCount: Int!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Vendor type of the registered NAS system."
    vendorType: String!
    "The total number of volumes in this NAS system."
    volumeCount: Int!
}

"Paginated list of NasSystem objects."
type NasSystemConnection {
    "Total number of NasSystem objects matching the request arguments."
    count: Int!
    "List of NasSystem objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasSystemEdge!]!
    "List of NasSystem objects."
    nodes: [NasSystem!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of NasSystemDescendantType objects."
type NasSystemDescendantTypeConnection {
    "Total number of NasSystemDescendantType objects matching the request arguments."
    count: Int!
    "List of NasSystemDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasSystemDescendantTypeEdge!]!
    "List of NasSystemDescendantType objects."
    nodes: [NasSystemDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasSystemDescendantType object. This wrapper is used for pagination."
type NasSystemDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasSystemDescendantType object wrapped by this edge."
    node: NasSystemDescendantType!
}

"Wrapper around the NasSystem object. This wrapper is used for pagination."
type NasSystemEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasSystem object wrapped by this edge."
    node: NasSystem!
}

"Paginated list of NasSystemLogicalChildType objects."
type NasSystemLogicalChildTypeConnection {
    "Total number of NasSystemLogicalChildType objects matching the request arguments."
    count: Int!
    "List of NasSystemLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasSystemLogicalChildTypeEdge!]!
    "List of NasSystemLogicalChildType objects."
    nodes: [NasSystemLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasSystemLogicalChildType object. This wrapper is used for pagination."
type NasSystemLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasSystemLogicalChildType object wrapped by this edge."
    node: NasSystemLogicalChildType!
}

"NAS volume instance in a registered NAS system."
type NasVolume implements CdmHierarchyObject & HierarchyObject & NasNamespaceDescendantType & NasNamespaceLogicalChildType & NasSystemDescendantType & NasSystemLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasVolumeDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Whether or not the NAS Volume is read-only."
    isReadonly: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NasVolumeLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The NAS Namespace to which this NAS Volume belongs (if any)."
    nasNamespace: NasNamespace
    "The NAS System to which this NAS Volume belongs."
    nasSystem: NasSystem!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The size of the volume in bytes."
    sizeInBytes: Long!
    "The size that has been used of the volume in bytes."
    sizeUsedInBytes: Long!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "Labels that can be applied to a newly created SnapMirror Cloud."
    snapMirrorLabels: [String!]!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of NasVolumeDescendantType objects."
type NasVolumeDescendantTypeConnection {
    "Total number of NasVolumeDescendantType objects matching the request arguments."
    count: Int!
    "List of NasVolumeDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasVolumeDescendantTypeEdge!]!
    "List of NasVolumeDescendantType objects."
    nodes: [NasVolumeDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasVolumeDescendantType object. This wrapper is used for pagination."
type NasVolumeDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasVolumeDescendantType object wrapped by this edge."
    node: NasVolumeDescendantType!
}

"Paginated list of NasVolumeLogicalChildType objects."
type NasVolumeLogicalChildTypeConnection {
    "Total number of NasVolumeLogicalChildType objects matching the request arguments."
    count: Int!
    "List of NasVolumeLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NasVolumeLogicalChildTypeEdge!]!
    "List of NasVolumeLogicalChildType objects."
    nodes: [NasVolumeLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NasVolumeLogicalChildType object. This wrapper is used for pagination."
type NasVolumeLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NasVolumeLogicalChildType object wrapped by this edge."
    node: NasVolumeLogicalChildType!
}

"Represents a GCP native network host project."
type NetworkHostProject {
    "Name of the GCP project."
    name: String!
    "GCP native ID."
    nativeId: String!
    "GCP project ID."
    projectId: String!
}

"Supported in v5.3+"
type NetworkInfo {
    """

    Required. Supported in v5.3+
    The ID of a user-configured vCenter network.
    """
    id: String!
    """

    Required. Supported in v5.3+
    The name of a user-configured vCenter network.
    """
    name: String!
}

"Supported in v5.3+"
type NetworkInfoListResponse {
    """

    Supported in v5.3+
    List of matching objects.
    """
    data: [NetworkInfo!]!
    """

    Supported in v5.3+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.3+
    Total list responses.
    """
    total: Int
}

"Supported in v5.0+"
type NetworkInterface {
    """

    Required. Supported in v5.0+
    Interface name.
    """
    interfaceName: String!
    interfaceType: NetworkInterfaceType!
    """

    Required. Supported in v5.0+
    Including both primary Ips and floating Ips.
    """
    ipAddresses: [String!]!
    """

    Required. Supported in v5.0+
    Netmask for addresses on this interface.
    """
    netmask: String!
    """

    Supported in v5.0-v5.3
    Node id
    """
    node: String
    """

    Supported in v6.0+
    Node id.
    """
    nodeId: String
    """

    Supported in v6.0+
    Hostname of the node.
    """
    nodeName: String
}

"Supported in v5.0+"
type NetworkInterfaceListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [NetworkInterface!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Network rules for Azure storage account."
type NetworkRuleSet {
    "Default Action for any request coming for any IP for the Azure storage account."
    defaultAction: DefaultActionType!
    "IP rules for a specific set of IPs."
    ipRules: [IpRule!]!
}

"Replication network throttle information."
type NetworkThrottle {
    "Active network throttle limit."
    currentThrottleLimit: Float!
    "Default network throttle limit."
    defaultThrottleLimit: Float!
    "Status of network throttle enablement."
    isEnabled: Boolean!
    "Network interface name."
    networkInterface: String!
    "Summary of scheduled throttles."
    scheduledThrottles: [NetworkThrottleSchedule!]!
}

"Summary of scheduled throttle."
type NetworkThrottleSchedule {
    "Days of the week on which to apply a scheduled network throttle."
    daysOfWeek: [DayOfWeek!]!
    "Denotes the end time. The end time should be an hour of the day."
    endHour: Int!
    "Denotes the start time. The start time should be an hour of the day."
    startHour: Int!
    "Network bandwidth throttle limit for a resource, in Mbps."
    throttleLimit: Float!
}

"Supported in v5.0+"
type NetworkThrottleScheduleSummary {
    """

    Required. Supported in v5.0+
    Array of int32 values that represent the days of the week on which to apply a scheduled network throttle. The days of the week are represented from 1-7 with Sunday as 1.
    """
    daysOfWeek: [Int!]!
    """

    Required. Supported in v5.0+
    An int64 value that represents the end time for a scheduled network throttle. The end time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    endTime: Long!
    """

    Required. Supported in v5.0+
    An int64 value that represents the start time for a scheduled network throttle. The start time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    startTime: Long!
    """

    Required. Supported in v5.0+
    Network bandwidth throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    throttleLimit: Float!
}

"A recurrence range without an end (e.g. repeat the pattern forever starting from 7/29/2019)."
type NoEndRecurrenceRange {
    "The starting date of the recurrence."
    startDate: DateTime!
}

"Supported in v5.0+"
type NodeIp {
    """

    Required. Supported in v5.0+
    IP of the node.
    """
    ip: String!
    """

    Required. Supported in v5.0+
    Node this interface is configured on.
    """
    node: String!
}

"Supported in v6.0+"
type NodePolicyCheckResult {
    "Required. Supported in v6.0+"
    checkResults: [PolicyCheckResult!]!
    "Required. Supported in v6.0+"
    nodeId: String!
}

"Supported in v5.0+"
type NodeStatus {
    "Required. Supported in v5.0+"
    brikId: String!
    "Supported in v5.1+"
    hasUnavailableDisks: Boolean
    """

    Supported in v6.0+
    Hostname of the node.
    """
    hostname: String
    "Required. Supported in v5.0+"
    id: String!
    "Supported in v5.0+"
    ipAddress: String
    "Required. Supported in v5.0+"
    status: String!
    "Supported in v5.0+"
    supportTunnel: SupportTunnelInfo
}

"Supported in v5.0+"
type NodeStatusListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [NodeStatus!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

" Warning details for an SLA Domain with archival retention that is not compatible with the minimum required retention for the selected tier."
type NonCompliantArchivalRetentionForTierWarningDetails implements SlaArchivalWarningsDetails {
    "Minimum archival retention expected for the tier."
    minArchivalRetentionDaysExpected: Int!
    "Minimum archival retention found for the tier."
    minArchivalRetentionDaysFound: Int!
    "Severity of the warning."
    severity: WarningSeverityEnum!
    "Tier specifies hot, cool, or archive tier for archival location."
    tier: String!
}

"Warning details for an SLA Domain with a non-compliant archival retention value."
type NonCompliantArchivalRetentionWarningsDetails implements SpecificArchivalLocationWarningDetails {
    "Archival retention configured in SLA Domain for archival location."
    archivalRetentionInDaysProvided: Int!
    "Frequency configured in the SLA Domain for this archival location."
    frequencyType: RetentionUnit!
    "Archival location ID."
    id: UUID!
    "Maximum archival retention expected in SLA Domain for archival location."
    maxArchivalRetentionInDaysExpected: Int!
    "Minimum archival retention expected in SLA Domain for archival location."
    minArchivalRetentionInDaysExpected: Int!
    "Archival location name."
    name: String!
}

"Warning details for SLA Domain having a common archival retention range across all immutable archival locations."
type NonCompliantArchivalRetentionWithCommonRangeWarningsDetails implements SlaArchivalWarningsDetails {
    "Maximum archival retention expected across all archival locations, in days."
    maxArchivalRetentionInDaysExpected: Int!
    "Minimum archival retention expected across all archival locations, in days."
    minArchivalRetentionInDaysExpected: Int!
    "Severity of the warning."
    severity: WarningSeverityEnum!
}

"Warning details for SLA Domain not having a common archival retention range across all immutable archival locations."
type NonCompliantArchivalRetentionWithoutCommonRangeWarningsDetails implements SlaArchivalWarningsDetails {
    "List of all archival warnings."
    allWarnings: [ArchivalLocationWarningsDetails!]!
    "Severity of the warning."
    severity: WarningSeverityEnum!
}

"Warning details for an SLA Domain with tiers that are not compatible with each other."
type NonCompliantArchivalTierSpecificWarningsDetails implements SpecificArchivalLocationWarningDetails {
    "Archival location ID."
    id: UUID!
    "Archival location name."
    name: String!
    "Tier specifies hot, cool, or archive tier for archival location."
    tier: String!
}

"Warning details for an SLA Domain with tiers that are not compatible with each other."
type NonCompliantArchivalTierWarningDetails implements SlaArchivalWarningsDetails {
    "List of all archival warnings."
    allWarnings: [ArchivalLocationWarningsDetails!]!
    "Severity of the warning."
    severity: WarningSeverityEnum!
}

"Supported in v5.0+"
type NtpServerConfiguration {
    """

    Required. Supported in v5.0+
    Name or IP address of the NTP server.
    """
    server: String!
    "Supported in v5.0+"
    symmetricKey: NtpSymmKeyConfiguration
}

"Supported in v5.0+"
type NtpServerConfigurationListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [NtpServerConfiguration!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type NtpSymmKeyConfiguration {
    """

    Required. Supported in v5.0+
    Symmetric key (asci or hex format).
    """
    key: String!
    """

    Required. Supported in v5.0+
    Symmetric key id.
    """
    keyId: Int!
    """

    Required. Supported in v5.0+
    Symmetric key type (e.g., MD5, SHA1).
    """
    keyType: String!
}

"A recurrence range with a number of occurrences (e.g. repeat the pattern 10 times starting from 7/29/2019)."
type NumberedRecurrenceRange {
    "The number of occurrences."
    numberOfOccurrences: Int!
    "The starting date of the recurrence."
    startDate: DateTime!
}

"Supported in v7.0+"
type NutanixAsyncRequestFailureSummary {
    """

    Required. Supported in v7.0+
    Information about why the request failed.
    """
    error: String!
    """

    Required. Supported in v7.0+
    ID of the Nutanix virtual machine.
    """
    vmId: String!
}

"Supported in v7.0+"
type NutanixAsyncRequestSuccessSummary {
    """

    Required. Supported in v7.0+
    Information for tracking the status of asynchronous requests.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    ID of the Nutanix virtual machine.
    """
    vmId: String!
}

"Backup script configuration."
type NutanixBackupScript {
    "Failure handling instruction."
    failureHandling: NutanixBackupScriptFailureHandling!
    "Path of the script."
    scriptPath: String
    "Script timeout."
    timeoutMs: Long!
}

"Supported in v7.0+"
type NutanixBatchAsyncApiResponse {
    """

    Required. Supported in v7.0+
    Array of objects containing information about failed requests.
    """
    failedRequests: [NutanixAsyncRequestFailureSummary!]!
    """

    Required. Supported in v7.0+
    Array of objects containing information about successful asynchronous requests.
    """
    successfulRequests: [NutanixAsyncRequestSuccessSummary!]!
}

"Nutanix cluster details."
type NutanixCluster implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the Nutanix virtual machine."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Connection status of the Nutanix Cluster. If the CDM cluster is disconnected, then the status is set to 'Disconnected'."
    connectionStatus: RefreshableObjectConnectionStatus!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NutanixClusterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "IP address of Nutanix cluster."
    hostName: String!
    "Object ID."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): NutanixClusterLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Natural ID of Nutanix cluster."
    naturalId: String!
    "Nutanix cluster version."
    nosVersion: String
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Username."
    userName: String!
}

"Paginated list of NutanixCluster objects."
type NutanixClusterConnection {
    "Total number of NutanixCluster objects matching the request arguments."
    count: Int!
    "List of NutanixCluster objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NutanixClusterEdge!]!
    "List of NutanixCluster objects."
    nodes: [NutanixCluster!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of NutanixClusterDescendantType objects."
type NutanixClusterDescendantTypeConnection {
    "Total number of NutanixClusterDescendantType objects matching the request arguments."
    count: Int!
    "List of NutanixClusterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NutanixClusterDescendantTypeEdge!]!
    "List of NutanixClusterDescendantType objects."
    nodes: [NutanixClusterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NutanixClusterDescendantType object. This wrapper is used for pagination."
type NutanixClusterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NutanixClusterDescendantType object wrapped by this edge."
    node: NutanixClusterDescendantType!
}

"Wrapper around the NutanixCluster object. This wrapper is used for pagination."
type NutanixClusterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NutanixCluster object wrapped by this edge."
    node: NutanixCluster!
}

"Paginated list of NutanixClusterLogicalChildType objects."
type NutanixClusterLogicalChildTypeConnection {
    "Total number of NutanixClusterLogicalChildType objects matching the request arguments."
    count: Int!
    "List of NutanixClusterLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NutanixClusterLogicalChildTypeEdge!]!
    "List of NutanixClusterLogicalChildType objects."
    nodes: [NutanixClusterLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NutanixClusterLogicalChildType object. This wrapper is used for pagination."
type NutanixClusterLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NutanixClusterLogicalChildType object wrapped by this edge."
    node: NutanixClusterLogicalChildType!
}

"Supported in v5.0+"
type NutanixClusterSummary {
    """

    Supported in v5.0+
    Connection status of a Nutanix Cluster.
    """
    connectionStatus: RefreshableObjectConnectionStatus
    "Required. Supported in v5.0+"
    hostname: String!
    "Required. Supported in v5.0+"
    naturalId: String!
    """

    Supported in v5.3+
    Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    slaAssignable: SlaAssignable
    "Required. Supported in v5.0+"
    username: String!
}

"Supported in v5.0+"
type NutanixContainer {
    """

    Required. Supported in v5.0+
    Name of the Nutanix container.
    """
    name: String!
    """

    Required. Supported in v5.0+
    Natural ID of the Nutanix container.
    """
    naturalId: String!
}

"Supported in v5.0+"
type NutanixContainerListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [NutanixContainer!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Nutanix virtual machine live mount."
type NutanixLiveMount {
    "CDM ID of the live mount."
    cdmId: String!
    "Cluster of the live mount."
    cluster: Cluster!
    "Fid of the live mount."
    id: UUID!
    "Specifies if the mounted virtual machine does not have migration enabled."
    isMigrationDisabled: Boolean!
    "Describes if the live mount is ready."
    isVmReady: Boolean!
    "Migration job instance ID. This is applicable only if the mounted virtual machine is being migrated."
    migrationJobInstanceId: String
    "Status of the migration job. This is applicable only if the mounted virtual machine is being migrated."
    migrationJobStatus: String
    "Mount job instance ID."
    mountJobInstanceId: String!
    "Specification of the live mount in JSON string."
    mountSpec: String!
    "Time when the virtual machine was mounted. This may be set to null if the mount specification does not contain this information."
    mountedDate: DateTime
    "ID of the mounted virtual machine. This may be set to null if the mount specification does not contain this information."
    mountedVmFid: String
    "CDM ID of the mounted virtual machine. This may be set to null if the mount specification does not contain this information."
    mountedVmId: String
    "Name of the live mount."
    name: String!
    "ID of the Nutanix cluster."
    nutanixClusterFid: String!
    "CDM ID of the Nutanix cluster."
    nutanixClusterId: String!
    "Name of the Nutanix cluster."
    nutanixClusterName: String!
    "Organization ID of the live mount."
    organizationId: String!
    "Owner ID of the live mount."
    ownerId: String!
    "Power Status of the Virtual Machine. It is set to 'ON' or 'OFF'. If the CDM cluster is disconnected, then it is set to  'Unknown'."
    powerStatus: String!
    "Time when the snapshot was taken. This may be set to null if the mount specification does not contain this information."
    snapshotDate: DateTime
    "Rubrik CDM ID of the snapshot used for the Live Mount."
    snapshotId: String!
    "Source snapshot of the Live Mount."
    sourceSnapshot: CdmSnapshot!
    "ID of the source virtual machine."
    sourceVmFid: String!
    "CDM ID of the source virtual machine."
    sourceVmId: String!
    "Name of the source virtual machine."
    sourceVmName: String!
    "Nutanix storage container where the mounted virtual machine will be migrated. This is applicable only if migration is not enabled on the virtual machine."
    storageContainerName: String
    "Unmount job instance ID."
    unmountJobInstanceId: String!
}

"Paginated list of NutanixLiveMount objects."
type NutanixLiveMountConnection {
    "Total number of NutanixLiveMount objects matching the request arguments."
    count: Int!
    "List of NutanixLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NutanixLiveMountEdge!]!
    "List of NutanixLiveMount objects."
    nodes: [NutanixLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the NutanixLiveMount object. This wrapper is used for pagination."
type NutanixLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NutanixLiveMount object wrapped by this edge."
    node: NutanixLiveMount!
}

type NutanixNetwork {
    "Required. Name of the Nutanix network."
    name: String!
    "Required. Natural ID of the Nutanix network."
    naturalId: String!
}

type NutanixNetworkListResponse {
    "List of matching objects."
    data: [NutanixNetwork!]!
    "If there is more."
    hasMore: Boolean
    "Total list responses."
    total: Int
}

"Nutanix virtual machine details."
type NutanixVm implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & NutanixClusterDescendantType & NutanixClusterLogicalChildType {
    "Nutanix virtual machine agent status."
    agentStatus: NutanixVmAgentStatus!
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the Nutanix virtual machine."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "ID of the AHV host where virtual machine is located. This field will be set to null if not provided by Nutanix."
    currentHostId: String
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "List of IDs of the excluded disks."
    excludedDisks: [String!]!
    "Hypervisor type, such as AHV. This field will be set to null if not provided by Nutanix."
    hypervisorType: String
    "Object ID."
    id: UUID!
    "Specifies if the agent is registered."
    isAgentRegistered: Boolean!
    "Specifies whether this Nutanix virtual machine is currently present on the Nutanix cluster."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "Nutanix snapshot consistency level."
    nutanixSnapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate!
    "Total number of Live Mounts on Nutanix virtual machine."
    nutanixVmMountCount: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Guest operating system type of the virtual machine. This field will be set to null if not provided by Nutanix."
    osType: GuestOsType
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Post backup script configuration."
    postBackupScript: NutanixBackupScript!
    "Post snapshot script configuration."
    postSnapScript: NutanixBackupScript!
    "Pre backup script configuration."
    preBackupScript: NutanixBackupScript!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Statistics for Nutanix virtual machine (For example, capacity)."
    reportSnappable: Snappable
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "Deprecated, use nutanixSnapshotConsistencyMandate instead."
    snapshotConsistencyMandate: NutanixSnapshotConsistencyMandate!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "List of virtual disks."
    vmDisks: [NutanixVmDisk!]!
    "Virtual machine ID."
    vmUuid: UUID!
}

"Nutanix virtual machine agent status."
type NutanixVmAgentStatus {
    "Connection status of the agent."
    connectionStatus: NutanixVmAgentConnectionStatus!
    "Disconnect reason."
    disconnectReason: String
}

"Paginated list of NutanixVm objects."
type NutanixVmConnection {
    "Total number of NutanixVm objects matching the request arguments."
    count: Int!
    "List of NutanixVm objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [NutanixVmEdge!]!
    "List of NutanixVm objects."
    nodes: [NutanixVm!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Nutanix Virtual Machine disk details."
type NutanixVmDisk {
    "Type of the virtal disk."
    deviceType: String!
    "Indicates if the disk can be snapshotted."
    isSnapshottable: Boolean!
    "Disk label."
    label: String!
    "Disk size in Bytes."
    sizeInBytes: Long!
    "Disk UUID."
    uuid: String!
    "Nutanix internal UUID of the disk."
    vmDiskUuid: String!
}

"Wrapper around the NutanixVm object. This wrapper is used for pagination."
type NutanixVmEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual NutanixVm object wrapped by this edge."
    node: NutanixVm!
}

"Supported in v6.0+"
type NutanixVmMountSummary {
    """

    Required. Supported in v6.0+
    ID of the Live Mount.
    """
    id: String!
    """

    Required. Supported in v6.0+
    Specifies whether the Live Mount is ready.
    """
    isReady: Boolean!
    """

    Supported in v7.0+
    The status of the migration job for the mounted virtual machine. Valid values are 'REQUESTED', 'RUNNING', 'SUCCEEDED', and 'FAILED'. An unspecified value indicates that no migration job has been initiated for the mounted virtual machine.
    """
    migrationStatus: String
    """

    Supported in v6.0+
    ID of the request which initiated the Live Mount.
    """
    mountRequestId: String
    """

    Supported in v6.0+
    Timestamp at which the Live Mount was created.
    """
    mountedDate: DateTime
    """

    Supported in v6.0+
    ID of the mounted virtual machine.
    """
    mountedVmId: String
    """

    Supported in v6.0+
    IP address of the mounted virtual machine.
    """
    mountedVmIpAddress: String
    """

    Supported in v6.0+
    Name of the mounted virtual machine.
    """
    mountedVmName: String
    """

    Supported in v6.0+
    The power status of the mounted virtual machine.
    """
    powerStatus: String
    """

    Required. Supported in v6.0+
    Timestamp of the Nutanix virtual machine snapshot on which the Live Mount is based.
    """
    snapshotDate: DateTime
    """

    Supported in v6.0+
    ID of the Nutanix storage container which contains the mounted virtual disks.
    """
    storageContainerName: String
    """

    Required. Supported in v6.0+
    ID of the Nutanix cluster to which the mounted virtual machine belongs.
    """
    targetNutanixClusterId: String!
    """

    Supported in v6.0+
    Name of the Nutanix cluster to which the mounted virtual machine belongs.
    """
    targetNutanixClusterName: String
    """

    Supported in v6.0+
    ID of the request to delete the Live Mount.
    """
    unmountRequestId: String
    """

    Required. Supported in v6.0+
    ID of the source virtual machine of the Live Mount.
    """
    vmId: String!
    """

    Supported in v6.0+
    Name of the source virtual machine of the Live Mount.
    """
    vmName: String
}

"Supported in v5.0+"
type NutanixVmSnapshotDetail {
    "This field contains the virtual machine name and number of nics present in the snapshot along with base snapshot summary."
    nutanixVmSnapshotSummary: NutanixVmSnapshotSummary
}

"Supported in v5.0+"
type NutanixVmSnapshotSummary {
    "This field contains the base information of a snapshot which are common across other workloads."
    baseSnapshotSummary: BaseSnapshotSummary
    "Number of NICs present in the snapshot app metadata."
    nicsInSnapshot: Int
    "Required. Supported in v5.0+"
    vmName: String!
}

type O365App implements O365AppObject {
    "The added time of the O365 app."
    addedAt: DateTime!
    "The authentication status of the app against the subscription."
    appAuthStatus: AppAuthStatus!
    "The ID of the O365 app."
    appId: String!
    "The owner of the O365 app (RUBRIK or CUSTOMER)."
    appOwner: String!
    "The type of the O365 app (e.g. ONEDRIVE)."
    appType: String!
    "The authentication status of the app against the subscription [To be deprecated]."
    isAuthenticated: Boolean!
    "The subscription to which the O365 app is associated."
    subscription: String!
    "The ID of the O365 subscription."
    subscriptionId: String!
}

"Paginated list of O365App objects."
type O365AppConnection {
    "Total number of O365App objects matching the request arguments."
    count: Int!
    "List of O365App objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365AppEdge!]!
    "List of O365App objects."
    nodes: [O365App!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365App object. This wrapper is used for pagination."
type O365AppEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365App object wrapped by this edge."
    node: O365App!
}

type O365Calendar implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"An O365 calendar event object."
type O365CalendarEvent implements O365ExchangeObject {
    attendees: [String!]!
    endDateTime: DateTime
    eventType: CalendarEventType!
    id: String!
    name: String
    organizer: String
    parentFolderId: String
    "The recurrence of the event (if part of a series)."
    recurrence: O365CalendarEventRecurrence
    snapshotId: UUID
    "The snapshot time of this version of the event."
    snapshotTime: DateTime
    startDateTime: DateTime
    versionStartSnapshotId: UUID
}

"The recurrence pattern of an O365 calendar event."
type O365CalendarEventRecurrence {
    "The absolute monthly recurrence pattern (e.g. 21st of every 3 months)."
    absoluteMonthlyRecurrence: AbsoluteMonthlyRecurrencePattern
    "The absolute yearly recurrence pattern (e.g. 25th of December)."
    absoluteYearlyRecurrence: AbsoluteYearlyRecurrencePattern
    "The daily recurrence pattern (e.g. Every 3 days)."
    dailyRecurrence: DailyRecurrencePattern
    "A recurrence range with an end date."
    endDateRecurrenceRange: EndDateRecurrenceRange
    "A recurrence range with no end date."
    noEndRecurrenceRange: NoEndRecurrenceRange
    "A recurrence range with a specified number of occurrences."
    numberedRecurrenceRange: NumberedRecurrenceRange
    "The relative monthly recurrence pattern (e.g. Second Thursday or Friday of every other month)."
    relativeMonthlyRecurrence: RelativeMonthlyRecurrencePattern
    "The relative yearly recurrence pattern (e.g. First Tuesday of November)."
    relativeYearlyRecurrence: RelativeYearlyRecurrencePattern
    "The weekly recurrence pattern (e.g. Every other Monday)."
    weeklyRecurrence: WeeklyRecurrencePattern
}

type O365CalendarFolder implements O365ExchangeObject {
    id: String!
    "Indicates if this folder represents a Calendar Group."
    isCalendarGroup: Boolean!
    name: String
    parentFolderId: String
    snapshotId: UUID
    "The snapshot time of this version of the event."
    snapshotTime: DateTime
}

"An object that meets the specification of a configured group."
type O365ConfiguredGroupMember {
    "The display name of the configured group member."
    displayName: String!
    "The ID of the configured group member."
    id: UUID!
    "The type of the configured group member."
    objectType: O365ConfiguredGroupMemberType!
    "The preferred data location of the configured group member."
    pdl: String!
    "The URL of the configured group member, if any."
    url: String!
}

"Paginated list of O365ConfiguredGroupMember objects."
type O365ConfiguredGroupMemberConnection {
    "Total number of O365ConfiguredGroupMember objects matching the request arguments."
    count: Int!
    "List of O365ConfiguredGroupMember objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365ConfiguredGroupMemberEdge!]!
    "List of O365ConfiguredGroupMember objects."
    nodes: [O365ConfiguredGroupMember!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365ConfiguredGroupMember object. This wrapper is used for pagination."
type O365ConfiguredGroupMemberEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365ConfiguredGroupMember object wrapped by this edge."
    node: O365ConfiguredGroupMember!
}

"Specifications for a Microsoft 365 configured group."
type O365ConfiguredGroupSpec {
    "The preferred data locations for the group."
    pdls: [String!]!
    "The wildcard pattern for the group."
    wildcard: String!
}

"An O365 contact object."
type O365Contact implements O365ExchangeObject {
    "Addresses associated with this contact."
    addresses: [String!]!
    "The company at which this contact works."
    company: String
    "Email addresses associated with this contact."
    emailAddresses: [String!]!
    "The ID of the contact."
    id: String!
    "The name for this contact."
    name: String
    "The parent folder ID of the contact."
    parentFolderId: String
    "Phone numbers associated with this contact."
    phoneNumbers: [String!]!
    "The snapshot ID of this version of the contact."
    snapshotId: UUID
    "The snapshot number of this version of the contact."
    snapshotNum: Int
    "The snapshot time of this version of the contact."
    snapshotTime: DateTime
}

"An O365 contact folder."
type O365ContactFolder implements O365ExchangeObject {
    "The ID of the contact folder."
    id: String!
    "The display name for this contact folder."
    name: String
    "The parent folder ID of the contact folder."
    parentFolderId: String
    "The snapshot ID of this version of the contact folder."
    snapshotId: UUID
    "The snapshot number of this version of the contact folder."
    snapshotNum: Int
    "The snapshot time of this version of the contact folder."
    snapshotTime: DateTime
}

type O365Email implements O365ExchangeObject {
    from: String
    id: String!
    parentFolderId: String
    receivedDateTime: DateTime
    sentDateTime: DateTime
    snapshotId: UUID
    snapshotNum: Int
    subject: String
    toRecipients: [String!]!
}

"Paginated list of O365ExchangeObject objects."
type O365ExchangeObjectConnection {
    "Total number of O365ExchangeObject objects matching the request arguments."
    count: Int!
    "List of O365ExchangeObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365ExchangeObjectEdge!]!
    "List of O365ExchangeObject objects."
    nodes: [O365ExchangeObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365ExchangeObject object. This wrapper is used for pagination."
type O365ExchangeObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365ExchangeObject object wrapped by this edge."
    node: O365ExchangeObject!
}

type O365Folder implements O365ExchangeObject {
    id: String!
    name: String
    parentFolderId: String
    snapshotId: UUID
    snapshotNum: Int
}

"An O365 SharePoint descendant object."
type O365FullSpDescendant implements O365FullSpObject {
    "The create time of this SharePoint descendant object."
    createTime: DateTime
    "The fid of the SharePoint descendant object."
    fid: String!
    "The modified time of this SharePoint descendant object."
    modifiedTime: DateTime
    "The name of the SharePoint descendant object."
    name: String
    "The SharePoint descendant object type."
    objectType: SharePointDescendantType!
    "The parent id of the SharePoint descendant object."
    parentId: String
    "The ID of the sharepoint descendant object."
    sharepointId: String!
    "The snapshot ID of this SharePoint descendant object."
    snapshotId: UUID
    "The snapshot number of this SharePoint descendant object."
    snapshotNum: Int
}

"Paginated list of O365FullSpObject objects."
type O365FullSpObjectConnection {
    "Total number of O365FullSpObject objects matching the request arguments."
    count: Int!
    "List of O365FullSpObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365FullSpObjectEdge!]!
    "List of O365FullSpObject objects."
    nodes: [O365FullSpObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365FullSpObject object. This wrapper is used for pagination."
type O365FullSpObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365FullSpObject object wrapped by this edge."
    node: O365FullSpObject!
}

"O365 Groups from O365 hierarchy."
type O365Group implements HierarchyObject & O365OrgDescendant & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The specification for a configured group."
    configuredGroupSpec: String! @deprecated(reason: "Use configuredGroupSpecification instead.")
    "The specification for a configured group."
    configuredGroupSpecification: O365ConfiguredGroupSpec!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "True, if the group is deleted in AD."
    deletedInAzure: Boolean!
    "Display name of the group."
    displayName: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Rubrik internal UUID for group."
    groupID: String!
    "The type of group."
    groupType: O365GroupType!
    "Group ID of o365 group object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Natural ID of the group."
    naturalID: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Number of user that are member of group."
    userCount: Long!
}

"Paginated list of O365Group objects."
type O365GroupConnection {
    "Total number of O365Group objects matching the request arguments."
    count: Int!
    "List of O365Group objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365GroupEdge!]!
    "List of O365Group objects."
    nodes: [O365Group!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365Group object. This wrapper is used for pagination."
type O365GroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365Group object wrapped by this edge."
    node: O365Group!
}

"The O365 license."
type O365License {
    "The license detail of O365 account."
    licenseDetails: O365LicenseDetails
}

"The O365 license detail."
type O365LicenseDetails {
    "The host type of the azure subscription."
    allowedHost: AzureHostType!
    "The allowed m365 user license count."
    allowedO365UserCount: Int!
    "The license status."
    disableLicense: Boolean!
    "The M365 cloud type."
    m365Cloud: M365Cloud!
}

type O365Mailbox implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & O365UserDescendantMetadata & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The preferred data location of the mailbox."
    preferredDataLocation: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    userPrincipalName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of O365Mailbox objects."
type O365MailboxConnection {
    "Total number of O365Mailbox objects matching the request arguments."
    count: Int!
    "List of O365Mailbox objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365MailboxEdge!]!
    "List of O365Mailbox objects."
    nodes: [O365Mailbox!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365Mailbox object. This wrapper is used for pagination."
type O365MailboxEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365Mailbox object wrapped by this edge."
    node: O365Mailbox!
}

type O365OauthConsentCompleteReply {
    appId: String!
    encryptedRefreshToken: String!
}

type O365OauthConsentKickoffReply {
    appClientId: String!
    csrfToken: String!
    tenantId: String!
}

type O365Onedrive implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & O365UserDescendantMetadata & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The preferred data location of the OneDrive."
    preferredDataLocation: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    totalStorageInBytes: Long!
    usedStorageInBytes: Long!
    userID: String!
    userName: String!
    userPrincipalName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of O365Onedrive objects."
type O365OnedriveConnection {
    "Total number of O365Onedrive objects matching the request arguments."
    count: Int!
    "List of O365Onedrive objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365OnedriveEdge!]!
    "List of O365Onedrive objects."
    nodes: [O365Onedrive!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365Onedrive object. This wrapper is used for pagination."
type O365OnedriveEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365Onedrive object wrapped by this edge."
    node: O365Onedrive!
}

type O365OnedriveFile implements O365OnedriveObject {
    "The folder name of the Teams channel containing this folder."
    channelFolderName: String
    "The ID of the Teams channel containing this folder."
    channelId: String
    "The membership type of the channel containing this file for Teams files."
    channelMembershipType: ChannelMembershipType
    "The name of the Teams channel containing this folder."
    channelName: String
    "The time the file was created."
    createTime: DateTime
    fileType: String
    "The ID of the file."
    id: String!
    "The time the file was modified."
    modifiedTime: DateTime
    "The name of the file."
    name: String
    "The object type of this file, for example, Onedrive or SharePoint drive."
    objectType: SharePointDescendantType
    "The ID of the parent folder."
    parentFolderId: String
    "The size of the file."
    size: Long
    "The ID of the snapshot containing this file."
    snapshotId: UUID
    "The sequence number of the snapshot containing this file."
    snapshotNum: Int
    "The time at which the snapshot containing this file was taken."
    snapshotTime: DateTime
}

type O365OnedriveFolder implements O365OnedriveObject {
    "The folder name of the Teams channel containing this folder."
    channelFolderName: String
    "The ID of the Teams channel containing this folder."
    channelId: String
    "The membership type of the Teams channel."
    channelMembershipType: ChannelMembershipType
    "The name of the Teams channel containing this folder."
    channelName: String
    "The time the folder was created."
    createTime: DateTime
    "The ID of the folder."
    id: String!
    "The count of items in the folder."
    itemCount: Int
    "The time the folder was modified."
    modifiedTime: DateTime
    "The name of the folder."
    name: String
    "The object type of this folder, for example, Onedrive or SharePoint drive."
    objectType: SharePointDescendantType
    "The ID of the parent folder."
    parentFolderId: String
    size: Long
    "The ID of the snapshot containing this folder."
    snapshotId: UUID
    "The sequence number of the snapshot containing this folder."
    snapshotNum: Int
    "The time at which the snapshot containing this folder was taken."
    snapshotTime: DateTime
}

"Paginated list of O365OnedriveObject objects."
type O365OnedriveObjectConnection {
    "Total number of O365OnedriveObject objects matching the request arguments."
    count: Int!
    "List of O365OnedriveObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365OnedriveObjectEdge!]!
    "List of O365OnedriveObject objects."
    nodes: [O365OnedriveObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365OnedriveObject object. This wrapper is used for pagination."
type O365OnedriveObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365OnedriveObject object wrapped by this edge."
    node: O365OnedriveObject!
}

type O365Org implements HierarchyObject & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "List of direct children of O365Org."
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365UserConnection!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    exocomputeId: String!
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Compliance count for Exchange."
    past1DayMailboxComplianceCount: Int!
    "Out of compliance count for SharePoint site collections."
    past1DayMailboxOutOfComplianceCount: Int!
    "Compliance count for Onedrives."
    past1DayOnedriveComplianceCount: Int!
    "Out of compliance count for Onedrives."
    past1DayOnedriveOutOfComplianceCount: Int!
    "Compliance count for SharePoint document libraries."
    past1DaySharepointComplianceCount: Int!
    "Out of compliance count for SharePoint document libraries."
    past1DaySharepointOutOfComplianceCount: Int!
    "Compliance count for SharePoint Lists."
    past1DaySpListComplianceCount: Int!
    "Out of compliance count for SharePoint Lists."
    past1DaySpListOutOfComplianceCount: Int!
    "Compliance count for SharePoint site collections."
    past1DaySpSiteCollectionComplianceCount: Int!
    "Out of compliance count for SharePoint site collections."
    past1DaySpSiteCollectionOutOfComplianceCount: Int!
    "Compliance count for Teams."
    past1DayTeamsComplianceCount: Int!
    "Out of compliance count for Teams."
    past1DayTeamsOutOfComplianceCount: Int!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "List of all descendants of O365Org."
    searchDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365OrgDescendantConnection!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    status: OrgStatus!
    "Number of O365 Users with no SLA assigned."
    unprotectedUsersCount: Int!
}

"Paginated list of O365Org objects."
type O365OrgConnection {
    "Total number of O365Org objects matching the request arguments."
    count: Int!
    "List of O365Org objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365OrgEdge!]!
    "List of O365Org objects."
    nodes: [O365Org!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of O365OrgDescendant objects."
type O365OrgDescendantConnection {
    "Total number of O365OrgDescendant objects matching the request arguments."
    count: Int!
    "List of O365OrgDescendant objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365OrgDescendantEdge!]!
    "List of O365OrgDescendant objects."
    nodes: [O365OrgDescendant!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365OrgDescendant object. This wrapper is used for pagination."
type O365OrgDescendantEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365OrgDescendant object wrapped by this edge."
    node: O365OrgDescendant!
}

"Wrapper around the O365Org object. This wrapper is used for pagination."
type O365OrgEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365Org object wrapped by this edge."
    node: O365Org!
}

"The O365 subscription status and ID info."
type O365OrgInfo {
    "Exchange colossus status."
    exchangeOnColossus: Boolean!
    "Polaris ID of O365 subscription."
    orgId: String!
    "Mailboxes compliant."
    past1DayMailboxComplianceCount: Int!
    "Mailboxes not compliant."
    past1DayMailboxOutOfComplianceCount: Int!
    "Onedrives compliant."
    past1DayOnedriveComplianceCount: Int!
    "Onedrives not compliant."
    past1DayOnedriveOutOfComplianceCount: Int!
    "Sharepoints compliant."
    past1DaySharepointComplianceCount: Int!
    "Sharepoints not compliant."
    past1DaySharepointOutOfComplianceCount: Int!
    "Sharepoint Lists compliant."
    past1DaySpListComplianceCount: Int!
    "Sharepoint Lists not compliant."
    past1DaySpListOutOfComplianceCount: Int!
    "Teams compliant."
    past1DayTeamsComplianceCount: Int!
    "Teams not compliant."
    past1DayTeamsOutOfComplianceCount: Int!
    "Provision status of O365 subscription."
    status: ProvisionStatus!
}

type O365PhysicalDataSizeTimeStamp {
    physicalDataSizeInBytes: Long!
    timestamp: DateTime
}

"O365 SaaS setup kickoff response."
type O365SaasSetupKickoffReply {
    appClientIdsPerType: [AppIdForType!]!
    csrfToken: String!
}

type O365ServiceAccountStatusResp {
    status: O365ServiceAccountStatus!
    username: String!
}

"O365 setup kickoff response."
type O365SetupKickoffResp {
    appClientId: String!
    appClientIdsPerType: [AppIdForType!]!
    csrfToken: String!
}

type O365SharepointDrive implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    isRelic: Boolean!
    listNaturalId: String!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    objectId: String!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The preferred data location of the SharePoint drive."
    preferredDataLocation: String!
    "The child ID of the object used for full SharePoint."
    siteChildId: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    title: String!
    totalStorageInBytes: Long!
    url: String!
    usedStorageInBytes: Long!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of O365SharepointDrive objects."
type O365SharepointDriveConnection {
    "Total number of O365SharepointDrive objects matching the request arguments."
    count: Int!
    "List of O365SharepointDrive objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365SharepointDriveEdge!]!
    "List of O365SharepointDrive objects."
    nodes: [O365SharepointDrive!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365SharepointDrive object. This wrapper is used for pagination."
type O365SharepointDriveEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365SharepointDrive object wrapped by this edge."
    node: O365SharepointDrive!
}

type O365SharepointList implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The ID of the O365 SharePoint list object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    objectId: String!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The preferred data location of the SharePoint list."
    preferredDataLocation: String!
    "The child ID of the object used for full SharePoint."
    siteChildId: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    title: String!
    url: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of O365SharepointList objects."
type O365SharepointListConnection {
    "Total number of O365SharepointList objects matching the request arguments."
    count: Int!
    "List of O365SharepointList objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365SharepointListEdge!]!
    "List of O365SharepointList objects."
    nodes: [O365SharepointList!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365SharepointList object. This wrapper is used for pagination."
type O365SharepointListEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365SharepointList object wrapped by this edge."
    node: O365SharepointList!
}

"Paginated list of O365SharepointObject objects."
type O365SharepointObjectConnection {
    "Total number of O365SharepointObject objects matching the request arguments."
    count: Int!
    "List of O365SharepointObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365SharepointObjectEdge!]!
    "List of O365SharepointObject objects."
    nodes: [O365SharepointObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365SharepointObject object. This wrapper is used for pagination."
type O365SharepointObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365SharepointObject object wrapped by this edge."
    node: O365SharepointObject!
}

type O365Site implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The objects excluded from protection for full SharePoint."
    excludedObjects: FullSpSiteExclusions
    hierarchyLevel: Int!
    "Object ID."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    objectId: String!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The preferred data location of the SharePoint site."
    preferredDataLocation: String!
    "The child ID of the object used for full SharePoint."
    siteChildId: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    title: String!
    url: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

"Paginated list of O365Site objects."
type O365SiteConnection {
    "Total number of O365Site objects matching the request arguments."
    count: Int!
    "List of O365Site objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365SiteEdge!]!
    "List of O365Site objects."
    nodes: [O365Site!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365Site object. This wrapper is used for pagination."
type O365SiteEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365Site object wrapped by this edge."
    node: O365Site!
}

"Browse or search delta response returns Microsoft Office 365 file or folder data."
type O365SnapshotItemInfo {
    "The ID of the Microsoft Office 365 OneDrive object."
    id: UUID!
    "The parent folder ID of the object (ROOT indicates root folder)."
    parentFolderId: UUID
    "The ID of the snapshot."
    snapshotId: UUID
    "The sequence number of the snapshot."
    snapshotNum: Int
}

"Represents the number of service types for a subscription."
type O365SubscriptionAppTypeCounts {
    "The number of Exchange apps in this subscription based on their authentication status."
    exchangeAppCounts: AuthCounts!
    "The number of OneDrive apps in this subscription based on their authentication status."
    onedriveAppCounts: AuthCounts!
    "The number of SharePoint apps in this subscription based on their authentication status."
    sharepointAppCounts: AuthCounts!
    "The ID of the O365 subscription."
    subscriptionId: UUID!
    "The number of Teams apps in this subscription based on their authentication status."
    teamsAppCounts: AuthCounts!
}

type O365TeamChildSnapshotIds {
    mailboxSnapshotId: String
    spDriveSnapshotId: String
}

type O365TeamConvChannel {
    folderId: String!
    "The membership type of the channel."
    membershipType: ChannelMembershipType!
    name: String!
    naturalId: String!
}

"Paginated list of O365TeamConvChannel objects."
type O365TeamConvChannelConnection {
    "Total number of O365TeamConvChannel objects matching the request arguments."
    count: Int!
    "List of O365TeamConvChannel objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365TeamConvChannelEdge!]!
    "List of O365TeamConvChannel objects."
    nodes: [O365TeamConvChannel!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365TeamConvChannel object. This wrapper is used for pagination."
type O365TeamConvChannelEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365TeamConvChannel object wrapped by this edge."
    node: O365TeamConvChannel!
}

type O365TeamConversationsSender {
    displayName: String!
    naturalId: String!
}

"Paginated list of O365TeamConversationsSender objects."
type O365TeamConversationsSenderConnection {
    "Total number of O365TeamConversationsSender objects matching the request arguments."
    count: Int!
    "List of O365TeamConversationsSender objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365TeamConversationsSenderEdge!]!
    "List of O365TeamConversationsSender objects."
    nodes: [O365TeamConversationsSender!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365TeamConversationsSender object. This wrapper is used for pagination."
type O365TeamConversationsSenderEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365TeamConversationsSender object wrapped by this edge."
    node: O365TeamConversationsSender!
}

type O365Teams implements HierarchyObject & HierarchySnappable & O365OrgDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    membersCount: Int!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "The newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: PolarisSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: PolarisSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    orgID: String!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The preferred data location of the team."
    preferredDataLocation: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter Rubrik Security Cloud snapshot connection."
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this workload's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter Rubrik Security Cloud snapshot connection."
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "Group Rubrik Security Cloud snapshots by field."
        snapshotGroupBy: SnapshotGroupByTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    teamName: String!
    "The list of snapshots taken for this workload."
    workloadSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection
}

type O365TeamsChannel implements O365TeamsChannelObject {
    folderId: String
    folderName: String
    id: String
    "The membership type of the channel."
    membershipType: ChannelMembershipType
    name: String
    naturalId: String
}

"Paginated list of O365TeamsChannel objects."
type O365TeamsChannelConnection {
    "Total number of O365TeamsChannel objects matching the request arguments."
    count: Int!
    "List of O365TeamsChannel objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365TeamsChannelEdge!]!
    "List of O365TeamsChannel objects."
    nodes: [O365TeamsChannel!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365TeamsChannel object. This wrapper is used for pagination."
type O365TeamsChannelEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365TeamsChannel object wrapped by this edge."
    node: O365TeamsChannel!
}

"Paginated list of O365Teams objects."
type O365TeamsConnection {
    "Total number of O365Teams objects matching the request arguments."
    count: Int!
    "List of O365Teams objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365TeamsEdge!]!
    "List of O365Teams objects."
    nodes: [O365Teams!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

type O365TeamsConversations {
    channelId: String!
    channelName: String
    channelPostCount: Int!
}

"Paginated list of O365TeamsConversations objects."
type O365TeamsConversationsConnection {
    "Total number of O365TeamsConversations objects matching the request arguments."
    count: Int!
    "List of O365TeamsConversations objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365TeamsConversationsEdge!]!
    "List of O365TeamsConversations objects."
    nodes: [O365TeamsConversations!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365TeamsConversations object. This wrapper is used for pagination."
type O365TeamsConversationsEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365TeamsConversations object wrapped by this edge."
    node: O365TeamsConversations!
}

"Wrapper around the O365Teams object. This wrapper is used for pagination."
type O365TeamsEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365Teams object wrapped by this edge."
    node: O365Teams!
}

type O365User implements HierarchyObject & O365OrgDescendant & PolarisHierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "List of direct children of O365User."
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365UserDescendantConnection!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    emailAddress: String
    "The FID of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of O365User objects."
type O365UserConnection {
    "Total number of O365User objects matching the request arguments."
    count: Int!
    "List of O365User objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365UserEdge!]!
    "List of O365User objects."
    nodes: [O365User!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of O365UserDescendant objects."
type O365UserDescendantConnection {
    "Total number of O365UserDescendant objects matching the request arguments."
    count: Int!
    "List of O365UserDescendant objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365UserDescendantEdge!]!
    "List of O365UserDescendant objects."
    nodes: [O365UserDescendant!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365UserDescendant object. This wrapper is used for pagination."
type O365UserDescendantEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365UserDescendant object wrapped by this edge."
    node: O365UserDescendant!
}

"Paginated list of O365UserDescendantMetadata objects."
type O365UserDescendantMetadataConnection {
    "Total number of O365UserDescendantMetadata objects matching the request arguments."
    count: Int!
    "List of O365UserDescendantMetadata objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [O365UserDescendantMetadataEdge!]!
    "List of O365UserDescendantMetadata objects."
    nodes: [O365UserDescendantMetadata!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the O365UserDescendantMetadata object. This wrapper is used for pagination."
type O365UserDescendantMetadataEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365UserDescendantMetadata object wrapped by this edge."
    node: O365UserDescendantMetadata!
}

"Wrapper around the O365User object. This wrapper is used for pagination."
type O365UserEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual O365User object wrapped by this edge."
    node: O365User!
}

"Supported in v6.0+"
type ObjectIdToSnapshotIds {
    """

    Required. Supported in v6.0+
    Object ID.
    """
    id: String!
    """

    Required. Supported in v6.0+
    Snapshot IDs.
    """
    snapshots: [String!]!
}

type ObjectIdsForHierarchyType {
    objectIds: [String!]!
    snappableType: WorkloadLevelHierarchy!
}

"Object-specific configurations."
type ObjectSpecificConfigs {
    "SLA Domain configuration for AWS RDS object."
    awsRdsConfig: AwsRdsConfig
    "SLA Domain configuration for Azure SQL Database DB object."
    azureSqlDatabaseDbConfig: AzureSqlDatabaseDbConfig
    "SLA Domain configuration for Azure SQL Managed Instance DB object."
    azureSqlManagedInstanceDbConfig: AzureSqlManagedInstanceDbConfig
    "SLA Domain configuration for Db2 database object."
    db2Config: Db2Config
    "SLA Domain configuration for SQL Server database object."
    mssqlConfig: MssqlConfig
    "SLA Domain configuration for Oracle database object."
    oracleConfig: OracleConfig
    "SLA Domain configuration for SAP HANA object."
    sapHanaConfig: SapHanaConfig
    "SLA Domain configuration for VMware virtual machine object."
    vmwareVmConfig: VmwareVmConfig
}

type ObjectStatus {
    id: String!
    latestSnapshotResult: SnapshotResult
    policyStatuses: [PolicyStatus!]!
}

type ObjectSummary {
    id: String!
    isArchived: Boolean!
    mailAddress: String!
    name: String!
    objectType: ManagedObjectType!
}

type ObjectType {
    enumValue: ObjectTypeEnum!
}

"Represents option group in AWS."
type OptionGroup {
    "Amazon Resource Name (ARN) of the option group."
    arn: String!
    "Option group engine."
    engine: String!
    "Major version of the option group engine."
    majorEngineVersion: String!
    "Name of the option group."
    name: String!
    "Virtual Private Cloud (VPC) corresponding to the option group."
    vpcId: String!
}

"Supported in v6.0+"
type OracleAcoParameterDetail {
    """

    Required. Supported in v6.0+
    Name of the Advanced Cloning Options (ACO) parameter.
    """
    parameter: String!
    """

    Required. Supported in v6.0+
    Value for the Advanced Cloning Options (ACO) parameter.
    """
    value: String!
}

"Supported in v6.0+"
type OracleAcoParameterList {
    """

    Required. Supported in v6.0+
    An array that contains the supported Advanced Cloning Options (ACO) parameters.
    """
    parameters: [String!]!
}

"Supported in v6.0+"
type OracleAcoValueErrorDetail {
    """

    Required. Supported in v6.0+
    Validation error message for the provided value.
    """
    error: String!
    """

    Required. Supported in v6.0+
    Name of the Advanced Cloning Options (ACO) parameter.
    """
    parameter: String!
}

"The SLA Domain configuration for Oracle database."
type OracleConfig {
    "Frequency value for log backups of Oracle databases."
    frequency: Duration
    "Specifies the duration for which the archived redo logs will be retained."
    hostLogRetention: Duration
    "Specifies the duration for which the logs will be retained."
    logRetention: Duration
}

type OracleDataGuardGroup implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & OracleTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the Oracle Data Guard Group."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Data Guard group ID of the Oracle Data Guard Group."
    dataGuardGroupId: String
    "The Data Guard type of the Oracle Data Guard Group."
    dataGuardType: DataGuardType!
    "The role of the Oracle Data Guard Group."
    dbRole: String!
    "The DB unique name of the Oracle Data Guard Group."
    dbUniqueName: String!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): OracleDataGuardGroupDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Whether the Oracle Data Guard Group is a relic in CDM."
    isRelic: Boolean!
    "The last validation result of the Oracle Data Guard Group."
    lastValidationResult: OracleDatabaseLastValidationStatus
    "Latest User note information."
    latestUserNote: LatestUserNote
    "The log backup frequency of the Oracle Data Guard Group."
    logBackupFrequency: Int!
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): OracleDataGuardGroupLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of RMAN channels used for backup and  restore of the Oracle Data Guard Group."
    numChannels: Long!
    "The number of instances of the Oracle Data Guard Group."
    numInstances: Int!
    "The number of log snapshots taken of the Oracle Data Guard Group."
    numLogSnapshots: Int!
    "The number of tablespaces contained in the Oracle Data Guard Group."
    numTablespaces: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "The Pluggable Databases of an Oracle Data Guard Group."
    pdbs: [OraclePdb!]!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "An ordered sequence of Oracle Data Guard members' unique names to be chosen for backups. The list may be empty or contain a maximum of one name."
    preferredDataGuardMemberUniqueNames: [String!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Specifies the section size, in gigabytes, to be used during backups."
    sectionSizeInGigabytes: Int!
    "Specifies whether backup jobs should run on the primary member of the Oracle Data Guard Group only."
    shouldBackupFromPrimaryOnly: Boolean!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "The list of tablespaces in the Oracle Data Guard Group."
    tablespaces: [String!]!
}

"Paginated list of OracleDataGuardGroupDescendantType objects."
type OracleDataGuardGroupDescendantTypeConnection {
    "Total number of OracleDataGuardGroupDescendantType objects matching the request arguments."
    count: Int!
    "List of OracleDataGuardGroupDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleDataGuardGroupDescendantTypeEdge!]!
    "List of OracleDataGuardGroupDescendantType objects."
    nodes: [OracleDataGuardGroupDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleDataGuardGroupDescendantType object. This wrapper is used for pagination."
type OracleDataGuardGroupDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleDataGuardGroupDescendantType object wrapped by this edge."
    node: OracleDataGuardGroupDescendantType!
}

"Paginated list of OracleDataGuardGroupLogicalChildType objects."
type OracleDataGuardGroupLogicalChildTypeConnection {
    "Total number of OracleDataGuardGroupLogicalChildType objects matching the request arguments."
    count: Int!
    "List of OracleDataGuardGroupLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleDataGuardGroupLogicalChildTypeEdge!]!
    "List of OracleDataGuardGroupLogicalChildType objects."
    nodes: [OracleDataGuardGroupLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleDataGuardGroupLogicalChildType object. This wrapper is used for pagination."
type OracleDataGuardGroupLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleDataGuardGroupLogicalChildType object wrapped by this edge."
    node: OracleDataGuardGroupLogicalChildType!
}

type OracleDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & OracleDataGuardGroupDescendantType & OracleDataGuardGroupLogicalChildType & OracleHostDescendantType & OracleHostLogicalChildType & OracleRacDescendantType & OracleRacLogicalChildType & OracleTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "ARCHIVELOGMODE of the Oracle database."
    archiveLogMode: String!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the Oracle database."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Oracle Data Guard Group corresponding to the Oracle Data Guard member database."
    dataGuardGroup: OracleDataGuardGroup
    "The Data Guard type of the Oracle database."
    dataGuardType: DataGuardType!
    "The role of the Oracle database."
    dbRole: String!
    "The DB unique name of the Oracle database."
    dbUniqueName: String!
    "The directory paths of the Oracle database."
    directoryPaths: OracleDirectoryPaths
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies details of the Oracle database instances."
    instances: [OracleDatabaseInstance!]!
    "Specifies whether the Oracle database is live mounted."
    isLiveMount: Boolean!
    "Whether the Oracle database is a relic in CDM."
    isRelic: Boolean!
    "The last validation result of the Oracle database."
    lastValidationResult: OracleDatabaseLastValidationStatus
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of live mounts for an Oracle database."
    liveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for Oracle live mounts."
        filters: [OracleLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Oracle live mounts."
        sortBy: OracleLiveMountSortBy
    ): OracleLiveMountConnection!
    "The log backup frequency of the Oracle database."
    logBackupFrequency: Int!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of RMAN channels used for backup and restore of the Oracle database."
    numChannels: Long!
    "The number of instances of the Oracle database."
    numInstances: Int!
    "The number of log snapshots taken of the Oracle database."
    numLogSnapshots: Int!
    "The number of tablespaces contained in the Oracle database."
    numTablespaces: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "The Pluggable Databases of an Oracle database."
    pdbs: [OraclePdb!]!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Specifies the section size, in gigabytes, to be used during backups."
    sectionSizeInGigabytes: Int!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "The list of tablespaces in the Oracle database."
    tablespaces: [String!]!
}

"Paginated list of OracleDatabase objects."
type OracleDatabaseConnection {
    "Total number of OracleDatabase objects matching the request arguments."
    count: Int!
    "List of OracleDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleDatabaseEdge!]!
    "List of OracleDatabase objects."
    nodes: [OracleDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleDatabase object. This wrapper is used for pagination."
type OracleDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleDatabase object wrapped by this edge."
    node: OracleDatabase!
}

"An Oracle database instance."
type OracleDatabaseInstance {
    "Rubrik CDM UUID of the physical host."
    hostId: UUID!
    "System identifier (SID) of the Oracle database instance."
    instanceName: String!
}

"Oracle database last validation status."
type OracleDatabaseLastValidationStatus {
    "Event Id of the last database validation event."
    eventId: String!
    "Success boolean of the last database validation."
    isSuccess: Boolean!
    "Snapshot ID of the last database validation recovery point."
    snapshotId: String
    "Timestamp of the last database validation recovery point."
    timestampMs: DateTime
}

"Supported in v5.0+"
type OracleDbDetail {
    """

    Supported in v5.0-v5.3
    Oracle database unique name. (DB_UNIQUE_NAME)
    """
    dbUniqueName: String
    """

    Supported in v5.3+
    An array that contains the host info for each instance.
    """
    hostsInfo: [HostInfo!]!
    """

    Supported in v5.0+
    v5.0-v5.3: Boolean value that indicates whether a Oracle database object is a Live Mount. Value is true when the object is a Live Mount.
    v6.0+: Value that indicates whether an Oracle database object is a Live Mount or not. A true value indicates that the object is a Live Mount.
    """
    isLiveMount: Boolean
    """

    Supported in v5.3+
    General information about last validation job.
    """
    lastValidationResult: OracleLastValidationResult
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV50: String
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV51: String
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV52: String
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV53: String
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV60: DateTime
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV70: DateTime
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV80: DateTime
    "The time stamp of the most recent recovery point for this database."
    latestRecoveryPointV90: DateTime
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV50: String
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV51: String
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV52: String
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV53: String
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV60: DateTime
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV70: DateTime
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV80: DateTime
    "The time stamp of the earliest recovery point for this database."
    oldestRecoveryPointV90: DateTime
    oracleDbSummary: OracleDbSummary
    """

    Supported in v5.0+
    Oracle Home of the Oracle database.
    """
    oracleHome: String
    oracleNonSlaProperties: OracleNonSlaProperties
    """

    Supported in v8.0+
    Details about the PDBs that are part of the CDB.
    """
    pdbDetails: OraclePdbDetails
    """

    Supported in v5.3+
    Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    """

    Supported in v6.0+
    Ordered list of database unique names to use for backup in a Data Guard group.
    """
    preferredDgMemberUniqueNames: [String!]!
    "Supported in Rubrik CDM version 9.0 and later. Specifies the section size, in gigabytes, to be used during database backup."
    sectionSizeInGb: Int
    """

    Supported in v6.0+
    Indicates whether to backup only from the PRIMARY Data Guard member or from any available member.
    """
    shouldBackupFromPrimaryDgGroupMemberOnly: Boolean
    "Required. Supported in v5.0+"
    snapshotCount: Int!
    """

    Required. Supported in v5.0+
    An array that contains tablespace names of the specified Oracle database.
    """
    tablespaces: [String!]!
}

"Supported in v5.0+"
type OracleDbSnapshotSummary {
    baseSnapshotSummary: BaseSnapshotSummary
    "Required. Supported in v5.0+"
    databaseName: String!
    """

    Supported in v5.3+
    A Boolean that specifies whether the snapshot is valid.
    """
    isValid: Boolean
    """

    Required. Supported in v5.0+
    Array containing descriptions of the tablespaces that were captured in the specified snapshot.
    """
    tablespaces: [String!]!
}

"Supported in v5.0+"
type OracleDbSummary {
    """

    Supported in v5.2+
    v5.2-v5.3: An array that contains the archive log destinations of the specified Oracle database.
    v6.0+: An array that contains the archive log destinations for the specified Oracle database.
    """
    archiveLogDestinations: [String!]!
    """

    Supported in v5.1+
    Information about the current backup task.
    """
    currentBackupTaskInfo: BackupTaskDiagnosticInfo
    """

    Supported in v6.0+
    Rubrik ID of the Data Guard group to which this database belongs.
    """
    dataGuardGroupId: String
    """

    Supported in v6.0+
    List of Data Guard group members.
    """
    dataGuardGroupMembers: [DataGuardGroupMember!]!
    """

    Supported in v6.0+
    Name of the Data Guard group to which this database belongs.
    """
    dataGuardGroupName: String
    dataGuardType: CdmDataGuardType
    """

    Supported in v6.0+
    Current role of the database.
    """
    databaseRole: String
    """

    Supported in v6.0+
    Unique name for the Oracle database (DB_UNIQUE_NAME).
    """
    dbUniqueName: String
    """

    Supported in v7.0+
    Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
    """
    hasLogConfigFromSla: Boolean
    """

    Supported in v5.2+
    Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
    """
    hostLogRetentionHours: Int
    """

    Required. Supported in v5.0+
    ID assigned to the Oracle database.
    """
    id: String!
    """

    Supported in v5.1+
    True/false value indicating if backup task information is included in the response.
    """
    includeBackupTaskInfo: Boolean
    """

    Required. Supported in v5.0+
    An array that contains information about the objects in the infrastructure path of a specified Oracle database.
    """
    infraPath: [ManagedHierarchyObjectAncestor!]!
    """

    Supported in v5.0+
    Details of the instances of the Oracle database.
    """
    instances: [OracleInstanceProperties!]!
    """

    Supported in v5.0+
    v5.0-v5.3: Boolean value that indicates whether the ARCHIVELOGMODE is enabled on the Oracle database.
    v6.0+: Boolean value that indicates whether the ARCHIVELOG mode is enabled on the Oracle database or not.
    """
    isArchiveLogModeEnabled: Boolean
    """

    Supported in v5.1+
    A Boolean value that specifies whether the Oracle database is local to the cluster. When this value is 'true', the Oracle database is local to the cluster.
    """
    isDbLocalToTheCluster: Boolean
    """

    Supported in v5.2+
    Indicates whether the current DATABASE_ROLE is PRIMARY which specifies the database is accepting read/write transactions as the primary database in a Data Guard configuration.
    """
    isPrimary: Boolean
    """

    Required. Supported in v5.0+
    Boolean value that indicates whether a Oracle database object is in an archived state and has retained snapshots. Value is true when the object is archived with retained snapshots.
    """
    isRelic: Boolean!
    """

    Supported in v5.1+
    The timestamp of the previous snapshot.
    """
    lastSnapshotTime: DateTime
    """

    Supported in v5.1+
    Specifies an interval in minutes. This interval is the period between successive log backups.
    """
    logBackupFrequencyInMinutes: Int
    """

    Required. Supported in v5.0+
    Service name of the Oracle database.
    """
    name: String!
    """

    Supported in v5.0+
    Count of the number of instances of the Oracle database.
    """
    numInstances: Int
    """

    Supported in v5.1+
    An integer that specifies the number of missed snapshots.
    """
    numMissedSnapshot: Int
    """

    Required. Supported in v5.0+
    Count of the number of table spaces in Oracle database.
    """
    numTablespaces: Int!
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    """

    Supported in v5.0+
    Rubrik ID of the RAC on which this database is hosted. This field will be empty if the database is not hosted on a RAC environment.
    """
    racId: String
    """

    Supported in v5.0+
    v5.0-v5.3: RAC name of cluster database.
    v6.0+: RAC name of the cluster database.
    """
    racName: String
    """

    Supported in v5.0+
    System identifier (SID) of the Oracle database.
    """
    sid: String
    snappable: CdmWorkload
    """

    Supported in v5.0+
    Rubrik ID of the standalone Oracle host on which this database is hosted. This field will be empty if the database is not hosted on a standalone system.
    """
    standaloneHostId: String
    """

    Supported in v5.0+
    Hostname of the standalone Oracle database host.
    """
    standaloneHostName: String
}

"The directory paths of the Oracle database."
type OracleDirectoryPaths {
    "Directory paths of the archived redo logs of the Oracle database."
    archiveDests: String!
}

"Supported in v5.3+"
type OracleFileDownloadLink {
    """

    Required. Supported in v5.3+
    Link for file download.
    """
    downloadLink: String!
}

type OracleHost implements CdmHierarchyObject & HierarchyObject & OracleTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The connection status of the Oracle Host."
    connectionStatus: HostConnectionStatus
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): OracleHostDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Source host of the Oracle database."
    host: PhysicalHost
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): OracleHostLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of RMAN channels used for backup and restore of the Oracle Host."
    numChannels: Long!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of OracleHostDescendantType objects."
type OracleHostDescendantTypeConnection {
    "Total number of OracleHostDescendantType objects matching the request arguments."
    count: Int!
    "List of OracleHostDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleHostDescendantTypeEdge!]!
    "List of OracleHostDescendantType objects."
    nodes: [OracleHostDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleHostDescendantType object. This wrapper is used for pagination."
type OracleHostDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleHostDescendantType object wrapped by this edge."
    node: OracleHostDescendantType!
}

"Supported in v5.0+"
type OracleHostDetail {
    oracleHostSummary: OracleHostSummary
    oracleNonSlaProperties: OracleNonSlaProperties
}

"Paginated list of OracleHostLogicalChildType objects."
type OracleHostLogicalChildTypeConnection {
    "Total number of OracleHostLogicalChildType objects matching the request arguments."
    count: Int!
    "List of OracleHostLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleHostLogicalChildTypeEdge!]!
    "List of OracleHostLogicalChildType objects."
    nodes: [OracleHostLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleHostLogicalChildType object. This wrapper is used for pagination."
type OracleHostLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleHostLogicalChildType object wrapped by this edge."
    node: OracleHostLogicalChildType!
}

"Supported in v5.0+"
type OracleHostSummary {
    """

    Supported in v7.0+
    Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
    """
    hasLogConfigFromSla: Boolean
    """

    Supported in v9.0
    ID assigned to the host.
    """
    hostId: String
    """

    Required. Supported in v5.0+
    ID assigned to the standalone Oracle host.
    """
    id: String!
    """

    Required. Supported in v5.0+
    An array that contains information about the objects in the infrastructure path of a specified Oracle database.
    """
    infraPath: [ManagedHierarchyObjectAncestor!]!
    """

    Required. Supported in v5.0+
    Hostname of the standalone Oracle host.
    """
    name: String!
    """

    Required. Supported in v5.0+
    Count of the number of databases on the Oracle RAC.
    """
    numDbs: Int!
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    """

    Required. Supported in v5.0+
    Connectivity status of the Oracle RAC.
    """
    status: String!
}

"Supported in v5.0+"
type OracleInstanceProperties {
    """

    Required. Supported in v5.0+
    Name of the Oracle host.
    """
    hostName: String!
    """

    Required. Supported in v5.0+
    System identifier (SID) of the Oracle database instance.
    """
    instanceSid: String!
}

"Supported in v5.3+"
type OracleLastValidationResult {
    """

    Required. Supported in v5.3+
    The eventseries ID for the last validation job.
    """
    eventSeriesId: String!
    """

    Required. Supported in v5.3+
    A Boolean that specifies whether the last validation successfully completed.
    """
    isSuccess: Boolean!
    """

    Required. Supported in v5.3+
    The timestamp of the recovery point to validate.
    """
    validationTime: DateTime
}

"Oracle live mount."
type OracleLiveMount {
    "ID of the Oracle live mount."
    cdmId: String!
    "Cluster of the live mount."
    cluster: Cluster!
    "Date when live mount was created."
    creationDate: DateTime
    "Fid of the Oracle live mount."
    id: UUID!
    "Indicates if mount is files only."
    isFilesOnlyMount: Boolean!
    "Indicates whether this mount was created during an instant recovery or live mount."
    isInstantRecovered: Boolean!
    "Describes if the live mount is ready."
    isReady: Boolean!
    "Mounted database of the live mount."
    mountedDatabase: OracleDatabase
    "Name of the mounted database."
    mountedDatabaseName: String!
    "The creator of the live mount."
    owner: User!
    "Source Oracle database of the live mount."
    sourceDatabase: OracleDatabase
    "Source snapshot of the Oracle live mount."
    sourceSnapshot: CdmSnapshot!
    "Status of the live mount."
    status: OracleLiveMountStatus!
    "The full path for the directory on the target host where the NFS share is mounted."
    targetHostMount: String!
    "Target Oracle host of the live mount. If the live mount target is an Oracle RAC, this value will be null and the field targetOracleRac will be populated instead."
    targetOracleHost: OracleHost
    "Target Oracle RAC of the live mount. If the live mount target is an Oracle Host, this value will be null and the field targetOracleHost will be populated instead."
    targetOracleRac: OracleRac
}

"Paginated list of OracleLiveMount objects."
type OracleLiveMountConnection {
    "Total number of OracleLiveMount objects matching the request arguments."
    count: Int!
    "List of OracleLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleLiveMountEdge!]!
    "List of OracleLiveMount objects."
    nodes: [OracleLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleLiveMount object. This wrapper is used for pagination."
type OracleLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleLiveMount object wrapped by this edge."
    node: OracleLiveMount!
}

"Supported in v5.0+"
type OracleMissedRecoverableRange {
    "Required. Supported in v5.0+"
    beginTime: DateTime
    "Required. Supported in v5.0+"
    description: String!
    "Required. Supported in v5.0+"
    endTime: DateTime
    "Required. Supported in v5.0+"
    errorType: String!
}

"Supported in v5.0+"
type OracleMissedRecoverableRangeListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [OracleMissedRecoverableRange!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type OracleNodeOrder {
    """

    Required. Supported in v5.0+
    Nodename of the Oracle RAC node.
    """
    nodeName: String!
    """

    Required. Supported in v5.0+
    Order in which Rubrik uses this node for automated Oracle backup.
    """
    order: Int!
}

"Supported in v5.0+"
type OracleNodeProperties {
    """

    Supported in v9.0
    ID assigned to the host.
    """
    hostId: String
    """

    Required. Supported in v5.0+
    Node name of the Oracle RAC node.
    """
    nodeName: String!
    """

    Required. Supported in v5.0+
    Connectivity status of the Oracle RAC node.
    """
    status: String!
}

"Supported in v5.0+"
type OracleNonSlaProperties {
    """

    Supported in v5.2+
    Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
    """
    hostLogRetentionHours: Int
    """

    Required. Supported in v5.0+
    Path where the NFS share is mounted on the host.
    """
    hostMount: String!
    """

    Required. Supported in v5.0+
    Specifies an interval in minutes. This interval is the period between successive log backups.
    """
    logBackupFrequencyInMinutes: Int!
    """

    Required. Supported in v5.0+
    Specifies an interval in hours. Log backups are retained for the duration of the interval.
    """
    logRetentionHours: Int!
    """

    Required. Supported in v5.0+
    Number of channels used to backup the Oracle database.
    """
    numChannels: Int!
}

"An Oracle Pluggable Database."
type OraclePdb {
    "The ID of the application container to which the Pluggable Database belongs."
    applicationRootContainerId: Long!
    "The DBID of the Oracle database."
    dbId: Long!
    "The Container ID for the Oracle Pluggable Database."
    id: Long!
    "Indicates whether the Pluggable Database belongs to an application container."
    isApplicationPdb: Boolean!
    "Indicates whether the Pluggable Database is the application root."
    isApplicationRoot: Boolean!
    "Name of the Pluggable Database."
    name: String!
    "The open mode of the Pluggable Database."
    openMode: OraclePdbOpenMode!
}

"Supported in v8.0+"
type OraclePdbApplicationContainer {
    """

    Required. Supported in v8.0+
    Names of the application PDBs that belong to this application container.
    """
    applicationPdbs: [String!]!
    """

    Required. Supported in v8.0+
    Name of the application root PDB.
    """
    applicationRoot: String!
}

"Supported in v8.0+"
type OraclePdbDetails {
    """

    Required. Supported in v8.0+
    List of application containers attached to the CDB.
    """
    applicationContainers: [OraclePdbApplicationContainer!]!
    """

    Required. Supported in v8.0+
    Names of the PDBs attached directly to the CDB.
    """
    regularPdbs: [String!]!
}

type OracleRac implements CdmHierarchyObject & HierarchyObject & OracleTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The connection status of the Oracle RAC."
    connectionStatus: HostConnectionStatus
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): OracleRacDescendantTypeConnection!
    "Specifies if backups are distributed automatically."
    distributeBackupsAutomatically: Boolean!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): OracleRacLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The list of node order priority objects of the Oracle RAC."
    nodeOrder: [CdmOracleRacNodeOrder!]!
    "The list of nodes which make up the Oracle RAC."
    nodes: [CdmOracleRacNode!]!
    "The number of RMAN channels used for backup and restore of the Oracle RAC."
    numChannels: Long!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of OracleRacDescendantType objects."
type OracleRacDescendantTypeConnection {
    "Total number of OracleRacDescendantType objects matching the request arguments."
    count: Int!
    "List of OracleRacDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleRacDescendantTypeEdge!]!
    "List of OracleRacDescendantType objects."
    nodes: [OracleRacDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleRacDescendantType object. This wrapper is used for pagination."
type OracleRacDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleRacDescendantType object wrapped by this edge."
    node: OracleRacDescendantType!
}

"Supported in v5.0+"
type OracleRacDetail {
    oracleNonSlaProperties: OracleNonSlaProperties
    oracleRacSummary: OracleRacSummary
    """

    Required. Supported in v5.0+
    Single Client Access Name (SCAN) of the Oracle RAC cluster.
    """
    scan: String!
}

"Paginated list of OracleRacLogicalChildType objects."
type OracleRacLogicalChildTypeConnection {
    "Total number of OracleRacLogicalChildType objects matching the request arguments."
    count: Int!
    "List of OracleRacLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleRacLogicalChildTypeEdge!]!
    "List of OracleRacLogicalChildType objects."
    nodes: [OracleRacLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleRacLogicalChildType object. This wrapper is used for pagination."
type OracleRacLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleRacLogicalChildType object wrapped by this edge."
    node: OracleRacLogicalChildType!
}

"Supported in v5.0+"
type OracleRacSummary {
    """

    Supported in v7.0+
    Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
    """
    hasLogConfigFromSla: Boolean
    """

    Required. Supported in v5.0+
    ID assigned to the Oracle RAC.
    """
    id: String!
    """

    Required. Supported in v5.0+
    Cluster name assigned to the Oracle RAC.
    """
    name: String!
    """

    Required. Supported in v5.0+
    Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
    """
    nodeOrder: [OracleNodeOrder!]!
    """

    Required. Supported in v5.0+
    Details of the nodes of this Oracle RAC.
    """
    nodes: [OracleNodeProperties!]!
    """

    Required. Supported in v5.0+
    Count of the number of databases on the Oracle RAC.
    """
    numDbs: Int!
    """

    Required. Supported in v5.0+
    Count of the number of nodes on the Oracle RAC.
    """
    numNodes: Int!
    "Required. Supported in v5.0+"
    primaryClusterId: String!
    """

    Supported in v6.0+
    Boolean value that specifies whether the Rubrik cluster should automatically distribute backups across Oracle database instances running on the RAC nodes. By default, backups are run from the first connected node in the RAC priority order.
    """
    shouldDistributeBackupsAutomatically: Boolean
    slaAssignable: SlaAssignable
    """

    Required. Supported in v5.0+
    Connectivity status of the Oracle RAC.
    """
    status: String!
}

"Supported in v5.0+"
type OracleRecoverableRange {
    "Required. Supported in v5.0+"
    beginTime: DateTime
    """

    Required. Supported in v5.0+
    Database snapshots that fall within the recoverable range.
    """
    dbSnapshotSummaries: [OracleDbSnapshotSummary!]!
    "Required. Supported in v5.0+"
    endTime: DateTime
    "Required. Supported in v5.0+"
    status: String!
}

"Supported in v5.0+"
type OracleRecoverableRangeListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [OracleRecoverableRange!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Paginated list of OracleTopLevelDescendantType objects."
type OracleTopLevelDescendantTypeConnection {
    "Total number of OracleTopLevelDescendantType objects matching the request arguments."
    count: Int!
    "List of OracleTopLevelDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OracleTopLevelDescendantTypeEdge!]!
    "List of OracleTopLevelDescendantType objects."
    nodes: [OracleTopLevelDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the OracleTopLevelDescendantType object. This wrapper is used for pagination."
type OracleTopLevelDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual OracleTopLevelDescendantType object wrapped by this edge."
    node: OracleTopLevelDescendantType!
}

"The Oracle user details of this Physical Host."
type OracleUserDetails {
    "The query user of this Physical Host."
    queryUser: String!
    "The system database administrator of this Physical Host."
    sysDbaUser: String!
}

"Details of an org."
type Org {
    "All URLs associated with the organization."
    allUrls: [String!]!
    "Allowed clusters for the organization."
    allowedClusters: [String!]!
    "Specifies whether to use the SSO/LDAP configuration of the global organization or to use configuration specific to this organization."
    authDomainConfig: TenantAuthDomainConfig!
    "Description of the organization."
    description: String!
    "Full name of the organization."
    fullName: String!
    "Specifies whether this tenant organization has configured its own identity providers."
    hasOwnIdpConfigured: Boolean!
    "ID of the organization."
    id: String!
    "Specifies whether organization is forced to use Rubrik Envoy to connect their hosts."
    isEnvoyRequired: Boolean!
    "Name of the organization."
    name: String!
    "Organization admin role."
    orgAdminRole: Role!
    "Permissions given to the organization."
    permissions: [Permission!]!
    "Physical storage used by the organization."
    physicalStorageUsed: Long!
    "Self-service permissions assigned to the organization."
    selfServicePermissions: [SelfServicePermission!]!
    "Specifies whether MFA is enforced for all users in the organization."
    shouldEnforceMfaForAll: Boolean!
    "SSO groups authorized for the organization."
    ssoGroups: [SsoGroup!]!
    "Health of the tenant networks associated with the organization."
    tenantNetworkHealth: TenantNetworkHealth!
    "Existing users in the organization."
    users: [ExistingUser!]!
}

"Paginated list of Org objects."
type OrgConnection {
    "Total number of Org objects matching the request arguments."
    count: Int!
    "List of Org objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [OrgEdge!]!
    "List of Org objects."
    nodes: [Org!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Org object. This wrapper is used for pagination."
type OrgEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Org object wrapped by this edge."
    node: Org!
}

"Security policy for organizations."
type OrgSecurityPolicy {
    "Specifies whether to disallow weaker policy for tenants."
    disallowWeakerPolicy: Boolean!
}

"Overall ransomware investigation statistics."
type OverallRansomwareInvestigationSummary {
    "Count of failed ransomware investigations."
    analysisFailureCount: Long!
    "Count of successful ransomware investigations."
    analysisSuccessCount: Long!
    "Count of total critical anomalies found."
    anomaliesCount: Long!
}

"End User License Agreement (EULA) state."
type PactsafeEulaState {
    "Specifies whether the EULA should be bypassed."
    bypassCheck: Boolean!
    "The EULA content in base-64 format."
    contractBase64: String!
    "The Pactsafe ID of the current major EULA contract version."
    currentMajorVersion: String!
    "The Pactsafe ID of the current EULA contract."
    currentVersion: String!
    "The deadline for a user account to accept the EULA before being locked out of RSC."
    deadline: DateTime
    "The URL to download the current EULA contract."
    downloadEndpoint: String!
    "Date when the most recent EULA was effective for the account."
    effectiveDate: DateTime
    "Timestamp when the current EULA was first seen by the account."
    firstSeenTimestamp: DateTime
    "The Pactsafe ID of the latest contract major version accepted by the account."
    latestVersionAccepted: String!
    "The title of the EULA contract."
    title: String!
}

"General information about a page of results."
type PageInfo {
    "String used to identify the last edge in the response."
    endCursor: String!
    "Specifies whether edges exist following the current page."
    hasNextPage: Boolean!
    "Specifies whether edges exist prior to the current page."
    hasPreviousPage: Boolean!
    "String used to identify the first edge in the response."
    startCursor: String!
}

"Supported in v5.0+"
type ParentAppInfo {
    """

    Supported in v5.0+
    ID assigned to the vApp object that manages a specified virtual machine.
    """
    id: String
    """

    Required. Supported in v5.0+
    Boolean value that indicates whether a virtual machine is protected through the SLA Domain assigned to the parent vApp. Set to 'true' when the virtual machine is protected through the parent vApp, otherwise set to 'false'. Direct assignment of a virtual machine to an SLA Domain is not possible when this value is 'true'. Also, setting this value to true is not possible when the virtual machine has an existing direct assignment to an SLA Domain.
    """
    isProtectedThruHierarchy: Boolean!
}

"Supported in v7.0+"
type PatchDb2InstanceReply {
    """

    Required. Supported in v7.0+
    Status of the refresh job triggered on the edited instance.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    Summary of the edited Db2 instance.
    """
    db2InstanceSummary: Db2InstanceSummary
}

"Supported in v6.0+"
type PatchNutanixMountV1Reply {
    nutanixVmMountSummary: NutanixVmMountSummary
}

"Supported in v5.3+"
type PatchSapHanaSystemReply {
    """

    Required. Supported in v5.3+
    Status of the job scheduled to refresh the SAP HANA system.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    Summary of the updated SAP HANA system object.
    """
    systemSummary: SapHanaSystemSummary
}

"Supported in v6.0+"
type PathInfo {
    """

    Supported in v6.0+
    JSON encoded file access control list (ACL) information.
    """
    aclDetails: String
    """

    Supported in v6.0+
    File creation time.
    """
    creationTime: DateTime
    """

    Supported in v6.0+
    File modification time.
    """
    modificationTime: DateTime
    """

    Required. Supported in v6.0+
    File path that matched the malware Indicator of Compromise.
    """
    path: String!
    """

    Supported in v6.0+
    Hash algorithm and hash values.
    """
    requestedHashDetails: [HashDetail!]!
    """

    Required. Supported in v6.0+
    Details about the matching YARA rule(s).
    """
    yaraMatchDetails: [YARAMatchDetail!]!
}

type PathNode {
    fid: UUID!
    name: String!
    objectType: HierarchyObjectTypeEnum!
}

type PathSecInfo {
    owner: String!
    path: String!
    permissions: [SDDLPermission!]!
}

"Archival location pause result."
type PauseTargetReply {
    "Rubrik Security Cloud managed location ID."
    locationId: String!
    "Ownership status of the archival location."
    status: ArchivalLocationStatus!
}

"SLA Domain paused clusters information."
type PausedClustersInfo {
    "Rubrik clusters where the SLA Domain is paused."
    pausedClusters: [Cluster!]
    "Number of Rubrik clusters where the SLA Domain is paused."
    pausedClustersCount: Int!
}

type PendingActionType {
    pendingActionGroupType: PendingActionGroupTypeEnum!
    pendingActionSubGroupType: PendingActionSubGroupTypeEnum!
    pendingActionSyncType: PendingActionSyncType!
}

"Detailed information about workloads passing through the Ransomware Investigation pipeline."
type PendingEvaluationResults {
    "Unique UUID of the cluster."
    clusterUuid: String!
    "Specifies the date this workload was added in Ransomware Investigation."
    createdAt: DateTime
    "Information about this workload within the Ransomware Investigation pipeline."
    info: String!
    "Determines whether a result is still pending in the Ransomware Investigation pipeline."
    isCompleted: Boolean!
    "Internally used ID to manage permissions of this workload."
    managedId: String!
    "Date that this snapshot was performed."
    snapshotDate: DateTime
    "Internally used ID to specify snapshot."
    snapshotId: String!
    "Specifies the date this workload was last updated in Ransomware Investigation."
    updatedAt: DateTime
    "Internally used ID to specify workload."
    workloadId: String!
    "Workload name."
    workloadName: String!
    "Type of the workload."
    workloadType: String!
}

"The number of items and detailed information about items pending in the Ransomware Investigation pipeline."
type PendingEvaluationResultsReply {
    "The number of entries in the list."
    count: Long!
    "A list of pending evaluation results about snapshots."
    pendingEvaluationResults: [PendingEvaluationResults!]!
}

"Supported in v5.2+"
type PendingSlaOperations {
    """

    Required. Supported in v5.2+
    List of invalid managed IDs from input. They either do not exist or cannot have an SLA assigned to them.
    """
    invalidIds: [String!]!
    """

    Required. Supported in v5.2+
    List of objects with completed SLA operations.
    """
    objectsWithNoOp: [ManagedObjectSlaInfo!]!
    """

    Required. Supported in v5.2+
    List of objects with pending SLA operations.
    """
    objectsWithPendingOp: [ManagedObjectPendingSlaInfo!]!
}

type PendingSnapshotDeletion {
    snapshotFid: UUID!
    status: PendingActionStatus!
}

type PendingSnapshotsOfObjectDeletion {
    objectFid: UUID!
    status: PendingActionStatus!
}

"""

Supported in v8.0+
CloudStorageTier information for a snapshot in a particular archival location.
"""
type PerLocationCloudStorageTier {
    cloudStorageTier: SnapshotCloudStorageTier!
    """

    Required. Supported in v8.0+
    ID of the archival location.
    """
    locationId: String!
}

"Specifies permissions."
type Permission {
    "List of objects in hierarchy."
    objectsForHierarchyTypes: [ObjectIdsForHierarchyType!]!
    "The operations granted to the org on newly added."
    operation: Operation!
}

"Persistent storage configured for storing backups."
type PersistentStorage {
    "ID of the configured storage setting."
    id: String!
    "Name of the configured storage setting."
    name: String!
}

"The Phoenix rollout progress."
type PhoenixRolloutProgress {
    "The number of Exchange users that have Phoenix enabled."
    numEnabled: Int!
    "The number of Exchange users that require migration and are in the process of enabling Phoenix."
    numInProcess: Int!
    "The number of Exchange users that have not yet completed their first full snapshot."
    numIncompleteFirstFull: Int!
    "The number of Exchange users that require migration and do not have Phoenix enabled."
    numNotEnabled: Int!
}

type PhysicalHost implements CdmHierarchyObject & Db2InstanceDescendantType & Db2InstancePhysicalChildType & HierarchyObject & ManagedVolumeDescendantType & ManagedVolumeMountDescendantType & ManagedVolumeMountPhysicalChildType & MongoSourceDescendantType & MongoSourcePhysicalChildType & MssqlTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The CBT status of this Physical Host."
    cbtStatus: String
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    connectionStatus: HostConnectionStatus
    "The default CBT status of this Physical Host."
    defaultCbt: Boolean
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): PhysicalHostDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    hostVolumes: [CdmHostVolume!]!
    "The FID of the hierarchy object."
    id: UUID!
    ipAddresses: [String!]!
    isArchived: Boolean!
    "Specifies if Physical Host is an Oracle Host."
    isOracleHost: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The Oracle User details of this Physical Host."
    oracleUserDetails: OracleUserDetails
    osName: String
    "The operating system type of the physical host."
    osType: GuestOsType
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): PhysicalHostPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    vfdState: String!
}

"Paginated list of PhysicalHost objects."
type PhysicalHostConnection {
    "Total number of PhysicalHost objects matching the request arguments."
    count: Int!
    "List of PhysicalHost objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PhysicalHostEdge!]!
    "List of PhysicalHost objects."
    nodes: [PhysicalHost!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of PhysicalHostDescendantType objects."
type PhysicalHostDescendantTypeConnection {
    "Total number of PhysicalHostDescendantType objects matching the request arguments."
    count: Int!
    "List of PhysicalHostDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PhysicalHostDescendantTypeEdge!]!
    "List of PhysicalHostDescendantType objects."
    nodes: [PhysicalHostDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PhysicalHostDescendantType object. This wrapper is used for pagination."
type PhysicalHostDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PhysicalHostDescendantType object wrapped by this edge."
    node: PhysicalHostDescendantType!
}

"Wrapper around the PhysicalHost object. This wrapper is used for pagination."
type PhysicalHostEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PhysicalHost object wrapped by this edge."
    node: PhysicalHost!
}

"Paginated list of PhysicalHostPhysicalChildType objects."
type PhysicalHostPhysicalChildTypeConnection {
    "Total number of PhysicalHostPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of PhysicalHostPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PhysicalHostPhysicalChildTypeEdge!]!
    "List of PhysicalHostPhysicalChildType objects."
    nodes: [PhysicalHostPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PhysicalHostPhysicalChildType object. This wrapper is used for pagination."
type PhysicalHostPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PhysicalHostPhysicalChildType object wrapped by this edge."
    node: PhysicalHostPhysicalChildType!
}

"Paginated list of PolarisHierarchyObject objects."
type PolarisHierarchyObjectConnection {
    "Total number of PolarisHierarchyObject objects matching the request arguments."
    count: Int!
    "List of PolarisHierarchyObject objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolarisHierarchyObjectEdge!]!
    "List of PolarisHierarchyObject objects."
    nodes: [PolarisHierarchyObject!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolarisHierarchyObject object. This wrapper is used for pagination."
type PolarisHierarchyObjectEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolarisHierarchyObject object wrapped by this edge."
    node: PolarisHierarchyObject!
}

type PolarisHierarchySnappableObject {
    id: String!
    name: String!
}

type PolarisInventorySubHierarchyRoot {
    "List of children."
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): PolarisHierarchyObjectConnection!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): PolarisHierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)."
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
}

"The UI definition of polaris report column."
type PolarisReportColumn {
    "The width of the column showing on the UI."
    columnWidth: Int!
    "Specifies if the column appears in the table in the default view of the report."
    default: Boolean!
    "The column name showing on the UI."
    displayName: String!
    "The other metadata of the column."
    metadata: [Metadata!]!
    "The identifier of the column."
    name: String!
    "Whether this column is sortable."
    sortable: Boolean!
}

"The saved configurations of a report."
type PolarisReportConfig {
    "A list of selected charts in the report."
    charts: [ChartViewType!]!
    "The filter used for sorting in the report."
    filters: [ReportFilter!]!
    "Report ID."
    id: Long!
    "Report name."
    name: String!
    "Type of report."
    reportViewType: PolarisReportViewType!
    "The selected order of sorting in the report."
    sortBy: String!
    "The selected sortOrder in the report."
    sortOrder: SortOrder
    "The selected table in the report."
    table: TableViewType!
}

"The definition of Polaris Report's filter."
type PolarisReportFilter {
    "The other configurations of the filter."
    configs: [PolarisReportFilterConfigs!]!
    "The data type of the filter."
    dataType: DataTypeEnum!
    "The default  values of the filter."
    defaultValues: [Value!]!
    "The name showing on the UI."
    displayName: String!
    "The type of the filter."
    filterType: FilterTypeEnum!
    "The name of the filter."
    name: String!
    "All available values of the filter."
    values: [DisplayableValue!]!
}

"A data structure to store filter configurations."
type PolarisReportFilterConfigs {
    "The key of this configuration."
    key: String!
    "The value of this configuration."
    values: [Value!]!
}

"The schema of a polaris report."
type PolarisReportSchema {
    "All available charts of the report."
    charts: [ChartViewWithName!]!
    "Miscellaneous configurations for the report schema."
    config: PolarisReportSchemaConfig!
    "All available filters of the report."
    filters: [PolarisReportFilter!]!
    "All available tables of the report."
    tables: [TableViewWithName!]!
}

"Miscellaneous configurations for the report schema."
type PolarisReportSchemaConfig {
    "The string displayed as the chart title."
    chartTitle: String!
    "The default name of the report."
    defaultName: String!
    "The string displayed as the table title."
    tableTitle: String!
}

"The schema of a polaris report table."
type PolarisReportTableIntrospection {
    "All available columns of the table."
    columns: [PolarisReportColumn!]!
    "The default sort by column's name."
    defaultSortByColumn: String!
    "The default sort by order."
    defaultSortByOrder: SortOrder!
    "The page size of the table."
    pageSize: Int!
}

"Global SLA status for cluster."
type PolarisSlaStatus {
    "Cluster where the global SLA is synced."
    cluster: Cluster
    "Pause status of given cluster."
    pauseStatus: PauseStatus!
    "Sync status of given cluster."
    syncStatus: SlaSyncStatus!
}

"Paginated list of PolarisSlaStatus objects."
type PolarisSlaStatusConnection {
    "Total number of PolarisSlaStatus objects matching the request arguments."
    count: Int!
    "List of PolarisSlaStatus objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolarisSlaStatusEdge!]!
    "List of PolarisSlaStatus objects."
    nodes: [PolarisSlaStatus!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolarisSlaStatus object. This wrapper is used for pagination."
type PolarisSlaStatusEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolarisSlaStatus object wrapped by this edge."
    node: PolarisSlaStatus!
}

type PolarisSnapshot implements GenericSnapshot {
    consistencyLevel: SnapshotConsistencyLevel!
    date: DateTime!
    expirationDate: DateTime
    expiryHint: Boolean!
    "Indicates whether the snapshot has a valid archived copy."
    hasUnexpiredArchivedCopy: Boolean!
    "Indicates whether the snapshot has a valid replica."
    hasUnexpiredReplica: Boolean!
    id: UUID!
    indexTime: DateTime
    indexingAttempts: Long!
    isArchivalCopy: Boolean
    isArchived: Boolean!
    isCorrupted: Boolean!
    isDeletedFromSource: Boolean!
    isDownloadedSnapshot: Boolean
    "Specifies whether or not the snapshot is expired."
    isExpired: Boolean!
    "Specifies whether or not the snapshot is indexed."
    isIndexed: Boolean!
    isOnDemandSnapshot: Boolean!
    isReplica: Boolean
    isReplicated: Boolean!
    isUnindexable: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    parentSnapshotId: String
    "Rubrik-specific information about snapshots of specific workloads. Currently, this is only valid for Azure Virtual Machine and AWS EC2 snapshots."
    polarisSpecificSnapshot: PolarisSpecificSnapshot
    replicationLocations: [DataLocation!]
    sequenceNumber: Int!
    slaDomain: SlaDomain
    snappableId: String!
    unexpiredArchivedSnapshotCount: Int!
    unexpiredReplicaCount: Int!
}

"Paginated list of PolarisSnapshot objects."
type PolarisSnapshotConnection {
    "Total number of PolarisSnapshot objects matching the request arguments."
    count: Int!
    "List of PolarisSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolarisSnapshotEdge!]!
    "List of PolarisSnapshot objects."
    nodes: [PolarisSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolarisSnapshot object. This wrapper is used for pagination."
type PolarisSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolarisSnapshot object wrapped by this edge."
    node: PolarisSnapshot!
}

"Polaris Snapshot data with groupby info applied to it."
type PolarisSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: PolarisSnapshotGroupByInfo!
    "Paginated snapshot data."
    polarisSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort Rubrik Security Cloud snapshots by field."
        sortBy: PolarisSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PolarisSnapshotConnection!
    "Provides further groupings for the data."
    polarisSnapshotGroupBy(
        "Group Rubrik Security Cloud snapshots by field."
        groupBy: PolarisSnapshotGroupByEnum!
    ): [PolarisSnapshotGroupBy!]!
}

"Paginated list of PolarisSnapshotGroupBy objects."
type PolarisSnapshotGroupByConnection {
    "Total number of PolarisSnapshotGroupBy objects matching the request arguments."
    count: Int!
    "List of PolarisSnapshotGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolarisSnapshotGroupByEdge!]!
    "List of PolarisSnapshotGroupBy objects."
    nodes: [PolarisSnapshotGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolarisSnapshotGroupBy object. This wrapper is used for pagination."
type PolarisSnapshotGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolarisSnapshotGroupBy object wrapped by this edge."
    node: PolarisSnapshotGroupBy!
}

"Polaris Snapshot data with groupby info applied to it."
type PolarisSnapshotGroupByNew {
    "The data groupby info."
    groupByInfo: PolarisSnapshotGroupByInfo!
    "Paginated snapshot data."
    polarisSnapshotConnection: PolarisSnapshotConnection!
}

"Paginated list of PolarisSnapshotGroupByNew objects."
type PolarisSnapshotGroupByNewConnection {
    "Total number of PolarisSnapshotGroupByNew objects matching the request arguments."
    count: Int!
    "List of PolarisSnapshotGroupByNew objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolarisSnapshotGroupByNewEdge!]!
    "List of PolarisSnapshotGroupByNew objects."
    nodes: [PolarisSnapshotGroupByNew!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolarisSnapshotGroupByNew object. This wrapper is used for pagination."
type PolarisSnapshotGroupByNewEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolarisSnapshotGroupByNew object wrapped by this edge."
    node: PolarisSnapshotGroupByNew!
}

"Supported in v6.0+"
type PolicyCheckResult {
    """

    Supported in v6.0+
    Output from the policy.
    """
    checkOutput: String
    """

    Required. Supported in v6.0+
    Individual check results.
    """
    isCheckPassed: Boolean!
    """

    Required. Supported in v6.0+
    Node ID on which policy is enforced.
    """
    nodeId: String!
    """

    Required. Supported in v6.0+
    Policy ID for which result is collected.
    """
    policyId: String!
}

"Represents the policy detail."
type PolicyDetail {
    "Total analyzers in a policy."
    analyzers: Int!
    "Policy creator."
    creator: User
    "Policy description."
    description: String!
    "Policy ID."
    id: String!
    "Time when the policy was last updated."
    lastUpdatedTime: Long!
    "Policy name."
    name: String!
    "Objects with pending initial analysis."
    pendingAnalysisObjects: Int!
    "Total objects in a policy."
    totalObjects: Int!
}

"Paginated list of PolicyDetail objects."
type PolicyDetailConnection {
    "Total number of PolicyDetail objects matching the request arguments."
    count: Int!
    "List of PolicyDetail objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolicyDetailEdge!]!
    "List of PolicyDetail objects."
    nodes: [PolicyDetail!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolicyDetail object. This wrapper is used for pagination."
type PolicyDetailEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolicyDetail object wrapped by this edge."
    node: PolicyDetail!
}

type PolicyObj {
    allAnalyzerMappings(stdPath: String!): [AnalyzerMapping!]!
    "Analysis status of policy object."
    analysisStatus: AnalysisStatus!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListFileResultFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        timezone: String!
    ): FileResultConnection!
    folderChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrowseDirectoryFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        stdPath: String!,
        timezone: String!
    ): FileResultConnection!
    id: String!
    objectStatus: ObjectStatus!
    osType: DataGovOsType!
    policySummaries: [ClassificationPolicySummary!]!
    "Risk level of policy object."
    riskLevel: RiskLevelType!
    rootFileResult: FileResult!
    shareType: DataGovShareType!
    snappable: HierarchyObject
    snapshotFid: String!
    snapshotTimestamp: Long!
    timeContext: String!
    whitelistedAnalyzerList(stdPath: String!): [WhitelistedAnalyzer!]!
}

"Paginated list of PolicyObj objects."
type PolicyObjConnection {
    "Total number of PolicyObj objects matching the request arguments."
    count: Int!
    "List of PolicyObj objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolicyObjEdge!]!
    "List of PolicyObj objects."
    nodes: [PolicyObj!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolicyObj object. This wrapper is used for pagination."
type PolicyObjEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolicyObj object wrapped by this edge."
    node: PolicyObj!
}

type PolicyObjectUsage {
    hierarchyObject: HierarchyObject!
    policies: [ClassificationPolicySummary!]!
}

"Paginated list of PolicyObjectUsage objects."
type PolicyObjectUsageConnection {
    "Total number of PolicyObjectUsage objects matching the request arguments."
    count: Int!
    "List of PolicyObjectUsage objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PolicyObjectUsageEdge!]!
    "List of PolicyObjectUsage objects."
    nodes: [PolicyObjectUsage!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the PolicyObjectUsage object. This wrapper is used for pagination."
type PolicyObjectUsageEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual PolicyObjectUsage object wrapped by this edge."
    node: PolicyObjectUsage!
}

type PolicyStatus {
    policyId: String!
    status: ObjectPolicyStatus!
}

"Represents the most risky policies."
type PolicySummary {
    "Files with sensitive data and open access."
    highRiskFiles: TimelineEntry
    "Files with sensitive data, but no open access."
    lowRiskFiles: TimelineEntry
    "Policy summaries."
    summary: ClassificationPolicySummary
}

"A script that is ran before or after a snapshot or backup."
type PrePostScript {
    failureHandling: PrePostScriptFailureHandlingEnum!
    scriptPath: String!
    timeoutMs: Int!
}

"Precheck details."
type PrecheckFailure {
    "Cause of precheck failure."
    cause: String!
    "Name of the precheck."
    precheckName: String!
    "Remedy to fix the precheck failure."
    remedy: String!
    "Is upgrade blocker flag."
    upgradeBlocker: Boolean!
}

"Precheck status running information."
type PrecheckStatusNextRunInfo {
    "Upgrade prechecks job instance Id."
    jobInstanceId: String!
    "Upgrade prechecks job start time."
    startTime: Long!
    "Status of Upgrade prechecks job."
    status: String!
}

"Precheck job details."
type PrechecksJobReply {
    "Upgrade Prechecks Job ID."
    jobId: String!
}

"Prechecks status response object."
type PrechecksStatusReply {
    "Prechecks job end time."
    endTime: Long!
    "List of prechecks failed."
    failureResults: [PrecheckFailure!]!
    "Next prechecks job Information."
    nextRunInfo: PrecheckStatusNextRunInfo
    "Total number of prechecks run."
    numPrechecks: Int!
    "Prechecks job duration in minutes."
    runPeriodInMinutes: Int!
}

"Prepares AWS cloud account for deletion and initiates deletion of the account."
type PrepareAwsCloudAccountDeletionReply {
    "CloudFormation URL to delete the stack."
    cloudFormationUrl: String!
    "List of feature versions."
    featureRegionMap: [AwsCloudAccountFeatureVersion!]!
    "Template URL of the Cloudformation stack. The template URL is empty when the cloud account has no connected features and is to be deleted."
    templateUrl: String!
}

"Response to prepare updation of AWS cloud account."
type PrepareFeatureUpdateForAwsCloudAccountReply {
    "CloudFormation URL to update cloud account."
    cloudFormationUrl: String!
    "AWS CloudFormation template URL."
    templateUrl: String!
}

type PreviewerClusterConfig {
    clusterId: String!
    enabled: Boolean!
}

"LDAP principal."
type Principal {
    authDomainId: String!
    description: String
    email: String
    id: String!
    name: String!
    principalType: PrincipalTypeEnum!
}

"Paginated list of Principal objects."
type PrincipalConnection {
    "Total number of Principal objects matching the request arguments."
    count: Int!
    "List of Principal objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [PrincipalEdge!]!
    "List of Principal objects."
    nodes: [Principal!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Principal object. This wrapper is used for pagination."
type PrincipalEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Principal object wrapped by this edge."
    node: Principal!
}

"RCV private endpoint connection details."
type PrivateEndpointConnection {
    "RCV private endpoint connection status."
    privateEndpointConnectionStatus: PrivateEndpointConnectionStatus!
    "RCV private endpoint Azure Resource ID."
    privateEndpointId: String!
}

"The number of processed Ransomware Investigation workloads."
type ProcessedRansomwareInvestigationWorkloadCountReply {
    "The number of Ransomware Investigation workloads processed in the past 24 hours."
    count: Long!
}

"A help topic in the product documentation."
type ProductDocumentation {
    "A flattened list of nodes representing the contents of the help topic."
    contents: [ContentNode!]!
    "Summary of the help topic."
    description: String!
    "ID of the help topic."
    id: String!
    "Language code in ISO 639-1."
    language: String!
    "List of related help topics."
    related: [RelatedContent!]!
    "Title of the help topic."
    title: String!
    "Type of the help topic."
    type: ProductDocumentationType!
}

"Information about the product type."
type ProductTypeInfo {
    "The bundle features in this product type."
    bundleFeatures: [String!]!
    "The licenses under this product type."
    licenses: [License!]!
    "The product type."
    productType: String!
}

"Represents a protected object and its corresponding SLA Domain."
type ProtectedObjectTypeToSla {
    "The type of the protected object."
    protectedObjectType: WorkloadLevelHierarchy!
    "SLA Domain assigned to the object."
    slaAssignment: AzureNativeResourceGroupSlaAssignment!
}

"Metadata for rendering protected objects."
type ProtectedObjects implements ProtectedObjectSummary {
    effectiveSlaOpt: String
    id: String!
    isArchived: Boolean!
    isUnprotected: Boolean!
    name: String!
    objectType: ManagedObjectType
    "pause status of the protected object."
    slaPauseStatus: Boolean
}

"Paginated list of ProtectedObjects objects."
type ProtectedObjectsConnection {
    "Total number of ProtectedObjects objects matching the request arguments."
    count: Int!
    "List of ProtectedObjects objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ProtectedObjectsEdge!]!
    "List of ProtectedObjects objects."
    nodes: [ProtectedObjects!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ProtectedObjects object. This wrapper is used for pagination."
type ProtectedObjectsEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ProtectedObjects object wrapped by this edge."
    node: ProtectedObjects!
}

"The object types and number of protected Ransomware Investigation workloads."
type ProtectedRansomwareInvestigationWorkload {
    "The number of workloads."
    count: Long!
    "The workload type."
    workloadType: String!
}

"The number of protected Ransomware Investigation workloads."
type ProtectedRansomwareInvestigationWorkloadCountReply {
    """

    A list of workload types and the number of workloads of that type
    protected by Ransomware Investigation.
    """
    workloadCounts: [ProtectedRansomwareInvestigationWorkload!]!
}

type ProtectionStatus {
    enumValue: ProtectionStatusEnum!
}

type ProtectionTaskDetailsTableFilter {
    cluster_location: [FilterOption!]!
    cluster_type: [FilterOption!]!
    object_type: [FilterOption!]!
    replication_source: [FilterOption!]!
    status: [FilterOption!]!
    task_category: [FilterOption!]!
    task_type: [FilterOption!]!
}

"Proxy settings for target."
type ProxySettings {
    portNumber: Int!
    protocol: String!
    proxyServer: String!
    username: String!
}

"Reply Object for PutSmbConfiguration."
type PutSmbConfigurationReply {
    output: SmbConfig
}

type PvcInformation {
    "Access mode mounted on a host."
    accessMode: String!
    "PVC storage capacity."
    capacity: String!
    "ID to uniquely identify PVC."
    id: String!
    "Json string of PVC Labels."
    labels: String!
    "Name of PVC in snapshot."
    name: String!
    "Phase in which PVC bound to the PV."
    phase: String!
    "Storage class of PVC."
    storageClass: String!
    "PV name on which PVC bound."
    volume: String!
}

"Quarantine information corresponding to a path."
type QuarantineInfo {
    "Specifies whether there are more quarantined files at this path."
    containsQuarantinedFiles: Boolean!
    "Specifies whether the path is quarantined."
    isQuarantined: Boolean!
}

"Spec for quarantine."
type QuarantineSpec {
    "Files which need to be quarantined."
    filesDetails: [FileDetails!]!
    "Id of the snapshot."
    snapshotId: String!
}

"Quarterly snapshot schedule."
type QuarterlySnapshotSchedule {
    "Basic quarterly snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
    "Day of the Quarter."
    dayOfQuarter: DayOfQuarter!
    "Starting month of quarter."
    quarterStartMonth: Month!
}

type Query {
    AwsCloudAccountListKMSKeys(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "aws region argument for archival use case"
        region: AwsRegion!
    ): AwsCloudAccountListKMSKeysResponse!
    AwsCloudAccountListSecurityGroups(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "aws region argument for archival use case"
        region: AwsRegion!,
        "vpc native id"
        vpcID: String!
    ): AwsCloudAccountListSecurityGroupsResponse!
    AwsCloudAccountListSubnets(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "aws region argument for archival use case"
        region: AwsRegion!,
        "vpc native id"
        vpcID: String!
    ): AwsCloudAccountListSubnetsResponse!
    AwsCloudAccountListVpcs(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "aws region argument for archival use case"
        region: AwsRegion!
    ): AwsCloudAccountListVpcResponse!
    "Account ID."
    accountId: String!
    "This endpoint is deprecated."
    accountSettings: AccountSetting!
    activeCustomAnalyzers: AnalyzerConnection!
    "Retrieve an activity series."
    activitySeries(
        "Input for retrieving an activity series."
        input: ActivitySeriesInput!
    ): ActivitySeries!
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort activity series by field."
        sortBy: ActivitySeriesSortField,
        "Activity sort order"
        sortOrder: SortOrder
    ): ActivitySeriesConnection!
    activitySeriesGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group activity series by a field"
        groupBy: ActivitySeriesGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): ActivitySeriesGroupByConnection!
    "List of account owners."
    allAccountOwners: [User!]!
    allAccountProducts(
        "End date of product (yyyy-mm-dd)."
        endDateArg: DateTime,
        "Name of product (Data Protection, Ransomware Investigation, etc.)."
        nameFilter: [ProductName!]!,
        "Start date of product (yyyy-mm-dd)."
        startDateArg: DateTime,
        "State of product (Active, Expired, etc.)."
        stateFilter: [ProductState!]!,
        "Type of product (Revenue, POC, etc.)."
        typeFilter: [ProductType!]!
    ): [AccountProduct!]!
    "List of authorized operations for global resource."
    allAuthorizationsForGlobalResource: [Operation!]!
    "List of authorizations for the object."
    allAuthorizationsForObject(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): [Operation!]!
    "List of Availability Zones (AZs) in the specified region on the specified AWS Native account."
    allAvailabilityZonesByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [String!]!
    "Get all CDM versions in Azure marketplace."
    allAwsCdmVersions(
        "CDM version request params for Aws."
        input: AwsCdmVersionRequest!
    ): [AwsCdmVersion!]!
    "List of all AWS cloud account configurations with the given search query."
    allAwsCloudAccountConfigs(
        "Arguments for get cloud accounts configs."
        awsCloudAccountsArg: AwsCloudAccountConfigsInput!
    ): [AwsFeatureConfig!]!
    "List of active AWS cloud accounts and the features for the accounts. A cloud account is an AWS account added to the Rubrik platform."
    allAwsCloudAccountsWithFeatures(
        "Arguments for get cloud accounts."
        awsCloudAccountsArg: AwsCloudAccountsWithFeaturesInput!
    ): [AwsCloudAccountWithFeatures!]!
    "List all aws compute settings."
    allAwsComputeSettings(
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of compute settings."
        filter: [AwsCloudComputeSettingFilterInput!],
        "Specification on how to sort a list of compute settings."
        sortBy: AwsCloudComputeSettingQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): [AwsComputeSettings!]!
    "List of all AWS exocompute configurations filtered by a cloud account ID or a cloud account name prefix."
    allAwsExocomputeConfigs(
        "A query that searches for Exocompute configurations with an account name or account native ID that is prefixed by the search query."
        awsNativeAccountIdOrNamePrefix: String!
    ): [AwsExocomputeConfig!]!
    "Get all rubrik Instance Profiles in aws account."
    allAwsInstanceProfileNames(
        "Cloud account ID."
        cloudAccountId: String!,
        "Region of aws account."
        region: String!
    ): [String!]!
    "All valid aws regions for this cloud account."
    allAwsRegions(
        "Cloud account ID."
        cloudAccountId: String!
    ): [AwsCloudAccountRegion!]!
    "Retrieve ARM templates for role definition and role assignment."
    allAzureArmTemplatesByFeature(
        "Input for retrieving ARM templates for role definition and role assignment."
        input: AzureArmTemplatesByFeatureInput!
    ): [AzureArmTemplateByFeature!]!
    "Get all CDM versions in Azure marketplace."
    allAzureCdmVersions(
        "CDM version request params for Azure."
        cdmVersionRequest: AzureCdmVersionReq!
    ): [AzureCdmVersion!]!
    "Retrieves a list of all the missing permissions on Azure subscriptions that are a part of the Azure Cloud Account."
    allAzureCloudAccountMissingPermissions(
        "The cloud account action to be performed. Some examples are: isCreate, isUpdateRegions, isDelete."
        cloudAccountAction: CloudAccountAction!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of Azure subscription IDs."
        subscriptionIds: [UUID!]!
    ): [AzureSubscriptionMissingPermissions!]!
    "Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets."
    allAzureCloudAccountSubnetsByRegion(
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!,
        "Azure region."
        region: AzureCloudAccountRegion!
    ): [AzureNativeSubnet!]!
    "Retrieves a list of all Azure Subscriptions with feature details such as feature, status, and regions."
    allAzureCloudAccountSubscriptionsByFeature(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatus!]!
    ): [AzureSubscriptionWithFeaturesType!]!
    "Retrieves a list of all the Azure tenants and tenant subscriptions for features. The list can be filtered by feature status, subscription native ID, and subscription name."
    allAzureCloudAccountTenants(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "Cloud account features. A feature refers to the Polaris feature that Rubrik provides."
        features: [CloudAccountFeature!],
        "Specifies whether the details about the subscriptions in the tenants are included in the response or not."
        includeSubscriptionDetails: Boolean!
    ): [AzureCloudAccountTenant!]!
    "List of all Azure Disk Encryption Sets in a region."
    allAzureDiskEncryptionSetsByRegion(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegion!
    ): [AzureNativeDiskEncryptionSet!]!
    "List of all Encryption Keys in an Azure Key Vault."
    allAzureEncryptionKeys(
        "Input for fetching Encryption Keys in an Azure Key Vault."
        azureEncryptionKeysInput: AzureEncryptionKeysInput!
    ): [AzureEncryptionKey!]!
    "Retrieves a list of Azure Exocompute configurations filtered by a cloud account ID or a search query."
    allAzureExocomputeConfigsInAccount(
        "A query that searches for Exocompute configurations with an account name or account native ID that is prefixed by the search query."
        azureExocomputeSearchQuery: String,
        "IDs of cloud accounts."
        cloudAccountIDs: [UUID!]
    ): [AzureExocomputeConfigsInAccount!]!
    "List of all Azure Key Vaults in a region."
    allAzureKeyVaultsByRegion(
        "Input for fetching Key Vaults in an Azure region."
        azureKeyVaultsInput: AzureKeyVaultsInput!
    ): [AzureKeyVault!]!
    "Retrieves all availability sets in the specified region, resource group, and subscription. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview."
    allAzureNativeAvailabilitySetsByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegion!,
        "Resource Group Name."
        resourceGroupName: String!
    ): [AzureNativeAvailabilitySet!]!
    "Retrieves all supported disk types when exporting a specific snapshot. Not all disk types are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types."
    allAzureNativeExportCompatibleDiskTypesByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegion!
    ): [AzureNativeExportCompatibleDiskTypes!]!
    "Retrieves all supported virtual machine (VM) sizes when exporting a particular snapshot. Not all VM sizes are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
    allAzureNativeExportCompatibleVmSizesByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegion!,
        "Snapshot ID"
        vmSnapshotId: UUID!
    ): [AzureNativeExportCompatibleVmSizes!]!
    "Retrieves a list of resource groups with the specified names which exist in the specified account."
    allAzureNativeResourceGroupsInfoIfExist(
        "Input to get Azure Resource Groups if they exist."
        input: AzureGetResourceGroupsInfoIfExistInput!
    ): [AzureResourceGroupInfo!]!
    "Retrieves all security groups in the specified region and subscription. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups."
    allAzureNativeSecurityGroupsByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegion!
    ): [AzureNativeSecurityGroup!]!
    "Retrieves list of all storage Accounts in a subscription."
    allAzureNativeStorageAccountsFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!
    ): [AzureNativeStorageAccount!]!
    "Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets."
    allAzureNativeSubnetsByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegion!
    ): [AzureNativeSubnet!]!
    "Retrieves all virtual machine (VM) sizes in the subscriptions protected by Rubrik that have been configured for protection. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
    allAzureNativeVirtualMachineSizes(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID
    ): [String!]!
    "Retrieves all virtual networks (VNets) in the protected subscriptions. VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview."
    allAzureNativeVirtualNetworks(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID
    ): [AzureNativeVirtualNetwork!]!
    "Get all available network security groups for Azure."
    allAzureNsgs(
        "Nsg request params for Azure."
        nsgRequest: AzureNsgRequest!
    ): [String!]!
    "Get all available locations for Azure."
    allAzureRegions(
        "Cloud account ID."
        cloudAccountId: String!
    ): [AzureCloudAccountRegion!]!
    "Get resource groups for a service principal in Azure."
    allAzureResourceGroups(
        "Region for Azure cloud account."
        azureRegion: String!,
        "Cloud account ID."
        cloudAccountId: String!
    ): [String!]!
    "Retrieves the list of elastic pools available for a SQL Database Server.For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-pool-overview."
    allAzureSqlDatabaseServerElasticPools(
        "Name of the Azure SQL Database server."
        azureSqlDatabaseServerName: String!,
        "Rubrik ID of the Azure SQL Database Server."
        azureSqlDatabaseServerRubrikId: UUID!,
        "Resource Group Name."
        resourceGroupName: String!,
        "Subscription ID."
        subscriptionId: UUID!
    ): [AzureSqlDatabaseServerElasticPool!]!
    "List all storage accounts from Azure."
    allAzureStorageAccounts(
        "Storage accounts request params for Azure."
        storageAccountsRequest: AzureStorageAccountsReq!
    ): [String!]!
    "Get subnets for a given account in Azure."
    allAzureSubnets(
        "Subnet request params for Azure."
        subnetRequest: AzureSubnetReq!
    ): [String!]!
    "Retrieves a list of all Azure subscriptions with Exocompute subscription mapping."
    allAzureSubscriptionWithExocomputeMappings(
        "List of mapped Exocompute subscription IDs."
        exocomputeSubscriptionIdsFilter: [UUID!],
        "Cloud account features. A feature refers to the Polaris feature that Rubrik provides."
        features: [CloudAccountFeature!]
    ): [AzureSubscriptionWithExocomputeMapping!]!
    "Get vnets for a given account in Azure."
    allAzureVnets(
        "Vnet request params for Azure."
        vnetRequest: AzureVnetReq!
    ): [String!]!
    "Describes the Blueprint resource specs."
    allBlueprintResourceSpecs(
        "The Blueprint ID."
        blueprintId: UUID!,
        "The list of snappable recovery point infos."
        snappableInfos: [SnappableInfoType!]!
    ): [ResourceSpec!]!
    "All Blueprints."
    allBlueprints(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Recovery types of the Recovery Plan."
        blueprintRecoveryTypes: [BlueprintRecoveryType!],
        "The status of the Recovery Plan failover."
        failoverStatusOpt: FailoverStatusEnum,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Flag to enable visibility of Isolated Recovery Plan."
        isBlueprintVisible: Boolean,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "The ID of the source location."
        sourceLocationIdOpt: String,
        "The status of the Recovery Plan."
        statusOpt: BlueprintStatus,
        "The ID of the intended remote target location."
        targetLocationIdOpt: String
    ): BlueprintNewConnection!
    "Get all cdm guest credentials."
    allCdmGuestCredentials(
        "List of cluster IDs."
        clusterUuids: [UUID!]!
    ): [CdmGuestCredential!]!
    "Names of the virtual machines in compute cluster with Continuous Data Protection (CDP) SLA Domain."
    allCdpSlaVmNames(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): [String!]!
    "Details of all the virtual machines with Continuous Data Protection (CDP) SLA Domain."
    allCdpVmsInfos(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter Type for getting all CDP VMs for CDP performance dashboard."
        allCdpVmInfoFilter: [CdpPerfDashboardFilterParam!],
        "Sort Type for getting all CDP VMs for CDP performance dashboard."
        allCdpVmInfoSort: CdpPerfDashboardSortParam,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): CdpVmInfoConnection!
    "List all cloud accounts."
    allCloudAccounts(
        "Filters and shows cloud accounts for a specific use-cases or features. Default value: [ARCHIVAL]."
        features: [CloudAccountFeature!],
        "Specification on how to filter a list of cloud accounts."
        filter: [CloudAccountFilterInput!],
        "Specification on how to sort a list of cloud accounts."
        sortBy: CloudAccountSortByFieldEnum,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): [CloudAccount!]!
    "List of Cloud Clusters with cloud information."
    allCloudClusters(
        "Cloud vendor name."
        cloudVendorType: CcpVendorType!
    ): [CcWithCloudInfo!]!
    "List of the Cloud Direct Sites accessible by the current user."
    allCloudDirectSites: [CloudDirectSite!]!
    "List of snapshots for which file recovery is feasible."
    allCloudNativeFileRecoveryEligibleSnapshots(
        "Workload ID."
        workloadId: UUID!
    ): [String!]!
    "List of cloud native label keys matched by substring."
    allCloudNativeLabelKeys(
        "Key substring to filter by."
        keySubStr: String!,
        "Number of results to return."
        limit: Int!,
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!
    ): [String!]!
    "List of cloud native label values matched by substring."
    allCloudNativeLabelValues(
        "Key value used only when searching for values."
        key: String!,
        "Number of results to return."
        limit: Int!,
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        "Value substring to filter by."
        valueSubStr: String!
    ): [String!]!
    "List of cloud native tag keys matched by substring."
    allCloudNativeTagKeys(
        "Key substring to filter by."
        keySubStr: String!,
        "Number of results to return."
        limit: Int!,
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!
    ): [String!]!
    "List of cloud native tag values matched by substring."
    allCloudNativeTagValues(
        "Key value used only when searching for values."
        key: String!,
        "Number of results to return."
        limit: Int!,
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        "Value substring to filter by."
        valueSubStr: String!
    ): [String!]!
    allClusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort clusters by field."
        sortBy: ClusterSortByEnum = ClusterType,
        "Cluster sort order."
        sortOrder: SortOrder = DESC
    ): ClusterConnection!
    "Global SLAs used by a cluster which are protecting at least one object."
    allClusterGlobalSlas(
        "UUID of the Rubrik cluster"
        cdmClusterUUID: UUID!
    ): [SlaInfo!]!
    "All replication targets for a cluster."
    allClusterReplicationTargets(
        "UUID of the cluster."
        clusterUuid: UUID!
    ): [ClusterReplicationTarget!]!
    "Get web server certificate and IPMI details for multiple clusters."
    allClusterWebCertsAndIpmis(
        "Input for getting web certificate and IPMI information for multiple clusters."
        input: BulkClusterWebCertAndIpmiInput!
    ): [ClusterWebCertAndIpmi!]!
    "Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version."
    allClustersTotpAckStatus(
        "Specifies the list of cluster UUIDs."
        listClusterUuid: [UUID!]!
    ): [Boolean!]!
    "Seven days of compliance status history for the specified lookback period."
    allComplianceTimeSeries(
        "The Rubrik cluster ID."
        clusterUuid: UUID,
        "Period of time to look back when evaluating compliance status."
        lookbackPeriod: LookbackPeriod!,
        "Types of objects to limit the results. If absent, all object types are returned."
        objectTypes: [ObjectTypeEnum!],
        "Input for orgId filter."
        orgIds: [String!]
    ): [DailyComplianceStats!]!
    "List of configuration backups available."
    allConfigBackups(
        "Filters to list configuration backups."
        input: ConfigBackupFilterInput
    ): [ConfigBackup!]!
    "List all connected clusters."
    allConnectedClusters(
        "Specification to filter cluster based on type."
        clusterFilterArg: ClusterTypeEnum
    ): [DataLocationSupportedCluster!]!
    "Current permissions are the set of permissions the client has given to Rubrik. This will retrieve permissions for all the features currently active in the account. If these permissions are older than the latest set of permissions we require, the account will go in Update Permissions state"
    allCurrentFeaturePermissionsForCloudAccounts(
        "List of Rubrik IDs of the cloud accounts."
        cloudAccountIds: [UUID!]!,
        "Vendor of the cloud account."
        cloudVendor: CloudVendor!
    ): [CloudAccountFeaturePermission!]!
    "Lists all identity providers for the current organization."
    allCurrentOrgIdentityProviders: [IdentityProvider!]!
    "List of all DB parameter groups in a given region. Refers to container for engine configuration that applies to one or more DB Instances. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html."
    allDbParameterGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB Engine of RDS Instance."
        dbEngine: AwsNativeRdsDbEngine!,
        "Version of DB engine."
        dbEngineVersion: String!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [DbParameterGroup!]!
    "All DB subnet groups in a given region. Refers to logical isolation of RDS on a network. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html."
    allDbSubnetGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [SubnetGroup!]!
    "All IP addresses on the Rubrik deployment."
    allDeploymentIpAddresses: [String!]!
    "Active DHRC recommendations for the requested categories."
    allDhrcActiveRecommendations(
        "Optional list of categories to filter on."
        categories: [DhrcCategory!]
    ): [DhrcActiveRecommendation!]!
    "DHRC scores for the requested categories and time span."
    allDhrcScores(
        "Optional start of timespan to filter on."
        beginTime: DateTime,
        "Optional list of categories to filter on."
        categories: [DhrcCategory!],
        "Optional timespan to filter on."
        timespan: DhrcScoreTimespan
    ): [DhrcScore!]!
    "List of all key pairs for a given region. A key pair, consisting of a public key and a private key, is a set of security credentials that you use to prove your identity when connecting to an EC2 instance. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html."
    allEc2KeyPairsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [String!]!
    "Retrieve event digests for specific recipients."
    allEventDigests(
        "Input for retrieving event digests."
        input: AllEventDigestsInput!
    ): [EventDigest!]!
    "Failover job reports."
    allFailoverJobReports(
        "The Rubrik UUID for the object."
        fid: UUID!,
        "The recovery job ID."
        recoveryJobID: String
    ): [FailoverJobReport!]!
    "List of permissions required to enable the given feature."
    allFeaturePermissionsForGcpCloudAccount(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!
    ): [GcpPermission!]!
    "List user activity for a specific file on a specific snapshot."
    allFileActivities(
        "Sorts to apply when listing a file's user activities."
        FileActivitiesSort: FileActivitiesSort!,
        "Request for getting user activity for a specific path on a specific snapshot."
        ListFileActivitiesInput: ListFileActivitiesInput!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): UserActivityResultConnection!
    "Check GCP projects permissions for addition."
    allGcpCloudAccountMissingPermissionsForAddition(
        "List of GCP project native IDs."
        projectIds: [String!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpCloudAccountMissingPermissionsForAddition!]!
    "List of GCP projects configured for a feature."
    allGcpCloudAccountProjectsByFeature(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "Search text for project name, native ID and number."
        projectSearchText: String!,
        "List of project status filters to apply."
        projectStatusFilters: [CloudAccountStatus!]!
    ): [GcpCloudAccountProjectDetail!]!
    "List of GCP projects to add after successful authorization."
    allGcpCloudAccountProjectsForOauth(
        "Specfies whether to check permission of projects required for addition."
        checkPermissions: Boolean!,
        "Cloud Account Features."
        features: [CloudAccountFeature!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpCloudAccountProjectForOauth!]!
    "List of GCP KMS Crypto keys accessible in the provided region."
    allGcpNativeAvailableKmsCryptoKeys(
        "ID of the Project."
        projectId: UUID!,
        "GCP region native name."
        regionName: String!
    ): [GcpNativeKmsCryptoKey!]!
    "List of compatible machine types for instance."
    allGcpNativeCompatibleMachineTypes(
        "ID of snapshot."
        snapshotId: UUID!,
        "The zone of the to-be-created instance."
        targetZone: String!
    ): [String!]!
    "List of networks available in a GCP project along with subnetworks and firewall rules."
    allGcpNativeNetworks(
        "ID of the Project."
        projectId: UUID!
    ): [GcpNativeNetwork!]!
    "List of all the GCP projects with accessible networks in this service project."
    allGcpNativeProjectsWithAccessibleNetworks(
        "ID of the Project."
        projectId: UUID!
    ): [NetworkHostProject!]!
    "List of regions available to a GCP project along with zones."
    allGcpNativeRegions(
        "ID of the Project."
        projectId: UUID!
    ): [GcpNativeRegion!]!
    "List of all the distinct machine types of the GCP instances stored with Polaris."
    allGcpNativeStoredMachineTypes: [String!]!
    "List of all the distinct machine types of the GCP instances stored with Polaris."
    allGcpNativeStoredMachineTypesInProject(
        "ID of the Project."
        projectId: UUID!
    ): [String!]!
    "List of all the distinct network names of the GCP instances stored with Polaris."
    allGcpNativeStoredNetworkNames: [String!]!
    "List of all the distinct network names of the GCP instances stored with Polaris."
    allGcpNativeStoredNetworkNamesInProject(
        "ID of the Project."
        projectId: UUID!
    ): [String!]!
    "List of all the distinct regions of the GCP instances stored with Polaris."
    allGcpNativeStoredRegions: [String!]!
    "List of all the distinct regions of the GCP instances stored with Polaris."
    allGcpNativeStoredRegionsInProject(
        "ID of the Project."
        projectId: UUID!
    ): [String!]!
    "Lists all Azure regions supported by the Rubrik-Hosted SaaS protection."
    allHostedAzureRegions: AzureRegionsResp!
    "All account level inventory workloads."
    allInventoryWorkloads: [InventoryCard!]!
    "List IDs of running SONAR issues jobs."
    allIssuesJobIds(queryIds: [String!]!): [String!]!
    "Information of all replicas for a Kubernetes snapshot."
    allK8sReplicaSnapshotInfos(
        "The FID of the workload."
        snappableId: UUID!,
        "The snapshot ID."
        snapshotId: String!
    ): [ReplicatedSnapshotInfo!]!
    "List of encryption keys in the specified region on the specified AWS Native account. All the encrytion keys listed are managed by AWS Key Management System (KMS). For more information, see https://aws.amazon.com/kms/."
    allKmsEncryptionKeysByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [KmsEncryptionKey!]!
    "Latest Permissions are the most recent set of permissions we require for a feature. This will retrieve the permissions for all the features currently active in the accounts along with the features passed in the call."
    allLatestFeaturePermissionsForCloudAccounts(
        "List of Rubrik IDs of the cloud accounts."
        cloudAccountIds: [UUID!]!,
        "Vendor of the cloud account."
        cloudVendor: CloudVendor!,
        "Cloud Account Features."
        features: [CloudAccountFeature!]!
    ): [CloudAccountFeaturePermission!]!
    "Information about the licenses at the product level."
    allLicensedProducts: GetLicensedProductsInfoReply!
    "Provides a list of database files to be restored for the specified restore or export operation."
    allMssqlDatabaseRestoreFiles(
        "Input for V1MssqlGetRestoreFilesV1."
        input: MssqlGetRestoreFilesV1Input!
    ): V1MssqlGetRestoreFilesV1Response!
    "List of Mosaic Storage Locations used for NoSQL backups"
    allNosqlStorageLocations(
        "Specification on how to filter a list of Mosaic Storage Locations."
        filter: [MosaicStorageLocationFilterInput!],
        "Specification on how to sort a list of Mosaic Storage Locations."
        sortBy: MosaicStorageLocationQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): [MosaicStorageLocation!]!
    "All AD Groups belonging to the O365 organization."
    allO365AdGroups(
        "AD group search filter."
        adGroupSearchFilter: String!,
        "Org UUID."
        orgId: UUID!
    ): [AdGroup!]!
    "Gets the status of each org in the account."
    allO365OrgStatuses: [O365OrgInfo!]!
    "Returns the total number of apps of each type, for each O365 org."
    allO365SubscriptionsAppTypeCounts: [O365SubscriptionAppTypeCounts!]!
    "Returns objects that have already been assigned to existing orgs."
    allObjectsAlreadyAssignedToOrgs(
        "Allowed clusters in the org."
        allowedClusters: [String!]!,
        "Objects for each workload type."
        objectIdsForHierarchyTypes: [ObjectIdsForHierarchyTypeInput!]!
    ): [ObjectIdsForHierarchyType!]!
    "Latest audit with usernote for a list of objects."
    allObjectsLatestUserNoteAudit(
        "List of object IDs."
        objectIds: [String!]!
    ): [LatestUserNote!]!
    "List of all RDS option groups in a given region. Refers to settings of how a particular option works for an RDS Instance. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html."
    allOptionGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB Engine of RDS Instance."
        dbEngine: AwsNativeRdsDbEngine!,
        "Version of DB engine."
        dbEngineVersion: String!,
        "Major version of the option group engine."
        majorEngineVersion: String!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [OptionGroup!]!
    "Orgs of given IDs."
    allOrgsByIds(
        "The org ids of the orgs."
        orgIds: [String!]!
    ): [Org!]!
    "Pending actions."
    allPendingActions(
        "Cluster filter."
        clusterFilter: UUID,
        "History only."
        historyOnly: Boolean,
        "Limit."
        limit: Long,
        "Object ids."
        objectIds: [String!],
        "Pending action group type filter."
        pendingActionGroupTypeFilter: [PendingActionGroupTypeEnum!],
        "Pending action subgroup type filter."
        pendingActionSubGroupTypeFilter: [PendingActionSubGroupTypeEnum!],
        "Result ordering."
        sortedOrder: SortOrder,
        "Status filter."
        statusFilter: [PendingActionStatus!]
    ): [pendingAction!]!
    "Quarantine details of all snapshots."
    allQuarantinedDetailsForSnapshots(
        "List of snapshot IDs."
        snapshotIds: [String!]!
    ): [QuarantineSpec!]!
    "Quarantine details of a workload."
    allQuarantinedDetailsForWorkload(
        "The ID of the workload."
        workloadId: String!
    ): [QuarantineSpec!]!
    allReportConfigs(
        dataView: DataViewTypeEnum,
        "Search term to be used for testing all the report names."
        searchTerm: String
    ): [ReportConfig!]!
    "NG version report metadata."
    allReportMetadata(
        "Search term to be used for testing all the report names."
        searchTerm: String
    ): [ReportMetadata!]!
    "Retrieves a list og all resource groups in the specified account."
    allResourceGroupsFromAzure(
        "The Native ID of the subscription."
        azureSubscriptionNativeId: UUID!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!
    ): [AzureResourceGroup!]!
    "A list of report configurations."
    allRscReportConfigs(
        "The type of report. The report type can be None."
        reportView: PolarisReportViewType,
        "Search term to be used for testing all the report names."
        searchTerm: String
    ): [PolarisReportConfig!]!
    "List of all S3 bucket names across regions for the AWS Native account."
    allS3BucketsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!
    ): [String!]!
    "Sharepoint site objects excluded from protection."
    allSharepointSiteExclusions(
        "Org UUID."
        orgId: UUID!,
        "List of site IDs. If none are provided, all the Sharepoint site exclusions are returned."
        siteFids: [String!]!
    ): [FullSpSiteExclusions!]!
    "The iofilter installation status of the compute clusters related to this SLA Domain."
    allSlaIofilterStatuses(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): [ComputeClusterIofilterStatus!]!
    "Describes the snappable resource specs."
    allSnappableResourceSpecs(
        "The snappable identifiers."
        ids: [SnappableIdentifierInput!]!
    ): [ResourceSpec!]!
    "All PVCs in a snapshot."
    allSnapshotPvcs(
        "Specifies if the snapshot is a replica snapshot."
        isReplica: Boolean! = false,
        "The FID of the workload."
        snappableId: UUID!,
        "The snapshot ID."
        snapshotId: String!
    ): [PvcInformation!]!
    "Details of the unexpired snapshot closest to the specified point in time for each provided snappable ID."
    allSnapshotsClosestToPointInTime(
        "The time to search after (inclusive)."
        afterTime: DateTime,
        "The time to search before (inclusive)."
        beforeTime: DateTime,
        "Specifies whether to exclude anomalous snapshots."
        excludeAnomalous: Boolean,
        "Specifies whether to exclude quarantined snapshots."
        excludeQuarantined: Boolean,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Indicate fetched snapshots should include linked ones. if it is true, the return snapshots should include linked ones. "
        includeLinked: Boolean,
        "Workload UUIDs."
        snappableIds: [String!]!
    ): [ClosestSnapshotSearchResult!]!
    "Source recovery specifications."
    allSourceRecoverySpecs(
        "The Blueprint ID."
        blueprintId: UUID!,
        "Type of the Recovery Plan, PROD, TEST, or PROD_LOCAL."
        planType: PlanName!,
        "Source location."
        sourceLocation: LocationInfo,
        "The list of workload recovery points."
        workloadInfos: [SnappableInfoType!]!
    ): [SourceRecoverySpecsReply!]!
    """

    Summary of all storage arrays

    Supported in v5.0+
    Retrieve the host IP and username for all storage arrays.
    """
    allStorageArrays(
        "List of cluster IDs."
        input: [UUID!]!
    ): AllStorageArraysReply!
    "Support case form field definitions."
    allSupportCaseFieldDefinitions: [SupportCaseFieldDefinition!]!
    "List all target mappings."
    allTargetMappings(
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of target mappings."
        filter: [TargetMappingFilterInput!],
        "Corresponds to rcs stats flag, only true value will add rcs stats in response."
        isRcsStatsRequired: Boolean,
        "Specification on how to sort a list of target mappings."
        sortBy: ArchivalGroupQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): [TargetMapping!]!
    "List all targets."
    allTargets(
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Specifies how to filter the list of targets."
        filter: [TargetFilterInput!],
        "Specifies the field by which the list of targets will be sorted."
        sortBy: ArchivalLocationQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): [Target!]! @deprecated(reason: "Please use the query targets instead.")
    "Retrieve most risky policies."
    allTopRiskPolicySummaries(
        "Include whitelisted objects in the results."
        getWhitelistedResults: Boolean!,
        "Maximum number of entries in the response."
        limit: Int!,
        "Types of workloads that can be used for filtering query results."
        workloadTypes: [DataGovObjectType!]! = []
    ): [PolicySummary!]!
    "List of supported object types."
    allUnmanagedObjectsSupportedTypes: [ManagedObjectType!]!
    "All the users on the current account."
    allUsersOnAccount(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): [User!]!
    allUsersOnAccountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        emailFilter: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter users based on lockout status."
        lockoutStateFilter: LockoutStateFilter,
        roleIdsFilter: [UUID!],
        "Get local users only."
        shouldGetLocalUsersOnly: Boolean! = false,
        sortBy: UserFieldEnum = Email,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): UserConnection!
    """

    Get a list of HotAdd proxy virtual machines

    Supported in v5.3+
    Retrieve summary information for all HotAdd proxy virtual machines.
    """
    allVcenterHotAddProxyVms(
        "List of cluster IDs."
        clusterUuids: [UUID!]!
    ): [VcenterHotAddProxyVmInfo!]!
    "The iofilter installation status of the compute clusters related to these virtual machines."
    allVmIofilterStatuses(fids: [UUID!]!): [ComputeClusterIofilterStatus!]!
    "Batch get vsphere vmware cdp state infos."
    allVmwareCdpStateInfos(
        "The ID of each virtual machine for which CDP state info is being retrieved."
        ids: [String!]!
    ): [VmwareCdpStateInfo!]!
    "List of all Virtual Private Clouds (VPCs) in the AWS Native account, classified by region."
    allVpcsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): [AwsVpc!]!
    "List of all Virtual Private Clouds (VPCs) in the AWS Native account."
    allVpcsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID
    ): [AwsVpc!]!
    "All webhooks in the account."
    allWebhooks(
        "The name of the webhooks to retrieve. Leave empty to retrieve all webhooks."
        name: String
    ): WebhookConnection!
    "Amazon Machine Image (AMI) type for export of an archived EC2 Instance snapshot. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html."
    amiTypeForAwsNativeArchivedSnapshotExport(
        "Input for AmiTypeForAwsNativeArchivedSnapshotExport."
        input: AmiTypeForAwsNativeArchivedSnapshotExportInput!
    ): AmiTypeForAwsNativeArchivedSnapshotExportReply!
    analyzerGroups: AnalyzerGroupConnection!
    "Returns which policies are using each analyzer."
    analyzerUsages: AnalyzerUsageConnection!
    "Optional result of the Anomaly Investigation."
    anomalyResultOpt(
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "Corresponds to snapshot ID in Rubrik CDM tables."
        snapshotId: String!
    ): GetAnomalyDetailsReply
    "Results for Anomaly Investigations."
    anomalyResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter anomaly results by input."
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort anomaly results by field."
        sortBy: AnomalyResultSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): AnomalyResultConnection!
    "Results for Anomaly Investigations grouped by an argument."
    anomalyResultsGrouped(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter anomaly results by input."
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group anomaly results by field."
        groupBy: AnomalyResultGroupBy!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): AnomalyResultGroupedDataConnection!
    appBlueprintOngoingFailoverTaskchainUuids(fids: [UUID!]!): GetAppBlueprintOngoingFailoverTaskchainUuidsRsp!
    appBlueprintSnapshotImageInfos(appSnapshotFids: [UUID!]!): GetAppBlueprintSnapshotCloudImagesRsp!
    appflowsSummary: AppflowsSummary!
    "Retrieves the status of multi-geo backups for the specified organization."
    areMultiGeoBackupsEnabled(
        "Org UUID."
        orgId: UUID!
    ): Boolean!
    "List of AWS cloud accounts and the features for each account, classified by ID."
    awsCloudAccountWithFeatures(
        "Arguments for get cloud account."
        awsCloudAccountArg: AwsCloudAccountWithFeaturesInput!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!
    ): AwsCloudAccountWithFeatures!
    "Retrieve aws compute settings."
    awsComputeSettings(
        "Corresponds to Compute Setting Id in Rubrik tables"
        computeSettingId: UUID!
    ): AwsComputeSettings!
    "Refers to the AWS Native account that serves as a container for all your AWS resources. The AWS Native account contains information about the metadata related to the AWS Native resources."
    awsNativeAccount(
        "The Rubrik ID for the AWS Native account."
        awsNativeAccountRubrikId: UUID!,
        "Cloud native protection feature."
        awsNativeProtectionFeature: AwsNativeProtectionFeature!
    ): AwsNativeAccount!
    "Paginated list of all AWS Native accounts."
    awsNativeAccounts(
        accountFilters: AwsNativeAccountFilters,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        authorizedOperationFilter: Operation,
        "Cloud native protection feature."
        awsNativeProtectionFeature: AwsNativeProtectionFeature!,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS accounts."
        sortBy: AwsNativeAccountSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeAccountConnection!
    "Refers to the Amazon Elastic Block Store (EBS) Volume represented by a specific ID. For more information, see https://aws.amazon.com/ebs/."
    awsNativeEbsVolume(
        "Rubrik ID for the AWS EBS Volume object."
        ebsVolumeRubrikId: UUID!
    ): AwsNativeEbsVolume!
    "Paginated list of all AWS EBS Volumes."
    awsNativeEbsVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter for EBS volumes."
        ebsVolumeFilters: AwsNativeEbsVolumeFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeEbsVolumeConnection!
    "Paginated list of all AWS EBS Volumes by name or substring of name."
    awsNativeEbsVolumesByName(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "The native name for the AWS EBS Volume object."
        ebsVolumeName: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeEbsVolumeConnection!
    "Refers to Amazon Elastic Compute Cloud (EC2) Instance represented by a specific ID. For more information, see https://aws.amazon.com/ec2/."
    awsNativeEc2Instance(
        "Rubrik ID for the AWS EC2 Instance."
        ec2InstanceRubrikId: UUID!
    ): AwsNativeEc2Instance!
    "Paginated list of all AWS EC2 Instances."
    awsNativeEc2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter the CDM cloud hosts by workload type."
        descendantTypeFilter: [HierarchyObjectTypeEnum!],
        "Filter for EC2 instances."
        ec2InstanceFilters: AwsNativeEc2InstanceFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeEc2InstanceConnection!
    "Paginated list of all AWS EC2 Instances by name or substring of name."
    awsNativeEc2InstancesByName(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Native name for the AWS EC2 Instance object."
        ec2InstanceName: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeEc2InstanceConnection!
    "Refers to the default values for the export operation of the RDS DB Instance in the AWS Native account."
    awsNativeRdsExportDefaults(
        "Specifies whether the export of the instance is manual or Point-in-Time."
        isPointInTime: Boolean!,
        "The Rubrik ID for the AWS RDS Instance."
        rdsInstanceRubrikId: UUID!,
        "ID of the snapshot if the export is manual."
        snapshotId: String
    ): RdsInstanceExportDefaults!
    "Refers to AWS Relational Database Service (RDS) represented by a specific ID. For more information, see https://aws.amazon.com/rds/."
    awsNativeRdsInstance(
        "The Rubrik ID for the AWS RDS Instance."
        rdsInstanceRubrikId: UUID!
    ): AwsNativeRdsInstance!
    "Paginated list of AWS RDS Instances on AWS Native account."
    awsNativeRdsInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for RDS instances."
        rdsInstanceFilters: AwsNativeRdsInstanceFilters,
        "Sort fields for list of AWS RDS instances."
        sortBy: AwsNativeRdsInstanceSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AwsNativeRdsInstanceConnection!
    "Point-in-Time (PiT) restore window of the RDS Instance in the AWS Native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information,see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html."
    awsNativeRdsPointInTimeRestoreWindow(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): AwsNativeRdsPointInTimeRestoreWindow!
    "Retrieves the configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Polaris features that the customer wants to be enabled on the cloud account."
    azureCloudAccountPermissionConfig(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!
    ): AzureCloudAccountPermissionConfigResponse!
    "Retrieves the details of the Azure cloud account."
    azureCloudAccountSubscriptionWithFeatures(
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!
    ): AzureCloudAccountSubscriptionWithFeatures!
    "Retrieves the details of the Azure tenant and all the subscriptions of the tenant, for a feature."
    azureCloudAccountTenant(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "List of subscription IDs to filter on."
        subscriptionIdsFilter: [UUID!],
        "Search text for subscription name and native ID."
        subscriptionSearchText: String!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatus!]!,
        "Tenant ID of the Azure tenant."
        tenantId: UUID!
    ): AzureCloudAccountTenant!
    "Retrieves details about the Azure cloud account tenant including the Exocompute configurations for the tenant subscriptions, for a specified feature."
    azureCloudAccountTenantWithExoConfigs(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "List of subscription IDs to filter on."
        subscriptionIdsFilter: [UUID!],
        "Search text for subscription name and native ID."
        subscriptionSearchText: String!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatus!]!,
        "Tenant ID of the Azure tenant."
        tenantId: UUID!
    ): AzureCloudAccountTenantWithExoConfigs!
    "Retrieves an Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview."
    azureNativeManagedDisk(
        "Rubrik ID of the Azure Managed Disk."
        azureManagedDiskRubrikId: UUID!
    ): AzureNativeManagedDisk!
    "Retrieves a paginated list of all Azure Native Managed Disks."
    azureNativeManagedDisks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        diskFilters: AzureNativeDiskFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure disks."
        sortBy: AzureNativeDiskSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureNativeManagedDiskConnection!
    "Retrieves an Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside."
    azureNativeResourceGroup(
        "Resource Group ID of Virtual Machine (VM) or Disk."
        resourceGroupId: UUID!
    ): AzureNativeResourceGroup!
    "Retrieves a paginated list of all Azure Native Resource Groups."
    azureNativeResourceGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The type of Azure Native features that Polaris supports."
        azureNativeProtectionFeatures: [AzureNativeProtectionFeature!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for listing Azure resource groups."
        commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "List of protected object types."
        protectedObjectTypes: [WorkloadLevelHierarchy!],
        "Sort fields for listing Azure resource groups."
        sortBy: AzureNativeCommonResourceGroupSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureNativeResourceGroupConnection!
    "Retrieves an Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources."
    azureNativeSubscription(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!
    ): AzureNativeSubscription!
    "Retrieves a paginated list of all Azure Native Subscriptions."
    azureNativeSubscriptions(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters according to the operation given."
        authorizedOperationFilter: Operation,
        "The type of Azure Native feature that Polaris supports."
        azureNativeProtectionFeature: AzureNativeProtectionFeature,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure subscriptions."
        sortBy: AzureNativeSubscriptionSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder,
        subscriptionFilters: AzureNativeSubscriptionFilters,
        "Workload hierarchy."
        workloadHierarchy: WorkloadLevelHierarchy
    ): AzureNativeSubscriptionConnection!
    "Retrieves an Azure Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/."
    azureNativeVirtualMachine(
        "Rubrik ID of the Azure Virtual Machine."
        azureVirtualMachineRubrikId: UUID!
    ): AzureNativeVirtualMachine!
    "Retrieves a paginated list of all Azure Virtual Machines (VMs)."
    azureNativeVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter the CDM cloud hosts by workload type."
        descendantTypeFilter: [HierarchyObjectTypeEnum!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure virtual machines."
        sortBy: AzureNativeVirtualMachineSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder,
        virtualMachineFilters: AzureNativeVirtualMachineFilters
    ): AzureNativeVirtualMachineConnection!
    "Checks the NSG Outbound rules of the Azure resources."
    azureO365CheckNSGOutboundRules(resourceGroupName: String!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSecurityGroupResp!
    "Checks the network subnet of the Azure resources."
    azureO365CheckNetworkSubnet(resourceGroupName: String!, strict_addr_check: Boolean!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSubnetResp!
    "Checks the resource group name."
    azureO365CheckResourceGroupName(groupName: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    "Checks the accessibility of the storage account."
    azureO365CheckStorageAccountAccessibility(groupName: String!, storage_account_name: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    "Checks the storage account name."
    azureO365CheckStorageAccountName(storage_account_name: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    "Checks the Azure subscription quota."
    azureO365CheckSubscriptionQuota(regionName: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    "Checks the virtual network name."
    azureO365CheckVirtualNetworkName(groupName: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureResourceAvailabilityResp!
    "Gets the exocompute details of the given cluster."
    azureO365Exocompute(
        exocomputeClusterId: String!,
        "Org UUID."
        orgId: UUID!
    ): GetAzureO365ExocomputeResp!
    "Retrieves the AzureHostType of the account."
    azureO365GetAzureHostType: GetAzureHostTypeResp!
    "Retrieves the unused addresses available in a subnet."
    azureO365GetNetworkSubnetUnusedAddr(resourceGroupName: String!, strict_addr_check: Boolean!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSubnetUnusedAddrResp!
    "Validates the user roles in the subscription."
    azureO365ValidateUserRoles(subscriptionId: UUID!, tenantId: String!): AzureUserRoleResp!
    "Gets the Azure regions for the given subscription."
    azureRegions(subscriptionId: UUID!, tenantId: String!): RegionConnection!
    "Gets the Azure resource groups for the given subscription."
    azureResourceGroups(subscriptionId: UUID!, tenantId: String!): ResourceGroupConnection!
    "Retrieves an Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more information, see https://azure.microsoft.com/en-us/products/azure-sql/database/."
    azureSqlDatabase(
        "Rubrik ID of the Azure SQL Database."
        azureSqlDatabaseRubrikId: UUID!
    ): AzureSqlDatabaseDb!
    "Point-in-Time (PiT) restore window of the Azure SQL Database instance in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://azure.microsoft.com/en-in/blog/azure-sql-database-point-in-time-restore/."
    azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure(
        "Name of the Azure SQL Database."
        azureSqlDatabaseName: String!,
        "Name of the Azure SQL Database server."
        azureSqlDatabaseServerName: String!,
        "Resource Group Name."
        resourceGroupName: String!,
        "Subscription ID."
        subscriptionId: UUID!
    ): AzureNativeSqlDatabasePointInTimeRestoreWindow!
    "Retrieves an Azure SQL Database Server. Refers to the server that contains the Azure SQL Databases. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers."
    azureSqlDatabaseServer(
        "Rubrik ID of the Azure SQL Database Server."
        azureSqlDatabaseServerRubrikId: UUID!
    ): AzureSqlDatabaseServer!
    "Retrieves a paginated list of all Azure SQL Database Servers."
    azureSqlDatabaseServers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Database Servers."
        azureSqlDatabaseServerFilters: AzureSqlDatabaseServerFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Database Servers."
        sortBy: AzureSqlDatabaseServerSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureSqlDatabaseServerConnection!
    "Retrieves a paginated list of all Azure SQL Databases."
    azureSqlDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Databases."
        azureSqlDatabaseFilters: AzureSqlDatabaseFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Databases."
        sortBy: AzureSqlDatabaseSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureSqlDatabaseDbConnection!
    "Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview."
    azureSqlManagedInstanceDatabase(
        "Rubrik ID of the Azure SQL Managed Instance Database."
        azureSqlManagedInstanceDatabaseRubrikId: UUID!
    ): AzureSqlManagedInstanceDatabase!
    "Retrieves a paginated list of all Azure SQL Managed Instance Databases."
    azureSqlManagedInstanceDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Managed Instance Databases."
        azureSqlManagedInstanceDatabaseFilters: AzureSqlManagedInstanceDatabaseFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Managed Instance Databases."
        sortBy: AzureSqlManagedInstanceDatabaseSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureSqlManagedInstanceDatabaseConnection!
    "Point-in-Time (PiT) restore window of the Azure SQL Managed Instance database in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/point-in-time-restore?tabs=azure-portal."
    azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure(
        "Name of the Azure SQL Database."
        azureSqlDatabaseName: String!,
        "Name of the Azure SQL Managed Instance."
        azureSqlManagedInstanceName: String!,
        "Resource Group Name."
        resourceGroupName: String!,
        "Subscription ID."
        subscriptionId: UUID!
    ): AzureNativeSqlDatabasePointInTimeRestoreWindow!
    "Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of."
    azureSqlManagedInstanceServer(
        "Rubrik ID of the Azure SQL Managed Instance Server."
        azureSqlManagedInstanceServerRubrikId: UUID!
    ): AzureSqlManagedInstanceServer!
    "Retrieves a paginated list of all Azure SQL Managed Instance Servers."
    azureSqlManagedInstanceServers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Managed Instance Servers."
        azureSqlManagedInstanceServerFilters: AzureSqlManagedInstanceServerFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Managed Instance Servers."
        sortBy: AzureSqlManagedInstanceServerSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AzureSqlManagedInstanceServerConnection!
    "Gets the storage accounts for the given subscription."
    azureStorageAccounts(regionName: String!, subscriptionId: UUID!, tenantId: String!): StorageAccountConnection!
    "Gets the subnets for the given subscription."
    azureSubnets(subscriptionId: UUID!, tenantId: String!, vNetId: String!): SubnetConnection!
    "Gets the subscriptions for the given Azure tenant."
    azureSubscriptions(tenantId: String!): AzureSubscriptionConnection!
    "Gets the VNets for the given subscription."
    azureVNets(regionName: String!, subscriptionId: UUID!, tenantId: String!): VnetConnection!
    blueprint(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Blueprint!
    blueprintConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): BlueprintConnection!
    blueprintNew(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): BlueprintNew!
    "list the recovery specs associated with the given blueprint"
    blueprintRecoverySpecs(
        "The Blueprint ID."
        blueprintId: UUID!,
        "Failover summary ID."
        failoverId: UUID,
        "Get invalid recovery spec if true."
        getInvalidSpecs: Boolean,
        "Ignore invalid recovery specs or raise an error."
        ignoreErrors: Boolean,
        "The list of snappable recovery point infos."
        snappableInfos: [SnappableInfoType!]!,
        "Validate the recovery specs if true."
        validate: Boolean
    ): BlueprintRecoverySpecs!
    "Browse Exchange calendar."
    browseCalendar(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Search filter for calendar search."
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "Browse Exchange contacts."
    browseContacts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Search filter for contacts search."
        contactsSearchFilter: ContactsSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    browseFolder(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "Browse channels in a Teams conversations snapshot."
    browseO365TeamConvChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter on channel membership type."
        channelMembershipTypeFilter: ChannelMembershipType!,
        excludeArchived: Boolean!,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "snapshotFid arg which is of optional type"
        snapshotFidOpt: UUID
    ): O365TeamConvChannelConnection!
    "Browse OneDrive files and folders."
    browseOnedrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        onedriveSearchFilter: OnedriveSearchFilter,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Browse SharePoint  drive files and folders."
    browseSharepointDrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        "Org UUID."
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        "The site child ID for SharePoint descendant objects."
        siteChildId: String,
        "The site child type for SharePoint descendant objects."
        siteChildType: SharePointDescendantType,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Browse list objects."
    browseSharepointList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        "Org UUID."
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        "The site child ID for SharePoint descendant objects."
        siteChildId: String,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Returns a list files whose name is prefixed by the query in the given snapshot."
    browseSnapshotFileConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run."
        path: String!,
        "Prefix arg for searching for files within a snapshot."
        searchPrefix: String,
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!
    ): SnapshotFileConnection!
    "Browse channels in a Teams files snapshot."
    browseTeamsChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter on channel membership type."
        channelMembershipTypeFilter: ChannelMembershipType!,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365TeamsChannelConnection!
    "Browse team files."
    browseTeamsDrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!,
        teamsDriveSearchFilter: OnedriveSearchFilter
    ): O365OnedriveObjectConnection!
    "Paginated list of cassandra column families."
    cassandraColumnFamilies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CassandraColumnFamilyConnection!
    "Details of a cassandra column family."
    cassandraColumnFamily(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): CassandraColumnFamily!
    "Get Recoverable Range of a Cassandra Column Family."
    cassandraColumnFamilyRecoverableRange(
        "Input for V2GetMosaicRecoverableRange."
        input: GetMosaicRecoverableRangeInput!
    ): GetMosaicRecoverableRangeResponse!
    "Get Schema of a Cassandra Column Family."
    cassandraColumnFamilySchema(
        "Input for V2GetMosaicTableSchema."
        input: GetMosaicTableSchemaInput!
    ): GetSchemaResponse!
    "Details of a cassandra keyspace."
    cassandraKeyspace(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): CassandraKeyspace!
    "Paginated list of cassandra keyspaces."
    cassandraKeyspaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CassandraKeyspaceConnection!
    "Details of a cassandra source."
    cassandraSource(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): CassandraSource!
    "Paginated list of cassandra sources."
    cassandraSources(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CassandraSourceConnection!
    cdmHierarchySnappableNew(snappableFid: UUID!): CdmHierarchySnappableNew!
    cdmHierarchySnappablesNew(fids: [UUID!]!): [CdmHierarchySnappableNew!]!
    cdmInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): CdmInventorySubHierarchyRoot!
    "A single Microsoft SQL log shipping target."
    cdmMssqlLogShippingTarget(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MssqlLogShippingTarget
    "Paginated list of Microsoft SQL log shipping target."
    cdmMssqlLogShippingTargets(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for Mssql log shipping targets. No filters by default."
        filters: [MssqlLogShippingTargetFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Mssql log shipping targets. Default sort is by id in ascending order."
        sortBy: MssqlLogShippingTargetSortByInput
    ): MssqlLogShippingTargetConnection!
    "Check supported feature for cluster version."
    cdmVersionCheck(
        "Request for checking feature support for cluster version."
        featureToCdmVersion: FeatureCdmVersionInput!
    ): FeatureCdmVersionReply!
    "Metadata of a certificate."
    certificateInfo(
        "Get certificate metadata input."
        input: GetCertificateInfoInput!
    ): GetCertificateInfoReply!
    "Get Certificate Signing Request (CSR)."
    certificateSigningRequest(
        "Certificate Signing Request Input."
        input: GetCsrInput!
    ): Csr!
    "Browse Certificate Signing Requests (CSRs)."
    certificateSigningRequests(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Search for a CSR."
        searchTerm: String,
        "Certificate manager argument to sort by."
        sortBy: CertMgmtSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CsrConnection!
    "Browse certificates."
    certificates(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Search for a certificate."
        searchTerm: String,
        "Certificate manager argument to sort by."
        sortBy: CertMgmtSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CertificateConnection!
    "Certificates having private key."
    certificatesWithKey: CertificateConnection!
    """

    Get details of the cloud compute connectivity check request

    Supported in v6.0+
    Gets the details of the request that was triggered to check the cloud compute connectivity of an archival location.
    """
    checkCloudComputeConnectivityJobProgress(
        "Input for V1GetCloudComputeConnectivityCheckRequestStatus."
        input: GetCloudComputeConnectivityCheckRequestStatusInput!
    ): AsyncRequestStatus!
    "Check if label rule name is unique or not"
    checkCloudNativeLabelRuleNameUniqueness(
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        "Name for the rule"
        ruleName: String!
    ): IsCloudNativeTagRuleNameUniqueReply!
    "Check if tag rule name is unique or not"
    checkCloudNativeTagRuleNameUniqueness(
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        "Name for the rule"
        ruleName: String!
    ): IsCloudNativeTagRuleNameUniqueReply!
    "check the child vm guestOS for given app blueprint"
    checkGuestOsForAppBlueprint(
        "The Blueprint ID."
        blueprintId: UUID!
    ): CheckGuestOsReply!
    classificationBannerSettings: ClassificationBannerSettings!
    classificationLoginSettings: ClassificationLoginSettings!
    cloudAccount(
        "Corresponds to Cloud Account Id in Rubrik tables"
        cloudAccountId: UUID!
    ): CloudAccount!
    "Archived snapshot locking related details for a workload. If no snapshots IDs are passed, all the expired source snapshots and the source snapshots that have a unexpired archival copy will be checked."
    cloudNativeCheckArchivedSnapshotsLocked(
        "List of snapshot IDs."
        snapshotIds: [UUID!],
        "Workload ID."
        workloadId: UUID!
    ): CheckArchivedSnapshotsLockedReply!
    "Queries whether Polaris has the required permissions for a particular feature."
    cloudNativeCheckRequiredPermissionsForFeature(
        "Cloud native account ID"
        cloudNativeAccountId: String!,
        "Feature for which required permissions have to be checked."
        featurePermissionCheck: CloudNativeFeatureForPermissionsCheck!
    ): Boolean!
    "Cloud native label rules."
    cloudNativeLabelRules(
        "Fields and values according to which rules will be filtered."
        filters: [CloudNativeFilter!],
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        sortBy: CloudNativeTagRuleSortByFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): GetCloudNativeLabelRulesReply!
    "Fetches the URLs for the windows, linux and debian RBA installers."
    cloudNativeRbaInstallers: RbaInstallerUrls!
    "Details of snapshot types available for recovery."
    cloudNativeSnapshotDetailsForRecovery(
        "Snapshot UUID"
        snapshotId: UUID!
    ): CloudNativeSnapshotDetailsForRecoveryReply!
    "List of all files and directories in a given path with the given prefix in name."
    cloudNativeSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run."
        path: String!,
        "Name prefix for searching for files within a snapshot."
        searchPrefix: String,
        "Id of the snapshot to be searched/browsed"
        snapshotFid: UUID!
    ): SnapshotFileConnection!
    "Returns the script to setup backup for a SQL Server database."
    cloudNativeSqlServerSetupScript: CloudNativeSqlServerSetupScript!
    "Cloud native tag rules."
    cloudNativeTagRules(
        "Fields and values according to which rules will be filtered."
        filters: [CloudNativeFilter!],
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        sortBy: CloudNativeTagRuleSortByFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): GetCloudNativeTagRulesReply!
    "List all files and directories in a given snappable with the given prefix in name."
    cloudNativeWorkloadVersionedFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Name or Path prefix arg for searching for files within a snappable."
        searchQuery: String!,
        "Snappable ID."
        snappableId: UUID!
    ): CloudNativeVersionedFileConnection!
    "A cluster object."
    cluster(
        "The Rubrik cluster ID."
        clusterUuid: UUID!
    ): Cluster!
    """

    Get all certificates

    Supported in v5.1+
    Get all certificates.
    """
    clusterCertificates(
        "Input for V1QueryCertificates."
        input: QueryCertificatesInput!
    ): CertificateSummaryListResponse!
    "List of the available cluster objects."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort clusters by field."
        sortBy: ClusterSortByEnum = ClusterType,
        "Cluster sort order."
        sortOrder: SortOrder = DESC
    ): ClusterConnection!
    """

    Get the cluster certificate signing request

    Supported in v7.0+
    Returns the certificate signing request generated from the private key of the Rubrik cluster.
    """
    clusterCsr(
        "Input for V1GetClusterCsr."
        input: GetClusterCsrInput!
    ): ClusterCsr!
    """

    Get current default gateway

    Supported in v5.0+
    Get current default gateway.
    """
    clusterDefaultGateway(
        "Input for InternalGetDefaultGateway."
        input: GetDefaultGatewayInput!
    ): InternalGetDefaultGatewayResponse!
    "Rubrik cluster DNS information."
    clusterDns(
        "The Rubrik cluster ID."
        clusterUuid: UUID!
    ): ClusterDnsReply!
    """

    Get a list of a cluster's always-available Ips

    Supported in v5.0+
    Get a list of a cluster's always-available Ips.
    """
    clusterFloatingIps(
        "Input for InternalGetClusterIps."
        input: GetClusterIpsInput!
    ): InternalGetClusterIpsResponse!
    clusterGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group by field."
        groupBy: ClusterGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): ClusterGroupByConnection!
    clusterGroupByUpgradeInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: UpgradeInfoGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0,
        upgradeFilter: CdmUpgradeInfoFilterInput
    ): UpgradeInfoGroupByConnection!
    """

    Get IPMI details

    Supported in v5.0+
    get IPMI details of availability and enabled access in the cluster.
    """
    clusterIpmi(
        "Input for InternalGetIpmi."
        input: GetIpmiInput!
    ): ModifyIpmiReply!
    """

    Get network interfaces for a Rubrik Cluster cluster

    Supported in v5.0+
    Retrieves network interfaces(including VLANs) on bond0/bond1.
    """
    clusterNetworkInterfaces(
        "Input for InternalGetNetworkInterface."
        input: GetNetworkInterfaceInput!
    ): NetworkInterfaceListResponse!
    """

    Get list of nodes in this Rubrik cluster

    Supported in v5.0+
    Returns the list of all Rubrik nodes.
    """
    clusterNodes(
        "Input for InternalGetNodes."
        input: GetNodesInput!
    ): NodeStatusListResponse!
    """

    Get NTP Servers

    Supported in v5.0+
    Retrieve a list of the NTP servers assigned to the Rubrik cluster. Encryption keys are not reported.
    """
    clusterNtpServers(
        "Input for InternalGetClusterNtpServers."
        input: GetClusterNtpServersInput!
    ): NtpServerConfigurationListResponse!
    "Rubrik cluster proxy information."
    clusterProxy(
        "The Rubrik cluster ID."
        clusterUuid: UUID!
    ): ClusterProxyReply!
    "Info about the cluster product types the user is entitled to."
    clusterRegistrationProductInfo: ClusterRegistrationProductInfoType!
    clusterSlaDomainConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterSlaDomainConnection!
    clusterSlaDomainFilterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterSlaDomainForFilterConnection!
    clusterTypeList: [GroupCount!]!
    "Rubrik cluster VLAN information."
    clusterVlans(
        "Input for InternalGetVlan."
        input: GetVlanInput!
    ): VlanConfigListResponse!
    """

    Get the signed certificate for Web server

    Supported in v5.2+
    If the web server uses a signed certificate, fetch it.
    """
    clusterWebSignedCertificate(
        "Input for V1GetWebSignedCertificate."
        input: ClusterWebSignedCertificateInput!
    ): ClusterWebSignedCertificateReply!
    "A cluster object with config protection information."
    clusterWithConfigProtectionInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for the Configuration Protection page."
        configProtectionFilter: ConfigProtectionInfoFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort configuration protection information by field."
        sortBy: ConfigProtectionInfoSortBy = CLUSTER_NAME,
        "Cluster sort order."
        sortOrder: SortOrder = DESC
    ): ClusterConnection!
    clusterWithUpgradesInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort upgradeInfo by field"
        sortBy: UpgradeInfoSortByEnum = ClusterType,
        "Cluster sort order."
        sortOrder: SortOrder = DESC,
        upgradeFilter: CdmUpgradeInfoFilterInput
    ): ClusterConnection!
    """

    Get details for the compute cluster

    Supported in v5.1+
    Get details for the compute cluster.
    """
    computeClusterStatus(
        "Input for V1GetComputeCluster."
        input: GetComputeClusterInput!
    ): ComputeClusterDetail!
    "Configuration protection setup information for a cluster."
    configProtectionSetupInfo(
        "Cluster UUID for retrieving configuration protection setup."
        clusterUuid: UUID!
    ): ConfigProtectionSetupInfo!
    "Objects that match the specifications of a configured group."
    configuredGroupMembers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "A list of preferred data locations that group members must match."
        pdls: [String!]!,
        "A wildcard pattern that group members' names or URLs must match."
        wildcard: String
    ): O365ConfiguredGroupMemberConnection!
    countOfObjectsProtectedBySlas(
        "The hierarchy object filter."
        filter: [Filter!],
        "Forever UUID of the object root. The value of  `none` represents the global hierarchy root."
        rootOptionalFid: UUID,
        "A list of global SLA Domain IDs."
        slaIds: [UUID!]!,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CountOfObjectsProtectedBySLAsResult!
    "Returns details for one crawl."
    crawl(crawlId: String!): Crawl!
    "Returns crawls for an account."
    crawls: CrawlConnection!
    currentIpAddress: String!
    "Authentication domain configuration of the current organization."
    currentOrgAuthDomainConfig: TenantAuthDomainConfig!
    "Currently logged-in user."
    currentUser: User!
    "Current user login context."
    currentUserLoginContext: UserLoginContext!
    customAnalyzer(analyzerId: String!): Analyzer!
    "Details of all the cyber recovery objects."
    cyberRecoveryObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Cyber recovery objects filter parameters."
        cyberRecoveryObjectsFilter: CyberRecoveryObjectsFilterParams,
        "Cyber recovery objects sorting parameters."
        cyberRecoveryObjectsSort: CyberRecoveryObjectsSortParams,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): CyberRecoveryObjectConnection!
    "Returns hits grouped by analyzer and policy."
    dashboardSummary(
        "Include whitelisted objects in the results."
        getWhitelistedResults: Boolean!
    ): GetDashboardSummaryReply!
    "NG Alpha version report metadata."
    dataViewMetadata(
        "Search term to be used for testing all the report names."
        searchTerm: String
    ): [dataViewMetadata!]!
    "Returns permissions associated with a path."
    datagovSecDesc(
        "Skip converting SIDs in response to friendly names"
        skipResolveSids: Boolean,
        snappableFid: String!,
        snapshotFid: String!,
        stdPath: String!
    ): QuerySDDLReply!
    "Details of a db2 database for a given fid."
    db2Database(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Db2Database!
    "Connection of filtered db2 databases based on specific filters."
    db2Databases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): Db2DatabaseConnection!
    "Details of a db2 instance for a given fid."
    db2Instance(
        "The Rubrik UUID of the Db2 instance."
        id: UUID!
    ): Db2Instance!
    "Connection of filtered db2 instances based on specific filters."
    db2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): Db2InstanceConnection!
    "Details of a Db2 log snapshot for a given fid."
    db2LogSnapshot(
        "The Rubrik UUID of the Db2 log snapshot object."
        db2LogSnapshotFid: UUID!
    ): Db2LogSnapshot!
    "Connection of all log snapshots for Db2."
    db2LogSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter Db2 log snapshots."
        filter: Db2LogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort Db2 log snapshots."
        sortBy: Db2LogSnapshotSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): Db2LogSnapshotConnection!
    "Details of a Db2 recoverable range for a given fid."
    db2RecoverableRange(
        "The Rubrik UUID of the Db2 recoverable range object."
        db2RecoverableRangeFid: UUID!
    ): Db2RecoverableRange!
    "Connection of all recoverable ranges for Db2."
    db2RecoverableRanges(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter Db2 recoverable ranges."
        filter: Db2RecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort Db2 recoverable ranges."
        sortBy: Db2RecoverableRangeSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): Db2RecoverableRangeConnection!
    "Decrypt Export URL."
    decryptExportUrl(
        "Encrypted string of Export URL Specs containing arbitrary characters"
        exportUrlSpecsEnc: String!
    ): ExportUrlSpecs!
    "Polaris deployment version."
    deploymentVersion: String!
    "Browse diff FMD under given path."
    diffFmd(
        "Root path to browse changes of FMD."
        browseDiffPath: String!,
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "Workload managed ID."
        managedId: String!,
        "Corresponds to snapshot ID in Rubrik CDM tables."
        snapshotId: String!
    ): DiffResult!
    """

    v5.0-v5.1: Discover bootstrappable nodes
    v5.2+: (DEPRECATED) Discover bootstrappable nodes

    Supported in v5.0+
    v5.0-v5.1: Searches for nodes bootstrappable to the specified Rubrik cluster
    v5.2+: Searches for nodes that can bootstrap into the specified Rubrik cluster. This endpoint will be moved to v1 in the next major version.
    """
    discoverNodes(
        "ID of the Rubrik cluster or *me* for self."
        id: String!
    ): BootstrappableNodeInfoListResponse!
    "Returns timeline data for all policies of an account."
    discoveryTimeline(
        "End time, in string format (YYYY-MM-DD)."
        endDay: String!,
        "Include whitelisted objects in the results."
        getWhitelistedResults: Boolean!,
        "Start time, in string format (YYYY-MM-DD)."
        startDay: String!,
        timezone: String!,
        "Specifies whether the optimized discovery timeline must be used for the request. If not passed, default is taken as false."
        useOptimisedDiscoveryTimeline: Boolean,
        "Types of workloads that can be used for filtering query results."
        workloadTypes: [DataGovObjectType!]! = []
    ): GetPoliciesTimelineReply!
    "Checks if a resource group with the specified name exists in the specified account."
    doesAzureNativeResourceGroupExist(
        "The Native ID of the subscription."
        azureSubscriptionNativeId: UUID!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeature!,
        "The name of the resource group."
        resourceGroupName: String!
    ): Boolean!
    downloadActiveSlaWithReplicationCsv(
        "UUID of the Rubrik cluster"
        cdmClusterUUID: UUID!,
        "Include Archived SLA"
        includeArchived: Boolean!
    ): DownloadActiveSlaWithReplicationCsvReply!
    "Download cdm upgrades table pdf."
    downloadCdmUpgradesPdf(
        "Filters for the Rubrik CDM upgrades page for PDF generation."
        downloadFilter: DownloadCdmUpgradesPdfFiltersInput
    ): DownloadCdmUpgradesPdfReply!
    "Get Status of download package job."
    downloadPackageStatus(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): DownloadPackageStatusReply!
    "Download report in CSV format."
    downloadReportLink(
        "Configuration parameters for the report."
        config: CustomReportCreate,
        id: Int!
    ): DownloadLink!
    "Download report in PDF format."
    downloadReportPdfLink(
        "Configuration parameters for the report."
        config: CustomReportCreate,
        id: Int!
    ): DownloadLink!
    downloadedVersionList: [GroupCount!]!
    dummyFieldWithAdminOnlyTag: Boolean!
    ec2Blueprint(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Ec2Blueprint!
    "Retrieve access token for the Rubrik Envoy registration script."
    envoyRegistrationToken(
        "ID of the tenant network in which Rubrik Envoy is to be registered."
        tenantNetworkId: UUID!
    ): EnvoyRegistrationToken!
    "Details of an Exchange DAG for a given fid."
    exchangeDag(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): ExchangeDag!
    "Connection of filtered Exchange DAGs based on specific filters."
    exchangeDags(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ExchangeDagConnection!
    "Details of an Exchange Database for a given fid."
    exchangeDatabase(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): ExchangeDatabase!
    "Connection of filtered Exchange Databases based on specific filters."
    exchangeDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ExchangeDatabaseConnection!
    "Paginated list of Exchange Database live mounts."
    exchangeLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for exchange live mounts."
        filters: [ExchangeLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for exchange live mounts."
        sortBy: ExchangeLiveMountSortByInput
    ): ExchangeLiveMountConnection!
    "Details of an Exchange Server for a given fid."
    exchangeServer(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): ExchangeServer!
    "Connection of filtered Exchange Servers based on specific filters."
    exchangeServers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ExchangeServerConnection!
    "Customer facing Polaris deployment name."
    externalDeploymentName: String!
    "failover"
    failover(
        "failover ID"
        failoverId: String!
    ): Failover
    failoverAllSourceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): FailoverSourceConnection!
    failoverAllTargetSiteConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): FailoverTargetSiteConnection!
    "Get details of the given failover cluster app."
    failoverClusterApp(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): FailoverClusterApp!
    "Get a summary of all failover cluster apps."
    failoverClusterApps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Host failover cluster root type."
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): FailoverClusterAppConnection!
    "Get a summary of all failover cluster top level descendants."
    failoverClusterTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Host failover cluster root type."
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterTopLevelDescendantTypeConnection!
    failoverConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter appflows failover jobs by input"
        filter: FailoverFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort appflows failover jobs by field."
        sortBy: FailoverSortByEnum = AppBlueprintName,
        "failover jobs sort order."
        sortOrder: SortOrder = DESC,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): FailoverConnection!
    failoverGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter appflows failover jobs by input"
        filter: FailoverFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group appflows failover jobs by a field."
        groupBy: FailoverGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): FailoverGroupByConnection!
    "Failover job reports."
    failoverJobReports(
        "Workload recovery status."
        RecoveryStatus: [RecoveryStatuses!],
        "Sort parameters."
        SortParams: AllFailoverJobReportsSortParam,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Recovery end time (in milliseconds since epoch)."
        endTimeMs: DateTime,
        "The failover event type of the Recovery Plan."
        failoverType: [FailoverTypeEnum!]!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "List of recovery plan names."
        planNames: [String!],
        "Recovery start time (in milliseconds since epoch)."
        startTimeMs: DateTime,
        "List of workload IDs."
        workloadIDs: [UUID!]
    ): FailoverJobReportConnection!
    "The report for the failover job."
    failoverReport(
        "failover report ID"
        failoverReportId: String!
    ): FailoverReport
    "Evaluate a single feature flag and get the result"
    featureFlag(
        "List of flag names to evaluate"
        entityContext: [FeatureFlagContextField!],
        "The type of entity context to evaluate against. The value of this arg determines how the entity ID is inferred."
        entityType: FeatureFlagEntityType!,
        "Name of flag to evaluate"
        flagName: FeatureFlagName!
    ): FeatureFlag!
    "Evaluate all known feature flags."
    featureFlagAll(
        "List of flag names to evaluate"
        entityContext: [FeatureFlagContextField!],
        "The type of entity context to evaluate against. The value of this arg determines how the entity ID is inferred."
        entityType: FeatureFlagEntityType!
    ): FeatureFlagAll!
    "Get names of feature flags that surfaced in APIs"
    featureFlagNames: [String!]!
    "Status of the federated login."
    federatedLoginStatus: FederatedLoginStatus!
    "Fetch fake data for testing purpose."
    fetchFakeData(
        "Buffer space allocated before making an RPC."
        preProcessingBufferBytes: Long,
        "Time taken by the request to serve the response."
        responsePeriodMs: Long!,
        "Approx size of the response payload."
        responseSizeBytes: Long,
        "Whether the request blocks the processing thread."
        shouldBlock: Boolean!
    ): FakeDataConnection!
    filesetSnapshot(
        "ID of snapshot."
        id: String!,
        "Whether or not to fetch verbose fileset snapshot information. The performance of this endpoint will decrease if set to true."
        verbose: Boolean
    ): FilesetSnapshotDetail!
    """

    Lists all files and directories in a given path

    Supported in v5.0+
    Lists all files and directories in a given path.
    """
    filesetSnapshotFiles(
        "ID of snapshot."
        id: String!,
        "Maximum number of entries in the response."
        limit: Int,
        "Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries."
        offset: Int,
        "The absolute path of the starting point for the directory listing."
        path: String!
    ): BrowseResponseListResponse!
    filesetTemplate(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): FilesetTemplate!
    "Get a summary of all fileset templates."
    filesetTemplates(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Host root type."
        hostRoot: HostRoot!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): FilesetTemplateConnection!
    "Returns the service account corresponding to global credentials. Return empty string if global credentials are absent"
    gcpGetDefaultCredentialsServiceAccount: String!
    "Get details of a GCP Disk"
    gcpNativeDisk(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): GcpNativeDisk!
    "List of GCP disks."
    gcpNativeDisks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        diskFilters: GcpNativeDiskFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of GCP disks."
        sortBy: GcpNativeDiskSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): GcpNativeDiskConnection!
    "Get details of a GCE Instance"
    gcpNativeGceInstance(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): GcpNativeGceInstance!
    "List of GCE instances."
    gcpNativeGceInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        gceInstanceFilters: GcpNativeGceInstanceFilters,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of GCP GCE instances."
        sortBy: GcpNativeGceInstanceSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): GcpNativeGceInstanceConnection!
    "Get details of a GCP Project"
    gcpNativeProject(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): GcpNativeProject!
    "List of GCP projects."
    gcpNativeProjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        authorizedOperationFilter: Operation,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        projectFilters: GcpNativeProjectFilters,
        "Sort fields for list of GCP projects."
        sortBy: GcpNativeProjectSortFields,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Provide optional workload hierarchy for RBAC and SLA, none value is assumed to be All workload hierarchy."
        workloadHierarchy: WorkloadLevelHierarchy
    ): GcpNativeProjectConnection!
    "lists distinct regions and zones of the GCP disks stored with Polaris"
    gcpNativeStoredDiskLocations(
        "UUID of the Project (Optional)"
        projectId: UUID
    ): ListStoredDiskLocationsReply!
    geoLocationList: [GroupCount!]!
    "Obtain account settings value."
    getAccountSettingValue(
        "Name of component that uses ASP in account setting table."
        aspComponent: ComponentEnum!,
        "Name of Account Setting Parameter (ASP) in account setting table."
        aspName: String!
    ): ASPValue!
    getAllRolesInOrgConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Name to filter the results."
        nameFilter: String,
        sortBy: RoleFieldEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): RoleConnection!
    "Get CDM release details from support portal for a given list of clusters."
    getCdmReleaseDetailsForClusterFromSupportPortal(
        "Retrieves version details."
        fetchLinks: Boolean! = false,
        "Filter to include only the versions released after the source version."
        filterAfterSource: Boolean! = false,
        "Filters for the available upgrade versions."
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions."
        filterVersion: String! = "",
        "Specifies the list of cluster UUIDs."
        listClusterUuid: [UUID!]!,
        "Shows all versions."
        shouldShowAll: Boolean! = true,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get CDM release details from support portal for a given list of clusters specific to a target version."
    getCdmReleaseDetailsForVersionFromSupportPortal(
        "Retrieves version details."
        fetchLinks: Boolean! = false,
        "Filter to include only the versions released after the source version."
        filterAfterSource: Boolean! = false,
        "Filters for the available upgrade versions."
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions."
        filterVersion: String! = "",
        "Specifies the list of cluster UUIDs."
        listClusterUuid: [UUID!]!,
        "Shows all versions."
        shouldShowAll: Boolean! = true,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get available versions on support portal for a cluster."
    getCdmReleaseDetailsFromSupportPortal(
        "Retrieves version details."
        fetchLinks: Boolean! = false,
        "Filter to include only the versions released after the source version."
        filterAfterSource: Boolean! = false,
        "Filters for the available upgrade versions."
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions."
        filterVersion: String! = "",
        "Number of nodes in the cluster."
        nodeCount: Long! = 4,
        "Platform type of the cluster."
        platform: String! = "",
        "Shows all versions."
        shouldShowAll: Boolean! = true,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Source version of the cluster."
        sourceVersion: String! = ""
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get DNS server addresses."
    getDns: [String!]!
    getGroupCountByCdmClusterStatus: GroupCountListWithTotal!
    getGroupCountByPrechecksStatus: [GroupCount!]!
    getGroupCountByUpgradeJobStatus: [GroupCount!]!
    getGroupCountByVersionStatus: [GroupCount!]!
    getKorgTaskchainStatus(taskchainId: String!): GetTaskchainStatusReply!
    "Get NTP server addresses."
    getNtp: [String!]!
    getPermissions(roleId: String!): [Permission!]!
    getRolesByIds(roleIds: [String!]!): [Role!]!
    getUserDownloads(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): [UserDownload!]!
    "Global certificate."
    globalCertificate(
        "ID of the global certificate to retrieve."
        certificateId: String!
    ): GlobalCertificate!
    "Global certificates."
    globalCertificates(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Input to list global certificates."
        input: GlobalCertificatesQueryInput!,
        "Returns the last n elements from the list."
        last: Int,
        "Field on which to sort the certificates."
        sortBy: GlobalCertificateSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): GlobalCertificateConnection!
    "All files matching input filters."
    globalFileSearch(
        "Input for InternalGlobalSearchApiQuery."
        input: GlobalFileSearchInput!
    ): GlobalFileSearchReply!
    "Get global multifactor authentication (MFA) for an account."
    globalMfaSetting: GetMfaSettingReply!
    globalSearchResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HierarchyObjectConnection!
    globalSlaFilterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Specifies the context filter input to use."
        contextFilterInput: [ContextFilterInputField!],
        "Filter for the SLA Domain query."
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies whether to show the Rubrik clusters where this SLA Domain is paused."
        shouldShowPausedClusters: Boolean = false,
        "Specifies whether to show the number of workloads protected by the SLA Domain."
        shouldShowProtectedObjectCount: Boolean = false,
        "Specifies whether to show the SLA Domain sync status on Rubrik CDM."
        shouldShowSyncStatus: Boolean = false,
        "Specifies whether to show the upgrade information for an SLA Domain or not."
        shouldShowUpgradeInfo: Boolean = false,
        "Specifies whether to retrieve the remote SLA Domains from Rubrik CDM. By default, remote SLA Domains are not retrieved."
        showRemoteSlas: Boolean,
        "Field to sort the SLA Domains list."
        sortBy: SlaQuerySortByField,
        "Sort order for sorting the SLA Domains returned by the query."
        sortOrder: SortOrder
    ): GlobalSlaForFilterConnection!
    "Status on the clusters where global SLA is synced."
    globalSlaStatuses(
        "SLA ID for global SLAs."
        SlaId: UUID!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for SLAStatus."
        filter: [SlaStatusFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): PolarisSlaStatusConnection!
    "Retrieve groups from current and descendant organizations based on the specified filters."
    groupsInCurrentAndDescendantOrganization(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies user group filters."
        filter: GroupFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies whether to include user groups without any assigned roles either in the current or descendant orgs. If roleIdsFilter is not empty, this field is always considered as false."
        shouldIncludeGroupsWithoutRole: Boolean = false,
        "Specifies sort parameter."
        sortBy: GroupSortByParam
    ): GroupConnection!
    guestCredentials(
        "Input for InternalQueryGuestCredential."
        input: QueryGuestCredentialInput!
    ): GuestCredentialDetailListResponse!
    "Determine whether the current organization has configured identity providers."
    hasIdpConfigured: Boolean!
    "Paginated list of help content snippets."
    helpContentSnippets(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter for help content snippets."
        filter: HelpContentSnippetsFilterInput!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): HelpContentSnippetConnection!
    hierarchyObject(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HierarchyObject!
    hierarchyObjects(
        fids: [UUID!]!,
        "The hierarchy object filter."
        filter: [Filter!]
    ): [HierarchyObject!]!
    hierarchySnappables(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HierarchySnappableConnection!
    """

    Get host availability statuses

    Supported in v5.0+
    Retrieve the availability status for each host registered with a specified Rubrik CDM instance.
    """
    hostDiagnosis(
        "ID assigned to the host object."
        id: String!
    ): HostDiagnosisSummary!
    "Get details of the given host failover cluster."
    hostFailoverCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HostFailoverCluster!
    "Get a summary of all host failover clusters."
    hostFailoverClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Host failover cluster root type."
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HostFailoverClusterConnection!
    hostShare(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HostShare!
    "Get all host shares."
    hostShares(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HostShareConnection!
    "Total number of host volumes the account has."
    hostVolumesCount: Int!
    "Details of the given Hyper-V Cluster."
    hypervCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HyperVCluster!
    """

    Get Hyper-V host async request

    Supported in v5.0+
    Get details about a Hyper-V host related async request.
    """
    hypervHostAsyncRequestStatus(
        "Input for InternalGetHypervHostAsyncRequestStatus."
        input: GetHypervHostAsyncRequestStatusInput!
    ): AsyncRequestStatus!
    "HyperV Live Mount Connection."
    hypervMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for hyper-v live mounts."
        filters: [HypervLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for hyper-v live mounts."
        sortBy: HypervLiveMountSortByInput
    ): HyperVLiveMountConnection!
    "Details of the given Hyper-V SCVMM."
    hypervScvmm(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HyperVSCVMM!
    """

    Get Hyper-V SCVMM async request

    Supported in v5.0+
    Get details about a Hyper-V SCVMM related async request.
    """
    hypervScvmmAsyncRequestStatus(
        "Input for InternalGetHypervScvmmAsyncRequestStatus."
        input: GetHypervScvmmAsyncRequestStatusInput!
    ): AsyncRequestStatus!
    "Paginated list of HyperV SCVMMs."
    hypervScvmms(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HyperVSCVMMConnection!
    "Details of the given Hyper-V Server."
    hypervServer(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HypervServer!
    """

    Get summary of all the Hyper-V hosts

    Supported in v5.0+
    Get summary of all the Hyper-V hosts.
    """
    hypervServers(
        "Input for InternalQueryHypervHost."
        input: QueryHypervHostInput!
    ): HypervHostSummaryListResponse!
    "Paginated list of the highest-level HyperV Objects accessible by the current user."
    hypervTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HypervTopLevelDescendantTypeConnection!
    "Details of the given Hyper-V Virtual Machine."
    hypervVirtualMachine(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): HyperVVirtualMachine!
    """

    Get VM async request details

    Supported in v5.0+
    Get details about a Hyper-V vm related async request.
    """
    hypervVirtualMachineAsyncRequestStatus(
        "Input for InternalGetHypervVirtualMachineAsyncRequestStatus."
        input: GetHypervVirtualMachineAsyncRequestStatusInput!
    ): AsyncRequestStatus!
    "Paginated list of HyperV Virtual Machines."
    hypervVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): HyperVVirtualMachineConnection!
    "HyperV Virtual Machine detail from CDM."
    hypervVmDetail(
        "Input for InternalGetHypervVirtualMachine."
        input: GetHypervVirtualMachineInput!
    ): HypervVirtualMachineDetail!
    installedVersionList: [InstalledVersionGroupCount!]!
    "list the available Instance Types"
    instanceTypeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Blueprint ID."
        blueprintId: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "the fid of the snapshot"
        snapshotId: UUID,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SnappableInstanceTypeConnection!
    inventoryRoot: InventoryRoot!
    inventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): InventorySubHierarchyRoot!
    "Link to downloadable investigation results in CSV format."
    investigationCsvDownloadLink(
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "Corresponds to snapshot ID in Rubrik CDM tables."
        snapshotId: String!,
        "ID of the object and not the FID."
        workloadId: String!
    ): InvestigationCsvDownloadLinkReply!
    ipWhitelist: GetWhitelistReply!
    "Specified whether an EBS volume is restorable. For an EBS Volume to be restorable, the volume should be able to replace where attached."
    isAwsNativeEbsVolumeSnapshotRestorable(
        "UUID of the snapshot"
        snapshotId: String!
    ): IsVolumeSnapshotRestorableReply!
    "Specifies whether the given DbInstance class, storage type, multi-az capability, encryption capability, iops value are supported for the given dbEngine, dbEngineVersion in the specified availability zone. When true, the specification is valid for a RDS Instance and can be used to create a new Instance."
    isAwsNativeRdsInstanceLaunchConfigurationValid(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB class of the exported RDS DB instance."
        dbClass: AwsNativeRdsDbInstanceClass!,
        "DB Engine of RDS Instance."
        dbEngine: AwsNativeRdsDbEngine!,
        "Version of DB engine."
        dbEngineVersion: String!,
        "IOPs of the exported RDS DB instance."
        iops: Int,
        "Whether the exported RDS DB instance is multi-AZ or not."
        isMultiAz: Boolean!,
        "KMS Key ID of the exported RDS DB instance."
        kmsKeyId: String,
        "AZ in which the exported RDS DB instance must be launched."
        primaryAz: String,
        "Region in AWS."
        region: AwsNativeRegion!,
        "Storage type of the exported RDS DB instance."
        storageType: AwsNativeRdsStorageType
    ): Boolean!
    "Specifies whether an S3 bucket name is available for use in AWS or not. When true, the bucket name is available for use."
    isAwsS3BucketNameAvailable(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the S3 bucket."
        bucketName: String!
    ): Boolean!
    "Specifies whether the Managed Disk snapshot is restorable or not. A managed disk is restorable when the restore settings of the Managed Disk are configured on the Azure portal and on the Rubrik platform. When the value is true, the managed disk snapshot is restorable."
    isAzureNativeManagedDiskSnapshotRestorable(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "Snapshot ID"
        diskSnapshotId: UUID!
    ): Boolean!
    "Checks if an Azure SQL Database Snapshot or an Azure SQL Managed Instance Database Snapshot is a persistent snapshot."
    isAzureNativeSqlDatabaseSnapshotPersistent(
        "Snapshot ID"
        snapshotId: UUID!
    ): Boolean!
    "Specifies whether the given storage account name is valid and available in Azure to be assigned to a new storage account. When the value is true, the specified account name is available in Azure."
    isAzureStorageAccountNameAvailable(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "A unique name for the storage account. Storage account names must be between 3 and 24 characters in length and may contain numbers and lowercase letters only."
        storageAccountName: String!
    ): Boolean!
    "List of snapshots with their file recovery feasibility status"
    isCloudNativeFileRecoveryFeasible(
        "List of snapshot IDs."
        snapshotIds: [UUID!]!
    ): ValidateCloudNativeFileRecoveryFeasibilityReply!
    "Is Logged into Rubrik support portal."
    isLoggedIntoRubrikSupportPortal: SupportPortalStatusReply!
    "Is Rubrik Suppport Portal reachable from this deployment."
    isSfdcReachable(
        "Hostname to access the Support portal."
        hostname: String! = "rubrik.force.com",
        "Support portal organization ID."
        organizationId: String! = "00D40000000N3x2"
    ): Boolean!
    "Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version."
    isTotpAckNecessaryForCluster(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): Boolean!
    "Checks whether enabling Time-based, One-Time Password (TOTP) is mandatory in the target Rubrik CDM upgrade version."
    isTotpMandatoryInTargetVersion(
        "Specifies the Rubrik CDM upgrade tarball version."
        version: String!
    ): Boolean!
    "Is upgrade available for a particular cluster."
    isUpgradeAvailable(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): CdmUpgradeAvailabilityReply!
    "Is upgrade recommended for a particular cluster."
    isUpgradeRecommended(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): CdmUpgradeRecommendationReply!
    isVMwareManagementEnabled: Boolean!
    "Checks if Zone Redundant Storage (ZRS) is available for a given combination of account, region, subscription and service tier."
    isZrsAvailableForLocation(
        "The azure region."
        region: AzureNativeRegion!,
        "The service tier of the database."
        serviceTier: ServiceTier!,
        "Subscription ID."
        subscriptionId: UUID!
    ): ZrsAvailabilityReply!
    "Returns details of one issue."
    issue(issueId: String!): Issue!
    "Returns all issues filtered by status."
    issues(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        status: IssueStatus!
    ): IssueConnection!
    "Kubernetes Rubrik Backup Service manifest."
    k8sAppManifest(
        "Name of the Kubernetes Rubrik Backup Service app."
        app: String!,
        "Optional Kubernetes cluster UUID."
        k8sClusterId: UUID,
        "Retrieve the manifest for the latest version."
        retrieveLatestVersion: Boolean!,
        "The optional target version for upgrade of Rubrik Kubernetes Agent. If not specified, the latest compatible version is used."
        targetVersion: String,
        "The current Kubernetes Rubrik Backup Service version."
        version: String!
    ): K8sAppManifest!
    k8sCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): K8sCluster!
    k8sClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): K8sClusterConnection!
    k8sNamespace(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): K8sNamespace!
    k8sNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Optional Kubernetes cluster UUID."
        k8sClusterId: UUID,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): K8sNamespaceConnection!
    "Kubernetes snapshot information."
    k8sSnapshotInfo(
        "Specifies if the snapshot is a replica snapshot."
        isReplica: Boolean! = false,
        "The FID of the Kubernetes Namespace."
        namespaceId: UUID!,
        "The snapshot UUID."
        snapshotId: UUID!
    ): K8sSnapshotInfo!
    "A knowledge base article."
    knowledgeBaseArticle(
        "The knowledge base article ID."
        id: String!
    ): KnowledgeBaseArticle!
    lambdaSettings: LambdaSettings!
    "Browse LDAP-authorized principals."
    ldapAuthorizedPrincipalConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Assigned role IDs for LDAP principal."
        roleIds: [UUID!],
        "Search Text for LDAP principal."
        searchText: String!,
        sortBy: LdapAuthorizedPrincipalFieldEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): AuthorizedPrincipalConnection!
    "Browse LDAP integrations."
    ldapIntegrationConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: LdapIntegrationFieldEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): LdapIntegrationConnection!
    "Search LDAP Principals."
    ldapPrincipalConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "ID for your LDAP integration."
        id: UUID!,
        "Returns the last n elements from the list."
        last: Int,
        "Search Text for LDAP principal."
        searchText: String!,
        sortBy: LdapPrincipalFieldEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PrincipalConnection!
    "List of legal hold snapshots for a workload."
    legalHoldSnapshotsForSnappable(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Query legal hold snapshots for a workload."
        input: LegalHoldSnapshotsForSnappableInput!,
        "Returns the last n elements from the list."
        last: Int
    ): LegalHoldSnapshotDetailConnection!
    "Information about licenses for a specific cluster product, grouped by the product type."
    licensesForClusterProductSummary(
        "Input required for getting the licenses at product type level."
        input: LicensesForClusterProductSummaryInput!
    ): LicensesForClusterProductReply!
    linuxFileset(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): LinuxFileset!
    "Lists the O365 apps."
    listO365Apps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        o365AppFilters: [AppFilter!]!,
        o365AppSortByParam: AppSortByParam
    ): O365AppConnection!
    "Specifies lockout configuration for a specific organization, displayed to the admin on the account lockout-related page."
    lockoutConfig: LockoutConfig!
    "Retrieves the M365 regions for the organization."
    m365Regions(
        "Org UUID."
        orgId: UUID!
    ): M365RegionsResp!
    """

    Get the result of a completed detection

    Supported in v6.0+
    Get the details of a completed malware detection.
    """
    malwareDetectionTaskResult(
        "Input for InternalGetLambdaDetectMalwareResult."
        input: GetLambdaDetectMalwareResultInput!
    ): MalwareScanResults!
    """

    Get the result of a completed detection

    Supported in v6.0+
    Get the details of a completed malware detection.
    """
    malwareDetectionTaskStatus(
        "Input for InternalGetLambdaDetectMalwareRequestStatus."
        input: GetLambdaDetectMalwareRequestStatusInput!
    ): AsyncRequestStatus!
    """

    Get asynchronous request details for a malware detection

    Supported in v6.0+
    Get the details of an asynchronous malware detection.
    """
    malwareScanDetail(
        "Input for InternalGetLambdaMalwareScanDetail."
        input: GetLambdaMalwareScanDetailInput!
    ): GetLambdaMalwareScanDetailReply!
    """

    List malware scans

    Supported in v6.0+
    List the malware scans.
    """
    malwareScans(
        "Input for InternalListMalwareScans."
        input: ListMalwareScansInput!
    ): MalwareScanDetailListResponse!
    "Details of a Managed Volume Object."
    managedVolume(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): ManagedVolume!
    "Aggregated inventory information for Managed Volume."
    managedVolumeInventoryStats: ManagedVolumeInventoryStats!
    "Paginated list of Live Mounts."
    managedVolumeLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ManagedVolumeMountConnection!
    "Paginated list of Managed Volumes."
    managedVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ManagedVolumeConnection!
    "Maximum number of protected apps that can be added per account."
    maxProtectedAppsCount: Int!
    "Get multifactor authentication (MFA) settings for an account."
    mfaSetting: GetMfaSettingReply!
    "Get minimum cluster version to support feature set."
    minimumCdmVersionForFeatureSet(
        "Request for checking minimum cluster version to support given feature set."
        featureListMinimumCdmVersion: FeatureListMinimumCdmVersionInputType!
    ): FeatureListMinimumCdmVersionReply!
    "Provides details for a MongoDB collection identified by the fid."
    mongoCollection(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MongoCollection!
    "Paginated list of MongoDB collections."
    mongoCollections(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MongoCollectionConnection!
    "Provides details for a MongoDB database identified by the fid."
    mongoDatabase(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MongoDatabase!
    "Paginated list of MongoDB databases."
    mongoDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MongoDatabaseConnection!
    "Provides details for the MongoDB source cluster identified by the fid."
    mongoSource(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MongoSource!
    "Paginated list of MongoDB sources."
    mongoSources(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MongoSourceConnection!
    "Recoverable range for multiple Management Objects on NoSQL cluster."
    mongodbBulkRecoverableRange(
        "Input for V2MosaicBulkRecoveryRange."
        input: MosaicBulkRecoveryRangeInput!
    ): MosaicRecoveryRangeResponse!
    """

    MongoDB collection identified by FID on NoSQL cluster.
    MongoDB stores data records as documents which are gathered together in collections.
    For more info refer to : https://docs.mongodb.com/manual/core/databases-and-collections
    """
    mongodbCollection(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MongodbCollection!
    "Recoverable Range of a MongoDB collection on NoSQL cluster."
    mongodbCollectionRecoverableRange(
        "Input for V2GetMosaicRecoverableRange."
        input: GetMosaicRecoverableRangeInput!
    ): GetMosaicRecoverableRangeResponse!
    "Paginated list of MongoDB collections on NoSQL cluster."
    mongodbCollections(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MongodbCollectionConnection!
    """

    MongoDB database identified by FID on NoSQL cluster.
    MongoDB stores data records as documents which are gathered together in collections.
    A database stores one or more collections of documents.
    For more info refer to : https://docs.mongodb.com/manual/core/databases-and-collections/
    """
    mongodbDatabase(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MongodbDatabase!
    "Paginated list of MongoDB databases on NoSQL cluster."
    mongodbDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MongodbDatabaseConnection!
    """

    MongoDB source cluster identified by FID on NoSQL cluster.
    For MongoDB, the term "source" is usually used for either a replica set or a sharded cluster.
    For more info on MongoDB cluster refer to : https://docs.mongodb.com/manual/introduction/
    """
    mongodbSource(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MongodbSource!
    "Paginated list of MongoDB sources on NoSQL cluster."
    mongodbSources(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MongodbSourceConnection!
    "Get recoverable range for multiple Management Objects."
    mosaicBulkRecoveryRange(
        "Input for V2MosaicBulkRecoveryRange."
        input: MosaicBulkRecoveryRangeInput!
    ): MosaicRecoveryRangeResponse!
    "List snapshots of a mosaic object."
    mosaicSnapshots(
        "Input for V2GetMosaicVersion."
        input: GetMosaicVersionInput!
    ): ListVersionResponse!
    "List all stores on mosaic cluster."
    mosaicStores(
        "Input for V2GetMosaicStore."
        input: GetMosaicStoreInput!
    ): ListStoreResponse!
    "List versions of a mosaic object."
    mosaicVersions(
        "Input for V2GetMosaicVersion."
        input: GetMosaicVersionInput!
    ): ListVersionResponse!
    "A Microsoft SQL Availability Group."
    mssqlAvailabilityGroup(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MssqlAvailabilityGroup!
    "Returns all compatible instances for export for the specified recovery time."
    mssqlCompatibleInstances(
        "Input for V1GetCompatibleMssqlInstancesV1."
        input: GetCompatibleMssqlInstancesV1Input!
    ): MssqlInstanceSummaryListResponse!
    "A Microsoft SQL Database."
    mssqlDatabase(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MssqlDatabase!
    "Paginated list of Microsoft SQL Database live mounts."
    mssqlDatabaseLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for Mssql database live mounts."
        filters: [MssqlDatabaseLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Mssql database live mounts."
        sortBy: MssqlDatabaseLiveMountSortByInput
    ): MssqlDatabaseLiveMountConnection!
    "List of missed recoverable ranges for a Microsoft SQL Database."
    mssqlDatabaseMissedRecoverableRanges(
        "Input for V1GetMssqlDbMissedRecoverableRanges."
        input: GetMssqlDbMissedRecoverableRangesInput!
    ): MssqlMissedRecoverableRangeListResponse!
    "List of missed snapshots for a Microsoft SQL Database."
    mssqlDatabaseMissedSnapshots(
        "Input for V1GetMissedMssqlDbSnapshots."
        input: GetMissedMssqlDbSnapshotsInput!
    ): MissedSnapshotListResponse!
    "Returns a size estimate for a restore, export, or mount."
    mssqlDatabaseRestoreEstimate(
        "Input for V1MssqlRestoreEstimateV1."
        input: MssqlRestoreEstimateV1Input!
    ): MssqlRestoreEstimateResult!
    "Paginated list of Microsoft SQL Databases."
    mssqlDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): MssqlDatabaseConnection!
    "The current default properties for Microsoft SQL databases."
    mssqlDefaultProperties(
        "Input for V1GetDefaultDbPropertiesV1."
        input: GetDefaultDbPropertiesV1Input!
    ): UpdateMssqlDefaultPropertiesReply!
    "A Microsoft SQL Instance."
    mssqlInstance(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): MssqlInstance!
    "List of filtered Microsoft SQL log shipping targets."
    mssqlLogShippingTargets(
        "Input for V2QueryLogShippingConfigurationsV2."
        input: QueryLogShippingConfigurationsV2Input!
    ): MssqlLogShippingSummaryV2ListResponse
    "List of recoverable ranges for a Microsoft SQL Database."
    mssqlRecoverableRanges(
        "Input for V1GetMssqlDbRecoverableRanges."
        input: GetMssqlDbRecoverableRangesInput!
    ): MssqlRecoverableRangeListResponse!
    "Paginated list of the highest-level Microsoft SQL Objects accessible by the current user."
    mssqlTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlTopLevelDescendantTypeConnection!
    "A NAS Fileset."
    nasFileset(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NasFileset!
    "A NAS Namespace."
    nasNamespace(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NasNamespace!
    "Paginated list of NAS Namespaces."
    nasNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): NasNamespaceConnection!
    "A NAS Share."
    nasShare(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NasShare!
    "A NAS System."
    nasSystem(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NasSystem!
    "Paginated list of NAS Systems."
    nasSystems(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): NasSystemConnection!
    "Paginated list of the highest-level NAS Objects accessible by the current user."
    nasTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "A NAS Volume."
    nasVolume(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NasVolume!
    """

    v5.0-v8.0: Lists all files in VM snapshot
    v9.0: Lists all files in virtual machine snapshot

    Supported in v5.0+
    Lists all files and directories in a given path.
    """
    nutanixBrowseSnapshot(
        "Input for InternalBrowseNutanixSnapshot."
        input: BrowseNutanixSnapshotInput!
    ): BrowseResponseListResponse!
    "A Nutanix Cluster."
    nutanixCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NutanixCluster!
    """

    Get Nutanix cluster async request

    Supported in v5.0+
    Get details about a Nutanix cluster-related async request.
    """
    nutanixClusterAsyncRequestStatus(
        "Input for InternalGetNutanixClusterAsyncRequestStatus."
        input: GetNutanixClusterAsyncRequestStatusInput!
    ): AsyncRequestStatus!
    """

    Get list of containers on this cluster

    Supported in v5.0+
    Query the nutanix cluster to get the list of containers, used for export purposes.
    """
    nutanixClusterContainers(
        "Input for InternalGetContainers."
        input: GetContainersInput!
    ): NutanixContainerListResponse!
    """

    Get list of networks on this cluster

    Supported in v9.0
    Retrieves the list of networks by querying the Nutanix cluster. The list of networks is used for restore purposes.
    """
    nutanixClusterNetworks(
        "Input for V1GetNutanixNetworks."
        input: GetNutanixNetworksInput!
    ): NutanixNetworkListResponse!
    "Paginated list of Nutanix Clusters."
    nutanixClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): NutanixClusterConnection!
    "Nutanix Live Mount Connection."
    nutanixMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for Nutanix virtual machine live mounts."
        filters: [NutanixLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Nutanix virtual machine live mounts."
        sortBy: NutanixLiveMountSortByInput
    ): NutanixLiveMountConnection!
    """

    Supported in v5.0+. Get Nutanix virtual machine snapshot details.
    Retrieve detailed information about a snapshot.
    """
    nutanixSnapshotDetail(
        "Input for InternalGetNutanixSnapshot."
        input: GetNutanixSnapshotDetailInput!
    ): NutanixVmSnapshotDetail!
    "Paginated list of the highest-level Nutanix Objects accessible by the current user."
    nutanixTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "A Nutanix Virtual Machine."
    nutanixVm(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): NutanixVm!
    """

    v5.0-v8.0: Get VM async request details
    v9.0: Get virtual machine async request details

    Supported in v5.0+
    v5.0-v8.0: Get details about a Nutanix VM-related async request.
    v9.0: Get details about a Nutanix virtual machine-related async request.
    """
    nutanixVmAsyncRequestStatus(
        "Input for InternalGetNutanixVmAsyncRequestStatus."
        input: GetNutanixVmAsyncRequestStatusInput!
    ): AsyncRequestStatus!
    """

    v5.0-v8.0: Get details about missed snapshots for a VM
    v9.0: Get details about missed snapshots for a virtual machine

    Supported in v5.0+
    v5.0-v8.0: Retrieve the time of the day when the snapshots were missed specific to a vm.
    v9.0: Retrieve the time of the day when the snapshots were missed specific to a virtual machine.
    """
    nutanixVmMissedSnapshots(
        "Input for InternalNutanixMissedSnapshots."
        input: NutanixMissedSnapshotsInput!
    ): MissedSnapshotListResponse!
    "Paginated list of Nutanix Virtual Machines."
    nutanixVms(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): NutanixVmConnection!
    "Details of the Exchange calendar pertaining to the snappable ID."
    o365Calendar(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365Calendar!
    "List of O365 Groups in the O365Org."
    o365Groups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        snappableType: SnappableType!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365GroupConnection!
    "Retrieve o365 licence details."
    o365License: O365License!
    "Details for the Exchange mailbox corresponding to the snappable ID."
    o365Mailbox(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365Mailbox!
    "List of Mailboxes in the O365Org."
    o365Mailboxes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365MailboxConnection!
    o365ObjectAncestors(
        "The fid for the workload."
        snappableFid: UUID!
    ): GetImplicitlyAuthorizedAncestorSummariesResponse!
    "Details for the OneDrive corresponding to the snappable ID."
    o365Onedrive(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365Onedrive!
    "List of Onedrives in the O365Org."
    o365Onedrives(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365OnedriveConnection!
    "Details of the O365Org."
    o365Org(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): O365Org!
    "Details of the O365Org at snappable level, given the snappable type."
    o365OrgAtSnappableLevel(
        "The Rubrik UUID for the object."
        fid: UUID!,
        snappableType: SnappableType!
    ): O365Org!
    o365OrgSummaries: GetImplicitlyAuthorizedObjectSummariesResponse!
    "All O365 orgs for the account."
    o365Orgs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): O365OrgConnection!
    "Gets the service account for the given org."
    o365ServiceAccount(
        "Org UUID."
        orgId: UUID!
    ): O365ServiceAccountStatusResp!
    "Returns the service status of the O365 service running on MSFT server."
    o365ServiceStatus(
        "Optional org UUID."
        orgID: UUID
    ): GetO365ServiceStatusResp!
    "Details for the SharePoint drive corresponding to the snappable ID."
    o365SharepointDrive(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365SharepointDrive!
    "List of sharepoint drives (document libraries) in the O365Org."
    o365SharepointDrives(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365SharepointDriveConnection!
    "Details for the SharePoint list corresponding to the snappable ID."
    o365SharepointList(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365SharepointList!
    "Paginated list of sharepoint lists in the O365Org."
    o365SharepointLists(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365SharepointListConnection!
    "Returns the sharepoint objects after filtering on the object types and includeEntireHierarchy."
    o365SharepointObjectList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Rubrik UUID for the object."
        fid: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "If true, the entire hierarchy will be searched."
        includeEntireHierarchy: Boolean!,
        "Types of objects to include."
        objectTypeFilter: [String!],
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365SharepointObjectConnection!
    o365SharepointObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Rubrik UUID for the object."
        fid: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365SharepointObjectConnection! @deprecated(reason: "This is deprecated as it was tied to the specific object type. Use o365SharepointObjectList instead.")
    "Details for the SharePoint site corresponding to the site ID."
    o365SharepointSite(
        "The fid for the site."
        siteFid: UUID!
    ): O365Site!
    "Paginated list of sharepoint sites in the O365Org."
    o365SharepointSites(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365SiteConnection!
    "Details for the SharePoint site corresponding to the snappable ID."
    o365Site(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365Site!
    "List of sites in the O365Org."
    o365Sites(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "If true, nested children sites will be excluded from the results."
        excludeChildSites: Boolean,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365SiteConnection!
    "Returns the storage stats of an O365 org."
    o365StorageStats(
        "Optional org UUID."
        orgID: UUID
    ): GetO365StorageStatsResp!
    "Details for the team corresponding to the snappable ID."
    o365Team(
        "The fid for the workload."
        snappableFid: UUID!
    ): O365Teams!
    "List of Channels for the O365Team."
    o365TeamChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter on channel membership type."
        channelMembershipTypeFilter: ChannelMembershipType!,
        excludeArchived: Boolean!,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365TeamsChannelConnection!
    "IDs of the child snapshots of the Team snapshot."
    o365TeamChildSnapshotIDs(
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365TeamChildSnapshotIds!
    "ID for the conversations folder in the Team's Group Mailbox."
    o365TeamConversationsFolderID(
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): String!
    "Users who have posted in a team."
    o365TeamPostedBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365TeamConversationsSenderConnection!
    "List of O365 Teams in the O365Org."
    o365Teams(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "The fid for the O365 organization."
        o365OrgId: UUID!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365TeamsConnection!
    "Details for the O365 user corresponding to the ID."
    o365User(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): O365User!
    "Name, id, object type, and mail address of user descendant object."
    o365UserObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Rubrik UUID for the object."
        fid: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): O365UserDescendantMetadataConnection!
    objectFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        day: String!,
        filter: ListObjectFilesFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        timezone: String!
    ): FileResultConnection!
    """

    Link to download the Advanced Recovery Options example file

    Supported in v5.3+
    Link to download the Advanced Recovery Options example file which can be used to customize Oracle recoveries.
    """
    oracleAcoExampleDownloadLink(
        "Specifies input for V1GetExampleAcoDownloadLink including the Oracle database ID."
        input: ClusterUuidWithDbIdInput!
    ): OracleFileDownloadLink!
    """

    List of supported Advanced Cloning Options

    Supported in v6.0+
    Get the list of supported Advanced Cloning Options (ACO) parameters.
    """
    oracleAcoParameters(
        "Specifies input for V1GetAcoParameterList including the Oracle database ID."
        input: ClusterUuidWithDbIdInput!
    ): OracleAcoParameterList!
    "An Oracle Data Guard Group."
    oracleDataGuardGroup(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): OracleDataGuardGroup!
    "An Oracle Database."
    oracleDatabase(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): OracleDatabase!
    "Paginated list of Oracle Databases."
    oracleDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): OracleDatabaseConnection!
    "An Oracle Host."
    oracleHost(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): OracleHost!
    "Paginated list of Oracle Live Mounts."
    oracleLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for Oracle live mounts."
        filters: [OracleLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Oracle live mounts."
        sortBy: OracleLiveMountSortBy
    ): OracleLiveMountConnection!
    """

    Get missed recoverable ranges of a Oracle database

    Supported in v5.0+
    Retrieve a list of missed recoverable ranges for a Oracle database. For each run of one type of error, the first and last occurrence of the error are given.
    """
    oracleMissedRecoverableRanges(
        "Input for InternalGetOracleDbMissedRecoverableRanges."
        input: GetOracleDbMissedRecoverableRangesInput!
    ): OracleMissedRecoverableRangeListResponse!
    """

    Get missed snapshots for an Oracle database

    Supported in v5.0+
    Retrieve summary information about the missed snapshots of an Oracle database.
    """
    oracleMissedSnapshots(
        "Input for InternalGetMissedOracleDbSnapshots."
        input: GetMissedOracleDbSnapshotsInput!
    ): MissedSnapshotListResponse!
    """

    Get PDB details

    Supported in v8.0+
    Retrieves information about available pluggable databases (PDBs) for a given recovery point.
    """
    oraclePdbDetails(
        "Input for V1GetOraclePdbDetails."
        input: OraclePdbDetailsInput!
    ): OraclePdbDetails!
    "An Oracle Real Application Cluster."
    oracleRac(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): OracleRac!
    """

    Get recoverable ranges of a Oracle database

    Supported in v5.0+
    Retrieve the recoverable ranges for a specified Oracle database. A begin and/or end timestamp can be provided to retrieve only the ranges that fall within the window.
    """
    oracleRecoverableRanges(
        "Input for InternalGetOracleDbRecoverableRanges."
        input: GetOracleDbRecoverableRangesInput!
    ): OracleRecoverableRangeListResponse!
    "Paginated list of the highest-level Oracle Objects accessible by the current user."
    oracleTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleTopLevelDescendantTypeConnection!
    "Org details of the given org ID."
    org(
        "The org ID of the organization."
        orgId: String!
    ): Org!
    "Organization security policy."
    orgSecurityPolicy: OrgSecurityPolicy!
    "All orgs."
    orgs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Filter orgs by the status of MFA enforcement. When the field is not used, all orgs are returned. When the field is set to true, only orgs that have MFA enforced are returned. When the field is set to false, only orgs that do not have MFA enforced are returned."
        mfaEnforcedFilter: Boolean,
        "Name to filter the results."
        nameFilter: String,
        "Field in the org to sort orgs by."
        sortBy: OrgField = NAME,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): OrgConnection!
    "Overall ransomware investigation summary."
    overallRansomwareInvestigationSummary(
        "The number of hours in the past from the time of request for which the summary is retrieved."
        historyNumHours: Int!
    ): OverallRansomwareInvestigationSummary!
    "Get EULA state."
    pactsafeEulaState: PactsafeEulaState!
    pendingAction(pendingActionId: String!): pendingAction!
    "Get information about workloads passing through the Radar pipeline."
    pendingRansomwareInvestigationResultsCount: PendingEvaluationResultsReply!
    "Retrieve Phoenix rollout progress."
    phoenixRolloutProgress(
        "Org UUID."
        orgId: UUID!
    ): PhoenixRolloutProgress!
    physicalHost(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): PhysicalHost!
    "Get list of physical hosts."
    physicalHosts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Host root type."
        hostRoot: HostRoot!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): PhysicalHostConnection!
    "Get the health metric for the radar pipeline covering the backup, indexing, and analysis jobs."
    pipelineHealthForTimeRange(
        "Filter results that started after this time."
        beginTime: DateTime!,
        "Filter results that started before this time."
        endTime: DateTime
    ): GetPipelineHealthReply!
    polarisInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): PolarisInventorySubHierarchyRoot!
    "The saved configurations of a report."
    polarisReportConfig(
        "The report ID."
        reportID: Int!
    ): PolarisReportConfig!
    "The structure of a Polaris Report."
    polarisReportSchema(
        polarisReportViewType: PolarisReportViewType!,
        "The timezone to return results in"
        timezone: String
    ): PolarisReportSchema!
    "The structure of a Polaris Report Table."
    polarisReportTableIntrospection(
        "Type of the table view."
        tableView: TableViewType!
    ): PolarisReportTableIntrospection!
    "Returns the Rubrik Security Cloud snapshot by ID."
    polarisSnapshot(
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!
    ): PolarisSnapshot!
    "Returns active policies for an account."
    policies(
        "Excludes hierarchy object IDs for each policy."
        excludeHierarchyObjectList: Boolean,
        policyObjectFilter: PolicyObjectFilter
    ): ClassificationPolicyDetailConnection!
    "Returns detailed policy information."
    policy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "List of Rubrik clusters for filtering results."
        clusterIdsFilter: [String!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        policyId: String!,
        "List of replication types for filtering results."
        replicationFilter: [String!],
        "Object name to search."
        searchObjectName: String,
        "Name of the column to sort result by."
        sortBy: PolicyDetailsSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of workloads used for filtering the query results."
        workloadTypes: [DataGovObjectType!]
    ): ClassificationPolicyDetail!
    "Returns active policies for an account."
    policyDetails: PolicyDetailConnection!
    "Returns details for one policy object."
    policyObj(snappableFid: String!, snapshotFid: String!): PolicyObj!
    "Returns the policies assigned to each object."
    policyObjectUsages(objectIds: [String!]!): PolicyObjectUsageConnection!
    "Returns status for all objects at a specified timestamp."
    policyObjs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "List of analysis statuses used for filtering results."
        analysisStatusesFilter: [AnalysisStatus!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "List of Rubrik clusters for filtering results."
        clusterIdsFilter: [String!],
        day: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Include whitelisted objects in the results."
        includeWhitelistedResults: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "List of policies used for filtering results."
        policyIdsFilter: [String!],
        "List of risk levels used for filtering results."
        riskLevelsFilter: [RiskLevelType!],
        "Object name to search."
        searchObjectName: String,
        "Name of the column to sort result by."
        sortBy: String,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "List of subscriptions for filtering results."
        subscriptionIdsFilter: [String!],
        timezone: String!,
        "Types of workloads that can be used for filtering query results."
        workloadTypes: [DataGovObjectType!]! = []
    ): PolicyObjConnection!
    "Gets status of last prechecks job."
    prechecksStatus(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): PrechecksStatusReply!
    "Get status of last completed prechecks Job along with details of currently running/scheduled next prechecks Job."
    prechecksStatusWithNextJobInfo(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): PrechecksStatusReply!
    "Get the number of workloads that have passed through the Radar pipeline in the past 24 hours."
    processedRansomwareInvestigationWorkloadCount: ProcessedRansomwareInvestigationWorkloadCountReply!
    "A product documentation."
    productDocumentation(
        "The product documentation ID."
        id: String!
    ): ProductDocumentation!
    "Clusters that have object(s) protected by global SLA."
    protectedClustersForGlobalSla(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "SLA ID for global SLAs."
        slaId: UUID!
    ): ClusterConnection!
    "List of all objects protected by the sla"
    protectedObjectsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Types of objects to include."
        objectTypeFilter: [String!],
        "Forever UUID of the object root. The value of  `none` represents the global hierarchy root."
        rootOptionalFid: UUID,
        "A list of global SLA Domain IDs."
        slaIds: [UUID!]!,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ProtectedObjectsConnection!
    "Get the total number of workloads protected by Radar."
    protectedRansomwareInvestigationWorkloadCount: ProtectedRansomwareInvestigationWorkloadCountReply!
    "Query datastore threshold configurations."
    queryDatastoreFreespaceThresholds(
        "Datastore freespace thresholds query."
        queryDatastoreFreespaceThresholdsInput: [QueryDatastoreFreespaceThresholdInput!]!
    ): QueryDatastoreFreespaceThresholdsReply!
    radarClusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort clusters by field."
        sortBy: ClusterSortByEnum = ClusterType,
        "Cluster sort order."
        sortOrder: SortOrder = DESC
    ): ClusterConnection!
    "Get the list of workload locations on which Ransomware Investigation has run."
    ransomwareDetectionWorkloadLocations(
        "Filter only locations that processed workloads after this time."
        beginTime: DateTime!,
        "Filter only locations that processed workloads before this time."
        endTime: DateTime,
        "Specifies whether to return only the locations having anomalous entities or all locations."
        returnOnlyForAnomalousEntities: Boolean!
    ): ListLocationsReply!
    "Get a per day summary of the radar analysis results from start day to end day."
    ransomwareInvestigationAnalysisSummary(
        "Optional list of cluster UUIDs to filter by."
        clusterUuidFilter: [String!],
        "End day, formatted(ISO 8601) as YYYY-MM-DD."
        endDay: String!,
        "Do not include the suspicious byte count or suspicious file count of non anomalous snapshots."
        hideSuspiciousDataIfNonAnomalous: Boolean,
        "Optional list of object types to filter by."
        objectTypeFilter: [String!],
        "Optional list of SLA FIDs to filter by."
        slaFidFilter: [String!],
        "Start day, formatted(ISO 8601) as YYYY-MM-DD."
        startDay: String!,
        "Deprecated timezone field that will not be used. All results are in UTC."
        timezone: String!
    ): RansomwareInvestigationAnalysisSummaryReply!
    "Get the enablement status of entities on which ransomware detection can be enabled."
    ransomwareInvestigationEnablement: RansomwareInvestigationEnablementReply!
    "Get the total number of times that Radar has scanned a workload."
    ransomwareInvestigationWorkloadScannedCount(
        "ID of the object and not the FID."
        workloadId: String!
    ): RansomwareInvestigationWorkloadScannedCountReply!
    "Result of the Ransomware Investigation."
    ransomwareResult(
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "Workload managed ID."
        managedId: String!,
        "Corresponds to snapshot ID in Rubrik CDM tables."
        snapshotId: String!
    ): RansomwareResult!
    "Optional result of the Ransomware Investigation."
    ransomwareResultOpt(
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "Workload managed ID."
        managedId: String!,
        "Corresponds to snapshot ID in Rubrik CDM tables."
        snapshotId: String!
    ): RansomwareResult
    "Results for Ransomware Investigations."
    ransomwareResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter ransomware results by input."
        filter: RansomwareResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort ransomware results by field."
        sortBy: RansomwareResultSortBy,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): RansomwareResultConnection!
    "Results for the Ransomware Investigations grouped by an argument."
    ransomwareResultsGrouped(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter ransomware results by input."
        filter: RansomwareResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group ransomware results by field."
        groupBy: RansomwareResultGroupBy!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): RansomwareResultGroupedDataConnection!
    "RCS Azure archival location consumption stats."
    rcsArchivalLocationsConsumptionStats(
        "Request for fetching consumption stats for multiple rcs Azure locations."
        rcsAzureTargetConsumptionStatsRequest: RcsConsumptionStatsInput!
    ): RcsAzureArchivalLocationsConsumptionStatsOutput!
    "Rubrik Cloud Vault (RCV) Account entitlement details."
    rcvAccountEntitlement: RcvAccountEntitlement!
    "Details of the RDS Instance in the AWS Native account."
    rdsInstanceDetailsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): RdsInstanceDetailsFromAws!
    "Recovery Plan."
    recoveryPlan(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): RecoveryPlan!
    "Recovery Plans."
    recoveryPlans(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): RecoveryPlanConnection!
    "List of all replication pair Rubrik clusters."
    replicationPairs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter for replication pairs query."
        filter: ReplicationPairsQueryFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort by for replication pairs."
        sortBy: ReplicationPairsQuerySortByField,
        "Sort order."
        sortOrder: SortOrder
    ): ReplicationPairConnection!
    report(id: Int!): CustomReport!
    "Report chart data."
    reportChartData(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Type of the chart view."
        chartView: ChartViewType!,
        "A list of filters to filter result with"
        filters: [ReportFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "The timezone to return results in"
        timezone: String
    ): ChartDataResult!
    reportConfig(
        "The report ID."
        reportID: Int!
    ): ReportConfig!
    reportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter custom reports by input"
        filter: CustomReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort by field"
        sortBy: CustomReportSortByEnum = UpdateTime,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CustomReportConnection!
    reportData(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        """

        A list of aggregations to apply to the grouped rows, it must be used
        in conjunction with groupBy arg (except for count(*)). Supported
        aggregations are:
        hour, day, week, month, year for datetime columns
        sum, avg for integer columns
        count(*)
        """
        aggregations: [String!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        """

        A list of columns to include in the result. It can be omitted when
        requesting aggregations, and server will derive columns by
        concatenating groupBy and aggregation arguments.
        """
        columns: [String!]!,
        dataView: DataViewTypeEnum!,
        "A list of filters to filter result with"
        filters: [ReportFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        """

        A list of the names of the columns to group result by, it must be
        used in conjunction of aggregations.
        """
        groupBy: [String!],
        "Returns the last n elements from the list."
        last: Int,
        """

        SecondaryGroupBy used for when groupBy values need to be pivoted.
        """
        secondaryGroupBy: String,
        "Name of the column to sort result by"
        sortBy: String,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "The timezone to return results in"
        timezone: String
    ): RowConnection!
    reportFromConfig(config: CustomReportCreate!): CustomReport!
    reportGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter custom reports by input"
        filter: CustomReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: CustomReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): CustomReportGroupByConnection!
    reportSchema(
        dataView: DataViewTypeEnum!,
        "The timezone to return results in"
        timezone: String
    ): ReportSchema!
    "Report table data."
    reportTableData(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "A list of filters to filter result with"
        filters: [ReportFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Name of the column to sort result by"
        sortBy: String,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Type of the table view."
        tableView: TableViewType!,
        "The timezone to return results in"
        timezone: String
    ): RowConnection!
    "The report version."
    reportVersion(
        "The report ID."
        reportID: Int!
    ): ReportVersion!
    "The list of available role templates."
    roleTemplates(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Name to filter the results."
        nameFilter: String
    ): RoleTemplateConnection!
    "Status of all running jobs for an account."
    runningJobsStatus: RunningJobsReply!
    "Details of a SAP HANA database for a given FID."
    sapHanaDatabase(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): SapHanaDatabase!
    "Connection of filtered SAP HANA databases based on specific filters."
    sapHanaDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SapHanaDatabaseConnection!
    "Details of a SAP HANA log snapshot for a given FID."
    sapHanaLogSnapshot(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): SapHanaLogSnapshot!
    "Connection of all log snapshots for SAP HANA."
    sapHanaLogSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter SAP HANA log snapshots."
        filter: SapHanaLogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort SAP HANA log snapshots."
        sortBy: SapHanaLogSnapshotSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SapHanaLogSnapshotConnection!
    "Details of a SAP HANA recoverable range for a given FID."
    sapHanaRecoverableRange(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): SapHanaRecoverableRange!
    "Connection of all recoverable ranges for SAP HANA."
    sapHanaRecoverableRanges(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter SAP HANA recoverable ranges."
        filter: SapHanaRecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort SAP HANA recoverable ranges."
        sortBy: SapHanaRecoverableRangeSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SapHanaRecoverableRangeConnection!
    "Details of a SAP HANA system for a given FID."
    sapHanaSystem(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): SapHanaSystem!
    "Connection of filtered SAP HANA systems based on specific filters."
    sapHanaSystems(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SapHanaSystemConnection!
    "Retrieve details of a scheduled report."
    scheduledReport(id: Int!): ScheduledReport
    "Retrieve details of scheduled reports."
    scheduledReports(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter report schedules."
        filter: ScheduledReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    screenshotReport(
        "The ID of the report to be screenshotted"
        reportId: String!
    ): TakeScreenshotReply!
    "Search file under given folder and with given prefix."
    searchFileByPrefix(
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "Filename prefix that should match."
        filenamePrefix: String!,
        "Workload managed ID."
        managedId: String!,
        "Root path to search file inside FMD."
        searchFolderPath: String!,
        "Corresponds to snapshot ID in Rubrik CDM tables."
        snapshotId: String!
    ): DiffResult!
    searchHost(
        "ID of the host to search."
        id: String!,
        "The path query. Either path prefix or filename prefix."
        path: String!
    ): SearchResponseListResponse!
    """

    v5.0-v8.0: Search for file in Nutanix VM
    v9.0: Search for file in Nutanix virtual machine

    Supported in v5.0+
    Search for a file within the Nutanix Virtual Machine. Search via full path prefix or filename prefix.
    """
    searchNutanixVm(
        "Input for InternalSearchNutanixVm."
        input: SearchNutanixVmInput!
    ): SearchResponseListResponse!
    """

    Search for a file within the SnapMirrorCloud

    Supported in v7.0+
    Search for a file within the SnapMirrorCloud. The search can use the full path prefix or the filename prefix.
    """
    searchSnapMirrorCloud(
        "Input for V1SearchSnapMirrorCloud."
        input: SearchSnapMirrorCloudInput!
    ): SearchResponseListResponse!
    searchSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter workloads by input (with search by name)."
        filter: SnappableFilterInputWithSearch,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort workloads by field."
        sortBy: SnappableSortByEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SnappableConnection!
    searchSnappableVersionedFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        searchQuery: String!,
        snappableFid: UUID!
    ): VersionedFileConnection!
    "list the available Security Groups"
    securityGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Blueprint ID."
        blueprintId: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "the fid of the vpc"
        vpcId: UUID!
    ): SnappableSecurityGroupConnection!
    "Browse service accounts."
    serviceAccounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Assigned role IDs for service account."
        roleIds: [UUID!],
        "Search for a service account."
        searchText: String,
        "Service account argument to sort by."
        sortBy: ServiceAccountSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ServiceAccountConnection!
    serviceProviderMetadataFields: GetSPExplicitReply!
    shareFileset(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): ShareFileset!
    "Browse site and descendants objects."
    sharepointSiteDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The natural ID of SharePoint object."
        naturalId: String,
        "Org UUID."
        orgId: UUID!,
        "The filter for site search."
        sharepointSiteSearchFilter: SharePointSearchFilter,
        "The fid for the site."
        siteFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365FullSpObjectConnection!
    "Search site and descendant objects."
    sharepointSiteSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "The filter for site search."
        sharepointSiteSearchFilter: SharePointSearchFilter,
        "The fid for the site."
        siteFid: UUID!
    ): O365FullSpObjectConnection!
    "SLA Domain warnings related to non-compliant archival retention duration in the archival policy."
    slaArchivalValidationWarnings(
        "Input for requesting SLA Domain compliance warnings related to archival policy."
        input: SlaArchivalWarningsInput!
    ): SlaArchivalValidationWithWarnings!
    "List of audit details for a given SLA"
    slaAuditDetail(
        "SLA ID for global SLAs and Internal ID for CDM SLAs"
        SlaId: UUID!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [SLAAuditDetailFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        timezone: String
    ): [SlaAuditDetail!]!
    slaConflictObjects(fids: [UUID!]!): [HierarchyObject!]!
    "Query that retrieves an SLA Domain."
    slaDomain(
        "SLA Domain ID."
        id: UUID!,
        "Specifies whether to show the Rubrik clusters where this SLA Domain is paused."
        shouldShowPausedClusters: Boolean = false,
        "Specifies whether to show the SLA Domain sync status on Rubrik CDM."
        shouldShowSyncStatus: Boolean = false,
        "Specifies whether to show the upgrade information for an SLA Domain or not."
        shouldShowUpgradeInfo: Boolean = false
    ): SlaDomain!
    slaDomainWithWarnings(
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [WorkloadLevelHierarchy!],
        "SLA Domain ID."
        id: UUID!,
        "A list of object forever UUIDs to assign to the global SLA Domain."
        objectIds: [UUID!]!
    ): SlaDomainWithWarnings!
    "Query sla list with warnings"
    slaDomainWithWarningsList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [WorkloadLevelHierarchy!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Filter for the SLA Domain query."
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Provide list of object forever IDS you want to assign SLA"
        objectIds: [UUID!],
        "Assignment operation with the SLA Domain."
        operation: SlaWarningsOperation,
        "Provides the forever IDs of the snapshots to assign SLA Domains to."
        snapshotIds: [UUID!],
        "Field to sort the SLA Domains list."
        sortBy: SlaQuerySortByField,
        "Sort order for sorting the SLA Domains returned by the query."
        sortOrder: SortOrder
    ): [SlaDomainWithWarnings!]!
    "Retrieves a list of SLA Domains."
    slaDomains(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Specifies the context filter input to use."
        contextFilterInput: [ContextFilterInputField!],
        "Filter for the SLA Domain query."
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies whether to show the Rubrik clusters where this SLA Domain is paused."
        shouldShowPausedClusters: Boolean = false,
        "Specifies whether to show the number of workloads protected by the SLA Domain."
        shouldShowProtectedObjectCount: Boolean = false,
        "Specifies whether to show the SLA Domain sync status on Rubrik CDM."
        shouldShowSyncStatus: Boolean = false,
        "Specifies whether to show the upgrade information for an SLA Domain or not."
        shouldShowUpgradeInfo: Boolean = false,
        "Specifies whether to retrieve the remote SLA Domains from Rubrik CDM. By default, remote SLA Domains are not retrieved."
        showRemoteSlas: Boolean,
        "Field to sort the SLA Domains list."
        sortBy: SlaQuerySortByField,
        "Sort order for sorting the SLA Domains returned by the query."
        sortOrder: SortOrder
    ): SlaDomainConnection!
    "Details of a SLA Managed Volume object."
    slaManagedVolume(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): ManagedVolume!
    "Paginated list of SLA Managed Volumes."
    slaManagedVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): ManagedVolumeConnection!
    "List of SLA summaries for the given ids"
    slaSummariesByIds(
        "A list of global SLA Domain IDs."
        slaIds: [UUID!]!
    ): [SlaDomain!]!
    """

    Get SMB configuration

    Supported in v5.0+
    Get SMB configuration.
    """
    smbConfiguration(
        "Input for InternalGetSmbConfiguration."
        input: GetSmbConfigurationInput!
    ): GetSmbConfigurationReply!
    "Paginated list of SMB domains."
    smbDomains(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for SMB domains."
        filters: [SmbDomainFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for SMB domains."
        sortBy: SmbDomainSortByInput
    ): SmbDomainConnection!
    smtpConfiguration: GetSMTPConfigurationReply!
    "A SnapMirror Cloud."
    snapMirrorCloud(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): SnapMirrorCloud!
    """

    Lists all files and directories in a given path

    Supported in v7.0+
    Lists all files and directories in a given path.
    """
    snapMirrorCloudSnapshotFiles(
        "Input for V1BrowseSnapMirrorCloudSnapshot."
        input: SnapMirrorCloudSnapshotFilesInput!
    ): BrowseResponseListResponse!
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter protected objects by input."
        filter: SnappableFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort workloads by field."
        sortBy: SnappableSortByEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SnappableConnection!
    "Search over Exchange contacts."
    snappableContactSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Search filter for contacts search."
        contactsSearchFilter: ContactsSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableEmailSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableEventSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Search filter for calendar search."
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableGroupByAtSpecifiedTimeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter workloads by groups."
        filter: SnappableGroupByFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group workloads by field."
        groupBy: SnappableGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "List of workload aggregations to retrieve. You can significantly reduce the runtime of the query by specifying a subset of aggregations to retrieve."
        requestedAggregations: [SnappableAggregationsEnum!],
        "Time to calculate the group by."
        specifiedTime: DateTime!,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): SnappableGroupByAtSpecifiedTimeConnection!
    snappableGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter workloads by groups."
        filter: SnappableGroupByFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group workloads by field."
        groupBy: SnappableGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "List of workload aggregations to retrieve. You can significantly reduce the runtime of the query by specifying a subset of aggregations to retrieve."
        requestedAggregations: [SnappableAggregationsEnum!],
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): SnappableGroupByConnection!
    snappableOnedriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        onedriveSearchFilter: OnedriveSearchFilter,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    snappableSharepointDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        "The site child ID for SharePoint descendant objects."
        siteChildId: String,
        "The site child type for SharePoint descendant objects."
        siteChildType: SharePointDescendantType,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    "Search list objects."
    snappableSharepointListSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        "The site child ID for SharePoint descendant objects."
        siteChildId: String,
        "The fid for the workload."
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    snappableTeamsConversationsSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "snapshotFid arg which is of optional type"
        snapshotFidOpt: UUID,
        "List of channel objects (naturalId and name)."
        teamConvChannels: [O365TeamConvChannelInput!]!,
        teamsConversationsSearchFilter: TeamsConversationsSearchFilter
    ): O365TeamsConversationsConnection!
    snappableTeamsDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        channelFolderName: String,
        channelId: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        teamsDriveSearchFilter: OnedriveSearchFilter
    ): O365OnedriveObjectConnection!
    "List of workloads with legal hold snapshots."
    snappablesWithLegalHoldSnapshotsSummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Query workloads with legal hold snapshots input."
        input: SnappablesWithLegalHoldSnapshotsInput!,
        "Returns the last n elements from the list."
        last: Int
    ): LegalHoldSnappableDetailConnection!
    "Returns a single snapshot by ID."
    snapshot(
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!
    ): CdmSnapshot!
    snapshotEmailSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    snapshotEventSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Search filter for calendar search."
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "Browse or search the given path for files and directories along with their deltas in a given snapshot."
    snapshotFilesDelta(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter snapshot delta based on delta types."
        filter: SnapshotDeltaFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run."
        path: String!,
        "Filter entries based on entries' quarantine status in the base snapshot."
        quarantineFilters: [QuarantineFilter!],
        "Prefix arg for searching for files within a snapshot."
        searchPrefix: String,
        "Corresponds to snapshot forever UUID in Rubrik Security Cloud tables."
        snapshotFid: UUID!,
        "Workload fields in BrowseSnapshotFileDelta request."
        workloadFieldsArg: WorkloadFieldsInput
    ): SnapshotFileDeltaConnection!
    "Returns list of snapshots for a workload."
    snapshotOfASnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput,
        "The FID of the workload."
        workloadId: String!
    ): GenericSnapshotConnection!
    "Returns list of snapshots for a list of workloads."
    snapshotOfSnappablesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Specifies whether to ignore the active protected object check."
        ignoreActiveWorkloadCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Workload UUIDs."
        snappableIds: [String!]!,
        "Filter for snapshot connection."
        snapshotFilter: [SnapshotQueryFilterInput!],
        "Sort snapshots by field."
        sortBy: SnapshotQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Time range input."
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection!
    snapshotOnedriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        onedriveSearchFilter: OnedriveSearchFilter,
        "Org UUID."
        orgId: UUID!,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Returns snapshot results for a workload."
    snapshotResults(
        "End time of the range (in milliseconds since epoch)"
        endTimeMs: Long!,
        snappableFid: String!,
        "Begin time of the range (in milliseconds since epoch)"
        startTimeMs: Long!
    ): SnapshotResultConnection!
    snapshotSharepointDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Org UUID."
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        "The fid for the workload."
        snappableFid: UUID!,
        "The ID of the snapshot."
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "List of snapshots for unmanaged objects."
    snapshotsForUnmanagedObject(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Input for V1QueryUnmanagedObjectSnapshotsV1."
        input: QueryUnmanagedObjectSnapshotsV1Input!,
        "Returns the last n elements from the list."
        last: Int
    ): SnapshotSummaryConnection!
    "Get malware information for snapshots."
    snapshotsMalwareInfo(
        "Input for getting malware information for snapshots."
        snapshotMalware: SnapshotsMalwareInfoInput!
    ): SnapshotsMalwareInfoReply!
    """

    Get SNMP configuration of the cluster

    Supported in v5.0+
    Get SNMP configuration of the queried cluster.
    """
    snmpConfigurations(
        "Input for InternalGetSnmpConfiguration."
        input: GetSnmpConfigurationInput!
    ): SnmpConfiguration!
    "Returns groupBy results for SonarContentReport."
    sonarContentReport(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        day: String!,
        filters: SonarContentReportFilter,
        "Returns the first n elements from the list."
        first: Int,
        groupBy: DiscoveryContentReportGroupBy!,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: DiscoveryContentReportSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder,
        timezone: String!,
        "Types of workloads that can be used for filtering query results."
        workloadTypes: [DataGovObjectType!]! = []
    ): SonarContentReportConnection!
    "Returns groupBy for SonarReport."
    sonarReport(filter: [String!], sonarReportGroupBy: DiscoveryReportGroupBy!, timeFilter: TimeFilterInput): SonarReportConnection!
    "Returns rows for SonarReport table."
    sonarReportRow(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        endTime: String,
        filter: [String!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: DiscoveryReportSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SonarReportRowConnection!
    sonarUserGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListAccessGroupsFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): AccessGroupConnection!
    sonarUsers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListAccessUsersFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: ListAccessUsersSortInput
    ): AccessUserConnection!
    sourceBlueprintInfo(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): SourceBlueprintInfo!
    "list the available Subnets"
    subnetConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the type for id of availability-zone (eg. us-east-1a)"
        availabilityZone: String,
        "The Blueprint ID."
        blueprintId: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "the fid of the vpc"
        vpcId: UUID!
    ): SnappableSubnetConnection!
    "All support user access objects that satisfy the query criteria."
    supportUserAccesses(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies how to filter the list of targets."
        filters: [SupportUserAccessFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorting field for support access."
        sortBy: SupportUserAccessSortByField,
        "Sorting order for support access."
        sortOrder: SortOrder
    ): SupportUserAccessConnection!
    syslogConfiguration: GetSyslogConfigurationReply!
    """

    Get the configured syslog export rules

    Supported in v5.1+
    Return the list of all configured syslog export rules.
    """
    syslogExportRules(
        "Input for V1GetSyslogExportRules."
        input: GetSyslogExportRulesInput!
    ): SyslogExportRuleSummaryListResponse!
    tableFilters: TableFilters!
    target(
        "Corresponds to ID of the target in Rubrik."
        input: UUID!
    ): Target!
    targetMapping(
        "Corresponds to ID of target mapping in Rubrik."
        targetMappingId: UUID!
    ): TargetMapping!
    "All archival locations."
    targets(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies the context filter to use."
        contextFilter: ContextFilterTypeEnum,
        "Specifies how to filter the list of targets."
        filter: [TargetFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies the field by which the list of targets will be sorted."
        sortBy: ArchivalLocationQuerySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): TargetConnection!
    taskDetailConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter task summary by input."
        filter: TaskDetailFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort task detail by field."
        sortBy: TaskDetailSortByEnum = EndTime,
        "Task detail sort order."
        sortOrder: SortOrder = DESC,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): TaskDetailConnection!
    taskDetailGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter task summary by input."
        filter: TaskDetailFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group task detail by a field."
        groupBy: TaskDetailGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): TaskDetailGroupByConnection!
    taskSummaryConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskSummaryFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task summary by field"
        sortBy: TaskSummarySortByEnum = ObjectName,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): TaskSummaryConnection!
    taskSummaryGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskSummaryFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group task summary by a field"
        groupBy: TaskSummaryGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): TaskSummaryGroupByConnection!
    taskchainInfo(
        "Job type"
        jobType: String!,
        "Taskchain uuid"
        taskchainId: String!
    ): TaskchainInfoReply!
    "Checks the availability of the channel name in the Team."
    teamChannelNameAvailable(channelName: String!, teamUUID: UUID!): Boolean!
    "The details of a threat hunt."
    threatHuntDetail(
        "The ID of the threat hunt."
        huntId: String!
    ): ThreatHunt!
    "The results of the Threat Hunt."
    threatHuntResult(
        "The ID of the threat hunt."
        huntId: String!,
        "The ID of the object in the threat hunt."
        objectId: String
    ): ThreatHuntResult!
    "The status of the Threat Hunt."
    threatHuntStatus(
        "The ID of the threat hunt."
        huntId: String!
    ): AsyncRequestStatus!
    "The summary of a threat hunt."
    threatHuntSummary(
        "The ID of the threat hunt."
        huntId: String!
    ): ThreatHuntSummaryReply!
    "List of Threat Hunts."
    threatHunts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter results that started after this time."
        beginTime: DateTime,
        "Optional list of cluster UUIDs to filter by."
        clusterUuidFilter: [String!],
        "Filter results that started before this time."
        endTime: DateTime,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Optionally filter by if the hunt had any matches."
        matchesFoundFilter: [ThreatHuntMatchesFound!],
        "Optionally filter hunts based on whether they have quarantined matches."
        quarantinedMatchesFilter: [ThreatHuntQuarantinedMatchType!],
        "Optional status to filter by."
        statusFilter: [ThreatHuntStatus!]
    ): ThreatHuntConnection!
    toggleableFeaturesEnabled: [FeatureName!]!
    "Get TOTP configuration status for a user."
    totpConfigStatus(
        "Specifies the user ID."
        userId: String!
    ): GetTotpStatusReply!
    """

    Check support tunnel status for a particular node

    Supported in v5.0+
    To be used by Admin to check status of the support tunnel.
    """
    tunnelStatus(
        "Input for InternalGetTunnelStatus."
        input: GetTunnelStatusInput!
    ): SupportTunnelInfo!
    "Count of unique HyperV Servers."
    uniqueHypervServersCount(
        "The hierarchy object filter."
        filter: [Filter!]
    ): Int!
    uniqueVSphereVCenterCount(
        "The hierarchy object filter."
        filter: [Filter!]
    ): Int!
    "Number of unique vCloud Director instances."
    uniqueVcdCount(
        "The hierarchy object filter."
        filter: [Filter!] = []
    ): Int!
    "List of unmanaged objects."
    unmanagedObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Query unmanaged objects."
        input: UnmanagedObjectsInput!,
        "Returns the last n elements from the list."
        last: Int
    ): UnmanagedObjectDetailConnection!
    "Gets the status for completed/running upgrade process."
    upgradeStatus(
        "Specifies the cluster UUID."
        clusterUuid: UUID!
    ): UpgradeStatusReply!
    userActivities(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListObjectFilesFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        "Time range specified in the user's local timezone."
        timeRange: UserTimeRangeInput,
        userId: String!
    ): FileResultConnection!
    userActivityTimeline(
        "Start time, in string format (YYYY-MM-DD)."
        startDay: String!,
        timezone: String!,
        uniqueActivities: Boolean!,
        userId: String!
    ): ActivityTimelineResultConnection!
    userAnalyzerAccess(
        "Maximum number of entries in the response."
        limit: Int!,
        "Start time, in string format (YYYY-MM-DD)."
        startDay: String!,
        timezone: String!,
        userId: String!
    ): AnalyzerAccessUsageConnection!
    userAuditConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: UserAuditFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort user audit by field."
        sortBy: UserAuditSortField,
        "User audit sort order."
        sortOrder: SortOrder
    ): UserAuditConnection!
    userAuditGroupByConnection(
        filters: UserAuditFilter,
        "Primary field for grouping audits."
        primaryGroupBy: UserAuditGroupBy!,
        "Secondary field for grouping audits. This field is optional."
        secondaryGroupBy: UserAuditGroupBy,
        "Sort user audit by field."
        sortBy: UserAuditSortByEnum = Time,
        "User audit sort order."
        sortOrder: SortOrder
    ): UserAuditGroupByInfoConnection!
    userDetail(
        "Start time, in string format (YYYY-MM-DD)."
        startDay: String!,
        timezone: String!,
        userId: String!
    ): GetUserDetailReply!
    userFileActivityTimeline(
        nativePath: String!,
        resource: ResourceInput,
        "Start time, in string format (YYYY-MM-DD)."
        startDay: String!,
        timeGranularity: TimeGranularity!,
        timezone: String!,
        userId: String!
    ): ActivityTimelineResultConnection!
    userGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        roleIdsFilter: [UUID!]
    ): [Group!]!
    "An object containing production notifications information for the current user."
    userNotifications: UserNotifications!
    userSettings: UserSettings!
    "Retrieve users from current and descendant organizations based on the specified filters."
    usersInCurrentAndDescendantOrganization(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specifies user filters."
        filter: UserFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies whether we should include users without any roles assigned either in current or descendant orgs. If roleIdsFilter is not empty and this field is set to true, users without any roles will be included as well."
        shouldIncludeUserWithoutRole: Boolean = false,
        "Specifies sort parameter."
        sortBy: UserSortByParam
    ): UserConnection!
    """

    Preview list of virtual machines of a proposed filter condition

    Supported in v7.0+
    Preview list of virtual machines of a proposed filter condition. The result might not be accurate if new virtual machines were added after last vCenter refresh.
    """
    vCenterAdvancedTagPreview(
        "Input for V1PreviewFilter."
        input: PreviewFilterInput!
    ): VcenterAdvancedTagPreviewReply!
    """

    Get the ingest and export bandwidth limits for HotAdd with the vCenter

    Supported in v5.3+
    Get the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
    """
    vCenterHotAddBandwidth(
        "Input for V1GetHotAddBandwidth."
        input: GetHotAddBandwidthInput!
    ): HotAddBandwidthInfo!
    """

    Retrieve the user-configured network for HotAdd operations

    Supported in v5.3+
    Retrieve the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
    """
    vCenterHotAddNetwork(
        "Input for V1GetHotAddNetwork."
        input: GetHotAddNetworkInput!
    ): HotAddNetworkConfigWithName!
    """

    Get the user-configured networks in the vCenter

    Supported in v5.3+
    Get the names and IDs of the user configured networks in the vCenter. This information enables users to choose a desired network for backups to go through for VMware Cloud on AWS setups.
    """
    vCenterNetworks(
        "Input for V1GetNetworks."
        input: GetNetworksInput!
    ): NetworkInfoListResponse!
    """

    Get the number of HotAdd proxies needed for the vCenter

    Supported in v5.3+
    Get the number of HotAdd proxies that need to be deployed to the vCenter to support the maximum number of ingest jobs.
    """
    vCenterNumProxiesNeeded(
        "Input for V1GetNumProxiesNeeded."
        input: GetNumProxiesNeededInput!
    ): Int!
    "Get preAddInfo for a vcenter."
    vCenterPreAddInfo(
        "Input for V1PreAddVcenter."
        input: PreAddVcenterInput!
    ): VcenterPreAddInfo!
    vSphereBlueprint(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VSphereBlueprint!
    vSphereComputeCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereComputeCluster!
    "Query compute clusters"
    vSphereComputeClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereComputeClusterConnection!
    vSphereDatacenter(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereDatacenter!
    "Vsphere datastore based on id passed in."
    vSphereDatastore(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereDatastore!
    "Vsphere datastore cluster based on id passed in."
    vSphereDatastoreCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereDatastoreCluster!
    "Query vSphere datastore clusters."
    vSphereDatastoreClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereDatastoreClusterConnection!
    vSphereDatastoreConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereDatastoreConnection!
    vSphereFolder(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereFolder!
    vSphereHost(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereHost!
    vSphereHostConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereHostConnection!
    """

    Get details of a ESXi hypervisor

    Supported in v5.0+
    Get details of a ESXi hypervisor.
    """
    vSphereHostDetails(
        "Input for V1GetVmwareHost."
        input: GetVmwareHostInput!
    ): VmwareHostDetail!
    "All of the VSphere hosts based on fids passed in."
    vSphereHostsByFids(fids: [UUID!]!): [VsphereHost!]!
    "List of vSphere Live Mounts."
    vSphereLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for virtual machine Live Mounts."
        filter: [VsphereLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort virtual machine Live Mounts."
        sortBy: VsphereLiveMountSortBy
    ): VsphereLiveMountConnection!
    "Get a vSphere Live Mount by id"
    vSphereMount(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereMount!
    "vSphere Live Mount Connection"
    vSphereMountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for virtual machine Live Mounts."
        filter: VSphereMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VsphereMountSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereMountConnection!
    vSphereNetwork(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereNetwork!
    vSphereResourcePool(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereResourcePool!
    "The root hierarchy for VMware export, which includes VMware compute clusters and standalone hosts."
    vSphereRootRecoveryHierarchy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmHierarchyObjectConnection!
    vSphereTag(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereTag!
    vSphereTagCategory(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereTagCategory!
    vSphereTopLevelDescendantsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    vSphereVCenter(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereVcenter!
    vSphereVCenterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereVcenterConnection!
    vSphereVMAsyncRequestStatus(
        clusterUuid: UUID!,
        "ID of an asynchronous request."
        id: String!
    ): AsyncRequestStatus!
    vSphereVmNew(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VsphereVm!
    vSphereVmNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereVmConnection!
    "Validates the name used for an RDS Instance during an export operation. Returns true if the RDS Instance name is valid. Returns false, with an error message, if the RDS Instance name validation fails. Returns false, without an error message for all other failures."
    validateAwsNativeRdsInstanceNameForExport(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegion!
    ): ValidateAwsNativeRdsInstanceNameForExportReply!
    "Validates if Azure subnets are correctly configured for running Azure Kubernetes Service (AKS) Clusters. When correctly configured, the Azure subnets allow the required region-specific outbound connectivity and do not overlap with Azure restricted IP Address Space."
    validateAzureCloudAccountExocomputeConfigurations(
        "Input for validating Exocompute configurations for an Azure Cloud Account."
        input: ValidateAzureCloudAccountExocomputeConfigurationsInput!
    ): ValidateAzureSubnetsForCloudAccountExocomputeReply!
    "Validates the name used for an Sql Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures."
    validateAzureNativeSqlDatabaseDbNameForExport(
        "Name of the Azure SQL Database."
        azureSqlDatabaseName: String!,
        "Rubrik ID of the Azure SQL Database Server."
        azureSqlDatabaseServerRubrikId: UUID!
    ): ValidateAzureNativeSqlDatabaseDbNameForExportReply!
    "Validates the name used for an Managed Instance Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures."
    validateAzureNativeSqlManagedInstanceDbNameForExport(
        "Name of the Azure SQL Database."
        azureSqlDatabaseName: String!,
        "Rubrik ID of the Azure SQL Managed Instance Server."
        azureSqlManagedInstanceServerRubrikId: UUID!
    ): ValidateAzureNativeSqlManagedInstanceDbNameForExportReply!
    "Validate a certificate and private key pair."
    validateCertificate(
        "Validate certificate input."
        input: ValidateCertificateInput!
    ): ValidateCertificateReply!
    "Information about cluster license capacity validations."
    validateClusterLicenseCapacity(
        "Input required to validate the cluster license capacity."
        input: ValidateClusterLicenseCapacityInput!
    ): ClusterLicenseCapacityValidations!
    "Checks whether the tenant org name is valid and unique."
    validateOrgName(
        "Input required for tenant org name validation."
        input: ValidateOrgNameInput!
    ): ValidateOrgNameReply!
    "Options for exporting a vApp snapshot."
    vappSnapshotExportOptions(
        "Snapshot export options input field."
        input: VappSnapshotExportOptionsInput!
    ): VappExportOptions!
    "Options for instantly recovering a vApp snapshot."
    vappSnapshotInstantRecoveryOptions(
        "Input for V1GetVappSnapshotInstantRecoveryOptionsV1."
        input: VappSnapshotInstantRecoveryOptionsInput!
    ): VappInstantRecoveryOptions!
    "Export options for a vApp snapshot template."
    vappTemplateSnapshotExportOptions(
        "Input for V1GetVappTemplateSnapshotExportOptions."
        input: VappTemplateSnapshotExportOptionsInput!
    ): VappTemplateExportOptionsUnion!
    "A vCloud Director."
    vcd(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): Vcd!
    "A vCloud Director Catalog."
    vcdCatalog(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VcdCatalog!
    "List of vCloud Director clusters."
    vcdClusters(
        "Input for V1QueryVcdClusterV1."
        input: QueryVcdClusterInput!
    ): VcdClusterSummaryListResponse!
    "A vCloud Director Organization."
    vcdOrg(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VcdOrg!
    "A vCloud Director Organization Virtual Data Center."
    vcdOrgVdc(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VcdOrgVdc!
    "Paginated list of vCloud Director orgs."
    vcdOrgs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VcdOrgConnection!
    "Paginated list of the highest-level vCloud Director Objects accessible by the current user."
    vcdTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdTopLevelDescendantTypeConnection!
    "A vCloud Director vApp."
    vcdVapp(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VcdVapp!
    "Paginated list of virtual machines under vCloud Director hiearchy."
    vcdVappVms(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!] = [],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereVmConnection!
    "Paginated list of vCloud Director vApps."
    vcdVapps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VcdVappConnection!
    "A vCloud Director VIM Server."
    vcdVimServer(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VcdVimServer!
    "List of VIM servers belonging to the vCD."
    vcdVimServers(
        "Input for V1QueryVcdVimServerV1."
        input: QueryVcdVimServerInput!
    ): VimserverSummaryListResponse!
    verifySLAWithReplicationToCluster(
        "Account name."
        account: String!,
        "UUID of the Rubrik cluster"
        cdmClusterUUID: UUID!,
        "Include Archived SLA"
        includeArchived: Boolean!
    ): VerifySLAWithReplicationToClusterResp!
    volumeGroup(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): VolumeGroup!
    volumeGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VolumeGroupConnection!
    "Volume Group Live Mount Connection."
    volumeGroupMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for volume group live mounts."
        filters: [VolumeGroupLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for volume group live mounts."
        sortBy: VolumeGroupLiveMountSortByInput
    ): VolumeGroupLiveMountConnection!
    "list the available Volume Types"
    volumeTypeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Blueprint ID."
        blueprintId: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        " the device key"
        key: Int!,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "the fid of the snapshot"
        snapshotId: UUID,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SnappableStorageVolumeTypeConnection!
    "list the available VPCs"
    vpcConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Blueprint ID."
        blueprintId: UUID!,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "MaxSuggestionCount is the number of suggestions expected"
        maxSuggestionCount: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VpcConnection!
    vsphereVMMissedRecoverableRange(afterTime: DateTime, beforeTime: DateTime, snappableFid: UUID!): RecoverableRangeResponse!
    vsphereVMRecoverableRange(afterTime: DateTime, beforeTime: DateTime, snappableFid: UUID!): RecoverableRangeResponse!
    vsphereVMRecoverableRangeInBatch(
        "The batch request, which includes the ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved, and optionally the date ranges as a filter."
        requestInfo: BatchVmwareVmRecoverableRangesRequestInput!
    ): BatchVmwareVmRecoverableRanges!
    vsphereVmwareCdpLiveInfo(
        "The ID of each CDP-enabled virtual machine for which live info is being retrieved."
        ids: [String!]!
    ): BatchVmwareCdpLiveInfo!
    "A Windows Cluster."
    windowsCluster(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): WindowsCluster!
    windowsFileset(
        "The Rubrik UUID for the object."
        fid: UUID!
    ): WindowsFileset!
    "Get whether alerts for a given workload are enabled."
    workloadAlertSetting(
        "The Rubrik cluster ID."
        clusterUuid: UUID!,
        "The FID of the workload."
        workloadId: UUID!
    ): GetWorkloadAlertSettingReply!
    "Specifies workloads that have an anomalous snapshot."
    workloadAnomalies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Optional list of analyzer group IDs to filter by."
        analyzerGroupFilter: [String!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter results that started after this time."
        beginTime: DateTime!,
        "Optional list of cluster UUIDs to filter by."
        clusterUuidFilter: [String!],
        "Optional list of encryption levels to filter by."
        encryptionFilter: [EncryptionLevel!],
        "Filter results that started before this time."
        endTime: DateTime,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Optional list of object types to filter by."
        objectTypeFilter: [String!],
        "Order objects with children ahead of non-parents."
        orderParentsFirst: Boolean,
        "Optional list of severity levels to filter by."
        severityFilter: [ActivitySeverityEnum!],
        "Optional list of SLA FIDs to filter by."
        slaFidFilter: [String!],
        "Sort object anomalies by field."
        sortBy: WorkloadAnomaliesSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Optional object name search filter to apply."
        workloadNameSearch: String
    ): WorkloadAnomalyConnection!
    workloadGroupByAtSpecifiedTime(
        "Filters of workloads."
        filters: WorkloadFilter,
        "Primary Group workloads by field."
        primaryGroupBy: WorkloadGroupByEnum!,
        "Secondary Group workloads by field."
        secondaryGroupBy: WorkloadGroupByEnum,
        "Time to calculate the group by."
        specifiedTime: DateTime!
    ): WorkloadGroupByReply!
    "Configured web TLS cert."
    wwwTlsCert: CertificateInfo!
}

"Datastore freespace threshold configurations on Rubrik clusters."
type QueryDatastoreFreespaceThresholdsReply {
    "Datastore freespace threshold configuration."
    thresholds: [DatastoreFreespaceThresholdType!]!
}

type QuerySDDLReply {
    secInfo: [PathSecInfo!]!
}

"Summary of the Ransomware Investigation results."
type RansomwareInvestigationAnalysisSummaryReply {
    """

    A list of daily summaries of Ransomware Investigation results for all
    the workloads.
    """
    analysisDetails: [DailyAnalysisDetails!]!
}

"Lists of entities and their ransomware detection enablement status."
type RansomwareInvestigationEnablementReply {
    "Microsoft 365 subscriptions on which ransomware detection can be enabled."
    microsoft365Subscriptions: [Microsoft365RansomwareInvestigationEnablement!]
}

"Specifies the workload ID and type and the number of times Ransomware Investigation has scanned a workload."
type RansomwareInvestigationWorkloadScannedCountReply {
    """

    A list of workloads and the number of times each workload has been
    scanned by Ransomware Investigation.
    """
    workloadScannedCounts: [WorkloadScanned!]!
}

"Ransomware Investigation report from lambda service."
type RansomwareResult {
    "The cluster ID of the object."
    clusterUuid: UUID!
    "The probability of the snapshot being encrypted."
    encryptionProbability: Float!
    "The database ID of the ransomware result."
    id: String!
    "Indicates whether the snapshot is encrypted."
    isEncrypted: Boolean!
    "The internal managed ID of the object."
    managedId: String!
    "The date of the snapshot."
    snapshotData: DateTime!
    "The internal fid of the snapshot."
    snapshotFid: String!
    "The internal ID of the snapshot."
    snapshotId: String!
    "The internal ID of the object."
    workloadId: String!
}

"Paginated list of RansomwareResult objects."
type RansomwareResultConnection {
    "Total number of RansomwareResult objects matching the request arguments."
    count: Int!
    "List of RansomwareResult objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RansomwareResultEdge!]!
    "List of RansomwareResult objects."
    nodes: [RansomwareResult!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the RansomwareResult object. This wrapper is used for pagination."
type RansomwareResultEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual RansomwareResult object wrapped by this edge."
    node: RansomwareResult!
}

"Ransomware Investigation data with group by information applied to it."
type RansomwareResultGroupedData {
    "Group by information."
    groupByInfo: RansomwareResultGroupByInfo!
    "Provides further groupings for the data."
    ransomwareResultGroupedData(
        "Group ransomware results by field."
        groupBy: RansomwareResultGroupBy!
    ): [RansomwareResultGroupedData!]!
    "Paginated ransomware result data."
    ransomwareResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort ransomware results by field."
        sortBy: RansomwareResultSortBy
    ): RansomwareResultConnection!
}

"Paginated list of RansomwareResultGroupedData objects."
type RansomwareResultGroupedDataConnection {
    "Total number of RansomwareResultGroupedData objects matching the request arguments."
    count: Int!
    "List of RansomwareResultGroupedData objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RansomwareResultGroupedDataEdge!]!
    "List of RansomwareResultGroupedData objects."
    nodes: [RansomwareResultGroupedData!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the RansomwareResultGroupedData object. This wrapper is used for pagination."
type RansomwareResultGroupedDataEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual RansomwareResultGroupedData object wrapped by this edge."
    node: RansomwareResultGroupedData!
}

"URLs and hashes for RBA installers."
type RbaInstallerUrls {
    "SHA-256 hash of the installer for Linux in Debian format."
    debianHashSha256: String!
    "Signed URL of installer for Linux in Debian format."
    debianUrl: String!
    "SHA-256 hash of the installer for Linux in RPM format."
    rpmHashSha256: String!
    "Signed url of installer for Linux in RPM format."
    rpmUrl: String!
    "SHA-256 hash of the installer for Windows."
    windowsHashSha256: String!
    "Signed URL of installer for Windows."
    windowsUrl: String!
}

"RCS Azure archival locations consumption stats."
type RcsArchivalLocationConsumptionStats {
    "List of RCS azure archival location blob capacity stats."
    blobCapacityStats: [RcsArchivalLocationStatsRecord!]!
    "List of RCS azure archival location egress stats."
    egressStats: [RcsArchivalLocationStatsRecord!]!
    "List of RCS azure archival location forecasted blob capacity stats."
    forecastedBlobCapacityStats: [RcsArchivalLocationStatsRecord!]!
    "List of RCS azure archival location ingress stats."
    ingressStats: [RcsArchivalLocationStatsRecord!]!
    "Rubrik Security Cloud archival location ID."
    locationId: String!
}

"RCS Azure archival locations consumption stats record."
type RcsArchivalLocationStatsRecord {
    "Consumption stats metric name."
    metricName: RcsConsumptionMetricOutputNameType!
    "Consumption stats metric value."
    metricValue: Float!
    "RCS archival location tier."
    tier: RcsTierEnumType!
    "Rubrik Security Cloud archival location ID."
    timestamp: String!
}

"RCS Azure archival locations consumption stats."
type RcsAzureArchivalLocationsConsumptionStatsOutput {
    "List of RCS azure archival location consumption stats."
    rcsAzureConsumptionStats: [RcsArchivalLocationConsumptionStats!]!
}

"Specific info for Rcs Azure Target Template."
type RcsAzureTargetTemplate implements TargetTemplate {
    "Immutability setting of the template, that defines thenumber of days for which stored data will be immutable."
    immutabilitySettings: RcsImmutabilitySettings!
    "Region of RCV location template."
    region: RcsRegionEnumType!
    "The type of this Target."
    targetType: TargetType!
    "Access tier for the RCV location."
    tier: RcsTierEnumType!
}

"Immutability settings information for RCS Azure Target."
type RcsImmutabilitySettings {
    "Lock duration days defines the number of days for which stored data will be immutable."
    lockDurationDays: Long!
}

"Rubrik Cloud Vault (RCV) account capacity entitlement."
type RcvAccountEntitlement {
    "Rubrik Cloud Vault (RCV) Archive Tier Entitlement details."
    archiveEntitlement: RcvEntitlement
    "Rubrik Cloud Vault (RCV) Backup Tier Entitlement details."
    backupEntitlement: RcvEntitlement
    "Rubrik Cloud Vault (RCV) Entitlements."
    entitlements: RcvEntitlementsUsageDetails
}

"Rubrik Cloud Vault (RCV) entitlement tier wise details."
type RcvEntitlement {
    "Rubrik Cloud Vault (RCV) region bundle."
    bundle: RcvRegionBundle!
    "Rubrik Cloud Vault (RCV) Entitlement capacity in TBs."
    capacity: Float!
}

"Rubrik Cloud Vault (RCV) Entitlement and usage details."
type RcvEntitlementsUsageDetails {
    "Rubrik Cloud Vault (RCV) entitlement."
    entitlement: RcvEntitlement!
    "Rubrik Cloud Vault (RCV) entitlement usage."
    usedCapacity: Float!
}

"RDS DB Instance details from AWS."
type RdsInstanceDetailsFromAws {
    "Allocated size of an RDS Instance."
    allocatedStorageInGb: Long!
    "Retention time for RDS backups."
    backupRetentionPeriod: Long!
    "DB Engine of RDS Instance."
    dbEngine: String!
    "DB class for RDS Instance."
    dbInstanceClass: String!
    "Status of an RDS Instance. Refers to the health of the RDS Instance."
    dbInstanceStatus: String!
    "Maintenance window for the RDS Instance."
    dbMaintenanceWindow: String!
    "Name of parameter group of RDS Instance."
    dbParameterGroupName: String!
    "Subnet group name of RDS Instance."
    dbSubnetGroupName: String!
    "RDS DB Instance engine version."
    engineVersion: String!
    "Input/Output (IO) operation limit per second for RDS Instance."
    iops: Long!
    "Specifies whether RDS is available in multi Availability Zones (AZs). If true, it means it is a multi-AZ RDS Instance."
    isMultiAz: Boolean!
    "Key Management System (KMS) key ID associated with RDS Instance."
    kmsKeyId: String!
    "Name of option group of RDS Instance."
    optionGroupName: String!
    "Port used to connect to the RDS Instance."
    port: Long!
    "Primary Availability Zone (AZ) of RDS Instance."
    primaryAz: String!
    "Amazon Resource Name (ARN) of RDS Instance."
    rdsInstanceArn: String!
    "Storage type of RDS Instance. Amazon RDS provides three storage types: General Purpose SSD (also known as gp2), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard)."
    storageType: String!
    "ID of VPC in AWS."
    vpcId: String!
}

"RDS Export defaults from AWS."
type RdsInstanceExportDefaults {
    "Allocated size of an RDS Instance."
    allocatedStorageInGb: Long!
    "DB Engine of RDS Instance."
    dbEngine: AwsNativeRdsDbEngine!
    "Version of DB engine."
    dbEngineVersion: String!
    "DB class for RDS Instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClass!
    "NParameter group name of the RDS Instance."
    dbParameterGroupName: String!
    "Subnet group name of the RDS Instance."
    dbSubnetGroupName: String!
    "Input/Output (IO) operation limit per second for RDS Instance."
    iops: Int!
    "Specifies whether RDS is available in multi Availability Zones (AZs). If true, it means it is a multi-AZ RDS Instance."
    isMultiAz: Boolean!
    "Key Management System (KMS) key ID associated with RDS Instance."
    kmsKeyId: String!
    "Name of option group of RDS Instance."
    optionGroupName: String!
    "Port used to connect to the RDS Instance."
    port: Long!
    "Primary Availability Zone (AZ) of RDS Instance."
    primaryAz: String!
    "Storage type of RDS Instance. Amazon RDS provides three storage types: General Purpose SSD (also known as gp2), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard)."
    storageType: AwsNativeRdsStorageType!
    "Virtual Private Cloud (VPC) associated with RDS Instance."
    vpcId: String!
}

"Range to recover a snapshot from for a given VM"
type RecoverableRange {
    beginTime: String
    endTime: String
}

"Recoverable ranges for a given VM"
type RecoverableRangeResponse {
    data: [RecoverableRange!]!
    hasMore: Boolean
    total: Long
}

"Recovery information."
type RecoveryInfo {
    "Recovery count."
    recoveryCount: Int!
    "Workload recovery IDs."
    recoveryIds: [String!]!
    "Recovery type."
    recoveryType: String!
}

"A Recovery Plan."
type RecoveryPlan implements HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Recovery Plan configuration."
    config: RecoveryPlanConfig
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Recovery Plan description."
    description: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Recovery Plan version."
    version: Int!
}

"Recovery Plan Blueprint information."
type RecoveryPlanBlueprintInfo {
    "IDs of Blueprints."
    blueprintId: String!
    "Boot priority."
    bootPriority: Int!
    "Target location information."
    targetLocationInfo: RecoveryPlanLocationInfo
}

"Recovery Plan configuration."
type RecoveryPlanConfig {
    "The list of Blueprints."
    blueprintsInfo: [RecoveryPlanBlueprintInfo!]!
    "Boot priority delay in seconds."
    bootPriorityDelaySeconds: [Int!]!
}

"Paginated list of RecoveryPlan objects."
type RecoveryPlanConnection {
    "Total number of RecoveryPlan objects matching the request arguments."
    count: Int!
    "List of RecoveryPlan objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RecoveryPlanEdge!]!
    "List of RecoveryPlan objects."
    nodes: [RecoveryPlan!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Recovery plan information."
type RecoveryPlanDetails {
    "ID of the recovery plan."
    id: UUID!
    "Visibility of the recovery plan."
    isVisible: Boolean!
    "Name of the recovery plan."
    name: String!
    "Type of recovery plan."
    type: RecoveryPlanType!
}

"Wrapper around the RecoveryPlan object. This wrapper is used for pagination."
type RecoveryPlanEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual RecoveryPlan object wrapped by this edge."
    node: RecoveryPlan!
}

"Recovery Plan location information."
type RecoveryPlanLocationInfo {
    "Location ID."
    locationId: String!
    "Location type."
    locationType: BlueprintLocationType!
}

type RecoverySpecId {
    fid: String!
}

type RecoveryTaskDetailsTableFilter {
    cluster_location: [FilterOption!]!
    cluster_type: [FilterOption!]!
    object_type: [FilterOption!]!
    replication_source: [FilterOption!]!
    status: [FilterOption!]!
    task_category: [FilterOption!]!
    task_type: [FilterOption!]!
}

"Reply Object for RefreshHost."
type RefreshHostReply {
    output: HostDetail
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Status of auto discover jobs for NAS systems.
"""
type RefreshNasSystemsReply {
    """

    Required. Supported in v7.0+
    v7.0-v8.0: An array of discover NAS system summaries.
    v9.0: An array of summaries of discovered NAS systems.
    """
    discoverNasSystemSummaries: [DiscoverNasSystemSummary!]!
}

"Responses of operations to refresh storage arrays in Rubrik clusters."
type RefreshStorageArraysReply {
    "Refresh storage arrays responses."
    responses: [StorageArrayOperationOutputType!]!
}

"Response for the operation to refresh vCD instance from a Rubrik cluster."
type RefreshVcdInstanceReplyType {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Error message in case of failure."
    errorMessage: String
    "ID of the vCD instance."
    id: String!
}

"A list of response objects for the operations to refresh vCD instances from a Rubrik cluster."
type RefreshVcdInstancesReply {
    "Refresh vCD instance responses."
    responses: [RefreshVcdInstanceReplyType!]!
}

"Supported in v5.0+"
type RefreshableObjectConnectionStatus {
    """

    Supported in v5.0+
    Details about the object status. Will be populated if the status is "BadlyConfigured".
    """
    message: String
    """

    Supported in v5.0+
    Status of the refreshable object.
    """
    status: RefreshableObjectConnectionStatusType!
}

type Region {
    displayName: String!
    id: String!
    name: String!
}

"Paginated list of Region objects."
type RegionConnection {
    "Total number of Region objects matching the request arguments."
    count: Int!
    "List of Region objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RegionEdge!]!
    "List of Region objects."
    nodes: [Region!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Region object. This wrapper is used for pagination."
type RegionEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Region object wrapped by this edge."
    node: Region!
}

"Response from cloud cluster registration."
type RegisterCloudClusterReply {
    "Error message if any error occurred else empty."
    error: String!
    "True or false."
    isSuccessful: Boolean!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Response for register NAS system operation.
"""
type RegisterNasSystemReply {
    """

    Required. Supported in v7.0+
    The asynchronous request status of the job that registers the NAS system.
    """
    nasDiscoverJobStatus: AsyncRequestStatus
    """

    Required. Supported in v7.0+
    A summary of the NAS system being registered.
    """
    nasSystemSummary: UpdateNasSystemReply
}

"A snippet of the related help topic."
type RelatedContent {
    "Summary of the related help topic."
    description: String!
    "ID of the related help topic."
    id: String!
    "URL pointing to the related help topic."
    link: URL
    "Title of the related help topic."
    title: String!
    "Type of the related help topic."
    type: ProductDocumentationType!
}

"An relative monthly recurrence pattern (e.g. Second Thursday or Friday of every other month)."
type RelativeMonthlyRecurrencePattern {
    "E.g. first, second, third."
    dayOfWeekIndex: String!
    "Which days of the week the event occurs."
    daysOfWeek: [String!]!
    "The interval at which the recurrence applies."
    interval: Int!
}

"A relative range of time."
type RelativeTimeRange {
    "Number of units in the time range."
    magnitude: Int!
    "Unit of the time range"
    unit: TimeUnitEnum!
}

"A relative yearly recurrence pattern (e.g. First Tuesday of November)."
type RelativeYearlyRecurrencePattern {
    "E.g. first, second, third."
    dayOfWeekIndex: String!
    "Which days of the week the event occurs."
    daysOfWeek: [String!]!
    "The month to which the recurrence applies."
    month: String!
}

"Response from cluster delete vlans."
type RemoveVlansReply {
    "VLAN ID(s) that failed to be deleted."
    failureVlanIds: [Int!]!
    "VLAN ID(s) that deleted successfully."
    successVlanIds: [Int!]!
}

"Information about Kubernetes Replicated Snapshots."
type ReplicatedSnapshotInfo {
    "CDM cluster associated with the snapshot."
    associatedCdm: Cluster
    "Time the snapshot was created."
    date: DateTime!
    "Time the snapshot expires."
    expirationDate: DateTime
    "ID of the workload to which the snapshot belongs."
    snappableId: String!
    "ID to uniquely identify the snapshot."
    snapshotId: String!
}

"Rubrik cluster details."
type ReplicationCluster {
    "Rubrik cluster uuid."
    id: String!
    "Rubrik cluster name."
    name: String!
    "Rubrik cluster version."
    version: String!
}

"Replication pair specific information."
type ReplicationPair {
    "Configuration details about the replication pair of Rubrik clusters."
    configDetails: ReplicationPairConfigDetails
    "Additional information about the connection status of the replication pair Rubrik clusters."
    connectionDetails: ConnectionStatusDetails!
    "Failed replication task count in last 24 hours."
    failedTasks: Long
    "Represents replication pair pause enablement status."
    isPaused: Boolean!
    "Network throttle details for source Rubrik cluster."
    networkThrottle: NetworkThrottle
    "Running replication task count."
    runningTasks: Long
    "Source Rubrik cluster details."
    sourceCluster: ReplicationCluster!
    "Connection status of the replication pair (active, disconnected, or paused)."
    status: ReplicationPairConnectionStatus!
    "Storage (in bytes) consumed on target cluster by replicated snapshots."
    storage: Long!
    "Target Rubrik cluster details."
    targetCluster: ReplicationCluster!
}

"Configuration details about the replication pair of Rubrik clusters."
type ReplicationPairConfigDetails {
    "Denotes private IP or NAT configuration."
    setupType: String!
    "Source Rubrik cluster gateway information."
    sourceGateway: GatewayInfo
    "Target Rubrik cluster gateway information."
    targetGateway: GatewayInfo
}

"Paginated list of ReplicationPair objects."
type ReplicationPairConnection {
    "Total number of ReplicationPair objects matching the request arguments."
    count: Int!
    "List of ReplicationPair objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ReplicationPairEdge!]!
    "List of ReplicationPair objects."
    nodes: [ReplicationPair!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ReplicationPair object. This wrapper is used for pagination."
type ReplicationPairEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ReplicationPair object wrapped by this edge."
    node: ReplicationPair!
}

"Replication source for a given replication target."
type ReplicationSource {
    "UUID of the cluster."
    id: String!
    "IP address of the source cluster."
    sourceClusterAddress: String
    "Name of the source cluster."
    sourceClusterName: String!
    "UUID of the source cluster."
    sourceClusterUuid: UUID!
    "Total replicated storage on the target cluster from the source cluster."
    totalStorage: Long
}

"Replication specification."
type ReplicationSpec {
    "Type of replication."
    replicationType: ReplicationType!
    "Specific replication specification for the type."
    specificReplicationSpec: SpecificReplicationSpec
}

"Replication specification."
type ReplicationSpecV2 {
    "AWS region."
    awsRegion: String!
    "AWS location used as the replication target."
    awsTarget: AwsReplicationTarget!
    "Azure Region."
    azureRegion: String!
    "Azure location used as the replication target."
    azureTarget: AzureReplicationTarget!
    "Cascading Archival Specifications."
    cascadingArchivalSpecs: [CascadingArchivalSpec!]!
    "Rubrik cluster used as the replication target."
    cluster: SlaReplicationCluster
    "Time snapshot is kept on local target cluster."
    replicationLocalRetentionDuration: Duration
    "Retention duration."
    retentionDuration: Duration
    "Replication target mapping."
    targetMapping: TargetMapping
}

"Replication target for a given replication source."
type ReplicationTarget {
    "UUID of the cluster."
    id: String!
    "IP address of the target cluster."
    targetClusterAddress: String
    "Name of the target cluster."
    targetClusterName: String!
    "UUID of the target cluster."
    targetClusterUuid: UUID!
    "Total replicated storage on the target cluster from the source cluster."
    totalStorage: Long
}

"Replication to cloud location specification."
type ReplicationToCloudLocationSpec {
    "Retention duration."
    retentionDuration: Duration
    "Replication target mapping."
    targetMapping: TargetMapping
}

"Replication to cloud region specification."
type ReplicationToCloudRegionSpec {
    "Replication cloud provider."
    cloudProvider: CloudProvider!
    "Replication target region."
    replicationTargetRegion: String!
    "Retention period on replication region."
    retention: Int!
    "Unit of retention period."
    retentionUnit: RetentionUnit!
}

type ReportConfig {
    aggregations: [String!]!
    "Column selection for the report."
    columns: [String!]!
    "Type of report."
    dataViewType: DataViewTypeEnum!
    "Filter selection for the report."
    filters: [ConfigFilter!]!
    "GroupBy selection for the report."
    groupBy: configGroupBy!
    id: Long!
    "Report name."
    name: String!
    sortBy: String!
    sortOrder: SortOrder
}

type ReportFilter {
    name: String!
    values: [String!]!
}

type ReportFilterDetail {
    dataType: DataTypeEnum!
    defaultValues: [DisplayableValue!]!
    displayName: String!
    name: String!
    type: FilterTypeEnum!
    values: [DisplayableValue!]!
}

type ReportFocus {
    enumValue: ReportFocusEnum!
}

type ReportGroupByDetail {
    aggregations: [DisplayableValue!]!
    allValues: [DisplayableValue!]!
    displayName: String!
    name: String!
    primaryGroupBy: String!
    secondaryAggregation: String
    secondaryGroupBy: String
}

"The metadata of a report."
type ReportMetadata {
    "The total number of reports of the specified type."
    count: Long!
    "The type of report."
    reportViewType: PolarisReportViewType!
}

type ReportSchema {
    aggregateColumns: [Column!]!
    allColumns: [Column!]!
    chartConfigs: [ChartConfig!]!
    filters: [ReportFilterDetail!]!
    groupBys: [ReportGroupByDetail!]!
    sortBy: Column!
    sortOrder: SortOrder!
    tableColumns: [Column!]!
}

"Description of the report version."
type ReportVersion {
    "The report version."
    reportVersion: ReportVersionType!
}

"Supported in v5.0+"
type RequestErrorInfo {
    """

    Required. Supported in v5.0+
    v5.0: The error message for failed ids.
    v5.1+: The error message for failed IDs.
    """
    message: String!
}

type RequestStatus {
    success: Boolean!
}

"Empty request type."
type RequestSuccess {
    "Specifies whether the request is successful."
    success: Boolean!
}

"Supported in v6.0+"
type RequestedMatchDetails {
    requestedHashTypes: [HashType!]
}

type ResourceGroup {
    id: String!
    name: String!
}

"Paginated list of ResourceGroup objects."
type ResourceGroupConnection {
    "Total number of ResourceGroup objects matching the request arguments."
    count: Int!
    "List of ResourceGroup objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ResourceGroupEdge!]!
    "List of ResourceGroup objects."
    nodes: [ResourceGroup!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ResourceGroup object. This wrapper is used for pagination."
type ResourceGroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ResourceGroup object wrapped by this edge."
    node: ResourceGroup!
}

"Information about the resource being validated."
type ResourceInfo {
    "Id of the resource."
    resourceId: String!
    "Type od the resource"
    resourceType: ResourceType!
}

"Empty response type."
type ResponseSuccess {
    "Indicates whether the request returned successfully."
    success: Boolean!
}

"Supported in v7.0+"
type RestoreFormArchivalProxyConfig {
    """

    Supported in v7.0+
    Hostname or IP address of the proxy server.
    """
    proxyServer: String
}

"Supported in v7.0+"
type RestoreFormComputeProxyConfig {
    """

    Supported in v7.0+
    Hostname or IP address of the proxy server.
    """
    proxyServer: String
}

"Supported in v7.0+"
type RestoreFormConfigurationGuestOs {
    """

    Supported in v7.0+
    Guest OS Domain.
    """
    domain: String
    """

    Required. Supported in v7.0+
    Username of guest OS.
    """
    username: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationKmipServer {
    """

    Required. Supported in v7.0+
    Address of KMIP server.
    """
    serverAddress: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationLdapServer {
    """

    Required. Supported in v7.0+
    Name of LDAP server.
    """
    name: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationNasHost {
    """

    Required. Supported in v7.0+
    Hostname of NAS host.
    """
    hostname: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationObjectStoreArchivalLocation {
    """

    Supported in v8.0+
    Name of the bucket.
    """
    bucket: String
    """

    Supported in v8.0+
    Method used to encrypt archival location.
    """
    encryptionType: String
    """

    Supported in v8.0+
    Endpoint for the archival location.
    """
    endpoint: String
    """

    Required. Supported in v7.0+
    Name of archival location.
    """
    name: String!
    """

    Supported in v8.0+
    Number of buckets.
    """
    numBuckets: Long
}

"Supported in v7.0+"
type RestoreFormConfigurationOrganization {
    """

    Required. Supported in v7.0+
    Name of organization.
    """
    name: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationReplicationTarget {
    """

    Required. Supported in v7.0+
    Address of replication target cluster.
    """
    targetClusterAddress: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationReport {
    """

    Required. Supported in v7.0+
    Name of report.
    """
    name: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationRole {
    """

    Required. Supported in v7.0+
    Name of role.
    """
    name: String!
    """

    Required. Supported in v7.0+
    Name of organization.
    """
    organizationName: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationS3ArchivalLocation {
    """

    Supported in v7.0+
    Archival proxy config.
    """
    archivalProxyConfig: RestoreFormArchivalProxyConfig
    """

    Supported in v8.0+
    Name of the bucket.
    """
    bucket: String
    """

    Supported in v7.0+
    Compute proxy details.
    """
    computeProxyConfig: RestoreFormComputeProxyConfig
    """

    Supported in v8.0+
    Default region for archival location.
    """
    defaultRegion: String
    """

    Supported in v8.0+
    Method used to encrypt archival location.
    """
    encryptionType: String
    """

    Required. Supported in v7.0+
    Name of the S3 archival location.
    """
    name: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationSlaDomain {
    """

    Required. Supported in v7.0+
    Name of SLA domain.
    """
    name: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationSmtp {
    """

    Required. Supported in v7.0+
    Email ID to be used to send email.
    """
    fromEmailId: String!
    """

    Required. Supported in v7.0+
    Hostname of SMTP server.
    """
    smtpHostname: String!
    """

    Required. Supported in v7.0+
    Port of SMTP server.
    """
    smtpPort: Long!
}

"Supported in v7.0+"
type RestoreFormConfigurationSnmp {
    """

    Required. Supported in v7.0+
    SNMP username.
    """
    username: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationUser {
    """

    Required. Supported in v7.0+
    Name of user.
    """
    username: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationVcenterServer {
    """

    Required. Supported in v7.0+
    Hostname of vcenter server.
    """
    hostname: String!
}

"Supported in v7.0+"
type RestoreFormConfigurationWinAndUnixHost {
    """

    Required. Supported in v7.0+
    Name of windows or unix host.
    """
    hostname: String!
}

"Supported in v7.0+"
type RestoreFormConfigurations {
    """

    Required. Supported in v7.0+
    Guest OS configurations.
    """
    guestOsCredentials: [RestoreFormConfigurationGuestOs!]!
    """

    Supported in v7.0+
    KMIP server configurations.
    """
    kmipServers: [RestoreFormConfigurationKmipServer!]!
    """

    Required. Supported in v7.0+
    LDAP server configurations.
    """
    ldapServers: [RestoreFormConfigurationLdapServer!]!
    """

    Required. Supported in v7.0+
    NAS host configurations.
    """
    nasHosts: [RestoreFormConfigurationNasHost!]!
    """

    Required. Supported in v7.0+
    Object store (S3 compatible and Scality) archival location configurations.
    """
    objectStoreArchivalLocations: [RestoreFormConfigurationObjectStoreArchivalLocation!]!
    """

    Required. Supported in v7.0+
    Organization configurations.
    """
    organizations: [RestoreFormConfigurationOrganization!]!
    """

    Required. Supported in v7.0+
    Replication target configurations.
    """
    replicationTargets: [RestoreFormConfigurationReplicationTarget!]!
    """

    Required. Supported in v7.0+
    Report configurations.
    """
    reports: [RestoreFormConfigurationReport!]!
    """

    Required. Supported in v7.0+
    Role configurations.
    """
    roles: [RestoreFormConfigurationRole!]!
    """

    Required. Supported in v7.0+
    Amazon S3 archival location configurations.
    """
    s3ArchivalLocations: [RestoreFormConfigurationS3ArchivalLocation!]!
    """

    Required. Supported in v7.0+
    SLA domain configurations.
    """
    slaDomains: [RestoreFormConfigurationSlaDomain!]!
    """

    Required. Supported in v7.0+
    SMTP configurations.
    """
    smtpSettings: [RestoreFormConfigurationSmtp!]!
    """

    Required. Supported in v7.0+
    SNMP configurations.
    """
    snmpSettings: [RestoreFormConfigurationSnmp!]!
    """

    Required. Supported in v7.0+
    User configurations.
    """
    users: [RestoreFormConfigurationUser!]!
    """

    Required. Supported in v7.0+
    Vcenter server configurations.
    """
    vcenterServers: [RestoreFormConfigurationVcenterServer!]!
    """

    Required. Supported in v7.0+
    Windows and unix host configurations.
    """
    winAndUnixHosts: [RestoreFormConfigurationWinAndUnixHost!]!
}

type Result {
    appFid: String!
    id: String!
    success: Boolean!
}

"Archival location resume result."
type ResumeTargetReply {
    "Rubrik Security Cloud managed location ID."
    locationId: String!
    "Ownership status of the archival location."
    status: ArchivalLocationStatus!
}

type RetryBackupClusterResp {
    clusterUuid: String!
    eventSeriesId: String!
}

type RetryBackupResp {
    clusterResp: [RetryBackupClusterResp!]!
}

"RBAC role."
type Role {
    "Role description."
    description: String!
    "Role permissions that are in effect."
    effectivePermissions: [Permission!]!
    "Role permissions that are explicitly assigned by user."
    explicitlyAssignedPermissions: [Permission!]!
    "Role ID."
    id: String!
    "If this role is a tenant organization administrator."
    isOrgAdmin: Boolean!
    "Boolean value indicating if the role is read-only."
    isReadOnly: Boolean!
    "Role name."
    name: String!
    "Role organization ID."
    orgId: String!
    "Role permissions."
    permissions: [Permission!]!
    "List of protectable Rubrik clusters."
    protectableClusters: [String!]!
}

"Paginated list of Role objects."
type RoleConnection {
    "Total number of Role objects matching the request arguments."
    count: Int!
    "List of Role objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RoleEdge!]!
    "List of Role objects."
    nodes: [Role!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Role object. This wrapper is used for pagination."
type RoleEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Role object wrapped by this edge."
    node: Role!
}

type RoleStatus {
    hasRole: Boolean!
}

type RoleTemplate {
    description: String!
    id: String!
    name: String!
    permissions: [Permission!]!
}

"Paginated list of RoleTemplate objects."
type RoleTemplateConnection {
    "Total number of RoleTemplate objects matching the request arguments."
    count: Int!
    "List of RoleTemplate objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RoleTemplateEdge!]!
    "List of RoleTemplate objects."
    nodes: [RoleTemplate!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the RoleTemplate object. This wrapper is used for pagination."
type RoleTemplateEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual RoleTemplate object wrapped by this edge."
    node: RoleTemplate!
}

"Overall RU status."
type RollingUpgradeInfo {
    "List of nodes (names), currently being upgraded."
    ruCurrentNodes: [String!]!
    "List of RuNodeInfoEntry objects, one per node."
    ruNodeInfoList: [RollingUpgradeNodeInfoEntry!]!
}

"Detailed RU status of a node."
type RollingUpgradeNodeInfo {
    "Current state details."
    currentStateInfo: CurrentStateInfo
    "RU end time in seconds since epoch."
    ruEndTs: String!
    "RU start time in seconds since epoch."
    ruStartTs: String!
}

"RU node information entry."
type RollingUpgradeNodeInfoEntry {
    "Node name."
    nodeName: String!
    "Detailed RU status of a node."
    ruNodeInfo: RollingUpgradeNodeInfo
}

"Updated service account details."
type RotateServiceAccountSecretReply {
    "URI to retrieve the access token.."
    accessTokenUri: String!
    "Client ID of the service account."
    clientId: String!
    "Client secret used to authenticate to the authorization server."
    clientSecret: String!
    "Name of the service account."
    name: String!
}

"Supported in v5.0+"
type RouteConfig {
    "Required. Supported in v5.0+"
    device: String!
    "Required. Supported in v5.0+"
    gateway: String!
    "Required. Supported in v5.0+"
    netmask: String!
    "Required. Supported in v5.0+"
    network: String!
}

type Row {
    metadata: [Metadata!]!
    values: [CellData!]!
}

"Paginated list of Row objects."
type RowConnection {
    columns: [Column!]!
    "Total number of Row objects matching the request arguments."
    count: Int!
    "List of Row objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [RowEdge!]!
    "List of Row objects."
    nodes: [Row!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Row object. This wrapper is used for pagination."
type RowEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Row object wrapped by this edge."
    node: Row!
}

type RpoLagInfo {
    actualInSecs: Long!
    expectedInSecs: Long!
    level: String!
}

"Specific information for Amazon Web Services (AWS) target created on Rubrik."
type RubrikManagedAwsTarget implements Target {
    "Retrieval tier of the AWS target."
    awsRetrievalTier: AwsRetrievalTier!
    "Bucket name of the AWS target."
    bucket: String!
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean!
    "Cloud account details of the AWS target."
    cloudAccount: CloudAccount!
    "Template type of the storage settings."
    cloudNativeLocTemplateType: CloudNativeLocTemplateType!
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Compute settings of the AWS target."
    computeSettings: AwsComputeSettings
    "Connected/Disconnected status of the AWS target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Encryption type to be used for the AWS target."
    encryptionType: TargetEncryptionTypeEnum!
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Immutability settings of AWS target."
    immutabilitySettings: AwsImmutabilitySettingsType
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Flag to check if consolidation is enabled or not in this target."
    isConsolidationEnabled: Boolean!
    "KMS master key ID required for encryption for the AWS target."
    kmsMasterKeyId: String!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "Proxy settings of the AWS target."
    proxySettings: ProxySettings
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of the AWS target."
    region: AwsRegion!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Storage class of the AWS target."
    storageClass: AwsStorageClass!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of AWS target."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific information for Azure target created on Rubrik."
type RubrikManagedAzureTarget implements Target {
    "Access key of the Azure target."
    accessKey: String @deprecated(reason: "Access key response no longer supported.")
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean!
    "Cloud account details of the Azure target."
    cloudAccount: CloudAccount!
    "Cloud native information of the Azure target."
    cloudNativeCompanion: AzureCloudNativeTargetCompanion
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Compute settings of the Azure target."
    computeSettings: AzureComputeSettings
    "Connection status of the Azure target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Container name of the Azure target."
    containerName: String!
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Immutability settings of the Azure target."
    immutabilitySettings: AzureImmutabilitySettingsType
    "Instance type of the Azure location."
    instanceType: InstanceTypeEnum!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Flag to determine if tiering is supported in the Azure target."
    isAzureTieringSupported: Boolean
    "Flag to check if consolidation is enabled or not in this target."
    isConsolidationEnabled: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "Proxy settings of the AWS target."
    proxySettings: ProxySettings
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Retrieval tier of the Azure target."
    retrievalTier: AzureRetrievalTier!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Storage account name of the Azure target."
    storageAccountName: String!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of Azure location."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific information for Google Cloud Platform (GCP) target created on Rubrik."
type RubrikManagedGcpTarget implements Target {
    "Proxy setting of this GCP target."
    archivalProxySettings: ProxySettings
    "Bucket of the GCP target."
    bucket: String!
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean!
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Connection status of the GCP target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of GCP target."
    region: GcpRegion!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Storage class of the GCP target."
    storageClass: GcpStorageClass!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of GCP target."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Information about the Amazon Glacier target created on Rubrik."
type RubrikManagedGlacierTarget implements Target {
    "Cloud account details of the Amazon Glacier target."
    cloudAccount: CloudAccount!
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Connection status of the AWS target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of the Amazon Glacier target."
    region: AwsRegion!
    "Retrieval tier of the Amazon Glacier target."
    retrievalTier: AwsRetrievalTier!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Reason of sync failure of this target with Rubrik CDM. This is empty if syncStatus is not failed."
    syncFailureReason: String!
    "Sync status of Amazon Glacier target."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
    "Vault name of the Amazon Glacier target."
    vaultName: String!
}

"Specific information for Network File System (NFS) target created on Rubrik."
type RubrikManagedNfsTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Connection status of the Azure target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Destination folder in the NFS location."
    destinationFolder: String!
    "Directory in the NFS location where snapshots will be exported."
    exportDir: String!
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Lock period of the files in NFS in seconds."
    fileLockPeriodInSeconds: Int!
    "Host of the Nfs location."
    host: String!
    "The ID of this target."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Flag to check if consolidation is enabled or not in this target."
    isConsolidationEnabled: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "Field for specifying the authentication type of NFS."
    nfsAuthType: AuthTypeEnum!
    "Version of NFS target."
    nfsVersion: Int!
    "Other NFS options."
    otherNfsOptions: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of NFS location."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
}

"Specific information for Rubrik Cloud Vault (RCV) target created on Rubrik."
type RubrikManagedRcsTarget implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "IP allow list for location."
    clusterIpMapping: ClusterIpMapping
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Immutability lock duration of RCV target in days."
    immutabilityPeriodDays: Long!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "RCV Private endpoint connection details."
    privateEndpointConnection: PrivateEndpointConnection
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Region of RCV target."
    region: RcsRegionEnumType!
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Space usage threshold of RCV target above which alert will be raised."
    spaceUsageAlertThreshold: Int!
    "Status of the target."
    status: ArchivalLocationStatus!
    "Storage consumption value of RCV target."
    storageConsumptionValue: Float!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of RCV target."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
    "Tiers for RCV target."
    tier: RcsTierEnumType!
}

"Specific information for Amazon S3 compatible target created on Rubrik."
type RubrikManagedS3CompatibleTarget implements Target {
    "Access key for authentication to the S3Compatible target."
    accessKey: String!
    "Prefix of the S3Compatible target bucket."
    bucketPrefix: String!
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Connection status of the S3Compatible target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Host of the S3Compatible location."
    endpoint: String!
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "The ID of this target."
    id: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Flag to check if consolidation is enabled or not in this target."
    isConsolidationEnabled: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "Number of buckets in the S3Compatible target."
    numberOfBuckets: Int!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "S3-compatible target subtype."
    subType: S3CompatibleSubType!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of S3Compatible target."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
    "Flag to check if system proxy is being used in this target."
    useSystemProxy: Boolean!
}

"Specific information for Q-star target created on Rubrik."
type RubrikManagedTapeTargetType implements Target {
    "The cluster to which this target belongs."
    cluster: Cluster!
    "Name of the Rubrik cluster that archives to this archival location."
    clusterName: String
    "Connection status of the tape target."
    connectionStatus: ConnectionStatusType!
    "Number of bytes stored on the target."
    consumedBytes: Long
    "Destination folder name of target."
    destinationFolderName: String!
    "Number of archiving tasks failed on this target."
    failedTasks: Int
    "Name of the target host."
    hostName: String!
    "Port number of the target host."
    hostPort: Int!
    "The ID of this target."
    id: String!
    "Integral volume name of target."
    integralVolumeName: String!
    "Specifies whether this target is active. When false, the target is either paused or not enabled."
    isActive: Boolean!
    "Specifies whether this target is archived."
    isArchived: Boolean!
    "Connected or Disconnected status of the target."
    locationConnectionStatus: ConnectionStatusType!
    "The scope of location of this target. Possible values are Global or Local."
    locationScope: LocationScope!
    "The name of this target."
    name: String!
    "The retrieval method of the reader target."
    readerRetrievalMethod: ReaderRetrievalMethod
    "Number of archiving tasks running on this target."
    runningTasks: Int
    "Status of the target."
    status: ArchivalLocationStatus!
    "Reason why sync of this target with CDM failed."
    syncFailureReason: String!
    "Sync status of tape target."
    syncStatus: TargetSyncStatus!
    "Archival location to which the mapping target belongs."
    targetMapping: TargetMappingBasic
    "List of archival groups the archival target belongs to. In case target has no valid mappings we return null array."
    targetMappingBasic: [TargetMappingBasic!]
    "The type of this target."
    targetType: TargetType!
    "Username of the target."
    username: String!
}

"Status of the data syncing jobs from CDM to RSC."
type RubrikSyncStatus {
    "Last success time of the cluster syncing job."
    clusterSyncLastSuccessTime: DateTime
    "Last success time of the events syncing job."
    eventsSyncLastSuccessTime: DateTime
    "Last success time of the job-monitoring dashboard syncing job."
    jobMonitoringSyncLastSuccessTime: DateTime
    "Last success time of the object metadata syncing job."
    objectMetadataSyncLastSuccessTime: DateTime
    "Last success time of the reports syncing job."
    reportsSyncLastSuccessTime: DateTime
}

type RunCustomAnalyzerReply {
    matches: [CustomAnalyzerMatch!]!
}

"Metadata for all current running jobs."
type RunningJobsReply {
    "Array of running jobs."
    runningJobs: [ClusterMetadata!]!
}

type SDDLPermission {
    access: String!
    accessType: AceQualifier!
    cn: String!
    dn: String!
    flags: [AceFlags!]!
    resolutionType: ResolutionType!
}

"Summary for the no. of objects protected by sla."
type SLAIdToObjectCount {
    objectCount: Int!
    slaId: String!
}

"SAP HANA workload related app metadata for a snapshot."
type SapHanaAppMetadata {
    "The SAP HANA backup ID for data backup."
    backupId: Long
    "Backup prefix of data backup."
    backupPrefix: String
    "Base backup ID for the data backup. For incremental backup, this ID is the previous incremental backup ID or the full backup ID."
    baseBackupId: Long
    "SnapshotId of the base full backup."
    baseFullSnapshotId: String
    "Files for the data backup."
    files: [SapHanaDataBackupFile!]
    "Specifies whether the backup was triggered by Rubrik or by an external agent."
    isExternalBackup: Boolean
    "Specifies whether the backups is initiated by Rubrik and is on-demand."
    isRubrikTriggeredOnDemandBackup: Boolean
    "End time for the backup in Rubrik."
    rubrikSnapshotEndTime: DateTime
    "Start time for the backup in Rubrik."
    rubrikSnapshotStartTime: DateTime
    "End time for the backup in DB."
    sapHanaEndTime: DateTime
    "Start time for the backup in DB."
    sapHanaStartTime: DateTime
    "Snapshot type: Full/Incremental/Differential."
    snapshotType: String
}

"The SLA Domain configuration for SAP HANA database."
type SapHanaConfig {
    "Frequency value for differential backup of SAP HANA databases."
    differentialFrequency: Duration
    "Frequency value for incremental backup of SAP HANA databases."
    incrementalFrequency: Duration
    "Number of days for which the SAP HANA database logs will be retained."
    logRetention: Duration
}

"Data backup files for SAP HANA full, incremental, or differential backup."
type SapHanaDataBackupFile {
    "Size of the backed-up file in bytes."
    backupFileSizeInBytes: Long!
    "Path of the target location where the data or log backup was written."
    destinationPath: String!
    "Identifier of the data backup."
    externalBackupId: String!
    "Redo log position for the backup."
    redoLogPositionOpt: Long
    "Type of database service: indexserver, nameserver, or statisticsserver."
    serviceType: String!
    "The persistence volume ID."
    sourceId: Long!
    "Type of persistence to be backed-up: volume or topology."
    sourceType: String!
}

"Additional information about backup data path."
type SapHanaDataPathSpecObject {
    "Specifications for data path. This would be used when data path is not LOCAL."
    name: String!
}

"SAP HANA Database details object."
type SapHanaDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & SapHanaSystemDescendantType & SapHanaSystemPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID associated with SAP HANA database in CDM."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "UUID of cluster associated with SAP HANA database."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Specifications for data path. This is used when data path is not LOCAL."
    dataPathSpec: SapHanaDataPathSpecObject
    "Data path used for the workload. For SAP HANA workload this value is LOCAL."
    dataPathType: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Take a full backup instead of the scheduled incremental or differential backup. This is used when the previous backup is file-based."
    forceFull: Boolean!
    "The FID of the hierarchy object."
    id: UUID!
    "Information related to SAP HANA database like database size, log backup interval etc."
    info: SapHanaDatabaseInfoObject
    "Specifies whether the SAP HANA database is a relic."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "Log snapshots for given SAP HANA database."
    logSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter SAP HANA log snapshots."
        filter: SapHanaLogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort SAP HANA log snapshots."
        sortBy: SapHanaLogSnapshotSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SapHanaLogSnapshotConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "UUID of the primary cluster."
    primaryClusterUuid: UUID!
    "Date of protection of SAP HANA Database."
    protectionDate: DateTime
    "Recoverable ranges for given SAP HANA database."
    recoverableRangeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Field to filter SAP HANA recoverable ranges."
        filter: SapHanaRecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort SAP HANA recoverable ranges."
        sortBy: SapHanaRecoverableRangeSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SapHanaRecoverableRangeConnection!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "SAP HANA System for the given database."
    sapHanaSystem: SapHanaSystem!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "The CDM ID for the SAP HANA system associated with SAP HANA database."
    systemId: String!
}

"Paginated list of SapHanaDatabase objects."
type SapHanaDatabaseConnection {
    "Total number of SapHanaDatabase objects matching the request arguments."
    count: Int!
    "List of SapHanaDatabase objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SapHanaDatabaseEdge!]!
    "List of SapHanaDatabase objects."
    nodes: [SapHanaDatabase!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SapHanaDatabase object. This wrapper is used for pagination."
type SapHanaDatabaseEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SapHanaDatabase object wrapped by this edge."
    node: SapHanaDatabase!
}

"Additional information about backint and database configuration."
type SapHanaDatabaseInfoObject {
    "Approximate size of the database in Megabytes."
    approxDbSizeInMb: Long!
    "Path to the backint agent."
    backintPath: String!
    "Database type (SYSTEM / TENANT)."
    databaseType: String!
    "Time interval in seconds in which the log backup will be triggered."
    logBackupIntervalSecs: Int!
    "Number of channels that the backint agent is using."
    numChannels: Int!
    "Path to the parameter File for the database."
    paramFilePath: String!
    "CDM ID of the database from which system-copy has been configured."
    restoreConfiguredSrcDatabaseId: String!
    "Database status."
    status: String!
}

"Supported in v5.3+"
type SapHanaHost {
    """

    Required. Supported in v5.3+
    The IP address or fully qualified domain name of the SAP HANA host.
    """
    hostName: String!
    "Specifies the type of SAP HANA host."
    hostType: SapHanaHostHostType
    """

    Required. Supported in v5.3+
    The ID of the SAP HANA system host.
    """
    hostUuid: String!
    """

    Supported in v5.3+
    The local name of the SAP HANA host.
    """
    sapHanaHostName: String
    """

    Required. Supported in v5.3+
    The status of the SAP HANA system host.
    """
    status: String!
}

"Information about SAP HANA hosts of the system."
type SapHanaHostObject {
    "UUID of cluster associated with SAP HANA host."
    clusterUuid: UUID!
    "Details of the host for SAP HANA system."
    host: PhysicalHost!
    "Name of the host associated with SAP HANA system."
    hostName: String!
    "Type of SAP HANA host: PRIMARY_MASTER, SECONDARY_MASTER, UNKNOWN."
    hostType: String!
    "UUID for host associated with SAP HANA system."
    hostUuid: String!
    "Connectivity status of the host."
    status: String!
}

"Backup associated with the SAP HANA log backup."
type SapHanaLogBackup {
    "The SAP HANA backup ID for log backup."
    backupId: Long
    "Total bytes transferred for log backup."
    bytesTransferred: Long
    "True if the log backup has catalog backup."
    doesContainCatalogFile: Boolean
    "End time for log backup."
    endTime: DateTime
    "Files in the log backup."
    files: [SapHanaLogBackupFiles!]
    "Start time for log backup."
    startTime: DateTime
}

"Log backup file for SAP HANA log backup."
type SapHanaLogBackupFiles {
    "The SAP HANA backup ID for log backup."
    backupId: Long
    "Size of the backup in bytes."
    backupSizeInBytes: Long
    "Displays that the data or log backup was written to this location."
    destinationPath: String
    "Type of location: file or backint."
    destinationType: String
    "Identifier of the log backup."
    externalBackupId: String
    "Name of the host."
    hostName: String
    "New and old redo log positions."
    logPositionInterval: SapHanaLogPositionInterval
    "Type of database service: indexserver, nameserver, or statisticsserver."
    serviceTypeName: String
    "The persistence volume ID."
    sourceId: Long
    "Type of persistence to be backed-up: volume or topology."
    sourceTypeName: String
}

"For a log backup, represents redo log position interval."
type SapHanaLogPositionInterval {
    "Newest log position in the interval."
    newestLogPosition: Long
    "Oldest log position in the interval."
    oldestLogPosition: Long
}

"SAP HANA log snapshot object."
type SapHanaLogSnapshot {
    "App metadata of log snapshots in SAP HANA."
    appMetadata: SapHanaLogSnapshotAppMetadata
    "The CDM fid of the SAP HANA snapshot object."
    cdmId: String!
    "UUID of the CDM cluster associated with SAP HANA database."
    clusterUuid: UUID!
    "The creation date of the snapshot."
    date: DateTime
    "The fid of the SAP HANA snapshot object."
    fid: String!
    "The internal timestamp of the SAP HANA snapshot object."
    internalTimestamp: Long!
    "Specifies the archival status of the SAP HANA snapshot object."
    isArchived: Boolean!
    "Mapping of locations where snapshot is available."
    locationMap: String
    "The CDM ID of the SAP HANA database on which snapshot was taken."
    workloadId: String!
    "The object type on which snapshot was taken."
    workloadType: String!
}

"Metadata related to the SAP HANA log snapshot."
type SapHanaLogSnapshotAppMetadata {
    "Files in the log snapshot."
    backups: [SapHanaLogBackup!]
}

"Paginated list of SapHanaLogSnapshot objects."
type SapHanaLogSnapshotConnection {
    "Total number of SapHanaLogSnapshot objects matching the request arguments."
    count: Int!
    "List of SapHanaLogSnapshot objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SapHanaLogSnapshotEdge!]!
    "List of SapHanaLogSnapshot objects."
    nodes: [SapHanaLogSnapshot!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SapHanaLogSnapshot object. This wrapper is used for pagination."
type SapHanaLogSnapshotEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SapHanaLogSnapshot object wrapped by this edge."
    node: SapHanaLogSnapshot!
}

"SAP HANA recoverable range object."
type SapHanaRecoverableRange {
    "ID of the associated base full snapshot."
    baseFullSnapshotId: String
    "The CDM fid of the SAP HANA recoverable range object."
    cdmId: String!
    "UUID of the CDM cluster associated with SAP HANA workload."
    clusterUuid: UUID!
    "The CDM ID for the SAP HANA database associated with the SAP HANA recoverable range object."
    dbId: String!
    "End time of the SAP HANA recoverable range object."
    endTime: DateTime
    "The Rubrik fid of the SAP HANA recoverable range object."
    fid: String!
    "Specifies the archival status of SAP HANA recoverable range object."
    isArchived: Boolean!
    "Start time of the SAP HANA recoverable range object."
    startTime: DateTime
}

"Paginated list of SapHanaRecoverableRange objects."
type SapHanaRecoverableRangeConnection {
    "Total number of SapHanaRecoverableRange objects matching the request arguments."
    count: Int!
    "List of SapHanaRecoverableRange objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SapHanaRecoverableRangeEdge!]!
    "List of SapHanaRecoverableRange objects."
    nodes: [SapHanaRecoverableRange!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SapHanaRecoverableRange object. This wrapper is used for pagination."
type SapHanaRecoverableRangeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SapHanaRecoverableRange object wrapped by this edge."
    node: SapHanaRecoverableRange!
}

"Supported in v5.3+"
type SapHanaSslInfo {
    """

    Supported in v7.0+
    Library path for SAP HANA crypto library (libsapcrypto.so).
    """
    cryptoLibPath: String
    "SAP HANA SSL information encryption provider."
    encryptionProvider: SapHanaSslInfoEncryptionProvider!
    """

    Supported in v7.0+
    Override the hostname used to verify the server's identity.
    """
    hostNameInCertificate: String
    """

    Required. Supported in v5.3+
    The path where the encryption key for the SAP HANA system is stored.
    """
    keyStorePath: String!
    """

    Supported in v7.0+
    Specifies whether to encrypt the database connection using SSL/TLS.
    """
    shouldEncrypt: Boolean
    """

    Supported in v7.0+
    Specifies whether to validate the SSL certificate of the SAP HANA DB server.
    """
    shouldValidateCertificate: Boolean
    """

    Supported in v7.0+
    Path to a trust store file that contains the public certificates of the SAP HANA DB server.
    """
    trustStorePath: String
}

"Information required to connect to SAP HANA database over SSL."
type SapHanaSslInformation {
    "Library path for SAP HANA crypto library (libsapcrypto.so)."
    cryptoLibPath: String!
    "The encryption provider for the SAPA HANA system."
    encryptionProvider: SapHanaEncryptionProvider!
    "Override the hostname used to verify the server's identity."
    hostNameInCertificate: String!
    "The path where the encryption key for the SAP HANA system is stored."
    keyStorePath: String!
    "Specifies whether to encrypt the database connection using SSL/TLS."
    shouldEncrypt: Boolean!
    "Specifies whether to validate the SSL certificate of the SAP HANA DB server."
    shouldValidateCertificate: Boolean!
    "Path to a trust store file that contains the public certificates of the SAP HANA DB server."
    trustStorePath: String!
}

"SAP HANA system details object."
type SapHanaSystem implements CdmHierarchyObject & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID associated with SAP HANA system in CDM."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "UUID of cluster associated with SAP HANA system."
    clusterUuid: UUID!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): SapHanaSystemDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "List of hosts associated with SAP HANA system."
    hosts: [SapHanaHostObject!]!
    "The FID of the hierarchy object."
    id: UUID!
    "Instance number for SAP HANA system."
    instanceNumber: String!
    "Timestamp of the SAP HANA system refresh. Refresh process is responsible for configuring backint and discovering new databases."
    lastRefreshTime: DateTime
    "Timestamp of the status update for the SAP HANA system."
    lastStatusUpdateTime: DateTime
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): SapHanaSystemPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "UUID of the primary cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "SID for the SAP HANA system, for example, SP3, SC1."
    sid: String!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Information required to connect to SAP HANA database over SSL."
    sslInfo: SapHanaSslInformation
    "Current status for the SAP HANA system: OK, WARNING, ERROR, or UNKNOWN."
    status: SapHanaSystemStatus!
    "Additional information about the current status of the SAP HANA system."
    statusMessage: [String!]!
}

"Paginated list of SapHanaSystem objects."
type SapHanaSystemConnection {
    "Total number of SapHanaSystem objects matching the request arguments."
    count: Int!
    "List of SapHanaSystem objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SapHanaSystemEdge!]!
    "List of SapHanaSystem objects."
    nodes: [SapHanaSystem!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of SapHanaSystemDescendantType objects."
type SapHanaSystemDescendantTypeConnection {
    "Total number of SapHanaSystemDescendantType objects matching the request arguments."
    count: Int!
    "List of SapHanaSystemDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SapHanaSystemDescendantTypeEdge!]!
    "List of SapHanaSystemDescendantType objects."
    nodes: [SapHanaSystemDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SapHanaSystemDescendantType object. This wrapper is used for pagination."
type SapHanaSystemDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SapHanaSystemDescendantType object wrapped by this edge."
    node: SapHanaSystemDescendantType!
}

"Wrapper around the SapHanaSystem object. This wrapper is used for pagination."
type SapHanaSystemEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SapHanaSystem object wrapped by this edge."
    node: SapHanaSystem!
}

"Supported in v5.3+"
type SapHanaSystemInfo {
    """

    Required. Supported in v5.3+
    The version of the SAP HANA system.
    """
    hanaVersion: String!
    """

    Required. Supported in v5.3+
    Indicates whether the SAP HANA system has replication enabled.
    """
    isSystemReplicationEnabled: Boolean!
}

"Paginated list of SapHanaSystemPhysicalChildType objects."
type SapHanaSystemPhysicalChildTypeConnection {
    "Total number of SapHanaSystemPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of SapHanaSystemPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SapHanaSystemPhysicalChildTypeEdge!]!
    "List of SapHanaSystemPhysicalChildType objects."
    nodes: [SapHanaSystemPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SapHanaSystemPhysicalChildType object. This wrapper is used for pagination."
type SapHanaSystemPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SapHanaSystemPhysicalChildType object wrapped by this edge."
    node: SapHanaSystemPhysicalChildType!
}

"Supported in v5.3+"
type SapHanaSystemSummary {
    "The container type of SAP HANA system."
    containerType: SapHanaSystemSummaryContainerType
    "Required. Supported in v5.3+"
    hosts: [SapHanaHost!]!
    """

    Required. Supported in v5.3+
    The ID of the SAP HANA system.
    """
    id: String!
    """

    Required. Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String!
    """

    Supported in v7.0+
    Specifies whether a SAP HANA system is archived.
    """
    isArchived: Boolean
    """

    Supported in v5.3+
    The UTC timestamp for when the SAP HANA system was last refreshed.
    """
    lastRefreshTime: DateTime
    """

    Required. Supported in v5.3+
    The number of databases in the SAP HANA system.
    """
    numDbs: Int!
    """

    Required. Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String!
    "Details of the SLA Domain assigned to the SAP HANA system."
    slaAssignable: SlaAssignable
    "Supported in v5.3+"
    sslInfo: SapHanaSslInfo
    """

    Supported in v5.3+
    The status of the SAP HANA system.
    """
    status: SapHanaSystemSummaryStatus!
    """

    Supported in v5.3+
    The message associated with the current SAP HANA system status.
    """
    statusMessage: String
    "Supported in v5.3+"
    systemInfo: SapHanaSystemInfo
    """

    Required. Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String!
}

type ScaleRuntime {
    deadline: DateTime
    newCount: Int!
    oldCount: Int!
    taskchainUuid: String!
}

"Metadata for rendering a scheduled report."
type ScheduledReport {
    "List of attachment types for report delivery."
    attachmentTypes: [ReportAttachmentType!]!
    "Creation time of the schedule."
    createdAt: DateTime!
    "Rubrik user that created the report. If the user does not exist anymore, this stores a dummy inactive user."
    creator: User!
    "Time of the day for daily report delivery if the schedule has daily configuration."
    dailyTime: LocalTime
    "ID of the schedule of the custom report."
    id: Long!
    "Rubrik user that last edited this schedule. If the user does not exist anymore, this stores a dummy inactive user."
    lastEditor: User!
    "Last update time of the schedule."
    lastUpdatedAt: DateTime!
    "Date of the month for report delivery if the schedule has monthly configuration."
    monthlyDate: Int
    "Time of the day for monthly report delivery if the schedule has monthly configuration."
    monthlyTime: LocalTime
    "List of email addresses of (non-Rubrik user) recipients of the scheduled report."
    recipientEmails: [String!]!
    "The custom report ID corresponding to this scheduled report."
    reportId: Int!
    "List of Rubrik users that are the intended recipients of the scheduled report. Inactive users are not part of this list."
    rubrikRecipientUsers: [User!]!
    "Title of the report."
    title: String!
    "Weekdays for report delivery if weekly schedule is enabled."
    weeklyDays: [WeekDay!]
    "Time of the day for weekly report delivery if the schedule has weekly configuration."
    weeklyTime: LocalTime
}

"Paginated list of ScheduledReport objects."
type ScheduledReportConnection {
    "Total number of ScheduledReport objects matching the request arguments."
    count: Int!
    "List of ScheduledReport objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ScheduledReportEdge!]!
    "List of ScheduledReport objects."
    nodes: [ScheduledReport!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ScheduledReport object. This wrapper is used for pagination."
type ScheduledReportEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ScheduledReport object wrapped by this edge."
    node: ScheduledReport!
}

"Supported in v5.0+"
type SearchResponse {
    "Supported in v5.0+"
    fileVersions: [FileVersion!]!
    """

    Supported in v5.0+
    Just the filename without the whole path.
    """
    filename: String
    "Supported in v5.0+"
    path: String
}

"Supported in v5.0+"
type SearchResponseListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [SearchResponse!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

type SecurityGroup {
    id: String!
    name: String!
}

type SeedEnabledPoliciesReply {
    policies: [ClassificationPolicyDetail!]!
}

type SeedInitialPoliciesReply {
    policies: [ClassificationPolicyDetail!]!
}

"When an org member adds an object to Rubrik that matches the provided (`inventoryRoot`, `inventoryWorkloadType`) category, the org is granted all permission operations specified within the `operations` field on that new object."
type SelfServicePermission {
    "The inventory hierarchy root to which this set of permissions will apply."
    inventoryRoot: InventorySubHierarchyRootEnum!
    "The inventory workload type to which this set of permissions will apply."
    inventoryWorkloadType: WorkloadLevelHierarchy!
    "The operations granted to the org on newly added objects matching the provided `inventoryRoot` and `inventoryWorkloadType`."
    operations: [Operation!]!
}

"Service Account."
type ServiceAccount {
    "Client ID of the service account."
    clientId: String!
    "Description of the service account."
    description: String!
    "Timestamp of the last login by the service account."
    lastLogin: DateTime
    "Name of the service account."
    name: String!
    "Roles assigned to the service account."
    roles: [Role!]!
}

"Paginated list of ServiceAccount objects."
type ServiceAccountConnection {
    "Total number of ServiceAccount objects matching the request arguments."
    count: Int!
    "List of ServiceAccount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ServiceAccountEdge!]!
    "List of ServiceAccount objects."
    nodes: [ServiceAccount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the ServiceAccount object. This wrapper is used for pagination."
type ServiceAccountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ServiceAccount object wrapped by this edge."
    node: ServiceAccount!
}

"Response of the mutation that sets datastore freespace thresholds."
type SetDatastoreFreespaceThresholdsReply {
    "Datastore freespace threshold configuration."
    thresholds: [DatastoreFreespaceThresholdType!]!
}

"Response for the operation of setting the upgrade type for a cluster."
type SetUpgradeTypeReply {
    "Status of the request."
    code: String!
    "Exceptions encountered by the request."
    excepshuns: String!
    "Response message for the request."
    message: String!
}

"Enable or disable Ransomware Investigation alerts for a workload."
type SetWorkloadAlertSettingReply {
    "Specifies whether anomaly alerts are enabled or not."
    enabled: Boolean!
}

type SetupAzureO365ExocomputeResp {
    clusterId: String!
    taskchainId: String!
}

"Share fileset."
type ShareFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostShareDescendantType & HostSharePhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the CDM cluster."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Boolean variable denoting if hard link support is enabled."
    hardlinkSupportEnabled: Boolean!
    "Host of this share fileset."
    host: PhysicalHost
    "The FID of the hierarchy object."
    id: UUID!
    "Boolean variable denoting if hard link support is enabled."
    isPassThrough: Boolean!
    "Boolean variable denoting if hard link support is enabled."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Boolean variable denoting if hard link support is enabled."
    pathExceptions: [String!]!
    "Paths excluded from fileset."
    pathExcluded: [String!]!
    "Boolean variable denoting if hard link support is enabled."
    pathIncluded: [String!]!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "HostShare of this ShareFileset."
    share: HostShare
    "Share type of the fileset."
    shareType: ShareTypeEnum!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Boolean variable denoting if hard link support is enabled."
    symlinkResolutionEnabled: Boolean!
}

"Warning details for SLA having single frequency archival."
type SingleFrequencyArchivalWarningsDetails implements SlaArchivalWarningsDetails {
    "Configured value of archival frequency."
    frequenciesProvided: [RetentionUnit!]!
    "Expected value of archival frequency."
    frequencyCountExpected: Int!
    "Configured value of archival frequency."
    frequencyCountProvided: Int!
    "Severity of the warning."
    severity: WarningSeverityEnum!
}

"Information about the Rubrik cluster where the archival location is created."
type SlaArchivalCluster {
    "ID of the Rubrik cluster."
    id: UUID!
    "Name of the cluster."
    name: String!
}

"SLA Domain with archival validation warnings details."
type SlaArchivalValidationWithWarnings {
    "Warning code."
    code: SlaArchivalWarning!
    "Severity of the warning."
    severity: WarningSeverityEnum!
    "Warning details."
    warningDetails: SlaArchivalWarningsDetails
}

"Response for Assign SLA Domain Result."
type SlaAssignResult {
    "Returns true for successful assignment otherwise false."
    success: Boolean!
}

"Supported in v5.0+"
type SlaAssignable {
    """

    Required. Supported in v5.0+
    v5.0-v5.1: ID of the configured SLA domain
    v5.2+: The ID of the SLA Domain configured directly on the Rubrik object.
    """
    configuredSlaDomainId: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1: name of the configured SLA domain
    v5.2+: The name of the SLA Domain configured directly on the Rubrik object.
    """
    configuredSlaDomainName: String!
    configuredSlaDomainType: ConfiguredSlaType
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The ID of the Rubrik object.
    """
    id: String!
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the configured SLA domain is Retention Locked. When this value is 'true', the configured SLA domain is a Retention Lock SLA Domain.
    v5.2+: Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
    """
    isConfiguredSlaDomainRetentionLocked: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The name of the Rubrik object.
    """
    name: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The ID of the cluster that manages the Rubrik object.
    """
    primaryClusterId: String!
    """

    Supported in v5.2+
    The UTC time when the SLA Domain was last updated.
    """
    slaLastUpdateTime: DateTime
}

"Audit log of SLA changes based on user action."
type SlaAuditDetail {
    "Boolean indicating whether to apply changes to existing snapshots."
    applyToExistingSnapshots: Boolean!
    "Boolean indicating whether to apply changes to on-demand anddownloaded snapshots."
    applyToOndemandAndDownloadedSnapshots: Boolean
    "Cluster UUID."
    cluster: Cluster
    "Current SLA summary."
    currentSlaSummary: SlaDomain
    "SLA summary before edit/update."
    previousSlaSummary: SlaDomain
    "Timestamp at which user made this action on SLA."
    timestamp: DateTime
    "Describes the action(create/update/delete) made on SLA."
    userAction: String!
    "Name of the user who has made create/edit action on SLA."
    userName: String!
}

"Configuration of the SLA of a snapshot."
type SlaConfig {
    "ID of the SLA."
    id: String!
    "Name of the SLA."
    name: String!
}

"Paginated list of SlaDomain objects."
type SlaDomainConnection {
    "Total number of SlaDomain objects matching the request arguments."
    count: Int!
    "List of SlaDomain objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SlaDomainEdge!]!
    "List of SlaDomain objects."
    nodes: [SlaDomain!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SlaDomain object. This wrapper is used for pagination."
type SlaDomainEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SlaDomain object wrapped by this edge."
    node: SlaDomain!
}

"SLA Domain with warnings detail"
type SlaDomainWithWarnings {
    slaDomain: SlaDomain!
    warnings: [SlaWarning!]!
}

"Type that contains SLA name and ID."
type SlaInfo {
    "ID of SLA."
    id: String!
    "Name of SLA."
    name: String!
}

"SLA Domain log frequency configuration."
type SlaLogFrequencyConfigResult {
    "Retention of the log frequency configuration."
    retention: Duration
}

"Supported in v5.3+"
type SlaManagedVolumeDetail {
    """

    Required. Supported in v5.3+
    Backup script specifications.
    """
    backupScriptDetails: SlaManagedVolumeScriptSummary
    """

    Required. Supported in v5.3+
    v5.3-v6.0: List of paths the host uses to mount individual channels for managed volumes.
    v7.0: List of paths the host uses to mount individual channels for SLA Managed Volumes.
    v8.0+: List of paths the host uses to mount individual channels for Managed Volumes.
    """
    channelHostMountPaths: [String!]!
    """

    Required. Supported in v5.3+
    Configuration of the host on which the SLA Managed Volume channels are mounted.
    """
    hostDetails: SlaManagedVolumeHostSummary
    """

    Supported in v5.3+
    v5.3-v6.0: Specifications of the script run after unsuccessful backup.
    v7.0+: Specifications of the script run after an unsuccessful backup.
    """
    postBackupScriptOnBackupFailureDetails: SlaManagedVolumeScriptSummary
    """

    Supported in v5.3+
    v5.3-v6.0: Specifications of the script run after successful backup.
    v7.0+: Specifications of the script run after a successful backup.
    """
    postBackupScriptOnBackupSuccessDetails: SlaManagedVolumeScriptSummary
    """

    Supported in v5.3+
    Specifications of the script run prior to backup.
    """
    preBackupScriptDetails: SlaManagedVolumeScriptSummary
    """

    Supported in v5.3+
    Indicates if a failure of the script run prior to backup halts the backup process.
    """
    shouldCancelBackupOnPreBackupScriptFailure: Boolean
}

"Supported in v5.3+"
type SlaManagedVolumeHostSummary {
    """

    Required. Supported in v5.3+
    v5.3: ID of the host mounting the managed volume channels and running the scripts
    v6.0: ID of the host mounting the managed volume channels and running the scripts.
    v7.0: ID of the host mounting the SLA Managed Volume channels and running the scripts.
    v8.0+: ID of the host mounting the Managed Volume channels and running the scripts.
    """
    hostId: String!
    """

    Required. Supported in v5.3+
    The name of the host on which the SLA Managed Volume channels are mounted.
    """
    hostName: String!
    """

    Required. Supported in v5.3+
    The type of the operating system running on the host. Possible responses are `Linux`, `Windows` and `UnixLike`.
    """
    operatingSystemType: String!
    """

    Required. Supported in v5.3+
    v5.3-v6.0: The status of the Rubrik Backup Service (RBS) installed on the managed volume host. Possible responses are `Connected`, `Disconnected` and `REPLICATION_TARGET` when the host is being replicated from a separate Rubrik cluster.
    v7.0: Status of the Rubrik Backup Service (RBS) installed on the SLA Managed Volume host. Possible responses are `Connected`, `Disconnected`, and `REPLICATION_TARGET` when the host is being replicated from a separate Rubrik cluster.
    v8.0+: Status of the Rubrik Backup Service (RBS) installed on the Managed Volume host. Possible responses are `Connected`, `Disconnected`, and `REPLICATION_TARGET` when the host is being replicated from a separate Rubrik cluster.
    """
    rubrikBackupServiceStatus: String!
}

"Supported in v5.3+"
type SlaManagedVolumeScriptSummary {
    """

    Required. Supported in v5.3+
    Name of the user running the script on the host.
    """
    runAsUser: String!
    "Required. The full command, with arguments, to run the script."
    scriptCommand: String!
    """

    Supported in v5.3+
    (Optional) Timeout period, in seconds, for the script. Specifying 0, or not including a value, indicates there is no timeout period.
    """
    timeout: Long
}

"Replication cluster specific information."
type SlaReplicationCluster {
    "ID of the replication cluster."
    id: UUID!
    "Name of the replication cluster."
    name: String!
    "Version of the replication cluster."
    version: String
}

type SlaResult {
    success: Boolean!
}

"SLA Domain taskchain information for upgrade."
type SlaTaskchainInfo {
    "Error message when taskchain can not be scheduled."
    errMsg: String!
    "SLA Domain ID."
    slaId: String!
    "Taskchain ID."
    taskchainId: String!
}

"Information about the most recently attempted SLA Domain upgrade."
type SlaUpgrade {
    "Failure message."
    msg: String!
    "Status of the upgrade."
    status: SlaMigrationStatus!
    "Taskchain ID for upgrade."
    taskchainId: String!
}

"Information about eligibility of the SLA Domain for upgrade."
type SlaUpgradeEligibility {
    "Reason for the SLA Domain being ineligible for upgrade."
    ineligibilityReason: SlaMigrationIneligibilityReason!
    "Specifies whether the SLA Domain is eligible for upgrade."
    isEligible: Boolean!
}

"SLA Domain upgrade information."
type SlaUpgradeInfo {
    "Information about eligibility of the SLA Domain for upgrade."
    eligibility: SlaUpgradeEligibility
    "Information about the most recently attempted SLA Domain upgrade."
    latestUpgrade: SlaUpgrade
}

"Warning to assign SLA Domains to objects or snapshots, but not both together."
type SlaWarning {
    code: AssignSLAWarningsEnum!
    objectIds: [String!]!
    severity: WarningSeverityEnum!
    "List of snapshot IDs."
    snapshotIds: [String!]!
}

"Supported in v5.0+"
type SmbConfig {
    """

    Required. Supported in v5.0+
    A Boolean that specifies whether or not the cluster enforces SMB security. When this value is 'true,' SMB security is enforced. When this value is 'false,' SMB security is not enforced. The default value is 'false.'
    """
    enforceSmbSecurity: Boolean!
}

"SMB domain."
type SmbDomain {
    "Account name of SMB domain."
    accountName: String!
    "Cluster of the SMB domain."
    cluster: Cluster!
    "Domain ID of SMB domain."
    domainId: String!
    "ID of the SMB domain."
    id: UUID!
    "Specifies if the SMB domain is archived."
    isArchived: Boolean!
    "Name of the SMB domain."
    name: String!
    "Authentication status of the SMB domain."
    status: SmbAuthenticationStatus!
}

"Paginated list of SmbDomain objects."
type SmbDomainConnection {
    "Total number of SmbDomain objects matching the request arguments."
    count: Int!
    "List of SmbDomain objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SmbDomainEdge!]!
    "List of SmbDomain objects."
    nodes: [SmbDomain!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Supported in v5.0+"
type SmbDomainDetail {
    """

    Required. Supported in v5.0+
    A Boolean value that determines whether to run the SMB service when no shares are exposed. When this value is 'true,' the SMB service runs even when no shares are exposed. When this value is 'false,' the SMB service does not run when no shares are exposed.
    """
    isStickySmbService: Boolean!
    """

    Required. Supported in v5.0+
    Specifies name to identify Active Directory domain for SMB authentication.
    """
    name: String!
    """

    Supported in v5.0+
    Specifies the service principal name (SPN) used for joining the Active Directory domain.
    """
    serviceAccount: String
    """

    Supported in v5.0+
    State of the domain.
    """
    status: SmbDomainStatus!
}

"Wrapper around the SmbDomain object. This wrapper is used for pagination."
type SmbDomainEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SmbDomain object wrapped by this edge."
    node: SmbDomain!
}

"SnapMirror Cloud workload instance."
type SnapMirrorCloud implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & NasNamespaceDescendantType & NasSystemDescendantType & NasVolumeDescendantType & NasVolumeLogicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The CDM-assigned UUID of the SnapMirror Cloud workload."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Specifies whether this object is a relic."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The NAS volume to which this SnapMirror Cloud workload belongs."
    nasVolume: NasVolume
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "Label applied to the SnapMirror Cloud workload."
    snapMirrorLabel: String
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
}

"An object that can be backed-up by taking snapshots."
type Snappable {
    archivalComplianceStatus: ComplianceStatusEnum
    archivalSnapshotLag: Int
    "The number of snapshots that have been archived."
    archiveSnapshots: Int
    "The amount of storage used by archived snapshots."
    archiveStorage: Long
    awaitingFirstFull: Boolean
    "The Rubrik cluster to which the protected objects belong."
    cluster: Cluster
    "The current compliance status of the workload."
    complianceStatus: ComplianceStatusEnum
    "The change from transferred bytes to physical bytes."
    dataReduction: Float
    fid: UUID
    "The ID of the workload."
    id: String!
    "The timestamp of the last taken snapshot."
    lastSnapshot: DateTime
    "The logical size of the workload's last snapshot."
    lastSnapshotLogicalBytes: Long
    latestArchivalSnapshot: DateTime
    latestReplicationSnapshot: DateTime
    "The local effective storage size in bytes."
    localEffectiveStorage: Long
    "The local metered data size in bytes."
    localMeteredData: Long
    localOnDemandSnapshots: Int
    "The local protected data size in bytes."
    localProtectedData: Long
    localSlaSnapshots: Int
    "The number of snapshots locally present."
    localSnapshots: Int
    "The local storage size in bytes."
    localStorage: Long
    location: String!
    "Logical bytes used by snapshots of this workload."
    logicalBytes: Long
    logicalDataReduction: Float
    "The number of snapshots that were missed."
    missedSnapshots: Int
    "The name of the workload."
    name: String!
    "The type of the workload."
    objectType: ObjectTypeEnum!
    "The organization ID of this workload."
    orgId: UUID
    "The organization name related to the workload."
    orgName: String
    "Physical bytes used by snapshots of this workload."
    physicalBytes: Long
    "The date and time when the workload was last protected."
    protectedOn: DateTime
    "The protection status of the workload."
    protectionStatus: ProtectionStatusEnum!
    "The provisioned bytes size."
    provisionedBytes: Long
    "The time at which the workload data was retrieved from CDM."
    pullTime: DateTime!
    "The number of snapshots that have been replicated."
    replicaSnapshots: Int
    "The amount of storage used by replicated snapshots."
    replicaStorage: Long
    replicationComplianceStatus: ComplianceStatusEnum
    replicationSnapshotLag: Int
    "The SLA Domain of the protected objects."
    slaDomain: SlaDomain
    "The total number of snapshots present for the workload."
    totalSnapshots: Int
    "Bytes ingested over the network for this workload."
    transferredBytes: Long
    "Total bytes used."
    usedBytes: Long
}

"The aggregation data of some workload statistics."
type SnappableAggregation {
    "The amount of storage used by archived snapshots."
    archiveStorage: Long!
    "The logical size of the workload's last snapshot."
    lastSnapshotLogicalBytes: Long!
    "Logical bytes used by snapshots of this workload."
    logicalBytes: Long!
    "The number of snapshots that were missed."
    missedSnapshots: Int!
    "Physical bytes used by snapshots of this workload."
    physicalBytes: Long!
    "The amount of storage used by replicated snapshots."
    replicaStorage: Long!
    "The total number of snapshots present for the workload."
    totalSnapshots: Int!
}

type SnappableChart {
    focus: ReportFocusEnum!
    groupBy: [SnappableGroupByEnum!]
    name: String!
}

"Paginated list of Snappable objects."
type SnappableConnection {
    aggregation: SnappableAggregation!
    "Total number of Snappable objects matching the request arguments."
    count: Int!
    "List of Snappable objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableEdge!]!
    "List of Snappable objects."
    nodes: [Snappable!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Snappable object. This wrapper is used for pagination."
type SnappableEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Snappable object wrapped by this edge."
    node: Snappable!
}

"Snappable data with groupby info applied to it."
type SnappableGroupBy {
    "The data groupby info."
    groupByInfo: SnappableGroupByInfo!
    "Paginated snappable data."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort workloads by field."
        sortBy: SnappableSortByEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SnappableConnection!
    "Provides further groupings for the data."
    snappableGroupBy(
        "Group workloads by field."
        groupBy: SnappableGroupByEnum!
    ): [SnappableGroupBy!]!
}

"Snappable data with groupby info applied to it with data previous to specified time"
type SnappableGroupByAtSpecifiedTime {
    "The data groupby info."
    groupByInfo: SnappableGroupByInfo!
    "Paginated snappable data."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort workloads by field."
        sortBy: SnappableSortByEnum = Name,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): SnappableConnection!
    "Provides further groupings for the data."
    snappableGroupBy(
        "Group workloads by field."
        groupBy: SnappableGroupByEnum!
    ): [SnappableGroupBy!]!
}

"Paginated list of SnappableGroupByAtSpecifiedTime objects."
type SnappableGroupByAtSpecifiedTimeConnection {
    "Total number of SnappableGroupByAtSpecifiedTime objects matching the request arguments."
    count: Int!
    "List of SnappableGroupByAtSpecifiedTime objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableGroupByAtSpecifiedTimeEdge!]!
    "List of SnappableGroupByAtSpecifiedTime objects."
    nodes: [SnappableGroupByAtSpecifiedTime!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnappableGroupByAtSpecifiedTime object. This wrapper is used for pagination."
type SnappableGroupByAtSpecifiedTimeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnappableGroupByAtSpecifiedTime object wrapped by this edge."
    node: SnappableGroupByAtSpecifiedTime!
}

"Paginated list of SnappableGroupBy objects."
type SnappableGroupByConnection {
    "Total number of SnappableGroupBy objects matching the request arguments."
    count: Int!
    "List of SnappableGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableGroupByEdge!]!
    "List of SnappableGroupBy objects."
    nodes: [SnappableGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnappableGroupBy object. This wrapper is used for pagination."
type SnappableGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnappableGroupBy object wrapped by this edge."
    node: SnappableGroupBy!
}

type SnappableInstanceType {
    awsInstanceType: AwsInstanceType!
}

"Paginated list of SnappableInstanceType objects."
type SnappableInstanceTypeConnection {
    "Total number of SnappableInstanceType objects matching the request arguments."
    count: Int!
    "List of SnappableInstanceType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableInstanceTypeEdge!]!
    "List of SnappableInstanceType objects."
    nodes: [SnappableInstanceType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
    suggestInstanceType: SnappableInstanceType
}

"Wrapper around the SnappableInstanceType object. This wrapper is used for pagination."
type SnappableInstanceTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnappableInstanceType object wrapped by this edge."
    node: SnappableInstanceType!
}

"Snappable recovery info."
type SnappableRecoveryInfo {
    "Whether snapshot metadata refresh is in progress."
    isRefreshInProgressOpt: Boolean
    "Recovery infomation update time."
    lastUpdatedTimeOpt: DateTime
    "Reader location ID."
    locationId: String!
    "Newly assigned data source ID."
    newSnappableId: String!
    "Original data source ID."
    oldSnappableId: String!
}

type SnappableSecurityGroup {
    description: String!
    id: String!
    name: String!
    ownerId: String!
    securityGroupId: String!
    "vpc of the security group"
    vpc: Vpc
}

"Paginated list of SnappableSecurityGroup objects."
type SnappableSecurityGroupConnection {
    "Total number of SnappableSecurityGroup objects matching the request arguments."
    count: Int!
    "List of SnappableSecurityGroup objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableSecurityGroupEdge!]!
    "List of SnappableSecurityGroup objects."
    nodes: [SnappableSecurityGroup!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnappableSecurityGroup object. This wrapper is used for pagination."
type SnappableSecurityGroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnappableSecurityGroup object wrapped by this edge."
    node: SnappableSecurityGroup!
}

type SnappableStorageVolumeType {
    awsStorageVolumeType: AwsStorageVolumeType!
}

"Paginated list of SnappableStorageVolumeType objects."
type SnappableStorageVolumeTypeConnection {
    "Total number of SnappableStorageVolumeType objects matching the request arguments."
    count: Int!
    "List of SnappableStorageVolumeType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableStorageVolumeTypeEdge!]!
    "List of SnappableStorageVolumeType objects."
    nodes: [SnappableStorageVolumeType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnappableStorageVolumeType object. This wrapper is used for pagination."
type SnappableStorageVolumeTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnappableStorageVolumeType object wrapped by this edge."
    node: SnappableStorageVolumeType!
}

type SnappableSubnet {
    availabilityZone: String!
    cidrBlock: AddressBlockV4
    id: String!
    name: String!
    subnetId: String!
    "vpc of the subnet"
    vpc: Vpc
}

"Paginated list of SnappableSubnet objects."
type SnappableSubnetConnection {
    "Total number of SnappableSubnet objects matching the request arguments."
    count: Int!
    "List of SnappableSubnet objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnappableSubnetEdge!]!
    "List of SnappableSubnet objects."
    nodes: [SnappableSubnet!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnappableSubnet object. This wrapper is used for pagination."
type SnappableSubnetEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnappableSubnet object wrapped by this edge."
    node: SnappableSubnet!
}

type SnappableTable {
    focus: ReportFocusEnum!
    groupBy: [SnappableGroupByEnum!]
    name: String!
    selectedColumns: [SnappableTableColumnEnum!]!
    sortBy: SnappableSortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

type SnappableTypeSummary {
    count: Int!
    snappableType: HierarchyObjectTypeEnum!
}

"Delta information for a file or directory between two snapshots."
type SnapshotDelta {
    "Number of files of this delta type."
    deltaAmount: Long!
    "Delta type of the file or directory between two snapshots."
    deltaType: DeltaType!
}

"A generic snapshot type."
type SnapshotDistribution {
    "The ID of the snappable."
    id: UUID!
    "Number of on demand snapshots."
    onDemandCount: Long!
    "Number of retrieved snapshots."
    retrievedCount: Long!
    "Number of scheduled snapshots."
    scheduledCount: Long!
    "Total number of snapshots."
    totalCount: Long!
}

"File or folder data returned by browse or search delta response."
type SnapshotFile {
    absolutePath: String!
    displayPath: String!
    fileMode: FileModeEnum!
    filename: String!
    lastModified: DateTime!
    path: String!
    "Quarantine information corresponding to the path."
    quarantineInfo: QuarantineInfo
    size: Long!
    statusMessage: String!
    "Browse or search delta response returns workload fields."
    workloadFields: WorkloadFields!
}

"Paginated list of SnapshotFile objects."
type SnapshotFileConnection {
    "Total number of SnapshotFile objects matching the request arguments."
    count: Int!
    "List of SnapshotFile objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnapshotFileEdge!]!
    "List of SnapshotFile objects."
    nodes: [SnapshotFile!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Snapshot file or directory and it's delta information."
type SnapshotFileDelta {
    "This field is non-empty for directories only. It contains the consolidated delta information of the subdirectories."
    childrenDeltas: [SnapshotDelta!]!
    "Information about the file or directory such as the path and last modified."
    file: SnapshotFile!
    "Quarantine information for a path in the previous snapshot."
    previousSnapshotQuarantineInfo: QuarantineInfo
    "This field is empty for directories. It contains the delta information of the file."
    selfDeltas: [SnapshotDelta!]!
}

"Paginated list of SnapshotFileDelta objects."
type SnapshotFileDeltaConnection {
    "Total number of SnapshotFileDelta objects matching the request arguments."
    count: Int!
    "The current snapshot."
    currentSnapshot: CdmSnapshot!
    "List of SnapshotFileDelta objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnapshotFileDeltaEdge!]!
    "List of SnapshotFileDelta objects."
    nodes: [SnapshotFileDelta!]!
    "General information about this page of results."
    pageInfo: PageInfo!
    "The snapshot using which deltas are computed."
    previousSnapshot: CdmSnapshot
}

"Wrapper around the SnapshotFileDelta object. This wrapper is used for pagination."
type SnapshotFileDeltaEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnapshotFileDelta object wrapped by this edge."
    node: SnapshotFileDelta!
}

"Wrapper around the SnapshotFile object. This wrapper is used for pagination."
type SnapshotFileEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnapshotFile object wrapped by this edge."
    node: SnapshotFile!
}

"Supported in v5.2+"
type SnapshotLocationRetentionInfo {
    """

    Supported in v5.2+
    Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
    """
    expirationTime: DateTime
    """

    Required. Supported in v5.2+
    ID of the location.
    """
    id: String!
    """

    Supported in v5.2+
    A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
    """
    isExpirationDateCalculated: Boolean
    """

    Supported in v5.2+
    Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
    """
    isExpirationInformationUnavailable: Boolean
    """

    Supported in v7.0+
    Indicates whether the snapshots is retained beyond its expiration date for security reasons.
    """
    isRetainedForSecurity: Boolean
    """

    Required. Supported in v5.2+
    Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
    """
    isSnapshotPresent: Boolean!
    """

    Required. Supported in v5.2+
    Name of the location.
    """
    name: String!
    """

    Supported in v5.2+
    The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
    """
    snapshotFrequency: String
}

"Snapshot malware information."
type SnapshotMalwareInfo {
    "Anomalies confidence."
    anomaliesConfidence: Int!
    "Date."
    date: String!
    "Encryption confidence."
    encryptionConfidence: Int!
    "Error information."
    errInfo: String!
    "Specifies whether a snapshot is an anomaly."
    isAnomaly: Boolean!
    "Specifies whether a snapshot is indicated for malware in a malware hunt."
    isMalwareHunt: Boolean!
    "Specifies whether a snapshot is quarantined."
    isQuarantined: Boolean!
    "Malware hunt information."
    malwareHuntInfo: String!
    "Snapshot ID."
    snapshotId: String!
    "Suspicious file count."
    suspiciousFileCount: Int!
    workloadFid: String!
}

type SnapshotResult {
    snapshotFid: String!
    snapshotTime: Long!
}

"Paginated list of SnapshotResult objects."
type SnapshotResultConnection {
    "Total number of SnapshotResult objects matching the request arguments."
    count: Int!
    "List of SnapshotResult objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnapshotResultEdge!]!
    "List of SnapshotResult objects."
    nodes: [SnapshotResult!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnapshotResult object. This wrapper is used for pagination."
type SnapshotResultEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnapshotResult object wrapped by this edge."
    node: SnapshotResult!
}

"Supported in v5.2+"
type SnapshotRetentionInfo {
    """

    Required. Supported in v5.2+
    List of snapshot retention information on the archival locations.
    """
    archivalInfos: [SnapshotLocationRetentionInfo!]!
    """

    Required. Supported in v5.2+
    Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations.
    """
    cloudNativeLocationInfo: [SnapshotLocationRetentionInfo!]!
    """

    Supported in v5.2+
    Snapshot retention information on the local cluster.
    """
    localInfo: SnapshotLocationRetentionInfo
    """

    Required. Supported in v5.2+
    List of snapshot retention information on the replicated locations.
    """
    replicationInfos: [SnapshotLocationRetentionInfo!]!
}

"Snapshot schedule for different frequencies."
type SnapshotSchedule {
    "Daily schedule of the SLA Domain."
    daily: DailySnapshotSchedule
    "Hourly schedule of the SLA Domain."
    hourly: HourlySnapshotSchedule
    "Minute schedule of the SLA Domain."
    minute: MinuteSnapshotSchedule
    "Monthly schedule of the SLA Domain."
    monthly: MonthlySnapshotSchedule
    "Quarterly schedule of the SLA Domain."
    quarterly: QuarterlySnapshotSchedule
    "Weekly schedule of the SLA Domain."
    weekly: WeeklySnapshotSchedule
    "Yearly schedule of the SLA Domain."
    yearly: YearlySnapshotSchedule
}

"DataType representing the sub objects captured in a snapshot."
type SnapshotSubObj {
    "A volume captured in a volume group snapshot."
    volumeGroupSubObj: VolumeGroupSubObject
}

"The sub objects captured in a snapshot."
type SnapshotSubObject {
    "The sub object captured in a snapshot."
    subObj: SnapshotSubObj!
}

"Supported in v5.2+"
type SnapshotSummary {
    """

    Required. Supported in v5.2+
    Time at which the snapshot was taken.
    """
    date: DateTime
    """

    Required. Supported in v5.2+
    ID of the snapshot.
    """
    id: String!
    """

    Required. Supported in v5.2+
    A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot.
    """
    isCustomRetentionApplied: Boolean!
    """

    Required. Supported in v5.2+
    Indicates whether the snapshot is protected by a Retention Locked SLA Domain.
    """
    isRetentionLockApplied: Boolean!
    """

    Required. Supported in v5.2+
    Retention information for snapshots at the local, archival, and replication locations.
    """
    snapshotRetentionInfo: SnapshotRetentionInfo
    snapshotType: UnmanagedSnapshotType!
}

"Paginated list of SnapshotSummary objects."
type SnapshotSummaryConnection {
    "Total number of SnapshotSummary objects matching the request arguments."
    count: Int!
    "List of SnapshotSummary objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SnapshotSummaryEdge!]!
    "List of SnapshotSummary objects."
    nodes: [SnapshotSummary!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SnapshotSummary object. This wrapper is used for pagination."
type SnapshotSummaryEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SnapshotSummary object wrapped by this edge."
    node: SnapshotSummary!
}

"Snapshots malware information."
type SnapshotsMalwareInfoReply {
    "Snappable snapshots information."
    workloadSnapshotsInfo: [SnapshotMalwareInfo!]!
}

"""

Supported in v5.0+
v5.0-v5.1: SNMP service configuration object.
v5.2+: SNMP service configuration object summary.
"""
type SnmpConfiguration {
    """

    Supported in v5.0+
    v5.0-v5.1: communicatyString is a user specified string for authentication to access SNMP statistics.

    v5.2+: communityString is a user specified string for authentication to access SNMP statistics. Provides access to MIBs using SNMP v2c.
    """
    communityString: String
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether the SNMP service is enabled. Set the value to true to enable the SNMP service and false to disable the SNMP service.
    """
    isEnabled: Boolean!
    """

    Required. Supported in v5.0+
    The SNMP agent port on the Rubrik cluster node.
    """
    snmpAgentPort: Int!
    """

    Supported in v5.0+
    Array of SNMP trap receivers for the SNMP service.
    """
    trapReceiverConfigs: [SnmpTrapReceiverConfig!]!
    """

    Supported in v5.2+
    Array of usernames for the SNMP service. Provides access to MIBs using SNMP v3.
    """
    users: [String!]!
}

"""

Supported in v5.0+
SNMP trap receiver configuration object.
"""
type SnmpTrapReceiverConfig {
    """

    Required. Supported in v5.0+
    IPv4 address or FQDN of the SNMP trap receiver host.
    """
    address: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1: The snmp trap port on the SNMP trap receiver host.
    v5.2+: The SNMP trap port on the SNMP trap receiver host.
    """
    port: Int!
    securityLevel: SnmpSecurityLevel
    """

    Supported in v5.2+
    Specifies the user for the SNMP trap receiver host. A valid user is required in order to use SNMP v3. The specified user must be a valid user in the users field of the SNMP configuration. When no user is specified, SNMP v2c traps are sent to the SNMP trap receiver host. If a trap receiver user is specified, the trap receiver security level must also be specified.
    """
    user: String
}

type SonarContentReport {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerId: String!
    analyzerResults: [AnalyzerResult!]!
    cluster: String!
    fileName: String!
    filesWithHits: Int!
    hits: Hits
    id: String!
    location: String!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    objectName: String!
    objectType: HierarchyObjectTypeEnum!
    path: String!
    policyId: String!
    size: Long!
    slaDomainId: String!
    snappableFid: String!
    snapshotTimestamp: Long!
}

type SonarContentReportChart {
    focus: ReportFocusEnum!
    groupBy: [DiscoveryContentReportGroupBy!]
    name: String!
}

"Paginated list of SonarContentReport objects."
type SonarContentReportConnection {
    "Total number of SonarContentReport objects matching the request arguments."
    count: Int!
    "List of SonarContentReport objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SonarContentReportEdge!]!
    "List of SonarContentReport objects."
    nodes: [SonarContentReport!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SonarContentReport object. This wrapper is used for pagination."
type SonarContentReportEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SonarContentReport object wrapped by this edge."
    node: SonarContentReport!
}

type SonarContentReportTable {
    focus: ReportFocusEnum!
    groupBy: [DiscoveryContentReportGroupBy!]
    name: String!
    selectedColumns: [SonarContentReportTableColumnEnum!]!
    sortBy: DiscoveryContentReportSortBy
    "Sorts by order."
    sortOrder: SortOrder
}

type SonarReport {
    count: Long!
    groupByValue: String!
    timeSeriesResults: [TimeSeriesResult!]!
}

type SonarReportChart {
    focus: ReportFocusEnum!
    groupBy: [DiscoveryReportGroupBy!]
    name: String!
}

"Paginated list of SonarReport objects."
type SonarReportConnection {
    "Total number of SonarReport objects matching the request arguments."
    count: Int!
    "List of SonarReport objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SonarReportEdge!]!
    "List of SonarReport objects."
    nodes: [SonarReport!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SonarReport object. This wrapper is used for pagination."
type SonarReportEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SonarReport object wrapped by this edge."
    node: SonarReport!
}

type SonarReportRow {
    numHighRiskLocations: Int!
    numObjects: Int!
    numViolatedFiles: Int!
    policyId: String!
    policyName: String!
    policyStatus: DiscoveryReportTablePolicyStatus!
    violations: Int!
}

"Paginated list of SonarReportRow objects."
type SonarReportRowConnection {
    "Total number of SonarReportRow objects matching the request arguments."
    count: Int!
    "List of SonarReportRow objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SonarReportRowEdge!]!
    "List of SonarReportRow objects."
    nodes: [SonarReportRow!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SonarReportRow object. This wrapper is used for pagination."
type SonarReportRowEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SonarReportRow object wrapped by this edge."
    node: SonarReportRow!
}

type SonarReportTable {
    focus: ReportFocusEnum!
    groupBy: [DiscoveryReportGroupBy!]
    name: String!
    selectedColumns: [SonarReportTableColumnEnum!]!
    sortBy: DiscoveryReportSortBy
    "Sorts by order."
    sortOrder: SortOrder
}

type Source {
    stringValue: String!
}

type SourceBlueprintInfo {
    blueprintId: String!
    sourceChildInfos: [SourceChildInfo!]!
}

type SourceChildInfo {
    childInfo: ChildInfo!
    failoverChildId: String!
}

"Map of the child object recovery specifications on the source."
type SourceChildRecoverySpecMap {
    "The recovery specifications."
    recoverySpec: RecoverySpec!
    "The workload ID."
    workloadId: UUID!
}

"Configuration Params for the mosaic source object."
type SourceConfigParams {
    "List of cassandra yaml file paths."
    cassandraYaml: [String!]!
    "List of DSE YAML file paths."
    dseYaml: [String!]!
    "Path to https certificate."
    httpsCertificate: String!
    "JMX Username."
    jmxUser: String!
    "Database username."
    sourceDbUser: String!
    "Port number used for https connection."
    sourceHttpsPort: Int!
    "Configured port on source."
    sourcePort: Int!
    "Configured RPC port on source."
    sourceRpcPort: Int!
    "Source SSL Configuration."
    sslOptions: CassandraSslOptions
}

"Source recovery specifications."
type SourceRecoverySpecsReply {
    childRecoverySpecs: [SourceChildRecoverySpecMap!]!
}

"Specific replication specification."
type SpecificReplicationSpec {
    "Bidirectional replication specifications."
    bidirectionalSpec: BidirectionalReplicationSpec
    "Cloud location specification."
    cloudLocationSpec: ReplicationToCloudLocationSpec
    "Cloud region specification."
    cloudRegionSpec: ReplicationToCloudRegionSpec
    "Unidirectional replication specifications."
    unidirectionalSpec: UnidirectionalReplicationSpec
}

"Details of an SSO Group."
type SsoGroup {
    "ID of the SSO Group."
    id: String!
    "Specifies whether the users in the group are org admins."
    isOrgAdmin: Boolean!
}

"Response of the operation to initiate Azure Cloud Account OAuth."
type StartAzureCloudAccountOauthReply {
    "Client ID of the application configured for authentication of the Azure tenant."
    clientId: String!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Bulk recovery job response."
type StartBulkRecoveryReply {
    "Bulk recovery instance ID."
    bulkRecoveryInstanceId: UUID
    "Error."
    error: String
    "Bulk recovery job ID."
    jobId: Long
    "Bulk recovery taskchain ID."
    taskchainId: UUID
}

type StartCrawlReply {
    crawlId: String!
}

"A Recovery Plan failover job response."
type StartRecoveryPlanReply {
    "Recovery Plan failover job status."
    failoverJobsStatus: [FailoverJobStatusReply!]!
}

"Response of the threat hunt request."
type StartThreatHuntReply {
    """

    Forever id of the hunt that can be used
    to query threat hunt APIs.
    """
    huntId: String!
    "Status of the threat hunt."
    huntStatus: AsyncRequestStatus
    "Status of the metadata load request."
    isSyncSuccessful: Boolean!
}

"Start time attributes."
type StartTimeAttributes {
    "Day of the week."
    dayOfWeek: DayOfWeekOpt
    "Hour of the day."
    hour: Int!
    "Minute of the day."
    minute: Int!
}

"""

Supported in v5.3+
Information about static IP configuration.
"""
type StaticIpInfo {
    """

    Supported in v5.3+
    DNS Servers for the specified IP addresses.
    """
    dnsServers: [String!]!
    """

    Supported in v5.3+
    Gateway for the specified IP addresses.
    """
    gateway: String
    """

    Required. Supported in v5.3+
    IP addresses and ranges, separated by commas.
    """
    ipAddresses: [String!]!
    """

    Required. Supported in v5.3+
    Subnet mask for the specified IP addresses.
    """
    subnetMask: String!
}

type Status {
    stringValue: String!
}

"Generic status response."
type StatusResponse {
    "Return code."
    code: String!
    "Exception trace."
    excepshuns: String!
    "Status message."
    message: String!
}

"Stop job instance output."
type StopJobInstanceReply {
    "True if stop process is initiated for job instance."
    success: Boolean!
}

type StorageAccount {
    accessTier: StorageAccountTier!
    id: String!
    kind: String!
    name: String!
    "Network rules for Azure storage account."
    networkRuleSet: NetworkRuleSet
    regionName: String!
    resourceGroup: ResourceGroup
    sku: StorageAccountSku!
}

"Paginated list of StorageAccount objects."
type StorageAccountConnection {
    "Total number of StorageAccount objects matching the request arguments."
    count: Int!
    "List of StorageAccount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [StorageAccountEdge!]!
    "List of StorageAccount objects."
    nodes: [StorageAccount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the StorageAccount object. This wrapper is used for pagination."
type StorageAccountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual StorageAccount object wrapped by this edge."
    node: StorageAccount!
}

"Supported in v5.0+"
type StorageArrayDetail {
    arrayType: StorageArrayType!
    """

    Supported in v5.0+
    A digital certificate, or concatenated chain of digital certificates, that permits verification of the public key certificate of the storage array. Each certificate must be an X.509 certificate in Base64 encoded DER format and must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Required. Supported in v5.0+
    Connection status of a Storage Array.
    """
    connectionStatus: RefreshableObjectConnectionStatus
    """

    Required. Supported in v5.0+
    Resolvable hostname or IPv4 address of the storage array.
    """
    hostname: String!
    "Required. Supported in v5.0+"
    id: String!
    "Required. Supported in v5.0+"
    username: String!
}

"Result of an operation on an existing storage array in a Rubrik cluster."
type StorageArrayOperationOutputType {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Optional error message in case of failure."
    errorMessage: String
    "ID of the storage array."
    id: String!
}

"""

Supported in m3.2.0-m4.2.0
Metadata for mosaic store.
"""
type StoreMetadata {
    """

    Supported in m3.2.0-m4.2.0
    S3 bucket name.
    """
    s3Bucket: String
    """

    Supported in m3.2.0-m4.2.0
    S3 account region.
    """
    s3Region: String
}

"Information about list of strains identified."
type StrainInfo {
    "A sample of filepaths that are affected by the strain."
    sampleAffectedFiles: [String!]!
    "Additional information on the affected files."
    sampleAffectedFilesInfo: [SuspiciousFileInfo!]!
    "Additional information on the ransomware note files."
    sampleRansomwareNoteFilesInfo: [SuspiciousFileInfo!]!
    "A sample of filepaths that are ransomware notes."
    sampleRansomwareNotes: [String!]!
    "Name of the strain detected."
    strainId: String!
    "Total number of files affected by the above strain."
    totalAffectedFiles: Long!
    """

    Total number of ransomware notes corresponding to the
    above strain.
    """
    totalRansomwareNotes: Long!
}

type Subnet {
    id: String!
    name: String!
    securityGroup: SecurityGroup
}

"Paginated list of Subnet objects."
type SubnetConnection {
    "Total number of Subnet objects matching the request arguments."
    count: Int!
    "List of Subnet objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SubnetEdge!]!
    "List of Subnet objects."
    nodes: [Subnet!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Subnet object. This wrapper is used for pagination."
type SubnetEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Subnet object wrapped by this edge."
    node: Subnet!
}

"Represents a subnet group on AWS."
type SubnetGroup {
    "Amazon Resource Name (ARN) of the subnet group."
    arn: String!
    "Name of the subnet group."
    name: String!
    "Subnets associated with the subnet group."
    subnets: [AwsNativeSubnet!]!
    "Virtual Private Cloud (VPC) corresponding to the subnet group."
    vpcId: String!
}

"The event and audit severities that the webhook is subscribed to."
type SubscriptionSeverity {
    "The audit types that the webhook is subscribed to."
    auditSeverities: [UserAuditSeverityEnum!]!
    "The event severities that the webhook is subscribed to."
    eventSeverities: [ActivitySeverityEnum!]!
}

"The event and audit types that the webhook is subscribed to."
type SubscriptionType {
    "The audit types that the webhook is subscribed to."
    auditTypes: [UserAuditTypeEnum!]!
    "The event types that the webhook is subscribed to."
    eventTypes: [ActivityTypeEnum!]!
    "Specifies whether the webhook is subscribed to all audits."
    isSubscribedToAllAudits: Boolean!
    "Specifies whether the webhook is subscribed to all events."
    isSubscribedToAllEvents: Boolean!
}

"Contains the success details about Rubrik Backup Service connectivity jobs."
type Success {
    "Taskchain ID of the taskchain."
    taskchainId: String!
    "Workload ID of the taskchain."
    workloadId: UUID!
}

"A single uploaded file status response."
type SupportCaseAttachmentResponse {
    "Upload errors of the file."
    errors: [String!]!
    "ID."
    id: String!
    "The status of an uploaded file."
    success: Boolean!
}

"Field definition used to create a support case."
type SupportCaseFieldDefinition {
    "Type of the field."
    type: SupportCaseFieldType!
    "Available values for the field."
    values: [SupportCaseFieldValue!]!
}

"A single field value data for the definition."
type SupportCaseFieldValue {
    "Label to explain value."
    label: String!
    "Actual available value."
    value: String!
}

"Support portal login response."
type SupportPortalLoginReply {
    "Support portal login status object."
    status: StatusResponse
}

"Support portal logout response."
type SupportPortalLogoutReply {
    "Support portal logout status object."
    status: StatusResponse
}

"Support portal user session status."
type SupportPortalStatusReply {
    "Is user logged in flag."
    isLoggedIn: Boolean!
    "Support portal user session status."
    status: StatusResponse
    "Support portal username."
    username: String!
}

"Supported in v5.0+"
type SupportTunnelInfo {
    """

    Supported in v5.0+
    Time when the tunnel was enabled or omitted when the tunnel is not enabled.
    """
    enabledTime: DateTime
    """

    Supported in v5.3+
    Error message when unable to open support tunnel.
    """
    errorMessage: String
    """

    Supported in v5.0+
    Inactivity timeout in seconds or omitted if the tunnel is not enabled.
    """
    inactivityTimeoutInSeconds: Long
    """

    Required. Supported in v5.0+
    True if the support tunnel is enabled on this node. False otherwise.
    """
    isTunnelEnabled: Boolean!
    """

    Supported in v5.0+
    Time when the tunnel was last used or omitted if the tunnel is not enabled.
    """
    lastActivityTime: DateTime
    """

    Supported in v5.0+
    The port used to tunnel traffic. Port number will be deprecated in the future when we transition to new cloud infrastructure that does not rely on unique port numbers.
    """
    port: Long
}

"Support user access object details."
type SupportUserAccess {
    "User providing support user access."
    accessProviderUser: User
    "Support user access status."
    accessStatus: SupportUserAccessStatus!
    "Support user access duration, in hours."
    durationInHours: Int!
    "Support user access end time."
    endTime: DateTime!
    "Support user access ID."
    id: Int!
    "Impersonated user."
    impersonatedUser: User
    "Support user access start time."
    startTime: DateTime!
    "Ticket number associated to the support user access request."
    ticketNumber: String!
}

"Paginated list of SupportUserAccess objects."
type SupportUserAccessConnection {
    "Total number of SupportUserAccess objects matching the request arguments."
    count: Int!
    "List of SupportUserAccess objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [SupportUserAccessEdge!]!
    "List of SupportUserAccess objects."
    nodes: [SupportUserAccess!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the SupportUserAccess object. This wrapper is used for pagination."
type SupportUserAccessEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual SupportUserAccess object wrapped by this edge."
    node: SupportUserAccess!
}

"Information about the suspicious file."
type SuspiciousFileInfo {
    "Path to the suspicious file."
    filePath: String!
    "File size in bytes."
    fileSizeBytes: Long!
    "The time, in UTC format, when the file was last changed."
    lastModified: DateTime
}

type SyslogCertificateInfo {
    "Syslog server's X.509 certificate in Base64 encoded DER format. The certificate should start with -----BEGIN CERTIFICATE-----"
    serverCertificate: String
    "User friendly name to identify the server certificate."
    serverCertificateName: String
}

type SyslogConfig {
    id: Int!
    notificationConf: CommonNotificationConfig
    syslogConf: SyslogSetting
}

"Supported in v5.1+"
type SyslogExportRuleFull {
    """

    Supported in v5.2+
    The ID corresponding to the imported certificate used by the syslog server.
    """
    certificateId: String
    """

    Required. Supported in v5.1+
    Specifies whether TLS should be used to communicate with the syslog server.
    """
    enableTls: Boolean!
    "Supported in v5.1+"
    facility: SyslogFacility!
    "Required. Supported in v5.1+"
    hostname: String!
    "Required. Supported in v5.1+"
    port: Int!
    "Supported in v5.1+"
    protocol: TransportLayerProtocol!
    "Supported in v5.1+"
    severity: SyslogSeverity!
}

"Supported in v5.1+"
type SyslogExportRuleSummary {
    """

    Required. Supported in v5.1+
    ID corresponding to the syslog export rule.
    """
    id: String!
    syslogCertificateInfo: SyslogCertificateInfo
    syslogExportRuleFull: SyslogExportRuleFull
}

"Supported in v5.1+"
type SyslogExportRuleSummaryListResponse {
    """

    Supported in v5.1+
    List of matching objects.
    """
    data: [SyslogExportRuleSummary!]!
    """

    Supported in v5.1+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.1+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type SyslogServerTestResult {
    """

    Required. Supported in v5.0+
    The test message that was sent.
    """
    message: String!
}

type SyslogSetting {
    facility: SyslogFacilityTypeEnum!
    severity: SyslogSeverityTypeEnum!
}

type TableFilters {
    ProtectionTaskDetailsTable: ProtectionTaskDetailsTableFilter!
    RecoveryTaskDetailsTable: RecoveryTaskDetailsTableFilter!
}

"The table's ID and its name."
type TableViewWithName {
    "The name of the table."
    tableName: String!
    "The ID of the report table."
    tableViewType: TableViewType!
}

"Represents a tag key-value pair of an AWS resource."
type Tag {
    "Tag key."
    key: String!
    "Tag value."
    value: String!
}

"Key-value pair of string."
type TagObject {
    "Key of the tag or label."
    key: String!
    "Value of the tag or label."
    value: String!
}

"Represents the SLA Domain ID and name."
type TagRuleEffectiveSla {
    "The effective SLA Domain ID."
    id: String!
    "The effective SLA Domain name."
    name: String!
}

"Tag represents a tag key-value pair."
type TagRuleTag {
    "Indicates if all tag values should be matched."
    matchAllValues: Boolean!
    "Tag key of the tag rule."
    tagKey: String!
    "Tag value of the tag rule."
    tagValue: String!
}

"Represents the error in response to triggering the on-demand snapshot of the workload."
type TakeOnDemandSnapshotError {
    "The error string."
    error: String!
    "The ID of the workload."
    workloadId: UUID!
}

"Represents the response to the take on-demand snapshot operation. For each workload ID that the on-demand snapshot was triggered, it either ends up being in the taskchainUuids or the errors map depending on if the operation succeeded or failed respectively."
type TakeOnDemandSnapshotReply {
    "The errors in response to taking the on-demand snapshots."
    errors: [TakeOnDemandSnapshotError!]!
    "The UUIDs of the on-demand snapshot taskchains."
    taskchainUuids: [TakeOnDemandSnapshotTaskchainUuid!]!
}

"Represents the taskchain UUID in response to triggering the on-demand snapshot of workload."
type TakeOnDemandSnapshotTaskchainUuid {
    "The uuid of the job instance."
    taskchainUuid: UUID!
    "The ID of the workload."
    workloadId: UUID!
}

type TakeScreenshotReply {
    screenshots: [String!]!
}

"Paginated list of Target objects."
type TargetConnection {
    "Total number of Target objects matching the request arguments."
    count: Int!
    "List of Target objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [TargetEdge!]!
    "List of Target objects."
    nodes: [Target!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Target object. This wrapper is used for pagination."
type TargetEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Target object wrapped by this edge."
    node: Target!
}

"Target mapping information."
type TargetMapping {
    "Connection status for archival group."
    connectionStatus: ArchivalGroupConnectionStatus
    groupType: ArchivalGroupType!
    id: UUID!
    name: String!
    targetTemplate: TargetTemplate
    targetType: TargetType!
    targets: [Target!]
    "Tiering status for archival group."
    tieringStatus: [ArchivalGroupTieringStatus!]
}

"Information about the target mapping identifier."
type TargetMappingBasic {
    "Id of the target mapping."
    id: UUID!
    "Name of the target mapping."
    name: String!
}

type TargetSite {
    stringValue: String!
}

"Task details."
type TaskDetail {
    "The archival target of an archival task."
    archivalTarget: String
    "The cluster location of the task."
    clusterLocation: String!
    "The cluster name of the task."
    clusterName: String!
    "The cluster type of the task."
    clusterType: String!
    "The cluster UUID of the task."
    clusterUuid: UUID!
    "Data reduction of the task."
    dataReduction: Float
    "Total number of bytes transferred for the task."
    dataTransferred: Long
    "Deduplication ratio of the task."
    dedupRatio: Float
    "Specifies whether an archival task has direct archive enabled."
    directArchive: String
    "The time taken to run the task."
    duration: Long!
    "The time when the task ended."
    endTime: DateTime!
    "The reason for failure if the task failed to complete."
    failureReason: String
    "The task monitoring ID."
    id: Long!
    "The location of the task."
    location: String!
    "Logical bytes of the task."
    logicalBytes: Long
    "Logical data reduction of the task."
    logicalDataReduction: Float
    "Logical deduplication ratio of the task."
    logicalDedupRatio: Float
    "The fid of the object related to the task."
    objectFid: String!
    "The name of the object related to the task."
    objectName: String!
    "The type of the object related to the task."
    objectType: String!
    "The organization ID related to the task."
    orgId: String
    "The organization name related to the task."
    orgName: String
    "Physical bytes of the task."
    physicalBytes: Long
    "Protected volume of the task."
    protectedVolume: String
    "The recovery point of a recovery task."
    recoveryPoint: String
    "The recovery point type of a recovery task."
    recoveryPointType: String
    "The replication source of a replication task."
    replicationSource: String
    "The replication target of a replication task."
    replicationTarget: String
    "The job instance ID."
    reportJobInstanceId: String!
    "The SLA Domain ID of the task."
    slaDomainId: String!
    "The SLA Domain name of the task."
    slaDomainName: String!
    "Snapshot consistency of the task."
    snapshotConsistency: String
    "The time when the task started."
    startTime: DateTime!
    "The status of the task."
    status: String!
    "The category type of the task."
    taskCategory: String!
    "The type of the task."
    taskType: String!
    "Total number of files transferred for the task."
    totalFilesTransferred: Long
    "The user who started the task."
    userName: String
}

type TaskDetailChart {
    focus: ReportFocusEnum!
    groupBy: [TaskDetailGroupByEnum!]
    name: String!
}

type TaskDetailClusterType {
    stringValue: String!
}

"Paginated list of TaskDetail objects."
type TaskDetailConnection {
    "Total number of TaskDetail objects matching the request arguments."
    count: Int!
    "List of TaskDetail objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [TaskDetailEdge!]!
    "List of TaskDetail objects."
    nodes: [TaskDetail!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the TaskDetail object. This wrapper is used for pagination."
type TaskDetailEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual TaskDetail object wrapped by this edge."
    node: TaskDetail!
}

"Task detail with groupby info applied to it."
type TaskDetailGroupBy {
    "The data groupby info."
    groupByInfo: TaskDetailGroupByInfo!
    "Paginated task detail data."
    taskDetailConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort task detail by field."
        sortBy: TaskDetailSortByEnum = EndTime,
        "Task detail sort order."
        sortOrder: SortOrder = DESC
    ): TaskDetailConnection!
    taskDetailGroupBy(
        "Group task detail by a field."
        groupBy: TaskDetailGroupByEnum!
    ): [TaskDetailGroupBy!]!
}

"Paginated list of TaskDetailGroupBy objects."
type TaskDetailGroupByConnection {
    "Total number of TaskDetailGroupBy objects matching the request arguments."
    count: Int!
    "List of TaskDetailGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [TaskDetailGroupByEdge!]!
    "List of TaskDetailGroupBy objects."
    nodes: [TaskDetailGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the TaskDetailGroupBy object. This wrapper is used for pagination."
type TaskDetailGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual TaskDetailGroupBy object wrapped by this edge."
    node: TaskDetailGroupBy!
}

type TaskDetailObjectType {
    stringValue: String!
}

type TaskDetailTable {
    focus: ReportFocusEnum!
    groupBy: [TaskDetailGroupByEnum!]
    name: String!
    selectedColumns: [TaskDetailTableColumnEnum!]!
    sortBy: TaskDetailSortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

"A backup task summary."
type TaskSummary {
    clusterUuid: UUID!
    date: DateTime!
    "Location of the associated backup task summary."
    location: String
    "The number of the canceled tasks."
    numCanceled: Int!
    "The number of the expected tasks."
    numExpected: Int!
    "The number of the failed and missed tasks."
    numFailed: Int!
    "The number of the successful tasks."
    numSucceeded: Int!
    "Object name of the associated backup task summary."
    objectName: String!
    "Object type of the associated backup task summary."
    objectType: ObjectTypeEnum!
    slaDomainId: String!
    "slaDomain name of the object."
    slaDomainName: String!
    "Snappable Id of the associated backup task summary"
    snappbleId: UUID!
}

type TaskSummaryAggregation {
    NumOfCanceled: Int!
    NumOfExpected: Int!
    NumOfFailed: Int!
    NumOfSucceeded: Int!
}

type TaskSummaryChart {
    focus: ReportFocusEnum!
    groupBy: [TaskSummaryGroupByEnum!]
    name: String!
}

"Paginated list of TaskSummary objects."
type TaskSummaryConnection {
    aggregation: TaskSummaryAggregation!
    "Total number of TaskSummary objects matching the request arguments."
    count: Int!
    "List of TaskSummary objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [TaskSummaryEdge!]!
    "List of TaskSummary objects."
    nodes: [TaskSummary!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the TaskSummary object. This wrapper is used for pagination."
type TaskSummaryEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual TaskSummary object wrapped by this edge."
    node: TaskSummary!
}

"Task summary with groupby info applied to it."
type TaskSummaryGroupBy {
    "The data groupby info."
    groupByInfo: TaskSummaryGroupByInfo!
    "Paginated task summary data."
    taskSummaryConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task summary by field"
        sortBy: TaskSummarySortByEnum = ObjectName,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): TaskSummaryConnection!
    taskSummaryGroupBy(
        "group task summary by a field"
        groupBy: TaskSummaryGroupByEnum!
    ): [TaskSummaryGroupBy!]!
}

"Paginated list of TaskSummaryGroupBy objects."
type TaskSummaryGroupByConnection {
    "Total number of TaskSummaryGroupBy objects matching the request arguments."
    count: Int!
    "List of TaskSummaryGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [TaskSummaryGroupByEdge!]!
    "List of TaskSummaryGroupBy objects."
    nodes: [TaskSummaryGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the TaskSummaryGroupBy object. This wrapper is used for pagination."
type TaskSummaryGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual TaskSummaryGroupBy object wrapped by this edge."
    node: TaskSummaryGroupBy!
}

type TaskSummaryTable {
    focus: ReportFocusEnum!
    groupBy: [TaskSummaryGroupByEnum!]
    name: String!
    selectedColumns: [TaskReportTableColumnEnum!]!
    sortBy: TaskSummarySortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

"Taskchain."
type Taskchain {
    account: String!
    component: String!
    config: String!
    currentTaskExecutionAttempts: Int!
    currentTaskIndex: Int!
    endTime: DateTime
    error: String!
    id: Long!
    jobId: Long!
    jobType: String!
    name: String!
    parentTaskchainId: String!
    podName: String!
    priority: Int!
    progress: Long!
    progressedAt: DateTime
    startTime: DateTime
    state: TaskchainState!
    taskchainUuid: String!
    workflowName: String!
}

type TaskchainInfo {
    appId: String!
    taskchainId: String!
}

"Taskchain info reply."
type TaskchainInfoReply {
    account: String!
    endTime: DateTime
    error: String!
    jobId: Long!
    jobType: String!
    "Platform configuration of the taskchain."
    platformConfig: String
    progress: Long!
    startTime: DateTime
    state: TaskchainState!
    taskchainId: String!
}

"The results of the webhook test."
type TestExistingWebhookReply {
    "The information describing the error from the webhook test."
    errorInfo: ErrorInfo
    "Describes whether the test was successful or not."
    isSuccessful: Boolean!
    "Describes the webhook status after the test."
    webhookStatus: WebhookStatus!
}

"Reply Object for TestSyslogExportRule."
type TestSyslogExportRuleReply {
    output: SyslogServerTestResult
}

"The results of the webhook test."
type TestWebhookReply {
    "The information describing the error from the webhook test."
    errorInfo: ErrorInfo
    "Describes whether the test was successful or not."
    isSuccessful: Boolean!
}

"""

Represents the configuration and statistics for a
threat hunt.
"""
type ThreatHunt {
    "The details/configuration of the threat hunt."
    huntDetails: ThreatHuntDetails!
    "ID of the threat hunt."
    huntId: String!
    "The stats based on results of the threat hunt."
    stats: ThreatHuntStats
    "Status of the threat hunt."
    status: ThreatHuntStatus!
}

"Config as the input to start a threat hunt."
type ThreatHuntConfig {
    "UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Criteria to restrict files to scan."
    fileScanCriteria: MalwareScanFileCriteria
    "List of IOCs to scan for."
    indicatorsOfCompromise: [IndicatorOfCompromise!]!
    "Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one."
    maxMatchesPerSnapshot: Int
    "Name of this threat hunt."
    name: String!
    "Notes to describe this threat hunt."
    notes: String!
    "The objects to be scanned for malware."
    objects: [CdmHierarchySnappableNew!]!
    "Additional information required for files with malware matches."
    requestedMatchDetails: RequestedMatchDetails
    "Specifies whether features that rely on the accuracy of filesystem metadata, like creation time and modification time of files, are enabled or not. These features include backend optimizations to skip re-scanning files that have not changed across snapshots, as indicated by the unchanged timestamps of files. This flag also gates access to some filters that can be specified in this API. Note that this flag should be used with caution, as relying on file timestamps may make the system vulnerable to adversarial techniques such as timestamp manipulation."
    shouldTrustFilesystemTimeInfo: Boolean!
    "Limit which snapshots to include in the threat hunt."
    snapshotScanLimit: MalwareScanSnapshotLimit
}

"Paginated list of ThreatHunt objects."
type ThreatHuntConnection {
    "Total number of ThreatHunt objects matching the request arguments."
    count: Int!
    "List of ThreatHunt objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [ThreatHuntEdge!]!
    "List of ThreatHunt objects."
    nodes: [ThreatHunt!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Details for the threat hunt."
type ThreatHuntDetails {
    "The Rubrik CDM ID of the threat hunt."
    cdmId: String!
    "The cluster of the scan."
    cluster: Cluster!
    "The configuration of the malware scan."
    config: ThreatHuntConfig!
    "End time of the hunt."
    endTime: DateTime
    "The object ids and corresponding snapshot ids targeted for scanning."
    snapshots: [WorkloadIdToSnapshotIds!]!
    "Start time of the hunt."
    startTime: DateTime
}

"Wrapper around the ThreatHunt object. This wrapper is used for pagination."
type ThreatHuntEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual ThreatHunt object wrapped by this edge."
    node: ThreatHunt!
}

"Represents the configuration and results for a threat hunt."
type ThreatHuntResult {
    "The configuration of the Threat Hunt."
    config: ThreatHuntConfig!
    "ID of the threat hunt."
    huntId: String!
    "Results of the scan on each object."
    results: [MalwareScanResult!]!
    "The statistics based on results of the threat hunt."
    stats: ThreatHuntStats
    "Status of the threat hunt."
    status: ThreatHuntStatus!
}

"Summary of a threat hunt for an object."
type ThreatHuntResultObjectsSummary {
    "Earliest snapshot date containing a match."
    earliestMatchedSnapshotDate: DateTime
    "Latest snapshot date containing a match."
    latestMatchedSnapshotDate: DateTime
    "Latest snapshot date not containing a match."
    latestSnapshotWithoutMatchDate: DateTime
    "The object location."
    location: String!
    "List of indicators of compromise (IOCs) found in all the matches."
    matchTypes: [IndicatorOfCompromise!]!
    "The scanned object."
    object: CdmHierarchySnappableNew
    "Threat hunt summaries for each snapshot."
    snapshotsStats: [ThreatHuntResultSnapshotStats!]!
    "Total paths for which malware was found."
    totalMatchedPaths: Long!
    "Total snapshots where a match was found."
    totalMatchedSnapshots: Int!
    "Total unique paths for which malware was found."
    totalUniqueMatchedPaths: Long!
}

"Summary of a threat hunt for a snapshot."
type ThreatHuntResultSnapshotStats {
    "Specifies whether the snapshot has expired."
    isExpired: Boolean!
    "Indicates whether the snapshot is quarantined or not."
    isQuarantined: Boolean!
    "List of IOCs found in this snapshot."
    matchTypes: [IndicatorOfCompromise!]!
    "Date of the snapshot."
    snapshotDate: DateTime
    "ID of the snapshot."
    snapshotFid: String!
    "Status of scanning this snapshot."
    status: MalwareScanInSnapshotStatus!
    "Total unique paths for which malware was found."
    totalMatchedPaths: Long!
}

"Represents the statistics related to the threat hunt."
type ThreatHuntStats {
    "Total objects in which malware was found."
    totalAffectedObjects: Long!
    "Total snapshots in which malware was found."
    totalAffectedSnapshots: Long!
    "Total snapshots scanned."
    totalSnapshotsScanned: Long!
    "Total scans where the malware scan succeeded."
    totalSucceededScans: Long!
    "Total unique paths for which malware was found."
    totalUniqueMatchedPaths: Long!
    "Total unique paths for which malware was found which are also quarantined."
    totalUniqueQuarantinedPaths: Long!
}

"Response to the threat hunt summary request."
type ThreatHuntSummaryReply {
    "The threat hunt configuration."
    config: ThreatHuntConfig
    "The ID of the threat hunt."
    huntId: String!
    "Threat hunt summaries for each object."
    objectsSummary: [ThreatHuntResultObjectsSummary!]!
    "The stats based on results of the threat hunt."
    stats: ThreatHuntStats
    "Status of the threat hunt."
    status: ThreatHuntStatus!
}

"A range of time"
type TimeRange {
    "End of the time range"
    end: DateTime!
    "Start of the time range"
    start: DateTime!
}

"A time range and the unit of that range."
type TimeRangeWithUnit {
    "Time range end."
    end: DateTime!
    "Time range start."
    start: DateTime!
    "Time range unit."
    unit: TimeUnitEnum!
}

type TimeSeriesResult {
    count: Long!
    timestamp: String!
}

type TimelineEntry {
    day: String!
    hits: Hits
    policyId: String!
}

"TOTP status for a user."
type TotpStatus {
    "Specifies whether TOTP is enabled for the user."
    isEnabled: Boolean!
    "Specifies whether TOTP is enforced."
    isEnforced: Boolean!
    "Specifies whether TOTP is enforced at the user level."
    isEnforcedUserLevel: Boolean!
    "Specifies whether TOTP is supported for the user."
    isSupported: Boolean!
    "The timestamp of the last TOTP configuration update."
    totpConfigUpdateAt: DateTime
}

"Response for Exocompute health check job submission."
type TriggerExocomputeHealthCheckReply {
    "ID for the Exocompute health check job."
    healthCheckJobId: String!
}

"Lambda job information on certain cluster."
type TriggerRansomwareDetectionReply {
    "Id of the Rubrik cluster running the ransomware detection job."
    clusterUuid: String!
    "Id of the ransomware detection job."
    jobId: String!
}

"Unidirectional replication specification."
type UnidirectionalReplicationSpec {
    "Replication target ID."
    replicationTargetId: String!
    "Replication target name."
    replicationTargetName: String!
    "Retention on replication target."
    retention: Int!
    "Unit of retention."
    retentionUnit: RetentionUnit!
    "The cluster to which this SLA will replicate the snapshots."
    targetCluster: Cluster
}

"UnmanagedObjectDetails."
type UnmanagedObjectDetail {
    "Storage on the archival location."
    archiveStorage: Long!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "Cluster UUID of the object."
    clusterUuid: UUID!
    "The effective SLA Domain of the unmanaged object."
    effectiveSlaDomain: SlaDomain!
    "Any of the snapshots are retained by a SLA."
    hasSnapshotsWithPolicy: Boolean!
    "Snappable id."
    id: String!
    "Whether the object is remote or local."
    isRemote: Boolean
    "Storage on the local location."
    localStorage: Long!
    "Unmanaged object name."
    name: String!
    "Type of the unmanaged object."
    objectType: ManagedObjectType!
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "Physical path to this object."
    physicalLocation: [LocationPathPoint!]!
    "Recovery information for the reader archival locations."
    recoveryInfo: SnappableRecoveryInfo
    "SLA Domain retention policy ID."
    retentionSlaDomainId: String!
    "SLA Domain retention policy name."
    retentionSlaDomainName: String!
    "Polaris SLA Domain ID."
    retentionSlaDomainPolarisManagedId: String
    "Snapshot count."
    snapshotCount: Long!
    "Unmanaged Status of this object."
    unmanagedStatus: UnmanagedObjectAvailabilityFilter!
}

"Paginated list of UnmanagedObjectDetail objects."
type UnmanagedObjectDetailConnection {
    "Total number of UnmanagedObjectDetail objects matching the request arguments."
    count: Int!
    "List of UnmanagedObjectDetail objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [UnmanagedObjectDetailEdge!]!
    "List of UnmanagedObjectDetail objects."
    nodes: [UnmanagedObjectDetail!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the UnmanagedObjectDetail object. This wrapper is used for pagination."
type UnmanagedObjectDetailEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual UnmanagedObjectDetail object wrapped by this edge."
    node: UnmanagedObjectDetail!
}

"Response of the operation to unmap Azure cloud accounts from the mapped exocompute subscription."
type UnmapAzureCloudAccountExocomputeSubscriptionReply {
    "Specifies whether the unmapping was completed successfully."
    isSuccess: Boolean!
}

"Represents updated Rubrik cluster configuration."
type UpdateAutoEnablePolicyClusterConfigReply {
    "Auto Enable Sensitive Data Discovery policy configuration."
    datagovAutoEnablePolicyConfig: AutoEnablePolicyClusterConfigReply!
    "The cluster UUID."
    id: UUID!
    "The cluster name."
    name: String!
    "The cluster type."
    type: ClusterTypeEnum!
    "The software version."
    version: String
}

"Response of the operation to update an AWS cloud account."
type UpdateAwsCloudAccountFeatureReply {
    "Contains success response message."
    message: String
}

"Response of the operation to Update Azure Cloud Account."
type UpdateAzureCloudAccountReply {
    "Status of the operation to update Azure Cloud Account."
    status: [UpdateAzureCloudAccountStatus!]!
}

"Status of the operation to Update Azure Cloud Account."
type UpdateAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Specifies whether the update of Azure Cloud Account was successful. When true, the update was successful."
    isSuccess: Boolean!
}

"""

Supported in v5.1+
Result of running the find_bad_disk script.
"""
type UpdateBadDiskLedStatusReply {
    """

    Supported in v7.0+
    find_bad_disk script output.
    """
    output: String
    """

    Supported in v5.1+
    Response of the find_bad_disk script.
    """
    result: CdmFindBadDiskResultType!
}

"Reply Object for UpdateCertificateHost."
type UpdateCertificateHostReply {
    output: HostDetail
}

"Response of the mutation to update a storage setting for AWS."
type UpdateCloudNativeAwsStorageSettingReply {
    targetMapping: TargetMapping!
}

"Updated storage settings information for Azure."
type UpdateCloudNativeAzureStorageSettingReply {
    targetMapping: TargetMapping!
}

"The status of the call to update indexing status."
type UpdateCloudNativeIndexingStatusReply {
    "The list of errors from indexing status request for each workload ID."
    errors: [UpdateIndexingStatusError!]!
}

"Updated RCV storage settings info for Azure."
type UpdateCloudNativeRcvAzureStorageSettingReply {
    "RCV azure storage setting."
    targetMapping: TargetMapping!
}

"Response object of the mutation that updates the default address of a Rubrik cluster."
type UpdateClusterDefaultAddressReply {
    "The Rubrik cluster whose default address is updated."
    cluster: Cluster!
}

"Response containing a list of objects with the pause or resume status for the Rubrik clusters."
type UpdateClusterPauseStatusReply {
    "List of objects with the pause or resume status for the Rubrik clusters."
    pauseStatuses: [ClusterPauseStatusResult!]
}

"Response from updating CDM cluster settings."
type UpdateClusterSettingsReply {
    "Version of the EULA accepted by admin."
    acceptedEulaVersion: String!
    "REST API version."
    apiVersion: String!
    "ID of the Rubrik cluster."
    clusterUuid: UUID!
    "Cluster geolocation."
    geolocation: ClusterGeolocation
    "Latest version of the EULA that must be accepted by admin."
    latestEulaVersion: String!
    "Name of the cluster."
    name: String!
    "Mode of registration."
    registeredMode: RegisteredMode!
    "Global manager URL."
    rubrikUrl: URL!
    "Cluster time zone."
    timezone: ClusterTimezone
    "Rubrik cluster software version."
    version: String!
}

"Metadata for rendering a custom report."
type UpdateCustomReportReply {
    "The list of charts in the custom report."
    charts: [ReportChartType!]!
    "Time the report was created."
    createdAt: DateTime!
    "The filters applied to the data in the report."
    filters: CustomReportFilters!
    "The metrics focus of the custom report."
    focus: ReportFocusEnum!
    "ID of the custom report."
    id: Int!
    "Specifies whether the report should be hidden from the gallery view."
    isHidden: Boolean!
    "Specifies whether the report is auto-generated and not editable."
    isReadOnly: Boolean!
    "Name of the custom report."
    name: String!
    "Date of the most recent sync for the report."
    newestSyncDate: DateTime
    "Date of the oldest sync for the report."
    oldestSyncDate: DateTime
    "The creator of the custom report."
    owner: User!
    scheduledReportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    "The list of tables in the custom report."
    tables: [ReportTableType!]!
    "Time the report was last updated and saved."
    updatedAt: DateTime!
    "Time the report was last viewed or opened."
    viewedAt: DateTime!
}

"Container for a list of updated event digests."
type UpdateEventDigestReply {
    "A list of saved event digests."
    eventDigests: [EventDigest!]!
}

"Reply Object for UpdateFailoverClusterApp."
type UpdateFailoverClusterAppReply {
    output: FailoverClusterAppSummary
}

"Reply Object for UpdateFailoverCluster."
type UpdateFailoverClusterReply {
    output: FailoverClusterDetail
}

"Supported in v5.0+"
type UpdateFloatingIpsReply {
    "Required. Supported in v5.0+"
    id: Long!
    "Required. Supported in v5.0+"
    status: String!
}

"The Rubrik clusters on which the certificate was successfully updated."
type UpdateGlobalCertificateReply {
    "The Rubrik clusters on which the certificate was successfully updated."
    clusterUuids: [UUID!]!
}

"Reply Object for UpdateGuestCredential."
type UpdateGuestCredentialReply {
    output: CreateGuestCredentialReply
}

type UpdateHealthMonitorPolicyStatusReply {
    items: [NodePolicyCheckResult!]!
}

"Supported in v5.0+"
type UpdateHypervVirtualMachineReply {
    guestOsType: HypervVirtualMachineDetailGuestOsType!
    hypervVirtualMachineSummary: HypervVirtualMachineSummary!
    hypervVirtualMachineUpdate: HypervVirtualMachineUpdate!
    """

    Supported in v5.0+
    Returns whether the Rubrik connector is installed and service is registered.
    """
    isAgentRegistered: Boolean
    operatingSystemType: HypervVirtualMachineDetailOperatingSystemType
    """

    Supported in v5.2+
    Brief information about all virtual disks of the selected virtual machine.
    """
    virtualDiskInfo: [HypervVirtualDiskInfo!]!
}

"Supported in v5.0+"
type UpdateHypervVirtualMachineSnapshotMountReply {
    hypervVirtualMachineMountSummary: HypervVirtualMachineMountSummary
}

"Update IdP reply type."
type UpdateIdentityProviderReply {
    "EntityId of the IdP."
    entityId: String!
    "Expiration date of the Idp."
    expirationDate: DateTime
    "Name of the IdP."
    name: String!
    "Organization ID of the IdP owner."
    ownerOrgId: String!
    "SignInUrl of the IdP."
    signInUrl: URL!
    "SignOutUrl of the IdP."
    signOutUrl: URL!
    "SpInitiatedSignInUrl of the IdP."
    spInitiatedSignInUrl: URL!
    "SpInitiatedTestUrl of the IdP."
    spInitiatedTestUrl: URL!
}

"Represents the error type resulting from the request to update indexing status."
type UpdateIndexingStatusError {
    "The error string."
    error: String!
    "The workload ID for which the error occurred."
    workloadId: String!
}

"Specifies information about lockout configuration."
type UpdateLockoutConfigReply {
    "Specifies the time after which the account is unlocked automatically."
    accountAutoUnlockDurationInMins: Int!
    "Specifies whether the auto unlock feature is enabled on the UI."
    isAutoUnlockFeatureEnabled: Boolean!
    "Specifies whether the account lockout feature is enabled on the UI."
    isBruteForceLockoutEnabled: Boolean!
    "Specifies whether self service is enabled for all users in this organization."
    isSelfServiceEnabled: Boolean!
    "Specifies the number of failed login attempts allowed after which the account is locked."
    loginAttemptsLimit: Int!
    "Specifies the number of times self service is allowed to unlock the account."
    selfServiceAttemptsLimit: Int!
    "Specifies the validity of the current self service token."
    selfServiceTokenValidityInMins: Int!
}

"Supported in v5.0+"
type UpdateManagedVolumeReply {
    "Application whose data this Managed Volume will store. For example, Oracle, SAP HANA, MSSQL, etc."
    applicationTag: ManagedVolumeApplicationTag
    """

    Required. Supported in v5.0+
    v5.0-v5.3: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?
    v6.0: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
    v7.0: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards *, or ?.
    v8.0+: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
    """
    hostPatterns: [String!]!
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Indicates whether the managed volume is deleted
    v6.0: Indicates whether the managed volume is deleted.
    v7.0+: Indicates if the Managed Volume is deleted.
    """
    isDeleted: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Is managed volume a relic.
    v7.0+: Indicates if the Managed Volume is a relic.
    """
    isRelic: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Indicates whether managed volume is open for writes
    v6.0: Indicates whether managed volume is open for writes.
    v7.0+: Indicates if the Managed Volume is open for writes.
    """
    isWritable: Boolean!
    """

    Supported in v5.0+
    v5.0-v6.0: List of links for the managed volume.
    v7.0+: List of links for the Managed Volume.
    """
    links: [Link!]!
    """

    Supported in v5.0+
    v5.0-v8.0:
    v9.0: The Main export of the Managed Volume.
    """
    mainExport: ManagedVolumeExport
    "Type of the Managed Volume (SlaBased / AlwaysMounted)."
    mvType: CdmManagedVolumeType
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Number of channels to divide the volume into. Each channel provides a unique share to write to.
    v7.0+: Number of channels to divide the Managed Volume into. Each channel provides a unique share for writing.
    """
    numChannels: Int!
    """

    Supported in v5.3+
    Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Combined total of in-progress snapshots and pending snapshots.
    v7.0+: Combined total of in-progress and pending snapshots.
    """
    pendingSnapshotCount: Int!
    "Specifies if the Managed Volume is exported over NFS or SMB."
    shareType: ManagedVolumeShareType!
    """

    Supported in v5.3+
    The additional details specific to SLA Managed Volumes.
    """
    slaManagedVolumeDetails: SlaManagedVolumeDetail
    """

    Supported in v5.0+
    v5.0-v5.3: Valid Active Directory domain name for users accessing this managed volume over SMB
    v6.0: Valid Active Directory domain name for users accessing this managed volume over SMB.
    v7.0+: Valid Active Directory domain name for users accessing this Managed Volume over SMB.
    """
    smbDomainName: String
    """

    Supported in v5.0+
    v5.0-v5.3: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
    v6.0: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
    v7.0+: List of valid SMB host IP addresses that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
    """
    smbValidIps: [String!]!
    """

    Supported in v5.0+
    v5.0-v5.3: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
    v6.0: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
    v7.0+: List of valid usersnames in the domain that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
    """
    smbValidUsers: [String!]!
    "The base workload object."
    snappable: CdmWorkload
    """

    Required. Supported in v5.0+
    Number of snapshots.
    """
    snapshotCount: Int!
    """

    Supported in v5.0+
    v5.0-v5.3: Managed volume state like exported, resetting etc.,
    v6.0: Managed volume state like exported, resetting etc.,.
    v7.0: State of the Managed Volume. For example, exported, resetting etc.
    v8.0+: State of the Managed Volume. For example, exported, resetting etc.,.
    """
    state: ManagedVolumeState!
    """

    Supported in v5.0+
    v5.0-v6.0: Specify the subnet associated with the managed volume.
    v7.0+: Specifies the subnet associated with the Managed Volume.
    """
    subnet: String
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Used capacity for the volume across all the channels in bytes.
    v7.0+: Used capacity, in bytes, for the Managed Volume across all channels.
    """
    usedSize: Long!
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Maximum capacity for the volume across all the channels in bytes.
    v7.0+: Maximum capacity, in bytes, for the Managed Volume across all channels.
    """
    volumeSize: Long!
}

"Supported in v5.0+"
type UpdateMssqlDefaultPropertiesReply {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: True to enable CBT based backup, false to disable.
    v5.3+: True to enable a CBT-based backup, false to disable a CBT-based backup.
    """
    cbtStatus: Boolean!
    "Required. Supported in v5.0+"
    logBackupFrequencyInSeconds: Long!
    "Supported in v5.3+"
    logRetentionTimeInHours: Int
    """

    Supported in v7.0+
    Use the default backup location configured in SQL Server for file-based log backups.
    """
    shouldUseDefaultBackupLocation: Boolean
}

"Supported in v5.3+"
type UpdateMssqlLogShippingConfigurationReply {
    "Required. Supported in v5.3+"
    links: MssqlLogShippingLinks
    "Updated detail of the Log Shipping configuration object."
    mssqlLogShippingSummaryV2: MssqlLogShippingSummaryV2
    """

    Supported in v5.3+
    Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. This value is returned only when the secondary database is in standby mode.
    """
    shouldDisconnectStandbyUsers: Boolean
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Basic information regarding a NAS system.
"""
type UpdateNasSystemReply {
    """

    Required. Supported in v7.0+
    The hostname of the NAS System.
    """
    hostname: String!
    """

    Required. Supported in v7.0+
    ID assigned to the NAS System.
    """
    id: String!
    "Vendor type of the updated NAS system."
    vendorType: NasVendorType!
}

"Response to update network throttle."
type UpdateNetworkThrottleReply {
    """

    Supported in v8.0+
    Network port for archival throttling. This is applicable only when the `resourceId` is `ArchivalEgress`.
    """
    archivalThrottlePort: Int
    """

    Supported in v5.0+
    Default throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    defaultThrottleLimit: Float
    """

    Required. Supported in v5.0+
    Boolean value that determines whether a throttle limit is enabled.
    """
    isEnabled: Boolean!
    """

    Supported in v5.2+
    The network interface where outgoing traffic is throttled.
    """
    networkInterface: String
    "Throttle resource: ReplicationEgress or ArchivalEgress."
    resourceId: NetworkThrottleResourceId!
    """

    Required. Supported in v5.0+
    An array containing all of the scheduled throttle limits for the specified resource.
    """
    scheduledThrottles: [NetworkThrottleScheduleSummary!]!
}

"Supported in v5.0+"
type UpdateNutanixClusterReply {
    """

    Required. Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String!
    """

    Required. Supported in v5.0+
    Connection status of a Nutanix Cluster.
    """
    connectionStatus: RefreshableObjectConnectionStatus
    nutanixClusterSummary: NutanixClusterSummary
}

"Response of the O365 authentication status update operation."
type UpdateO365AppAuthStatusReply {
    "Response of UpdateO365AppAuthStatus operation, indicating if the operation was successful or not."
    success: Boolean!
}

"Update O365 Org custom name response."
type UpdateO365OrgCustomNameReply {
    "Custom name to use for the O365 organization."
    customName: String!
    "Polaris ID for an O365 organization."
    orgUuid: UUID!
}

"UUID of updated organization."
type UpdateOrgReply {
    "UUID of updated organization."
    organizationId: String!
}

"Specifies if the signature is made by an authorized user."
type UpdatePactsafeEulaAcceptedReply {
    "Specifies if the signature is made by an authorized user."
    isValidSignature: Boolean!
}

"Specifies if the user is the first user to view the EULA."
type UpdatePactsafeEulaSeenReply {
    "Specifies if the user is the first user to view the EULA."
    status: EulaViewStatus!
}

"Supported in v5.0+"
type UpdateProxyConfigReply {
    "Required. Supported in v5.0+"
    host: String!
    "Supported in v5.0+"
    port: Int
    "Required. Supported in v5.0+"
    protocol: String!
    "Supported in v5.0+"
    username: String
}

"A Recovery Plan."
type UpdateRecoveryPlanReply implements HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Recovery Plan configuration."
    config: RecoveryPlanConfig
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Recovery Plan description."
    description: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Recovery Plan version."
    version: Int!
}

"Represents the response for editing a scheduled report."
type UpdateScheduledReportReply {
    "Description of the edited schedule."
    scheduledReport: ScheduledReport!
}

"Updated service account details."
type UpdateServiceAccountReply {
    "Client ID of the service account."
    clientId: String!
    "Description of the service account."
    description: String!
    "Timestamp of the last login done using the service account."
    lastLogin: DateTime
    "Name of the service account."
    name: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Extended properties of the SnapMirror Cloud workload.
"""
type UpdateSnapMirrorCloudReply {
    "Supported in v7.0+"
    archiveStorage: Long
    "Supported in v7.0+"
    localStorage: Long
    "Supported in v7.0+"
    protectionDate: DateTime
    "Key properties of the updated SnapMirror Cloud workload."
    snapMirrorCloudSummary: CreateSnapMirrorCloudReply
    "Supported in v7.0+"
    snapshotCount: Int
}

"Reply Object for UpdateSnmpConfig."
type UpdateSnmpConfigReply {
    output: SnmpConfiguration
}

"Result of a storage array update operation in a Rubrik Cluster."
type UpdateStorageArrayReplyType {
    "Details of the Rubrik cluster."
    cluster: Cluster!
    "Storage array details. Available only when the storage array updates successfully."
    detail: StorageArrayDetail
    "Error message. Available only when the storage array update fails."
    errorMessage: String
    "Hostname of the storage array."
    hostname: String!
    "ID of the storage array."
    id: String!
}

"Responses of operations to update storage arrays in Rubrik clusters."
type UpdateStorageArraysReply {
    "Update storage arrays responses."
    responses: [UpdateStorageArrayReplyType!]!
}

"Update a support case reply."
type UpdateSupportCaseReply {
    "The attachments in the support case."
    attachments: [SupportCaseAttachmentResponse!]!
    "The support case ID."
    caseId: String!
    "The Rubrik cluster UUID."
    clusterUuid: UUID!
}

"Reply Object for UpdateSyslogExportRule."
type UpdateSyslogExportRuleReply {
    output: SyslogExportRuleSummary
}

"Reply Object for UpdateTunnelStatus."
type UpdateTunnelStatusReply {
    output: SupportTunnelInfo
}

"Updated vCD instance details in Rubrik clusters."
type UpdateVcdInstancesReply {
    "VCD instances."
    vcdInstances: [VcdInstanceDetailType!]!
}

"Reply Object for UpdateVcenter."
type UpdateVcenterReply {
    output: VcenterSummary
}

"Supported in v5.0+"
type UpdateVolumeGroupReply {
    "Blackout window information."
    blackoutWindowResponseInfo: BlackoutWindowResponseInfo
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Assign this Volume Group to the given SLA domain.
    v5.3+: The ID of the SLA Domain policy to assign to the Volume Group.
    """
    configuredSlaDomainId: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Whether backup/archival/replication is paused for this Volume Group
    v5.3+: Indicates whether backup, archival, and replication are paused for this Volume Group.
    """
    isPaused: Boolean!
    """

    Supported in v5.3+
    Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    "Summary information about a volume group."
    volumeGroupSummary: VolumeGroupSummary
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Configuration details for the volumes in the Volume Group.
    """
    volumes: [HostVolumeSummary!]!
}

"Reply Object for UpdateFilter."
type UpdateVsphereAdvancedTagReply {
    output: FilterCreateResponse
}

"The webhook that was updated."
type UpdateWebhookReply {
    "This field is empty if the webhook test was not requested (shouldSendTestEvent request field), or was carried out successfully. In case of a webhook test failure, this field contains the failure details."
    testError: ErrorInfo
    "The webhook that was updated."
    webhook: Webhook!
}

"Response of the operation to set Azure cloud account feature status to connected, when in update permissions state."
type UpgradeAzureCloudAccountPermissionsWithoutOauthReply {
    "Status of the request."
    status: Boolean!
}

"Response of the operation to upgrade Azure Cloud Account."
type UpgradeAzureCloudAccountReply {
    "Status of the operation to upgrade Azure Cloud Account permission."
    status: [UpgradeAzureCloudAccountStatus!]!
}

"Status of the operation to Azure Cloud Account Upgrade permission."
type UpgradeAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Error received during upgrade of Azure Cloud Account."
    error: String!
    "Specifies whether the upgrade of Azure Cloud Account was successful. When true, the upgrade was successful."
    isSuccess: Boolean!
}

"Represents upgrade duration in seconds."
type UpgradeDurationReply {
    "Time taken by the last successful fast upgrade, in seconds."
    fastUpgradeDuration: Long!
    "Time taken by the last successful rolling upgrade, in seconds."
    rollingUpgradeDuration: Long!
}

"Response of the operation to set GCP cloud account feature status to connected, when in update permissions state."
type UpgradeGcpCloudAccountPermissionsWithoutOauthReply {
    "Status of the operation to upgrade GCP project."
    status: GcpCloudAccountProjectUpgradeStatus
}

"Cluster upgrade data with groupby info applied to it."
type UpgradeInfoGroupBy {
    "Paginated snappable data."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort upgradeInfo by field"
        sortBy: UpgradeInfoSortByEnum = ClusterType,
        "Cluster sort order."
        sortOrder: SortOrder = DESC
    ): ClusterConnection!
    "Provides further groupings for the data."
    clusterGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: UpgradeInfoGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [UpgradeGroupByInfo!]!
    "The data groupby info."
    groupByInfo: UpgradeGroupByInfo!
}

"Paginated list of UpgradeInfoGroupBy objects."
type UpgradeInfoGroupByConnection {
    "Total number of UpgradeInfoGroupBy objects matching the request arguments."
    count: Int!
    "List of UpgradeInfoGroupBy objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [UpgradeInfoGroupByEdge!]!
    "List of UpgradeInfoGroupBy objects."
    nodes: [UpgradeInfoGroupBy!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the UpgradeInfoGroupBy object. This wrapper is used for pagination."
type UpgradeInfoGroupByEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual UpgradeInfoGroupBy object wrapped by this edge."
    node: UpgradeInfoGroupBy!
}

"Start upgrade job response."
type UpgradeJobReply {
    "Upgrade start message."
    message: String!
    "Upgrade success/failure boolean flag."
    success: Boolean!
}

"Start upgrade batch job response."
type UpgradeJobReplyWithUuid {
    "Upgrade job reply object."
    upgradeJobReply: UpgradeJobReply!
    "Cluster uuid."
    uuid: String!
}

"Upgrade recommendation information."
type UpgradeRecommendationInfo {
    "Latest upgradable version from the next release."
    nextReleaseRecommendation: String!
    "Recommended version for upgrade in the same release."
    recommendation: String!
    "List of upgradable versions for the cluster."
    upgradability: [String!]!
}

"Response containing taskchain information for the upgrade of SLA Domains."
type UpgradeSlasReply {
    "List of objects containing SLA Domain taskchain information."
    slasTaskchainInfo: [SlaTaskchainInfo!]!
}

"Upgrade status response."
type UpgradeStatusReply {
    "Current state."
    currentState: String!
    "Current state name."
    currentStateName: String!
    "Progress percentage of current state."
    currentStateProgress: String!
    "Upgrade states successfully completed running."
    finishedStates: String!
    "Upgrade mode."
    mode: String!
    "Upgrade driver node name."
    nodeName: String!
    "Upgrade states to be attempted to run."
    pendingStates: String!
    "Progress percentage of current state."
    progress: String!
    "Rolling upgrade information."
    ruInfo: RollingUpgradeInfo
    "Upgrade tarball package name."
    tarballName: String!
    "Overall upgrade progress percentage."
    upgradeProgressPercentage: String!
    "Upgrade status object."
    upgradeStatus: StatusResponse
    "Time remaining for upgrade to complete."
    upgradeTimeLeftSecs: String!
    "Upgrade start Timestamp."
    upgradeTimestamp: String!
    "Current upgrade task name."
    userSurfacedTaskName: String!
}

"User account details."
type User {
    "The suborganizations in which the user has roles."
    allOrgs: [Org!]!
    "The domain the user belongs to."
    domain: UserDomainEnum!
    "The user's email address."
    email: String!
    "Email notification configurations."
    emailConfig: [EventDigest!]!
    "The user's EULA acceptance state."
    eulaState: EulaState!
    "The groups that the user belongs to."
    groups: [String!]!
    "The user ID."
    id: String!
    "Specifies whether user is an account owner."
    isAccountOwner: Boolean!
    "The last time the user logged in."
    lastLogin: DateTime
    "The user account lockout information."
    lockoutState: LockoutState!
    "Permission of an user."
    roles: [Role!]!
    "The status of the user account."
    status: UserStatus!
    "The TOTP status of user."
    totpStatus: TotpStatus!
    "The number of unread notifications for the current user."
    unreadCount: Long!
    "The user's username."
    username: String!
}

"Represents the activity for a specific user."
type UserActivityResult {
    "The total number of activities this user had."
    numActivities: Long!
    "The total number of activities, grouped by activity type."
    numActivitiesBreakdown: [ActivityResult!]!
    "ID used for pagination."
    paginationId: String!
    "The user that this result corresponds to."
    user: AccessUser
}

"Paginated list of UserActivityResult objects."
type UserActivityResultConnection {
    "Total number of UserActivityResult objects matching the request arguments."
    count: Int!
    "List of UserActivityResult objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [UserActivityResultEdge!]!
    "List of UserActivityResult objects."
    nodes: [UserActivityResult!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the UserActivityResult object. This wrapper is used for pagination."
type UserActivityResultEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual UserActivityResult object wrapped by this edge."
    node: UserActivityResult!
}

type UserAudit {
    auditType: UserAuditTypeEnum
    cluster: Cluster
    id: ID!
    message: String!
    objectId: String!
    objectName: String
    objectType: UserAuditObjectTypeEnum!
    "The organization ID of this user audit."
    orgId: String!
    "The organization name of this user audit."
    orgName: String
    severity: UserAuditSeverityEnum
    status: UserAuditStatusEnum!
    time: DateTime!
    userName: String
    "Optional user note."
    userNote: String
}

type UserAuditChart {
    focus: ReportFocusEnum!
    groupBy: [UserAuditGroupByEnum!]
    name: String!
}

"Paginated list of UserAudit objects."
type UserAuditConnection {
    "Total number of UserAudit objects matching the request arguments."
    count: Int!
    "List of UserAudit objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [UserAuditEdge!]!
    "List of UserAudit objects."
    nodes: [UserAudit!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the UserAudit object. This wrapper is used for pagination."
type UserAuditEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual UserAudit object wrapped by this edge."
    node: UserAudit!
}

"Audits group by information for a single field."
type UserAuditGroupByBase {
    "Number of audits matching the group by information."
    count: Long!
    "Group by field corresponding to the set of audits."
    groupByField: UserAuditGroupBy!
    "String value of the group by field."
    groupByValue: String!
}

"Group by information for the requested audits. Includes both primary and secondary group by fields."
type UserAuditGroupByInfo {
    "Number of audits matching the group by information."
    count: Long!
    "Group by field corresponding to the set of audits."
    groupByField: UserAuditGroupBy!
    "String value of the group by field."
    groupByValue: String!
    "List of audit group by information per secondary group by field."
    secondaryGroupByInfo: [UserAuditGroupByBase!]!
}

"Paginated list of UserAuditGroupByInfo objects."
type UserAuditGroupByInfoConnection {
    "Total number of UserAuditGroupByInfo objects matching the request arguments."
    count: Int!
    "List of UserAuditGroupByInfo objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [UserAuditGroupByInfoEdge!]!
    "List of UserAuditGroupByInfo objects."
    nodes: [UserAuditGroupByInfo!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the UserAuditGroupByInfo object. This wrapper is used for pagination."
type UserAuditGroupByInfoEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual UserAuditGroupByInfo object wrapped by this edge."
    node: UserAuditGroupByInfo!
}

type UserAuditTable {
    focus: ReportFocusEnum!
    groupBy: [UserAuditGroupByEnum!]
    name: String!
    selectedColumns: [UserAuditTableColumnEnum!]!
    sortBy: UserAuditSortByEnum
    "Sorts by order."
    sortOrder: SortOrder
}

"Paginated list of User objects."
type UserConnection {
    "Total number of User objects matching the request arguments."
    count: Int!
    "List of User objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [UserEdge!]!
    "List of User objects."
    nodes: [User!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

type UserDownload {
    completeTime: String!
    createTime: String!
    id: Long!
    identifier: DownloadIdentifierEnum!
    name: String!
    progress: Int!
    status: DownloadStatusEnum!
}

type UserDownloadUrl {
    url: String!
}

"Wrapper around the User object. This wrapper is used for pagination."
type UserEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual User object wrapped by this edge."
    node: User!
}

"Current user login context."
type UserLoginContext {
    "Current account name."
    accountName: String!
    "Current organization full name."
    orgFullName: String!
    "Current organization ID."
    orgId: String!
    "Current organization name."
    orgName: String!
    "Currently logged-in user."
    user: User!
}

"An object representing product notifications."
type UserNotifications {
    "The ID for the current user."
    id: String!
    "The amount of unread notifications for the current user."
    unreadCount: Long!
}

"User settings represented by key-value pairs for the predefined keys in Rubrik."
type UserSetting {
    "Key of the user setting."
    setting: String!
    "Value of the user setting associated with key."
    value: String!
}

"Represents per user setting as a key value pair."
type UserSettings {
    "User setting values of user setting."
    settings: [UserSetting!]!
}

type V1BulkUpdateExchangeDagResponse {
    items: [ExchangeDagSummary!]!
}

type V1MssqlGetRestoreFilesV1Response {
    items: [MssqlRestoreFile!]!
}

type VSphereBlueprint implements Blueprint & CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "The list of child objects in the workload."
    childConnection: BlueprintChildConnection!
    children: [VSphereVmChild!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    currentFailoverStatus: AppBlueprintFailoverStatus!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    isAssignedSlaSynced: Boolean!
    isMount: Boolean!
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    lastFailoverStatus: AppBlueprintLastFailoverStatus!
    lastFailoverTimeMillisOpt: Long
    "last test failover"
    lastTestFailover: Failover
    lastTestFailoverStatus: AppBlueprintLastFailoverStatus!
    lastTestFailoverTimeMillisOpt: Long
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    mountTimeMillisOpt: Long
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot ready for failover"
    newestFailoverReadySnapshot(isTestFailover: Boolean!): CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "Number of child workloads of the Blueprint."
    numChildren: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The recovery ranges of the blueprint"
    recoveryInfo(
        "The Rubrik cluster ID."
        clusterUuid: UUID
    ): BlueprintRecoveryRanges
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    rmStatus: AppBlueprintRmStatus!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    status: AppBlueprintStatus!
}

type VSphereVMNicSpec {
    adapterType: NetworkAdapterType!
    dnsInfos: [String!]!
    gateway: String!
    ipv4Address: String!
    ipv6Address: String!
    isPrimaryNic: Boolean!
    key: String!
    netmask: String!
    networkId: String!
    networkMoid: String!
    networkType: NetworkType!
}

type VSphereVMVolumeSpec {
    "Cdm Id of vSphere Datastore."
    dataStoreCdmId: String!
    "Id of vSphere Datastore."
    dataStoreId: String!
    "Id of vSphere Datastore Cluster."
    datastoreClusterId: String!
    "Key value defined in Ebs Volume."
    key: String!
    "Label for vSphere volume."
    label: String!
    "Size of datastore or datastore cluster in Gbs."
    sizeGbs: Float!
}

type VSphereVmChild implements BlueprintChild {
    bootPriority: Int!
    "Failover instance of child workload."
    failoverInstance: VsphereBlueprintChildFailoverInstance
    fid: UUID!
    "local RPO lag information"
    localRpoLagInfo: RpoLagInfo
    "The recovery info of the child virtual machine"
    recoveryInfo(
        "The Rubrik cluster ID."
        clusterUuid: UUID
    ): ChildVmRecoveryInfo
    "Recovery specification of the child workload."
    recoverySpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): RecoverySpec
    "remote RPO lag information"
    remoteRpoLagInfo: RpoLagInfo
    "Resource specification of the child workload."
    resourceSpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): VmwareResourceSpec
    "The child workload."
    snappable: VsphereVm
    snappableType: ObjectTypeEnum!
}

"Aws cloud accounts validate response."
type ValidateAndCreateAwsCloudAccountReply {
    "AWS cloud account initiate response if the request is successful."
    initiateResponse: AwsCloudAccountCreateResponse
    "Error messages related to the failure of the request to create an AWS cloud account."
    validateResponse: AwsCloudAccountValidateResponse
}

"Response indicating if the KMS details are valid."
type ValidateAndSaveCustomerKmsInfoReply {
    "Message describing the error in the KMS details."
    errorMessage: String!
    "The input field used to display the error message."
    inputFieldName: String!
}

"Validate AWS RDS Instance name for export."
type ValidateAwsNativeRdsInstanceNameForExportReply {
    "Refers to the reason for the RDS name being invalid."
    error: String!
    "Specifies whether the RDS name is valid or not."
    isValid: Boolean!
}

"Validate Azure SQL Database name for export."
type ValidateAzureNativeSqlDatabaseDbNameForExportReply {
    "Refers to the reason for the database name being invalid."
    error: String!
    "Specifies whether the database name is valid or not."
    isValid: Boolean!
}

"Validate Azure SQL Mananged Instance Database name for export."
type ValidateAzureNativeSqlManagedInstanceDbNameForExportReply {
    "Refers to the reason for the database name being invalid."
    error: String!
    "Specifies whether the database name is valid or not."
    isValid: Boolean!
}

"Response of the operation to validate Azure Cloud Account Exocompute Configurations."
type ValidateAzureSubnetsForCloudAccountExocomputeReply {
    "List of validation information on Azure Exocompute Configurations provided."
    validationInfo: [AzureExocomputeConfigValidationInfo!]!
}

"The validation of a Blueprint recovery specification."
type ValidateBlueprintRecoverySpecReply {
    "The message describing the error."
    errorMessage: String!
    "The resource mapping status of the Blueprint."
    rmStatus: String!
    "Specifies whether the validation of the Blueprint recovery specification was successful."
    success: Boolean!
}

"Blueprint validation reply."
type ValidateBlueprintReply {
    "Blueprint uuid."
    blueprintId: id
    "Status of the validation."
    isValidationSucceeded: Boolean!
    "Detailed information about each resource validation."
    statusInfos: [ValidationStatusInfo!]!
}

"Multiple blueprint validation reply."
type ValidateBlueprintsReply {
    "Detailed information about each blueprint validation."
    blueprintStatus: [ValidateBlueprintReply!]!
}

"Specifies if the certificate and CSR or private key pair is valid."
type ValidateCertificateReply {
    "Specifies if the certificate and CSR or private key pair is valid."
    isValid: Boolean!
}

"Represents a map that depicts the feasibility of file recovery on the snapshots."
type ValidateCloudNativeFileRecoveryFeasibilityReply {
    "Represents the possibility of file recovery from a snapshot."
    snapshotFileRecoveryFeasibility: [CloudNativeFileRecoveryFeasibility!]!
}

type ValidateFailureReason {
    failureReason: String!
    planName: PlanName!
    snappableId: String!
    snapshotId: String!
}

"Supported in v6.0+"
type ValidateOracleAcoFileReply {
    """

    Supported in v6.0+
    List of Advanced Cloning Options (ACO) parameter values that were parsed.
    """
    acoMap: [OracleAcoParameterDetail!]!
    """

    Supported in v6.0+
    Other generic errors with the Advanced Cloning Options (ACO) parameters.
    """
    acoParameterErrors: [String!]!
    """

    Supported in v6.0+
    List of Advanced Cloning Options (ACO) errors pertaining to the specified values.
    """
    acoValueValidationErrors: [OracleAcoValueErrorDetail!]!
}

"Reply for organization name validation."
type ValidateOrgNameReply {
    "Name of the organization."
    name: String!
    "Validity of the organization name."
    nameValidity: NameValidity!
    "Url of the organization."
    url: String!
}

"Status for resource mapping validation for blueprint."
type ValidationStatusInfo {
    "List of all failure error messages."
    failureReasons: [String!]!
    "Validated resource info."
    resourceInfo: ResourceInfo
    "Resource mapping validation status for the snappable."
    validationStatus: ValidationStatus!
    "List of all warning messages."
    warningReasons: [String!]!
}

type ValueBoolean implements Value {
    serializedValue: String!
    value: Boolean
}

type ValueDateTime implements Value {
    serializedValue: String!
    value: DateTime
}

type ValueFloat implements Value {
    serializedValue: String!
    value: Float
}

type ValueInteger implements Value {
    serializedValue: String!
    value: Int
}

type ValueLong implements Value {
    serializedValue: String!
    value: Long
}

type ValueNull implements Value {
    serializedValue: String!
}

type ValueString implements Value {
    serializedValue: String!
    value: String
}

"Supported in v5.0+"
type VappExportOptions {
    """

    Required. Supported in v5.0+
    Array containing summary information for the vApp virtual machines in the specified vApp snapshot, including the default network mappings.
    """
    allChildVmsWithDefaultNetworkConnections: [VappVmRestoreSpec!]!
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Storage policies that can be used as a target for VMs being exported.
    v6.0+: Storage policies that can be used as a target for virtual machines being exported.
    """
    availableStoragePolicies: [VcdOrgVdcStorageProfile!]!
    """

    Required. Supported in v5.0+
    Array of vApp networks in the vApp snapshot being exported that can be enabled at the export location.
    """
    restorableNetworks: [CreateVappNetworkParams!]!
    """

    Supported in v5.0+
    v5.0-v5.1:
    v5.2+: Array of vApp networks at the export location that can be connected to the vApp virtual machines in the exported vApp snapshot.
    """
    targetVappNetworks: [VappNetworkSummary!]!
}

"Supported in v5.0+"
type VappInstantRecoveryOptions {
    """

    Required. Supported in v5.0+
    An array of network connections available through the specified vApp object.
    """
    availableVappNetworks: [VappNetworkSummary!]!
    """

    Required. Supported in v5.0+
    An array of virtual machines that can be restored and their associated default network connections.
    """
    restorableVms: [VappVmRestoreSpec!]!
}

"Supported in v5.0+"
type VappNetworkSummary {
    """

    Required. Supported in v5.0+
    Boolean value that indicates whether the specified vApp network object has been deployed. Value is 'true' when the vApp network object has been deployed and 'false' when it has not been deployed.
    """
    isDeployed: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Name for the specified vApp network object.
    v6.0+: Name of the specified vApp network object.
    """
    name: String!
    """

    Supported in v5.0+
    vCloud Director ID of the associated organization VDC network object. For an Isolated network, the value is empty.
    """
    parentNetworkId: String
}

"Supported in v5.1+"
type VappTemplateExportOptions {
    """

    Required. Supported in v5.1+
    An array of the available storage profile policies where the vApp snapshot can be exported.
    """
    availableStoragePolicies: [VcdOrgVdcStorageProfile!]!
    """

    Required. Supported in v5.1+
    The ID of the organization vDC where the vApp template can be exported.
    """
    orgVdcId: String!
}

"""

Supported in v5.1+
Provides different options available for a vApp template snapshot export. Fields that correspond to unavailable choices are skipped.
"""
type VappTemplateExportOptionsUnion {
    """

    Supported in v5.1+
    Organization VDC and storage profile choices available in case the advanced option of providing an organization vDC ID is used for export.
    """
    advancedExportOptions: VappTemplateExportOptions
    """

    Supported in v5.1+
    Organization vDC and storage profile choices available in case the target catalog is used for export.
    """
    defaultCatalogExportOptions: VappTemplateExportOptions
    """

    Supported in v5.1+
    Organization vDC and storage profile choices available in case original Organization vDC is used for export.
    """
    originalVdcExportOptions: VappTemplateExportOptions
}

"Supported in v5.0+"
type VappVmNetworkConnection {
    "Addressing mode of the virtual machine network connection."
    addressingMode: VappVmIpAddressingMode!
    """

    Supported in v5.0+
    v5.0-v5.3: IPv4 address to assign to the specified vApp network connection. Only set this value when the network address allocation method is 'Static'. Otherwise, the value should be empty.
    v6.0+: IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.
    """
    ipAddress: String
    """

    Required. Supported in v5.0+
    Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.
    """
    isConnected: Boolean!
    """

    Supported in v5.0+
    MAC address of the NIC that is used by the specified vApp network connection.
    """
    macAddress: String
    """

    Supported in v5.3+
    v5.3: The network adapter type of this NIC.
    v6.0+: The network adapter type of the NIC.
    """
    networkAdapterType: String
    """

    Required. Supported in v5.0+
    Index assigned to the NIC that is used by the specified vApp network connection.
    """
    nicIndex: Int!
    """

    Supported in v5.0+
    v5.0-v5.3: Name of the vApp network the NIC corresponding to this connection will connect to.
    v6.0+: Name of the vApp network to which the NIC corresponding to this connection will connect to.
    """
    vappNetworkName: String
}

"Supported in v5.0+"
type VappVmRestoreSpec {
    """

    Required. Supported in v5.0+
    Name of the specified vApp virtual machine within vCloud.
    """
    name: String!
    "Required. Supported in v5.0+"
    networkConnections: [VappVmNetworkConnection!]!
    """

    Supported in v5.0+
    v5.0-v5.3: Storage policy where this vApp virtual machine should be restored to. If omitted, the VMs will be exported to the default storage policy of the target Organization VDC.
    v6.0+: Storage policy where this vApp virtual machine should be restored to. If omitted, the virtual machines will be exported to the default storage policy of the target Organization VDC.
    """
    storagePolicyId: String
    """

    Required. Supported in v5.0+
    vCloud managed object ID (moid) of the specified vApp virtual machine.
    """
    vcdMoid: String!
}

type Vcd implements CdmHierarchyObject & HierarchyObject & VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The connection status of the vCenter."
    allVcenterConnectionStatuses: [VcdVcenterConnectionState!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "The CA certificates used to connect to the VCD instance."
    caCerts: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The hostname of VCD instance."
    hostname: String!
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "The username used to connect to the VCD instance."
    username: String!
    "The connection status of the vCD instance."
    vcdConnectionStatus: HostConnectionStatus
    "The version of VCD instance."
    version: String!
}

type VcdCatalog implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdOrgVdcDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdOrgLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Supported in v5.0+"
type VcdClusterBaseConfig {
    """

    Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    "Required. Supported in v5.0+"
    hostname: String!
    "Required. Supported in v5.0+"
    username: String!
}

"Supported in v5.0+"
type VcdClusterDetail {
    vcdClusterSummary: VcdClusterSummary
}

"Supported in v5.0+"
type VcdClusterSummary {
    """

    Supported in v5.0+
    Connection status of a vCD Cluster object.
    """
    connectionStatus: VcdConnectionStatus
    """

    Required. Supported in v5.0+
    ID assigned to a vCD Cluster object.
    """
    id: String!
    slaAssignable: SlaAssignable
    vcdClusterBaseConfig: VcdClusterBaseConfig
}

"Supported in v5.0+"
type VcdClusterSummaryListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [VcdClusterSummary!]!
    "Specifies if there are more matching objects."
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type VcdConnectionStatus {
    """

    Supported in v5.0+
    Status details for a specified vCD Cluster object. Empty except when the status of the vCD Cluster object is 'BadlyConfigured'.
    """
    message: String
    """

    Supported in v5.0+
    Status of a specified vCD Cluster object.
    """
    status: RefreshableObjectConnectionStatusType!
}

"Paginated list of VcdDescendantType objects."
type VcdDescendantTypeConnection {
    "Total number of VcdDescendantType objects matching the request arguments."
    count: Int!
    "List of VcdDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdDescendantTypeEdge!]!
    "List of VcdDescendantType objects."
    nodes: [VcdDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdDescendantType object. This wrapper is used for pagination."
type VcdDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdDescendantType object wrapped by this edge."
    node: VcdDescendantType!
}

"Rubrik CDM vCD instance details."
type VcdInstanceDetailType {
    "Details of a Rubrik cluster."
    cluster: Cluster!
    "VCD cluster details, when updated successfully."
    detail: VcdClusterDetail
    "Error message in case of failure."
    errorMessage: String
}

"Paginated list of VcdLogicalChildType objects."
type VcdLogicalChildTypeConnection {
    "Total number of VcdLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VcdLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdLogicalChildTypeEdge!]!
    "List of VcdLogicalChildType objects."
    nodes: [VcdLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdLogicalChildType object. This wrapper is used for pagination."
type VcdLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdLogicalChildType object wrapped by this edge."
    node: VcdLogicalChildType!
}

type VcdOrg implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdOrgDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdOrgLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VcdOrg objects."
type VcdOrgConnection {
    "Total number of VcdOrg objects matching the request arguments."
    count: Int!
    "List of VcdOrg objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdOrgEdge!]!
    "List of VcdOrg objects."
    nodes: [VcdOrg!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of VcdOrgDescendantType objects."
type VcdOrgDescendantTypeConnection {
    "Total number of VcdOrgDescendantType objects matching the request arguments."
    count: Int!
    "List of VcdOrgDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdOrgDescendantTypeEdge!]!
    "List of VcdOrgDescendantType objects."
    nodes: [VcdOrgDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdOrgDescendantType object. This wrapper is used for pagination."
type VcdOrgDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdOrgDescendantType object wrapped by this edge."
    node: VcdOrgDescendantType!
}

"Wrapper around the VcdOrg object. This wrapper is used for pagination."
type VcdOrgEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdOrg object wrapped by this edge."
    node: VcdOrg!
}

"Paginated list of VcdOrgLogicalChildType objects."
type VcdOrgLogicalChildTypeConnection {
    "Total number of VcdOrgLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VcdOrgLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdOrgLogicalChildTypeEdge!]!
    "List of VcdOrgLogicalChildType objects."
    nodes: [VcdOrgLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdOrgLogicalChildType object. This wrapper is used for pagination."
type VcdOrgLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdOrgLogicalChildType object wrapped by this edge."
    node: VcdOrgLogicalChildType!
}

type VcdOrgVdc implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdOrgVdcDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdOrgVdcLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VcdOrgVdcDescendantType objects."
type VcdOrgVdcDescendantTypeConnection {
    "Total number of VcdOrgVdcDescendantType objects matching the request arguments."
    count: Int!
    "List of VcdOrgVdcDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdOrgVdcDescendantTypeEdge!]!
    "List of VcdOrgVdcDescendantType objects."
    nodes: [VcdOrgVdcDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdOrgVdcDescendantType object. This wrapper is used for pagination."
type VcdOrgVdcDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdOrgVdcDescendantType object wrapped by this edge."
    node: VcdOrgVdcDescendantType!
}

"Paginated list of VcdOrgVdcLogicalChildType objects."
type VcdOrgVdcLogicalChildTypeConnection {
    "Total number of VcdOrgVdcLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VcdOrgVdcLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdOrgVdcLogicalChildTypeEdge!]!
    "List of VcdOrgVdcLogicalChildType objects."
    nodes: [VcdOrgVdcLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdOrgVdcLogicalChildType object. This wrapper is used for pagination."
type VcdOrgVdcLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdOrgVdcLogicalChildType object wrapped by this edge."
    node: VcdOrgVdcLogicalChildType!
}

"Supported in v5.0+"
type VcdOrgVdcStorageProfile {
    "Required. ID assigned to the Organization vDC storage profile."
    id: String!
    "Required. Name of the Organization vDC storage profile."
    name: String!
}

"Paginated list of VcdTopLevelDescendantType objects."
type VcdTopLevelDescendantTypeConnection {
    "Total number of VcdTopLevelDescendantType objects matching the request arguments."
    count: Int!
    "List of VcdTopLevelDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdTopLevelDescendantTypeEdge!]!
    "List of VcdTopLevelDescendantType objects."
    nodes: [VcdTopLevelDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdTopLevelDescendantType object. This wrapper is used for pagination."
type VcdTopLevelDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdTopLevelDescendantType object wrapped by this edge."
    node: VcdTopLevelDescendantType!
}

type VcdVapp implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & VcdCatalogDescendantType & VcdCatalogLogicalChildType & VcdDescendantType & VcdOrgDescendantType & VcdOrgVdcDescendantType & VcdOrgVdcLogicalChildType & VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Specifies whether the vApp is best effort synchronization Enabled."
    isBestEffortSynchronizationEnabled: Boolean!
    isRelic: Boolean!
    "Specifies whether this is a vApp template."
    isTemplate: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VcdVappLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Contains statistics for the protected objects, for example, capacity."
    reportWorkload: Snappable
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Information about vCD-managed vApp child virtual machines."
    vcdVms: [VcdVmInfo!]!
}

"Paginated list of VcdVapp objects."
type VcdVappConnection {
    "Total number of VcdVapp objects matching the request arguments."
    count: Int!
    "List of VcdVapp objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdVappEdge!]!
    "List of VcdVapp objects."
    nodes: [VcdVapp!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdVapp object. This wrapper is used for pagination."
type VcdVappEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdVapp object wrapped by this edge."
    node: VcdVapp!
}

"Paginated list of VcdVappLogicalChildType objects."
type VcdVappLogicalChildTypeConnection {
    "Total number of VcdVappLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VcdVappLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VcdVappLogicalChildTypeEdge!]!
    "List of VcdVappLogicalChildType objects."
    nodes: [VcdVappLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VcdVappLogicalChildType object. This wrapper is used for pagination."
type VcdVappLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VcdVappLogicalChildType object wrapped by this edge."
    node: VcdVappLogicalChildType!
}

"The connection state of vCenters that belong to the vCD."
type VcdVcenterConnectionState {
    "The connection status of the vCenter."
    status: RefreshableObjectConnectionStatus!
    "FID of the vCenter."
    vcenterId: UUID!
}

type VcdVimServer implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Information about the child virtual machines that belong to the vCD vApp."
type VcdVmInfo {
    "Specifies whether the virtual machine is excluded from the snapshot."
    isExcludedFromSnapshot: Boolean!
    "The vCD managed object ID of a child virtual machine of the vApp."
    vcdVmMoid: String!
    "Name of the virtual machine."
    vcdVmName: String!
}

"Reply Object for PreviewFilter."
type VcenterAdvancedTagPreviewReply {
    output: FilterPreviewResultListResponse
}

"Vcenter HotAdd Proxy VMs."
type VcenterHotAddProxyVmInfo {
    "Details of a cluster."
    cluster: Cluster!
    "Details of all proxy VMs in cluster."
    proxyVmInfo: HotAddProxyVmInfoListResponse!
}

"Supported in v5.0+"
type VcenterPatch {
    """

    Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
    """
    caCerts: String
    """

    Supported in v5.0+
    ID of the SLA Domain that is configured for this vCenter Server.
    """
    configuredSlaDomainId: String
}

"Supported in v6.0+"
type VcenterPreAddInfo {
    """

    Required. Supported in v6.0+
    List of compute clusters present in the vCenter, including the host groups each cluster contains.
    """
    clusterHostGroupInfo: [ClusterHostGroupInfo!]!
}

"Supported in v5.0+"
type VcenterSummary {
    """

    Supported in v6.0+
    Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.
    """
    computeVisibilityFilter: [ClusterVisibilityInfo!]!
    """

    Supported in v5.0+
    Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.
    """
    configuredSlaDomainPolarisManagedId: String
    conflictResolutionAuthz: VcenterSummaryConflictResolutionAuthz
    """

    Supported in v5.1+
    Connection status of a vCenter.
    """
    connectionStatus: RefreshableObjectConnectionStatus
    "Required. Supported in v5.0+"
    hostname: String!
    """

    Supported in v7.0+
    An optional field that specifies whether HotAdd transport mode is enabled for On-Premise vCenter. When this value is `true`, HotAdd transport mode is enabled for this vCenter. When this value is `false`, HotAdd transport mode is disabled for this vCenter. When this value is not specified, it indicates that this is an VMC vCenter.
    """
    isHotAddProxyEnabledForOnPremVcenter: Boolean
    """

    Supported in v5.1+
    A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.
    """
    isIoFilterInstalled: Boolean
    """

    Supported in v5.3+
    Indicates if the vCenter is a VMC instance.
    """
    isVmc: Boolean
    """

    Supported in v5.1+
    Optional field containing the last time that a vcenter was refreshed (either lite or full).
    """
    lastRefreshTime: DateTime
    slaAssignable: SlaAssignable
    "Required. Supported in v5.0+"
    username: String!
    vcenterPatch: VcenterPatch
    """

    Supported in v5.1+
    Version of vCenter.
    """
    version: String
}

type VerifySLAWithReplicationToClusterResp {
    isActiveSla: Boolean!
}

type VersionedFile {
    absolutePath: String!
    displayPath: String!
    fileVersions: [HierarchySnappableFileVersion!]!
    filename: String!
    path: String!
}

"Paginated list of VersionedFile objects."
type VersionedFileConnection {
    "Total number of VersionedFile objects matching the request arguments."
    count: Int!
    "List of VersionedFile objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VersionedFileEdge!]!
    "List of VersionedFile objects."
    nodes: [VersionedFile!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VersionedFile object. This wrapper is used for pagination."
type VersionedFileEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VersionedFile object wrapped by this edge."
    node: VersionedFile!
}

"Supported in v5.0+"
type VimserverSummary {
    """

    Required. Supported in v5.0+
    Connection status of a vCD Cluster object.
    """
    connectionStatus: VcdConnectionStatus
    """

    Required. Supported in v5.0+
    Hostname of a vCenter Server that is the target of a connection from a specified VimServer object.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    ID assigned to a VimServer object.
    """
    id: String!
    """

    Required. Supported in v5.0+
    Name of a VimServer object.
    """
    name: String!
    """

    Required. Supported in v5.0+
    ID assigned to a vCD Cluster object that contains a specified VimServer object.
    """
    vcdClusterId: String!
    """

    Required. Supported in v5.0+
    Name of a vCD Cluster object that contains a specified VimServer object.
    """
    vcdClusterName: String!
    """

    Supported in v5.0+
    ID assigned to a vCenter Server object that is attached to a specified VimServer object.
    """
    vcenterId: String
}

"Supported in v5.0+"
type VimserverSummaryListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [VimserverSummary!]!
    "Specifies if there are more matching objects."
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type VirtualMachineScriptDetail {
    failureHandling: VirtualMachineScriptDetailFailureHandling!
    """

    Required. Supported in v5.0+
    The command to be run in VM guest OS.
    """
    scriptPath: String!
    """

    Required. Supported in v5.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"Supported in v5.0+"
type VirtualMachineSummary {
    "Supported in v7.0+"
    advancedSummary: AdvancedVirtualMachineSummary
    """

    Supported in v5.0+
    The status of the Rubrik Backup Service agent for virtual machines.
    """
    agentStatus: CdmAgentStatus
    """

    Supported in v5.0+
    Cloud instantiation specification for the selected virtual machine.
    """
    cloudInstantiationSpec: CloudInstantiationSpec
    "Supported in v5.0+"
    clusterName: String
    """

    Required. Supported in v5.0+
    Brief info of all the objects in the folder path to this VM.
    """
    folderPath: [VmPathPoint!]!
    """

    Required. Supported in v5.0+
    Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.
    """
    guestCredentialAuthorizationStatus: String!
    "Supported in v5.0+"
    guestOsName: String
    "Supported in v5.0+"
    hostId: String
    "Supported in v5.0+"
    hostName: String
    """

    Required. Supported in v5.0+
    Brief info of all the objects in the infrastructure path to this VM.
    """
    infraPath: [VmPathPoint!]!
    "Required. Supported in v5.0+"
    ipAddress: String!
    "Required. Supported in v5.0+"
    isRelic: Boolean!
    "Required. Supported in v5.0+"
    isReplicationEnabled: Boolean!
    "Required. Supported in v5.0+"
    moid: String!
    """

    Supported in v5.0+
    Configuration information for the vApp that manages a specified virtual machine.
    """
    parentAppInfo: ParentAppInfo
    """

    Supported in v5.0+
    The power status of VM(ON,OFF,SLEEP etc.).
    """
    powerStatus: String
    "Supported in v5.0+"
    protectionDate: DateTime
    snappable: CdmWorkload
    snapshotConsistencyMandate: VirtualMachineSummarySnapshotConsistencyMandate!
    "Supported in v5.0+"
    toolsInstalled: Boolean
    "Supported in v5.0+"
    vcenterId: String
    "Required. Supported in v5.0+"
    vmwareToolsInstalled: Boolean!
}

"Supported in v5.0+"
type VlanConfig {
    """

    Required. Supported in v5.0+
    Network interfaces for each node.
    """
    interfaces: [NodeIp!]!
    """

    Required. Supported in v5.0+
    Netmask for addresses on this VLAN.
    """
    netmask: String!
    "Required. Supported in v5.0+"
    vlan: Int!
}

"Supported in v5.0+"
type VlanConfigListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [VlanConfig!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Vm Application Consistency Specs Info"
type VmAppConsistentSpecsInternal {
    "Specifies whether to cancel backup if the pre-snapshot script fails."
    cancelBackupIfPreScriptFails: Boolean!
    "Pre-snapshot script timeout in seconds."
    postScriptTimeoutInSeconds: Int!
    "Path for the script to be run after taking snapshot."
    postSnapshotScriptPath: String!
    "Timeout value in seconds for the pre snapshot script."
    preScriptTimeoutInSeconds: Int!
    "Path for the script to be run before taking snapshot."
    preSnapshotScriptPath: String!
    "Rubrik Backup Service status."
    rbaStatus: CloudNativeRbaStatusType!
}

type VmDatastore {
    datastoreId: String!
    datastoreName: String!
}

type VmDiskMapEntry {
    sourceDatastore: VmDatastore
    sourceVmDiskId: String!
    targetDiskId: String!
    targetDiskNativeId: String!
    targetIsOsDisk: Boolean!
    targetLogicalSize: Long!
    targetSnapshotId: String!
}

type VmHost {
    hostId: String!
    hostName: String!
    vcenterId: String!
    vcenterName: String!
}

type VmNic {
    nicId: String!
    nicMoid: String!
    nicName: String!
}

type VmNicMapEntry {
    sourceNic: VmNic
    sourceNicAdapterType: String!
    sourceNicId: String!
    targetNicId: String!
}

"Supported in v5.0+"
type VmPathPoint {
    """

    Required. Supported in v5.0+
    ID of the object.
    """
    id: String!
    """

    Required. Supported in v5.0+
    (Deprecated) - See **id**.
    """
    managedId: String!
    """

    Required. Supported in v5.0+
    Name of the object.
    """
    name: String!
}

"Vmware app metadata for a snapshot."
type VmwareAppMetadata {
    "The VM configuration."
    vmConfig: VmwareSnapshotVmConfig
}

"Supported in v5.1+"
type VmwareCdpLiveInfo {
    """

    Supported in v5.1+
    The time on this node. Computed after computing the live CDP info for the virtual machine.
    """
    currentTime: DateTime
    """

    Supported in v5.1+
    The latest time to which this virtual machine can be recovered locally.
    """
    localRecoveryPoint: DateTime
    """

    Supported in v5.1+
    The latest time to which this virtual machine can be recovered on a remote cluster.
    """
    remoteRecoveryPoint: DateTime
    """

    Required. Supported in v5.1+
    The ID of the virtual machine that we are getting CDP live fields for.
    """
    vmId: String!
}

"Supported in v5.3+"
type VmwareCdpStateInfo {
    """

    Supported in v5.3+
    The percentage of healthy time over all CDP-enabled time over the last 24 hours. Range from 0.0 to 100.0 .
    """
    healthPercentage: Float
    localStatus: CdpLocalStatus
    replicationStatus: CdpReplicationStatus
    """

    Required. Supported in v5.3+
    The ID of the virtual machine for which the cluster is retrieving CDP state information.
    """
    vmId: String!
}

"Supported in v5.3+"
type VmwareDatastoreFreespaceThreshold {
    "Required. Supported in v5.3+"
    threshold: Float!
    "Supported in v5.3+"
    vmId: String
}

"Supported in v5.0+"
type VmwareHostDetail {
    "Supported in v5.0+"
    computeClusterId: String
    "Supported in v5.0+"
    datacenter: DataCenterSummary
    "Supported in v5.0+"
    datastores: [DataStoreSummary!]!
    "Supported in v5.0+"
    moid: String
    "Supported in v5.0+"
    virtualMachines: [VirtualMachineSummary!]!
    vmwareHostSummary: VmwareHostSummary
    vmwareHostUpdate: VmwareHostUpdate
}

"Supported in v5.0+"
type VmwareHostSummary {
    "Supported in v5.0+"
    computeClusterId: String
    "Supported in v5.0+"
    datacenterId: String
    "Supported in v5.0+"
    datastores: [DataStoreSummary!]!
    "Supported in v5.0"
    effectiveSlaDomainId: String
    "Supported in v5.0"
    effectiveSlaDomainName: String
    """

    Supported in v5.0
    Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Supported in v5.0
    ID of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.0
    Name of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.1+
    API Version of the ESXi Host.
    """
    esxiVersion: String
    ioFilterStatus: HostFilterStatus
    ioFilterUiStatus: HostUiFilterStatus
    "Supported in v5.3+"
    isInVmc: Boolean
    slaAssignable: SlaAssignable
}

"Supported in v5.0+"
type VmwareHostUpdate {
    """

    Supported in v5.0+
    v5.0-v5.1: ID of the SLA Domain that is configured for this ESXi hypervisor.
    v5.2-v5.3: ID of the SLA Domain that is configured for this ESXi hypervisor. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    v6.0+: ID of the SLA Domain that is configured for this ESXi hypervisor. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
}

"VM Network configuration."
type VmwareNetworkConfig {
    "The list of network adaptors."
    nics: [VmwareNetworkDeviceInfo!]!
}

"Vmware Network Device Info."
type VmwareNetworkDeviceInfo {
    "The key of the device."
    key: Int!
    "The name of the device."
    name: String!
}

"Supported in v5.1+"
type VmwareRecoverableRange {
    "Supported in v5.1+"
    beginTime: DateTime
    "Supported in v5.1+"
    endTime: DateTime
}

type VmwareRecoveryPoints {
    localRecoveryPoint: DateTime
    remoteRecoveryPoint: DateTime
}

type VmwareRecoveryState {
    healthPercentage: Float!
    localStatus: CdpLocalStatus!
    replicationStatus: CdpReplicationStatus!
}

type VmwareResourceSpec implements ResourceSpec {
    isArchived: Boolean!
    memoryMbs: Int!
    osType: String!
    "Recovery point of the workload."
    recoveryPointOpt: Long
    snappableId: String!
    snappableName: String!
    snapshotId: String!
    vCpus: Int!
    vmWareVolumeSpecs: [VmwareVirtualMachineVolume!]!
    vmwareNics: [VmwareVirtualMachineNic!]!
}

"VM configuration for a snapshot."
type VmwareSnapshotVmConfig {
    "The network configuration."
    networkConfig: VmwareNetworkConfig!
}

type VmwareVirtualMachineNic {
    deviceLabel: String!
    key: Int!
    networkLabel: String!
    v4Addresses: [String!]!
}

type VmwareVirtualMachineVolume {
    capacityKbs: Long!
    key: Int!
    label: String!
}

type VmwareVmConfig {
    logRetentionSeconds: Long!
}

"Supported in v5.0+"
type VmwareVmMountSummaryV1 {
    """

    Supported in v5.0+
    An integer value that identifies how many disks are attached.
    """
    attachingDiskCount: Int
    """

    Supported in v5.0+
    This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.
    """
    createDatastoreOnlyMount: Boolean
    """

    Supported in v5.0+
    The name of the datastore that contains the mounted VMDK.
    """
    datastoreName: String
    """

    Supported in v5.0+
    A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.
    """
    datastoreReady: Boolean
    """

    Supported in v5.0+
    A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.
    """
    hasAttachingDisk: Boolean
    "Supported in v5.0+"
    hostId: String
    "Required. Supported in v5.0+"
    id: String!
    "Required. Supported in v5.0+"
    isReady: Boolean!
    "Supported in v5.0+"
    mountRequestId: String
    """

    Supported in v5.0+
    Gives the timestamp at which the mount was created.
    """
    mountTimestamp: DateTime
    "Supported in v5.0+"
    mountedVmId: String
    "Required. Supported in v5.0+"
    snapshotDate: DateTime
    "Supported in v5.0+"
    unmountRequestId: String
    "Required. Supported in v5.0+"
    vmId: String!
}

"Supported in v5.3+"
type VmwareVmRecoverableRanges {
    """

    Required. Supported in v5.3+
    The recoverable ranges for the virtual machine.
    """
    recoverableRanges: [VmwareRecoverableRange!]!
    """

    Required. Supported in v5.3+
    The ID of the virtual machine for which to retrieve recoverable ranges.
    """
    vmId: String!
}

type Vnet {
    id: String!
    name: String!
    regionName: String!
    resourceGroup: ResourceGroup
}

"Paginated list of Vnet objects."
type VnetConnection {
    "Total number of Vnet objects matching the request arguments."
    count: Int!
    "List of Vnet objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VnetEdge!]!
    "List of Vnet objects."
    nodes: [Vnet!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Vnet object. This wrapper is used for pagination."
type VnetEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Vnet object wrapped by this edge."
    node: Vnet!
}

"Volume group for a host."
type VolumeGroup implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "CDM ID of the volume group."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "List of snapshots taken for a Volume Group."
    cdmSnapshots(
        "Filter CDM snapshots."
        CdmSnapshotFilter: [CdmSnapshotFilter!],
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmWorkloadSnapshotConnection!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Whether the volume group is a relic."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Volumes in the volume group."
    volumes: [String!]!
}

"Paginated list of VolumeGroup objects."
type VolumeGroupConnection {
    "Total number of VolumeGroup objects matching the request arguments."
    count: Int!
    "List of VolumeGroup objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VolumeGroupEdge!]!
    "List of VolumeGroup objects."
    nodes: [VolumeGroup!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VolumeGroup object. This wrapper is used for pagination."
type VolumeGroupEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VolumeGroup object wrapped by this edge."
    node: VolumeGroup!
}

"Volume group live mount."
type VolumeGroupLiveMount {
    "Operations that the user is authorized to perform."
    authorizedOperations: AuthorizedOperations!
    "Cluster of the live mount."
    cluster: Cluster!
    "Fid of the live mount."
    id: String!
    "Describes if the live mount is ready."
    isReady: Boolean!
    "Path where the live mount is mounted."
    mountPath: String
    "Id of the mount request."
    mountRequestId: String
    "Timestamp when the mount was created."
    mountTimestamp: DateTime
    "Mounted volumes in the live mount."
    mountedVolumes: [MountedVolume!]!
    "Name of the live mount."
    name: String!
    "Composite Id of the node in the live mount."
    nodeCompositeId: String
    "IP of the node in the live mount."
    nodeIp: String
    "Path of the bare-metal restore script."
    restoreScriptPath: String
    "Name of SMB share."
    smbShareName: String
    "Source host of the live mount."
    sourceHost: PhysicalHost!
    "Source snapshot of the live mount."
    sourceSnapshot: CdmSnapshot!
    "Id of the source volume group in the live mount."
    sourceVolumeGroupId: String!
    "Id of the target host."
    targetHostId: String
    "Name of the target host."
    targetHostName: String
    "Id of the unmount request."
    unmountRequestId: String
}

"Paginated list of VolumeGroupLiveMount objects."
type VolumeGroupLiveMountConnection {
    "Total number of VolumeGroupLiveMount objects matching the request arguments."
    count: Int!
    "List of VolumeGroupLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VolumeGroupLiveMountEdge!]!
    "List of VolumeGroupLiveMount objects."
    nodes: [VolumeGroupLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VolumeGroupLiveMount object. This wrapper is used for pagination."
type VolumeGroupLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VolumeGroupLiveMount object wrapped by this edge."
    node: VolumeGroupLiveMount!
}

"Supported in v5.0+"
type VolumeGroupSnapshotVolumeSummary {
    fileSystemType: FileSystemType!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The unique ID of the snapshot volume summary.
    """
    id: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Mount point locations of this Volume on the Host
    v5.3+: The mount points of the volume on the host.
    """
    mountPoints: [String!]!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Size of the Volume in bytes
    v5.3+: The size of the volume in bytes.
    """
    size: Long!
}

"A volume captured in a volume group snapshot."
type VolumeGroupSubObject {
    "Capacity of the volume in bytes."
    capacityInBytes: Long!
    "File size of the volume in bytes."
    fileSizeInBytes: Long!
    "File system type of the volume."
    fileSystemType: String!
    "Mount point for the volume."
    mountPointsOpt: [String!]!
    "ID of the volume."
    volumeId: String!
}

"Supported in v5.0+"
type VolumeGroupSummary {
    """

    Supported in v5.3+
    Specifies whether the Volume Group is set to take a full snapshot for the next backup.
    """
    forceFull: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: Id of the host of the volume group
    v5.3+: The unique ID of the host that contains the Volume Group.
    """
    hostId: String
    """

    Supported in v5.0+
    v5.0-v5.2: IP Address or fully qualified domain name with which the host was added
    v5.3+: The name of the host that contains the Volume Group.
    """
    hostname: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The unique ID of the Volume Group.
    """
    id: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Whether this Volume Group is currently accessible on the host
    v5.3+: Specifies whether the Volume Group is accessible on the Rubrik cluster.
    """
    isRelic: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The name of the Volume Group.
    """
    name: String!
    """

    Supported in v5.3+
    Specifies whether the Volume Group needs to be migrated in order to use the fast VHDX builder. This flag is set only when the Volume Group's last backup job failed due to an error during data fetch, and the backup job did not use the fast VHDX builder.
    """
    needsMigration: Boolean
    snappable: CdmWorkload
}

type Vpc {
    cidrBlock: AddressBlockV4
    id: String!
    name: String!
    vpcId: String!
}

"Paginated list of Vpc objects."
type VpcConnection {
    "Total number of Vpc objects matching the request arguments."
    count: Int!
    "List of Vpc objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VpcEdge!]!
    "List of Vpc objects."
    nodes: [Vpc!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Vpc object. This wrapper is used for pagination."
type VpcEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Vpc object wrapped by this edge."
    node: Vpc!
}

"The status of the async CDM request."
type VsphereAsyncRequestStatus {
    endTime: DateTime!
    error: VsphereRequestErrorInfo
    id: String!
    links: [VsphereLink!]!
    nodeId: String!
    progress: Float!
    startTime: DateTime!
    status: String!
}

type VsphereBlueprintChildFailoverInstance implements BlueprintFailoverInstance {
    failoverInstance: AwsEc2Instance!
    snappableId: String!
}

type VsphereBlueprintChildSnapshotInfo {
    host: VmHost
    memoryMbs: Int!
    nicMap: [VmNicMapEntry!]!
    osType: String!
    snapshotAppMetadata: String!
    snapshotId: String!
    vcpus: Int!
    volumeMap: [VmDiskMapEntry!]!
}

type VsphereBlueprintNew implements BlueprintNew & HierarchyObject {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Blueprint recovery count."
    blueprintRecoveryCount: BlueprintRecoveryCount
    "Blueprint recovery type."
    blueprintRecoveryType: BlueprintRecoveryType
    "The list of child objects in the workload."
    childConnection: BlueprintChildConnection!
    children: [VSphereVmChild!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Flag to enable hydration."
    enableHydrationOpt: Boolean
    "The FID of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    "Flag to enable visibility of Cyber Recovery Blueprint."
    isBlueprintVisible: Boolean
    "Status of hydration enablement."
    isHydrationEnabled: Boolean
    "Last failover source location."
    lastFailoverSource: String
    lastFailoverStatus: BlueprintFailoverStatus!
    "Last failover time."
    lastFailoverTime: DateTime
    lastFailoverTimeOpt: DateTime
    "Status of the last isolated recovery."
    lastIsolatedRecoveryStatus: BlueprintFailoverStatus!
    "Last isolated recovery time."
    lastIsolatedRecoveryTime: DateTime
    "Last isolated recovery time."
    lastIsolatedRecoveryTimeOpt: DateTime
    "Status of the last local recovery."
    lastLocalRecoveryStatus: BlueprintFailoverStatus!
    "Last local recovery time."
    lastLocalRecoveryTime: DateTime
    "Last local recovery time."
    lastLocalRecoveryTimeOpt: DateTime
    lastTestFailoverStatus: BlueprintFailoverStatus!
    "Last test failover time."
    lastTestFailoverTime: DateTime
    lastTestFailoverTimeOpt: DateTime
    latestFailover: BlueprintFailover
    "Details of the local blueprint RPO lag."
    localRpoLagInfo: RpoLagInfo
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Number of child workloads of the Blueprint."
    numChildren: Int!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    platform: BlueprintPlatform!
    "The recovery ranges of the blueprint"
    recoveryInfo(
        "The Rubrik cluster ID."
        clusterUuid: UUID
    ): BlueprintRecoveryRanges
    "Information about the remote RPO lag for the Blueprint."
    remoteRpoLagInfo: RpoLagInfo
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "The source location from which this object originated."
    sourceLocation: BlueprintLocation
    status: BlueprintStatus!
    "The target location to which the object failed over."
    targetLocation: BlueprintLocation
    "A list of numbers representing the length of time, in minutes, to pause between each priority group during recovery. The numbers are ordered to align with the order of the priority groups. For example, consider a Blueprint with 3 priority groups. For this Blueprint, a value of [5,10,0] implies that there is a 5-minute pause between the 1st and 2nd priority groups and a 10-minute pause between the 2nd and 3rd priority groups. The last value in the list is always 0."
    timeoutBetweenPriorityGroups: [Long!]
    version: Int!
}

type VsphereComputeCluster implements CdmHierarchyObject & HierarchyObject & VsphereDatacenterDescendantType & VsphereDatacenterPhysicalChildType & VsphereVcenterDescendantType & VsphereVcenterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereComputeClusterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "This vsphere computer cluster's IOFilter status can be Uninstalled or Installed."
    ioFilterStatus: String!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereComputeClusterPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VsphereComputeCluster objects."
type VsphereComputeClusterConnection {
    "Total number of VsphereComputeCluster objects matching the request arguments."
    count: Int!
    "List of VsphereComputeCluster objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereComputeClusterEdge!]!
    "List of VsphereComputeCluster objects."
    nodes: [VsphereComputeCluster!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of VsphereComputeClusterDescendantType objects."
type VsphereComputeClusterDescendantTypeConnection {
    "Total number of VsphereComputeClusterDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereComputeClusterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereComputeClusterDescendantTypeEdge!]!
    "List of VsphereComputeClusterDescendantType objects."
    nodes: [VsphereComputeClusterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereComputeClusterDescendantType object. This wrapper is used for pagination."
type VsphereComputeClusterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereComputeClusterDescendantType object wrapped by this edge."
    node: VsphereComputeClusterDescendantType!
}

"Wrapper around the VsphereComputeCluster object. This wrapper is used for pagination."
type VsphereComputeClusterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereComputeCluster object wrapped by this edge."
    node: VsphereComputeCluster!
}

"Paginated list of VsphereComputeClusterPhysicalChildType objects."
type VsphereComputeClusterPhysicalChildTypeConnection {
    "Total number of VsphereComputeClusterPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereComputeClusterPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereComputeClusterPhysicalChildTypeEdge!]!
    "List of VsphereComputeClusterPhysicalChildType objects."
    nodes: [VsphereComputeClusterPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereComputeClusterPhysicalChildType object. This wrapper is used for pagination."
type VsphereComputeClusterPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereComputeClusterPhysicalChildType object wrapped by this edge."
    node: VsphereComputeClusterPhysicalChildType!
}

type VsphereDatacenter implements CdmHierarchyObject & HierarchyObject & VsphereVcenterDescendantType & VsphereVcenterLogicalChildType & VsphereVcenterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereDatacenterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereDatacenterLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereDatacenterPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VsphereDatacenterDescendantType objects."
type VsphereDatacenterDescendantTypeConnection {
    "Total number of VsphereDatacenterDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereDatacenterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatacenterDescendantTypeEdge!]!
    "List of VsphereDatacenterDescendantType objects."
    nodes: [VsphereDatacenterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereDatacenterDescendantType object. This wrapper is used for pagination."
type VsphereDatacenterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatacenterDescendantType object wrapped by this edge."
    node: VsphereDatacenterDescendantType!
}

"Paginated list of VsphereDatacenterLogicalChildType objects."
type VsphereDatacenterLogicalChildTypeConnection {
    "Total number of VsphereDatacenterLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereDatacenterLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatacenterLogicalChildTypeEdge!]!
    "List of VsphereDatacenterLogicalChildType objects."
    nodes: [VsphereDatacenterLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereDatacenterLogicalChildType object. This wrapper is used for pagination."
type VsphereDatacenterLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatacenterLogicalChildType object wrapped by this edge."
    node: VsphereDatacenterLogicalChildType!
}

"Paginated list of VsphereDatacenterPhysicalChildType objects."
type VsphereDatacenterPhysicalChildTypeConnection {
    "Total number of VsphereDatacenterPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereDatacenterPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatacenterPhysicalChildTypeEdge!]!
    "List of VsphereDatacenterPhysicalChildType objects."
    nodes: [VsphereDatacenterPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereDatacenterPhysicalChildType object. This wrapper is used for pagination."
type VsphereDatacenterPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatacenterPhysicalChildType object wrapped by this edge."
    node: VsphereDatacenterPhysicalChildType!
}

"Vsphere datastore."
type VsphereDatastore implements CdmHierarchyObject & HierarchyObject & VsphereComputeClusterDescendantType & VsphereDatacenterDescendantType & VsphereDatastoreClusterDescendantType & VsphereDatastoreClusterPhysicalChildType & VsphereHostDescendantType & VsphereResourcePoolDescendantType & VsphereVcenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    capacity: Long!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    datastoreType: String!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    freeSpace: Long!
    "Object ID."
    id: UUID!
    isLocal: Boolean!
    "Indicates whether the datastore is standalone or not."
    isStandaloneDatastore: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Vsphere datastore cluster."
type VsphereDatastoreCluster implements CdmHierarchyObject & HierarchyObject & VsphereComputeClusterDescendantType & VsphereDatacenterDescendantType & VsphereDatacenterPhysicalChildType & VsphereHostDescendantType & VsphereResourcePoolDescendantType & VsphereVcenterDescendantType & VsphereVcenterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Datastore cluster resources - total capacity, in terrabytes."
    capacity: Long!
    "Cdm ID of the vSphere datastore cluster."
    cdmId: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereDatastoreClusterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Datastore cluster resources - total available free space, in terrabytes."
    freeSpace: Long!
    "Datastore cluster ID."
    id: UUID!
    "Indicates whether the storage DRS automation is enabled."
    isSdrsEnabled: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereDatastoreClusterPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "Vcenter ID."
    vcenterId: UUID!
}

"Paginated list of VsphereDatastoreCluster objects."
type VsphereDatastoreClusterConnection {
    "Total number of VsphereDatastoreCluster objects matching the request arguments."
    count: Int!
    "List of VsphereDatastoreCluster objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatastoreClusterEdge!]!
    "List of VsphereDatastoreCluster objects."
    nodes: [VsphereDatastoreCluster!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of VsphereDatastoreClusterDescendantType objects."
type VsphereDatastoreClusterDescendantTypeConnection {
    "Total number of VsphereDatastoreClusterDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereDatastoreClusterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatastoreClusterDescendantTypeEdge!]!
    "List of VsphereDatastoreClusterDescendantType objects."
    nodes: [VsphereDatastoreClusterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereDatastoreClusterDescendantType object. This wrapper is used for pagination."
type VsphereDatastoreClusterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatastoreClusterDescendantType object wrapped by this edge."
    node: VsphereDatastoreClusterDescendantType!
}

"Wrapper around the VsphereDatastoreCluster object. This wrapper is used for pagination."
type VsphereDatastoreClusterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatastoreCluster object wrapped by this edge."
    node: VsphereDatastoreCluster!
}

"Paginated list of VsphereDatastoreClusterPhysicalChildType objects."
type VsphereDatastoreClusterPhysicalChildTypeConnection {
    "Total number of VsphereDatastoreClusterPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereDatastoreClusterPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatastoreClusterPhysicalChildTypeEdge!]!
    "List of VsphereDatastoreClusterPhysicalChildType objects."
    nodes: [VsphereDatastoreClusterPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereDatastoreClusterPhysicalChildType object. This wrapper is used for pagination."
type VsphereDatastoreClusterPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatastoreClusterPhysicalChildType object wrapped by this edge."
    node: VsphereDatastoreClusterPhysicalChildType!
}

"Paginated list of VsphereDatastore objects."
type VsphereDatastoreConnection {
    "Total number of VsphereDatastore objects matching the request arguments."
    count: Int!
    "List of VsphereDatastore objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereDatastoreEdge!]!
    "List of VsphereDatastore objects."
    nodes: [VsphereDatastore!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereDatastore object. This wrapper is used for pagination."
type VsphereDatastoreEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereDatastore object wrapped by this edge."
    node: VsphereDatastore!
}

type VsphereFolder implements CdmHierarchyObject & HierarchyObject & VsphereDatacenterDescendantType & VsphereDatacenterLogicalChildType & VsphereFolderDescendantType & VsphereFolderLogicalChildType & VsphereVcenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereFolderDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereFolderLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VsphereFolderDescendantType objects."
type VsphereFolderDescendantTypeConnection {
    "Total number of VsphereFolderDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereFolderDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereFolderDescendantTypeEdge!]!
    "List of VsphereFolderDescendantType objects."
    nodes: [VsphereFolderDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereFolderDescendantType object. This wrapper is used for pagination."
type VsphereFolderDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereFolderDescendantType object wrapped by this edge."
    node: VsphereFolderDescendantType!
}

"Paginated list of VsphereFolderLogicalChildType objects."
type VsphereFolderLogicalChildTypeConnection {
    "Total number of VsphereFolderLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereFolderLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereFolderLogicalChildTypeEdge!]!
    "List of VsphereFolderLogicalChildType objects."
    nodes: [VsphereFolderLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereFolderLogicalChildType object. This wrapper is used for pagination."
type VsphereFolderLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereFolderLogicalChildType object wrapped by this edge."
    node: VsphereFolderLogicalChildType!
}

type VsphereHost implements CdmHierarchyObject & HierarchyObject & VsphereComputeClusterDescendantType & VsphereComputeClusterPhysicalChildType & VsphereDatacenterDescendantType & VsphereDatacenterPhysicalChildType & VsphereVcenterDescendantType & VsphereVcenterPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereHostDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "This vsphere host's IOFilter status can be Uninstalled or Installed."
    ioFilterStatus: String!
    isStandaloneHost: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereHostPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VsphereHost objects."
type VsphereHostConnection {
    "Total number of VsphereHost objects matching the request arguments."
    count: Int!
    "List of VsphereHost objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereHostEdge!]!
    "List of VsphereHost objects."
    nodes: [VsphereHost!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of VsphereHostDescendantType objects."
type VsphereHostDescendantTypeConnection {
    "Total number of VsphereHostDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereHostDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereHostDescendantTypeEdge!]!
    "List of VsphereHostDescendantType objects."
    nodes: [VsphereHostDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereHostDescendantType object. This wrapper is used for pagination."
type VsphereHostDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereHostDescendantType object wrapped by this edge."
    node: VsphereHostDescendantType!
}

"Wrapper around the VsphereHost object. This wrapper is used for pagination."
type VsphereHostEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereHost object wrapped by this edge."
    node: VsphereHost!
}

"Paginated list of VsphereHostPhysicalChildType objects."
type VsphereHostPhysicalChildTypeConnection {
    "Total number of VsphereHostPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereHostPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereHostPhysicalChildTypeEdge!]!
    "List of VsphereHostPhysicalChildType objects."
    nodes: [VsphereHostPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereHostPhysicalChildType object. This wrapper is used for pagination."
type VsphereHostPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereHostPhysicalChildType object wrapped by this edge."
    node: VsphereHostPhysicalChildType!
}

"A link with href and rel properties."
type VsphereLink {
    "Destination of link."
    href: String!
    "Relation of this link's destination to the current resource."
    rel: String!
}

"Live Mount of a vSphere Virtual Machine."
type VsphereLiveMount {
    "Attaching disk count of the Live Mount."
    attachingDiskCount: Int!
    "CDM ID of the vSphere Live Mount."
    cdmId: String!
    "Cluster id of the vSphere Live Mount."
    cluster: Cluster!
    "Whether or not the mount has an attaching disk."
    hasAttachingDisk: Boolean!
    "Host of the vSphere Live Mount."
    host: VsphereHost
    "ID of the vSphere Live Mount."
    id: String!
    "Ready status of the vSphere Live Mount."
    isReady: Boolean!
    "Migrate datastore request id of the vSphere Live Mount."
    migrateDatastoreRequestId: String!
    "Mount timestamp of the vSphere Live Mount."
    mountTimestamp: DateTime
    "New Virtual Machine of the vSphere Live Mount."
    mountedVm: VsphereVm
    "Name of the vSphere Live Mount."
    newVmName: String
    "Source snapshot of the vSphere Live Mount."
    sourceSnapshot: CdmSnapshot
    "Source Virtual Machine of the vSphere Live Mount."
    sourceVm: VsphereVm
    "Vcenter ID of the Live Mount."
    vcenterId: String!
    "Status of the vSphere Live Mount."
    vmStatus: VsphereLiveMountStatus!
}

"Paginated list of VsphereLiveMount objects."
type VsphereLiveMountConnection {
    "Total number of VsphereLiveMount objects matching the request arguments."
    count: Int!
    "List of VsphereLiveMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereLiveMountEdge!]!
    "List of VsphereLiveMount objects."
    nodes: [VsphereLiveMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereLiveMount object. This wrapper is used for pagination."
type VsphereLiveMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereLiveMount object wrapped by this edge."
    node: VsphereLiveMount!
}

"Mount of vSphere virtual machine."
type VsphereMount {
    attachingDiskCount: Int
    authorizedOperations: AuthorizedOperations!
    cdmId: String!
    cluster: Cluster!
    clusterName: String!
    hasAttachingDisk: Boolean
    host: VsphereHost
    id: UUID!
    isReady: Boolean!
    migrateDatastoreRequestId: String
    mountRequestId: String
    mountTimestamp: DateTime
    newVm: VsphereVm
    newVmName: String
    sourceSnapshot: CdmSnapshot
    sourceVm: VsphereVm
    status: VsphereMountStatus!
    unmountRequestId: String
}

"Paginated list of VsphereMount objects."
type VsphereMountConnection {
    "Total number of VsphereMount objects matching the request arguments."
    count: Int!
    "List of VsphereMount objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereMountEdge!]!
    "List of VsphereMount objects."
    nodes: [VsphereMount!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereMount object. This wrapper is used for pagination."
type VsphereMountEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereMount object wrapped by this edge."
    node: VsphereMount!
}

type VsphereNetwork implements CdmHierarchyObject & HierarchyObject & VsphereComputeClusterDescendantType & VsphereHostDescendantType & VsphereResourcePoolDescendantType & VsphereVcenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"The compute target for vSphere recovery."
type VsphereRecoveryComputeTarget {
    "The ID of the target resource pool selected for recovery."
    computeClusterId: String!
    "The target resource pool selected for recovery."
    computeClusterName: String!
    "The ID of the data center to which the target compute cluster belongs."
    datacenterId: String!
    "The data center to which the target compute cluster belongs."
    datacenterName: String!
    "The ID of the target ESXi host selected for recovery."
    hostId: String!
    "The target ESXi host selected for recovery."
    hostName: String!
    "The ID of the target resource pool selected for recovery."
    resourcePoolId: String!
    "The target resource pool selected for recovery."
    resourcePoolName: String!
    "The ID of the target compute cluster selected for recovery."
    vCenterId: String!
    "The name of the target compute cluster selected for recovery."
    vCenterName: String!
}

"The vSphere recovery specification."
type VsphereRecoverySpec implements RecoverySpec {
    "If true, recovery will only preserve the original MAC address for the new virtual machine when network preservation is enabled."
    enableMacPreserveOnly: Boolean
    "If true, recovery will use the original network configuration for the new virtual machine."
    enableNetworkPreserve: Boolean
    "The amount of memory, in megabytes, to assign to the recovered virtual machine."
    memoryMbs: Int!
    "Recovery point of the workload."
    recoveryPointOpt: Long
    "Recovery compute target resource configuration."
    target: VsphereRecoveryComputeTarget!
    "The script to be run on the recovered virtual machine after reboot."
    userData: String
    "The number of vCPUs to assign to the recovered virtual machine."
    vCpus: Int!
    "Network configuration for the recovered virtual machine."
    vSphereNicSpecs: [VSphereVMNicSpec!]!
    "Data volume configuration for the recovered virtual machine."
    vSphereVolumeSpecs: [VSphereVMVolumeSpec!]!
    "The version of the recovery specification."
    version: Long!
}

"Contains error information for a CDM response."
type VsphereRequestErrorInfo {
    message: String!
}

type VsphereResourcePool implements CdmHierarchyObject & HierarchyObject & VsphereComputeClusterDescendantType & VsphereComputeClusterPhysicalChildType & VsphereDatacenterDescendantType & VsphereHostDescendantType & VsphereHostPhysicalChildType & VsphereResourcePoolDescendantType & VsphereResourcePoolPhysicalChildType & VsphereVcenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereResourcePoolDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereResourcePoolPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of VsphereResourcePoolDescendantType objects."
type VsphereResourcePoolDescendantTypeConnection {
    "Total number of VsphereResourcePoolDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereResourcePoolDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereResourcePoolDescendantTypeEdge!]!
    "List of VsphereResourcePoolDescendantType objects."
    nodes: [VsphereResourcePoolDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereResourcePoolDescendantType object. This wrapper is used for pagination."
type VsphereResourcePoolDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereResourcePoolDescendantType object wrapped by this edge."
    node: VsphereResourcePoolDescendantType!
}

"Paginated list of VsphereResourcePoolPhysicalChildType objects."
type VsphereResourcePoolPhysicalChildTypeConnection {
    "Total number of VsphereResourcePoolPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereResourcePoolPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereResourcePoolPhysicalChildTypeEdge!]!
    "List of VsphereResourcePoolPhysicalChildType objects."
    nodes: [VsphereResourcePoolPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereResourcePoolPhysicalChildType object. This wrapper is used for pagination."
type VsphereResourcePoolPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereResourcePoolPhysicalChildType object wrapped by this edge."
    node: VsphereResourcePoolPhysicalChildType!
}

type VsphereTag implements CdmHierarchyObject & HierarchyObject & VsphereTagCategoryDescendantType & VsphereTagCategoryTagChildType & VsphereVcenterDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "Conditional logic for the multi-tag filter."
    condition: String
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Specifies whether this tag is a multi-tag filter or a vSphere tag."
    isFilter: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "List of tag children."
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereTagTagChildTypeConnection!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VsphereTagCategory implements CdmHierarchyObject & HierarchyObject & VsphereVcenterDescendantType & VsphereVcenterTagChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Object ID."
    id: UUID!
    "Specifies whether the child tags are multi-tag filters or vSphere tags."
    isFilterCategory: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "List of tag children."
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereTagCategoryTagChildTypeConnection!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

"Paginated list of VsphereTagCategoryTagChildType objects."
type VsphereTagCategoryTagChildTypeConnection {
    "Total number of VsphereTagCategoryTagChildType objects matching the request arguments."
    count: Int!
    "List of VsphereTagCategoryTagChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereTagCategoryTagChildTypeEdge!]!
    "List of VsphereTagCategoryTagChildType objects."
    nodes: [VsphereTagCategoryTagChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereTagCategoryTagChildType object. This wrapper is used for pagination."
type VsphereTagCategoryTagChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereTagCategoryTagChildType object wrapped by this edge."
    node: VsphereTagCategoryTagChildType!
}

"Paginated list of VsphereTagTagChildType objects."
type VsphereTagTagChildTypeConnection {
    "Total number of VsphereTagTagChildType objects matching the request arguments."
    count: Int!
    "List of VsphereTagTagChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereTagTagChildTypeEdge!]!
    "List of VsphereTagTagChildType objects."
    nodes: [VsphereTagTagChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereTagTagChildType object. This wrapper is used for pagination."
type VsphereTagTagChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereTagTagChildType object wrapped by this edge."
    node: VsphereTagTagChildType!
}

type VsphereVcenter implements CdmHierarchyObject & HierarchyObject {
    aboutInfo: AboutInformation
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    caCerts: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The compute cluster visibility rules."
    computeVisibilityFilter: [ClusterVisibilityInfo!]!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    conflictResolutionAuthz: VcenterSummaryConflictResolutionAuthz
    connectionStatus: RefreshableObjectConnectionStatus!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereVcenterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The FID of the hierarchy object."
    id: UUID!
    "Is HotAdd enabled for this on-prem vCenter."
    isHotAddEnabledForOnPremVcenter: Boolean!
    "Flag to determine whether this vcenter is from VMC or not."
    isVmc: Boolean!
    lastRefreshTime: DateTime
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereVcenterLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "List of physical children."
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereVcenterPhysicalChildTypeConnection!
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "List of tag children."
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): VsphereVcenterTagChildTypeConnection!
    username: String!
    vcenterId: String!
    "The provider of VMC."
    vmcProvider: String
    vsphereTagPath: [PathNode!]!
}

"Paginated list of VsphereVcenter objects."
type VsphereVcenterConnection {
    "Total number of VsphereVcenter objects matching the request arguments."
    count: Int!
    "List of VsphereVcenter objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVcenterEdge!]!
    "List of VsphereVcenter objects."
    nodes: [VsphereVcenter!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Paginated list of VsphereVcenterDescendantType objects."
type VsphereVcenterDescendantTypeConnection {
    "Total number of VsphereVcenterDescendantType objects matching the request arguments."
    count: Int!
    "List of VsphereVcenterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVcenterDescendantTypeEdge!]!
    "List of VsphereVcenterDescendantType objects."
    nodes: [VsphereVcenterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereVcenterDescendantType object. This wrapper is used for pagination."
type VsphereVcenterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVcenterDescendantType object wrapped by this edge."
    node: VsphereVcenterDescendantType!
}

"Wrapper around the VsphereVcenter object. This wrapper is used for pagination."
type VsphereVcenterEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVcenter object wrapped by this edge."
    node: VsphereVcenter!
}

"Paginated list of VsphereVcenterLogicalChildType objects."
type VsphereVcenterLogicalChildTypeConnection {
    "Total number of VsphereVcenterLogicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereVcenterLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVcenterLogicalChildTypeEdge!]!
    "List of VsphereVcenterLogicalChildType objects."
    nodes: [VsphereVcenterLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereVcenterLogicalChildType object. This wrapper is used for pagination."
type VsphereVcenterLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVcenterLogicalChildType object wrapped by this edge."
    node: VsphereVcenterLogicalChildType!
}

"Paginated list of VsphereVcenterPhysicalChildType objects."
type VsphereVcenterPhysicalChildTypeConnection {
    "Total number of VsphereVcenterPhysicalChildType objects matching the request arguments."
    count: Int!
    "List of VsphereVcenterPhysicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVcenterPhysicalChildTypeEdge!]!
    "List of VsphereVcenterPhysicalChildType objects."
    nodes: [VsphereVcenterPhysicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereVcenterPhysicalChildType object. This wrapper is used for pagination."
type VsphereVcenterPhysicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVcenterPhysicalChildType object wrapped by this edge."
    node: VsphereVcenterPhysicalChildType!
}

"Paginated list of VsphereVcenterTagChildType objects."
type VsphereVcenterTagChildTypeConnection {
    "Total number of VsphereVcenterTagChildType objects matching the request arguments."
    count: Int!
    "List of VsphereVcenterTagChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVcenterTagChildTypeEdge!]!
    "List of VsphereVcenterTagChildType objects."
    nodes: [VsphereVcenterTagChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereVcenterTagChildType object. This wrapper is used for pagination."
type VsphereVcenterTagChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVcenterTagChildType object wrapped by this edge."
    node: VsphereVcenterTagChildType!
}

"Virtual disk of a vSphere virtual machine."
type VsphereVirtualDisk {
    cdmId: String!
    cdmVersion: String!
    clusterUuid: UUID!
    "The datastore that holds the virtual disk."
    datastoreFid: String
    deviceKey: Int
    excludeFromSnapshots: Boolean!
    fid: UUID!
    fileName: String!
    size: Long
    virtualMachineId: String!
}

"Paginated list of VsphereVirtualDisk objects."
type VsphereVirtualDiskConnection {
    "Total number of VsphereVirtualDisk objects matching the request arguments."
    count: Int!
    "List of VsphereVirtualDisk objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVirtualDiskEdge!]!
    "List of VsphereVirtualDisk objects."
    nodes: [VsphereVirtualDisk!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereVirtualDisk object. This wrapper is used for pagination."
type VsphereVirtualDiskEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVirtualDisk object wrapped by this edge."
    node: VsphereVirtualDisk!
}

type VsphereVm implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdOrgVdcDescendantType & VcdOrgVdcLogicalChildType & VcdTopLevelDescendantType & VcdVappDescendantType & VcdVappLogicalChildType & VsphereComputeClusterDescendantType & VsphereDatacenterDescendantType & VsphereFolderDescendantType & VsphereFolderLogicalChildType & VsphereHostDescendantType & VsphereHostPhysicalChildType & VsphereTagCategoryDescendantType & VsphereTagDescendantType & VsphereTagTagChildType & VsphereVcenterDescendantType {
    "Rubrik Backup Service (RBS) agent status on this virtual machine."
    agentStatus: AgentStatus
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "Whether array integration for this virtual machine is enabled."
    arrayIntegrationEnabled: Boolean!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the recovery plan when the virtual machine is a child of the recovery plan."
    blueprintId: String
    "Name of the Recovery Plan when the virtual machine is a child of the Recovery Plan."
    blueprintName: String
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of duplicated virtual machines."
    duplicatedVms: [DuplicatedVm!]!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Guest OS credentials authorization status."
    guestCredentialAuthorizationStatus: GuestCredentialAuthorizationStatus!
    guestOsName: String!
    "The Guest OS type of this virtual machine."
    guestOsType: GuestOsType!
    "Object ID."
    id: UUID!
    "Specifies whether the virtual machine is active or not."
    isActive: Boolean!
    "If Virtual Machine integration with storage array is possible."
    isArrayIntegrationPossible: Boolean!
    "Specifies whether the virtual machine is a child of a Disaster Recovery Plan."
    isBlueprintChild: Boolean!
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Parent ID of this workload."
    parentWorkloadIdOpt: UUID
    "Parent workload type of this workload."
    parentWorkloadTypeOpt: String
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Post-backup script."
    postBackupScript: PrePostScript
    "Post-snap script."
    postSnapScript: PrePostScript
    powerStatus: VmPowerStatus
    "Pre-backup script."
    preBackupScript: PrePostScript
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Date at which the SLA Domain was assigned or inherited."
    protectionDate: DateTime
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "Contains statistics for the protected objects, for example, capacity."
    reportWorkload: Snappable
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "Snapshot consistency mandate."
    snapshotConsistencyMandate: ConsistencyLevelEnum!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "List of Live Mounts for this virtual machine."
    vSphereLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for virtual machine Live Mounts."
        filter: [VsphereLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort virtual machine Live Mounts."
        sortBy: VsphereLiveMountSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereLiveMountConnection!
    "List of Live Mounts for this virtual machine."
    vSphereMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for virtual machine Live Mounts."
        filter: VSphereMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VsphereMountSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereMountConnection!
    vmwareToolsInstalled: Boolean!
    vsphereTagPath: [PathNode!]!
    "List of virtual disks for this virtual machine."
    vsphereVirtualDisks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for virtual machine virtual disks."
        filter: VsphereVirtualDiskFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Sort virtual disks by field."
        sortBy: VsphereVirtualDiskSortBy,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): VsphereVirtualDiskConnection!
}

"Paginated list of VsphereVm objects."
type VsphereVmConnection {
    "Total number of VsphereVm objects matching the request arguments."
    count: Int!
    "List of VsphereVm objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [VsphereVmEdge!]!
    "List of VsphereVm objects."
    nodes: [VsphereVm!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the VsphereVm object. This wrapper is used for pagination."
type VsphereVmEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual VsphereVm object wrapped by this edge."
    node: VsphereVm!
}

"Supported in v5.0+"
type VsphereVmListEsxiDatastoresReply {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [Datastore!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Supported in v5.0+"
type VsphereVmPowerOnOffLiveMountReply {
    """

    Supported in v7.0+
    The IP address of the NFS share.
    """
    nasIp: String
    """

    Supported in v5.0+
    The power status of the mounted VM(ON,OFF,SLEEP etc.).
    """
    powerStatus: String
    "Summary information about vSphere mount."
    vmwareVmMountSummaryV1: VmwareVmMountSummaryV1
}

"A webhook configuration in the account."
type Webhook {
    "The authentication type that the endpoint uses."
    authType: AuthenticationType!
    "The timestamp that this webhook was created at."
    createdAt: DateTime
    "The user who created the webhook."
    createdBy: String!
    "A description of this webhook."
    description: String
    "The webhook's unique id."
    id: Int!
    "The information describing the webhook's most recent error."
    lastFailedErrorInfo: ErrorInfo
    "The webhook's name."
    name: String!
    "The application that will receive the webhook."
    providerType: ProviderType!
    "The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint."
    serverCertificate: String
    "Specifies whether the webhook is enabled or not."
    status: WebhookStatus!
    "The event and audit severities that the webhook is subscribed to."
    subscriptionSeverity: SubscriptionSeverity!
    "The event and audit types that the webhook is subscribed to."
    subscriptionType: SubscriptionType!
    "The timestamp that this webhook was updated at."
    updatedAt: DateTime
    "The URL endpoint that will receive the webhook."
    url: URL!
}

"Paginated list of Webhook objects."
type WebhookConnection {
    "Total number of Webhook objects matching the request arguments."
    count: Int!
    "List of Webhook objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [WebhookEdge!]!
    "List of Webhook objects."
    nodes: [Webhook!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the Webhook object. This wrapper is used for pagination."
type WebhookEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual Webhook object wrapped by this edge."
    node: Webhook!
}

"A weekly recurrence pattern (e.g. Every other Monday)."
type WeeklyRecurrencePattern {
    "Which days of the week the event occurs."
    daysOfWeek: [String!]!
    "E.g. Monday."
    firstDayOfWeek: String!
    "The interval at which the recurrence applies."
    interval: Int!
}

"Weekly snapshot schedule."
type WeeklySnapshotSchedule {
    "Basic weekly snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
    "Day of the week."
    dayOfWeek: DayOfWeek!
}

type WhitelistedAnalyzer {
    isExplicit: Boolean!
    whitelistedAnalyzerId: String!
    whitelistedPath: String!
}

type WindowsCluster implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants."
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): WindowsClusterDescendantTypeConnection!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "The list of hosts associated with a Windows Cluster."
    hosts: [PhysicalHost!]!
    "The FID of the hierarchy object."
    id: UUID!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "List of logical children."
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The hierarchy object filter."
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort hierarchy objects by hierarchy field."
        sortBy: HierarchySortByField,
        "Sorting order for the results."
        sortOrder: SortOrder,
        "Types of objects to include."
        typeFilter: [HierarchyObjectTypeEnum!],
        "Each value in the enum represents the hierarchy of a specific type of protected object for RBAC and SLA Domain assignments. The value None represents the hierarchy of all types of objects."
        workloadHierarchy: WorkloadLevelHierarchy
    ): WindowsClusterLogicalChildTypeConnection!
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
}

"Paginated list of WindowsClusterDescendantType objects."
type WindowsClusterDescendantTypeConnection {
    "Total number of WindowsClusterDescendantType objects matching the request arguments."
    count: Int!
    "List of WindowsClusterDescendantType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [WindowsClusterDescendantTypeEdge!]!
    "List of WindowsClusterDescendantType objects."
    nodes: [WindowsClusterDescendantType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the WindowsClusterDescendantType object. This wrapper is used for pagination."
type WindowsClusterDescendantTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual WindowsClusterDescendantType object wrapped by this edge."
    node: WindowsClusterDescendantType!
}

"Paginated list of WindowsClusterLogicalChildType objects."
type WindowsClusterLogicalChildTypeConnection {
    "Total number of WindowsClusterLogicalChildType objects matching the request arguments."
    count: Int!
    "List of WindowsClusterLogicalChildType objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [WindowsClusterLogicalChildTypeEdge!]!
    "List of WindowsClusterLogicalChildType objects."
    nodes: [WindowsClusterLogicalChildType!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the WindowsClusterLogicalChildType object. This wrapper is used for pagination."
type WindowsClusterLogicalChildTypeEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual WindowsClusterLogicalChildType object wrapped by this edge."
    node: WindowsClusterLogicalChildType!
}

"Windows fileset."
type WindowsFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FailoverClusterAppDescendantType & FailoverClusterAppPhysicalChildType & FailoverClusterTopLevelDescendantType & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The organizations to which this hierarchy object belongs."
    allOrgs: [Org!]!
    "The authorized operations on the object."
    authorizedOperations: [Operation!]!
    "ID of the CDM cluster."
    cdmId: String!
    "A link to view the workload on the CDM cluster. For dev use only."
    cdmLink: String!
    "Rubrik cluster where this object originated."
    cluster: Cluster!
    "The SLA Domain configured for the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The effective retention of the SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA Domain source."
    effectiveSlaSourceObject: PathNode
    "Failover Rubrik cluster app."
    failoverClusterApp: FailoverClusterApp
    "Boolean variable denoting if hard link support is enabled."
    hardlinkSupportEnabled: Boolean!
    "Host of Windows fileset."
    host: PhysicalHost
    "The FID of the hierarchy object."
    id: UUID!
    "Boolean variable denoting if hard link support is enabled."
    isPassThrough: Boolean!
    "Boolean variable denoting if hard link support is enabled."
    isRelic: Boolean!
    "Latest User note information."
    latestUserNote: LatestUserNote
    "A sequential list of this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this workload."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this workload."
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter missed snapshots by date."
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group snapshots by field."
        groupBy: MissedSnapshotGroupByTime!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "The newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "The most recent snapshot of this workload."
    newestSnapshot: CdmSnapshot
    "The number of descendant workloads of this object."
    numWorkloadDescendants: Int!
    "The type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this workload."
    oldestSnapshot: CdmSnapshot
    "The number of on-demand snapshots."
    onDemandSnapshotCount: Int!
    "Boolean variable denoting if hard link support is enabled."
    pathExceptions: [String!]!
    "Paths excluded from fileset."
    pathExcluded: [String!]!
    "Boolean variable denoting if hard link support is enabled."
    pathIncluded: [String!]!
    "Mapping from objectID to pending object deletion status."
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM."
    pendingSla: SlaDomain
    "A sequential list of this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related to this object by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related to this object by replication."
    replicatedObjects: [CdmHierarchyObject!]!
    "The SLA Domain assignment type for this object."
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the effective SLA Domain of the hierarchy object."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this workload."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sorts snapshots by field."
        sortBy: CdmSnapshotSortByEnum = Date,
        "Sorting order for the results."
        sortOrder: SortOrder
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object."
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupByConnection
    "GroupBy connection for the snapshots of this workload."
    snapshotGroupBySummary(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter snapshot connection."
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Groups snapshots by field."
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "Offset based on customer timezone."
        timezoneOffset: Float = 0.0
    ): CdmSnapshotGroupBySummaryConnection
    "Boolean variable denoting if hard link support is enabled."
    symlinkResolutionEnabled: Boolean!
}

"A workload that has a snapshot or children with anomalous activity."
type WorkloadAnomaly {
    """

    A list of children belonging to the workload. These children were also
    determined to have snapshots with anomalous activity.
    """
    anomalousChildren: [WorkloadAnomaly!]!
    "The creation date of the snapshot determined to have anomalous activity."
    anomalousSnapshotDate: DateTime!
    "The FID of the snapshot which was determined to have anomalous activity."
    anomalousSnapshotFid: String!
    "The Rubrik CDM ID of the snapshot determined to have anomalous activity."
    anomalousSnapshotId: String!
    "Represents the information about strains that cause anomalies."
    anomalyInfo: AnomalyInfo
    "The Rubrik cluster associated with the workload."
    cluster: Cluster!
    "The number of files created within the snapshot."
    createdFileCount: Long!
    "The number of files deleted within the snapshot."
    deletedFileCount: Long!
    "The level of encryption detected within the snapshot."
    encryption: EncryptionLevel!
    "The location of the workload."
    location: SnappableLocationType!
    "The number of files modified within the snapshot."
    modifiedFileCount: Long!
    "The object type of the workload."
    objectType: HierarchyObjectTypeEnum!
    "The Data Discovery results of the snapshot before the occurrence of the anomaly in the workload."
    previousPolicyObj: PolicyObj
    """

    The FID of the snapshot taken before the snapshot that was determined
    to have anomalous activity.
    """
    previousSnapshotFid: String!
    "Severity of the anomaly event."
    severity: ActivitySeverityEnum!
    "The number of suspicious files within the snapshot."
    suspiciousFileCount: Long!
    """

    The total number of children belong to the workload, regardless
    of whether or not they have snapshots containing anomalous activity.
    """
    totalChildren: Long!
    "The FID of the workload."
    workloadFid: String!
    "The Rubrik CDM ID of the workload."
    workloadId: String!
    "The name of the workload."
    workloadName: String!
}

"Paginated list of WorkloadAnomaly objects."
type WorkloadAnomalyConnection {
    "Aggregation values calculated across all results."
    aggregation: AggregatedValues!
    "Total number of WorkloadAnomaly objects matching the request arguments."
    count: Int!
    "List of WorkloadAnomaly objects with supplemental pagination information. Use `nodes` if per-object cursors are not needed."
    edges: [WorkloadAnomalyEdge!]!
    "List of WorkloadAnomaly objects."
    nodes: [WorkloadAnomaly!]!
    "General information about this page of results."
    pageInfo: PageInfo!
}

"Wrapper around the WorkloadAnomaly object. This wrapper is used for pagination."
type WorkloadAnomalyEdge {
    "String used to identify this edge."
    cursor: String!
    "The actual WorkloadAnomaly object wrapped by this edge."
    node: WorkloadAnomaly!
}

"Workload fields returned by browse or search delta response."
type WorkloadFields {
    "Microsoft Office 365 file or folder data returned by browse or search delta response."
    o365Item: O365SnapshotItemInfo
}

"The aggregation data of a workload group by query."
type WorkloadGroupByAggregationData {
    "The amount of storage used by archived snapshots."
    archiveStorage: Long!
    "The total count of workload."
    count: Int!
    "Logical bytes of the last snapshot of the workload."
    lastSnapshotLogicalBytes: Long!
    "Logical bytes used by snapshots of this workload."
    logicalBytes: Long!
    "The number of snapshots that were missed."
    missedSnapshots: Int!
    "Physical bytes used by snapshots of this workload."
    physicalBytes: Long!
    "The amount of storage used by replicated snapshots."
    replicaStorage: Long!
    "The total number of snapshots present for the workload."
    totalSnapshots: Int!
}

"The group by info of the workload group by query."
type WorkloadGroupByInfo {
    "The field name of the group by."
    groupByField: WorkloadGroupByEnum!
    "The value of the group by."
    groupByValue: String!
}

"The primary group-by type for workloads query."
type WorkloadGroupByPrimaryGroupByItem {
    "The aggregation data of the primary group by result."
    aggregationData: WorkloadGroupByAggregationData!
    "The group by info of the primary group by result."
    groupByInfo: WorkloadGroupByInfo!
    "The secondary group by data of the primary group by result."
    secondaryGroupBys: [WorkloadGroupBySecondaryGroupByItem!]!
}

"The group by data workload group by query."
type WorkloadGroupByReply {
    "The primary group by data of the primary group by result."
    primaryGroupBys: [WorkloadGroupByPrimaryGroupByItem!]!
}

"The secondary group-by type for workloads query."
type WorkloadGroupBySecondaryGroupByItem {
    "The aggregation data of the secondary group by result."
    aggregationData: WorkloadGroupByAggregationData!
    "The group by info of the secondary group by result."
    groupByInfo: WorkloadGroupByInfo!
}

"Maps an object to targeted snapshots for the threat hunt."
type WorkloadIdToSnapshotIds {
    "Object ID."
    objectId: String!
    "Snapshot IDs."
    snapshotIds: [String!]!
    "Timestamps for the snapshots selected for threat hunt."
    snapshotTimestamps: [DateTime!]!
}

"Location of the workload."
type WorkloadLocation {
    "Workload location."
    location: String!
}

"Specifies the ID and type of the workload and the number of times Ransomware Investigation has scanned the workload."
type WorkloadScanned {
    "The number of times a workload has been scanned."
    count: Long!
    "The workload ID."
    workloadId: String!
    "The workload type."
    workloadType: String!
}

"Details of the setup for performing backups for various object types."
type WorkloadTypeToBackupSetupSpecs {
    "The object from where the setup specification is inherited."
    setupSourceObject: PathNode!
    "The object type."
    snappableType: WorkloadLevelHierarchy!
}

"Supported in v6.0+"
type YARAMatchDetail {
    """

    Required. Supported in v6.0+
    The name of the matching YARA rule.
    """
    name: String!
    """

    Required. Supported in v6.0+
    Optional YARA tags https://yara.readthedocs.io/en/latest/writingrules.html#rule-tags.
    """
    tags: [String!]!
}

"Yearly snapshot schedule."
type YearlySnapshotSchedule {
    "Basic yearly snapshot schedule."
    basicSchedule: BasicSnapshotSchedule
    "Day of the Year."
    dayOfYear: DayOfYear!
    "Starting month of year."
    yearStartMonth: Month!
}

"Represents the availability of Zone Redundancy for a given servicetier, region and subscription combination."
type ZrsAvailabilityReply {
    "The value representing the availability."
    isAvailable: Boolean!
}

type clusterState {
    "Cluster removal job creation time."
    clusterRemovalCreatedAt: DateTime
    "The removal status of the Rubrik CDM cluster."
    clusterRemovalState: ClusterRemovalState!
    "Cluster removal job update time."
    clusterRemovalUpdatedAt: DateTime
    "Connected status of the Rubrik CDM cluster."
    connectedState: ClusterStatus!
}

type configGroupBy {
    "Aggregations for single-level groupBy. This does not affect double-level groupBys."
    aggregations: [String!]!
    "Report-level groupBy selection."
    groupById: String!
}

type dataViewMetadata {
    count: Long!
    dataViewType: DataViewTypeEnum!
}

"ID of the resource."
type id {
    id: String!
}

"Cluster metric data grouped by a time unit."
type metricTimeSeries {
    "The Rubrik cluster metric data for the specified time period."
    metric: ClusterMetric!
    "The time groupby info."
    timeInfo: ClusterMetricGroupByInfo!
}

type pendingAction {
    actionType: PendingActionType
    actionTypeStr: String!
    clusterUuid: String!
    createdAt: DateTime
    description: String!
    info: String!
    pendingActionId: String!
    status: PendingActionStatus!
    updatedAt: DateTime
}

type reportGenerateReply {
    "The job ID."
    jobId: Long!
    "The job reference ID."
    referenceId: String!
}

enum AccessType {
    CREATE_ACCESS
    DELETE_ACCESS
    FULL_CONTROL
    READ_ACCESS
    WRITE_ACCESS
}

enum AceFlags {
    CONTAINER_INHERIT
    EMPTY_FLAG
    FAILED_ACCESS
    INHERITED
    INHERIT_ONLY
    NO_PROPAGATE_INHERIT
    OBJECT_INHERIT
    SUCCESSFUL_ACCESS
}

enum AceQualifier {
    ACCESS_ALLOWED
    ACCESS_DENIED
    CUSTOM
    SYSTEM_ALARM
    SYSTEM_AUDIT
}

"Upgrade action."
enum ActionType {
    "Upgrade resume."
    RESUME
    "Upgrade rollback."
    ROLLBACK
    "Upgrade start."
    START
}

enum ActivityAccessType {
    CREATE_ACTIVITY
    DELETE_ACTIVITY
    READ_ACTIVITY
    WRITE_ACTIVITY
}

enum ActivityObjectTypeEnum {
    AppBlueprint
    AppFlows
    AuthDomain
    AwsAccount
    AwsEventType
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeDisk
    AzureNativeSubscription
    AzureNativeVm
    AzureSqlDatabase
    AzureSqlDatabaseServer
    AzureSqlManagedInstance
    AzureSqlManagedInstanceDatabase
    "Specifies that the activity object type is Cassandra column family."
    CASSANDRA_COLUMN_FAMILY
    "Specifies that the activity object type is Cassandra keyspace."
    CASSANDRA_KEYSPACE
    "Specifies that the activity object type is Cassandra source."
    CASSANDRA_SOURCE
    "Specifies that the activity object type is Cloud Direct NAS export."
    CLOUD_DIRECT_NAS_EXPORT
    CapacityBundle
    Certificate
    CloudNativeVirtualMachine
    CloudNativeVm
    Cluster
    ComputeInstance
    DataLocation
    Db2Database
    Db2Instance
    Ec2Instance
    Envoy
    ExchangeDatabase
    Exocompute
    FailoverClusterApp
    GcpNativeDisk
    GcpNativeGceInstance
    GcpNativeProject
    Hdfs
    Host
    HypervScvmm
    HypervServer
    HypervVm
    JobInstance
    KuprCluster
    KuprNamespace
    Ldap
    LinuxFileset
    LinuxHost
    "Specifies that the activity object type is MongoDB collection."
    MONGODB_COLLECTION
    "Specifies that the activity object type is MongoDB database."
    MONGODB_DATABASE
    "Specifies that the activity object type is MongoDB source."
    MONGODB_SOURCE
    "Specifies that the activity object type is MongoDB collection."
    MONGO_COLLECTION
    "Specifies that the activity object type is MongoDB database."
    MONGO_DATABASE
    "Specifies that the activity object type is MongoDB source."
    MONGO_SOURCE
    ManagedVolume
    Mssql
    NAS_FILESET
    NasHost
    NasSystem
    NutanixCluster
    NutanixVm
    O365Calendar
    O365Group
    O365Mailbox
    O365Onedrive
    O365Organization
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Team
    ObjectProtection
    Oracle
    OracleDb
    OracleHost
    OracleRac
    PolarisAccount
    PublicCloudMachineInstance
    RubrikEbsVolume
    RubrikEc2Instance
    SamlSso
    SapHanaDb
    SapHanaSystem
    ShareFileset
    SlaDomain
    SmbDomain
    SnapMirrorCloud
    StorageArray
    StorageArrayVolumeGroup
    StorageLocation
    Storm
    SupportBundle
    UnknownObjectType
    Upgrade
    User
    Vcd
    VcdVapp
    Vcenter
    VmwareComputeCluster
    VmwareVm
    VolumeGroup
    WEBHOOK
    WindowsFileset
    WindowsHost
}

enum ActivitySeriesGroupByEnum {
    Cluster
    ClusterType
    Day
    Hour
    LastActivityStatus
    LastActivityType
    Month
    ObjectType
    Quarter
    Week
    Year
}

enum ActivitySeriesSortByEnum {
    ActivityStatus
    ActivityType
    ClusterName
    LastUpdated
    Location
    ObjectName
    ObjectType
    Severity
    StartTime
}

"Sort field."
enum ActivitySeriesSortField {
    "Sort event series by status."
    ACTIVITY_STATUS
    "Sort event series by type."
    ACTIVITY_TYPE
    "Sort event series by name of the cluster."
    CLUSTER_NAME
    "Sort event series by last updated time."
    LAST_UPDATED
    "Sort event series by location."
    LOCATION
    "Sort event series by name of the object."
    OBJECT_NAME
    "Sort event series by type of the object."
    OBJECT_TYPE
    "Sort event series by severity."
    SEVERITY
    "Sort event series by start time."
    START_TIME
}

enum ActivitySeverityEnum {
    Critical
    Info
    Warning
}

enum ActivityStatusEnum {
    Canceled
    Canceling
    Failure
    Info
    Queued
    Running
    Success
    TaskFailure
    TaskSuccess
    Warning
}

enum ActivityTableColumnEnum {
    ActivityStatus
    ActivityType
    ClusterName
    ClusterType
    ComplianceStatus
    LastUpdated
    Location
    ObjectName
    ObjectType
    SlaDomain
    StartTime
}

"Enum representing different type of activities."
enum ActivityTypeEnum {
    Anomaly
    Archive
    AuthDomain
    AwsEvent
    Backup
    Classification
    CloudNativeSource
    CloudNativeVirtualMachine
    CloudNativeVm
    Configuration
    Connection
    Conversion
    Diagnostic
    Discovery
    Download
    EmbeddedEvent
    Failover
    Fileset
    Hardware
    Hdfs
    HostEvent
    HypervScvmm
    HypervServer
    "Recovering selected objects to an Isolated Recovery Environment (IRE)."
    ISOLATED_RECOVERY
    Index
    Instantiate
    LegalHold
    LocalRecovery
    LockSnapshot
    Maintenance
    NutanixCluster
    "Activity representing change of account ownership."
    OWNERSHIP
    RadarAnalysis
    Recovery
    Replication
    ResourceOperations
    Storage
    StorageArray
    StormResource
    Support
    Sync
    System
    TestFailover
    ThreatHunt
    Tpr
    UnknownEventType
    Upgrade
    VCenter
    Vcd
    VolumeGroup
}

"The customer adoption status of the Rubrik CDM release."
enum AdoptionStatus {
    "The adoption of the release is decreasing."
    DECLINING
    "The release has the highest adoption."
    MOST_POPULAR
    "The release has a high adoption."
    POPULAR
    "The adoption of the release is increasing."
    RISING
    "Unknown status."
    UNKNOWN
}

enum AgentConnectionStatus {
    CONNECTED
    DISCONNECTED
    SECONDARY_CLUSTER
    UNREGISTERED
}

"Sorting options for getting all failover job reports."
enum AllFailoverJobReportsSortType {
    "Specifies the object count.."
    OBJECT_COUNT
    "Specifies the recovery name."
    RECOVERY_NAME
    "Specifies the recovery plan name."
    RECOVERY_PLAN_NAME
    "Specifies the start time."
    START_TIME
    "Sort type is not specified."
    UNKNOWN
}

"AMIType to be used for exporting an archived EC2 instance snapshot."
enum AmiType {
    "EC2 instance is a linux instance wihtout marketplace code. AMI will be created at runtime."
    CREATED_AT_RUNTIME
    "An AMI already exists which can be used for export."
    EXISTING
    "User needs to provide an AMI id, which will be used for export."
    USER_SPECIFIED
}

"Represents the analysis status of a workload."
enum AnalysisStatus {
    "Some snapshots are either pending or undergoing initial analysis."
    INITIAL_ANALYSIS
    "Most recent non-analyzed snapshot is more than 24 hours old."
    OUT_OF_DATE
    "This state is invalid. Adding it only for backward compatibility."
    UNSPECIFIED
    """

    All snapshots have been analyzed, or most recent non-analyzed snapshot is
    less than 24 hours old.
    """
    UP_TO_DATE
}

enum AnalyzerErrorCode {
    ANALYZER
    NOERROR
    OTHER
    PARSING
    READING
}

enum AnalyzerGroupTypeEnum {
    CCPA
    CUSTOM
    GLBA
    HIPAA
    PCI_DSS
    UK_PII
    UNDEFINED
    US_FINANCE
    US_PII
}

"""

AnalyzerType is the shared enum for the backend and frontend to
identify analyzers.
"""
enum AnalyzerTypeEnum {
    "American Bankers Association (ABA) routing number analyzer."
    ABA_ROUTING_NUMBER
    "Australian Business Number (ABN) analyzer."
    AUSTRALIA_ABN
    "Australian Company Number (ACN) analyzer."
    AUSTRALIA_ACN
    "Australia Bank Account Number analyzer."
    AUSTRALIA_BANK_ACCOUNT_NUMBER
    "Australia BSB code analyzer."
    AUSTRALIA_BSB
    "Australia driver's license number analyzer."
    AUSTRALIA_DL
    "Australia medical account number analyzer."
    AUSTRALIA_MEDICAL_ACCOUNT
    "Australia passport number analyzer."
    AUSTRALIA_PASSPORT
    "Australia tax file number analyzer."
    AUSTRALIA_TFN
    "AWS connection string or endpoint analyzer."
    AWS_CONNECTION_STRING
    "Azure connection string or endpoint analyzer."
    AZURE_CONNECTION_STRING
    "Belgium national number (BNN) analyzer."
    BELGIUM_BNN
    "Belgium driver's license number analyzer."
    BELGIUM_DL
    "Belgium passport number analyzer."
    BELGIUM_PASSPORT
    "Canada bank account number analyzer."
    CANADA_BANK_ACCT
    "Canada health service number analyzer."
    CANADA_HEALTH_SERVICE
    "Canada passport number analyzer."
    CANADA_PASSPORT
    "Canada personal health identification number (PHIN) analyzer."
    CANADA_PHIN
    "Credit card number analyzer."
    CREDIT_CARD
    "American bankers CUSIP analyzer."
    CUSIP_NUMBER
    "U.S. DEA number analyzer."
    DEA_NUMBER
    "Digital Certificate analyzer."
    DIGITAL_CERTIFICATE
    "U.S. employer identification number analyzer."
    EIN
    "Email address analyzer."
    EMAIL_ADDRESS
    "France Social Security number (SSN)."
    FRANCE_SSN
    "Germany driver's license number analyzer."
    GERMANY_DL
    "Germany identity card number analyzer."
    GERMANY_ID
    "Germany passport number analyzer."
    GERMANY_PASSPORT
    "International Bank Account Number (IBAN) analyzer."
    IBAN
    "IP address analyzer."
    IPV4_ADDRESS
    "Ireland personal public service (PPS) number analyzer."
    IRELAND_PPS
    "Dictionary analyzer."
    KEYWORD
    "MAC address analyzer."
    MAC_ADDRESS
    "Netherlands citizen service number (BSN) analyzer."
    NETHERLANDS_BSN
    "Netherlands driver's license number analyzer."
    NETHERLANDS_DL
    "Netherlands passport number analyzer."
    NETHERLANDS_PASSPORT
    "Netherlands tax identification number (TIN) analyzer."
    NETHERLANDS_TIN
    "Netherlands value added tax (VAT) number analyzer."
    NETHERLANDS_VAT
    "US and UK passport number analyzer."
    PASSPORT
    "Phone number analyzer."
    PHONE_NUMBER
    "Private Key analyzer."
    PRIVATE_KEY
    "Regular expression analyzer."
    REGEX
    "SIM hash analyzer."
    SIMHASH
    "Sweden driver's license number analyzer."
    SWEDEN_DL
    "Sweden national ID analyzer."
    SWEDEN_NIN
    "Sweden passport number analyzer."
    SWEDEN_PASSPORT
    "Sweden tax identification number analyzer."
    SWEDEN_TIN
    "SWIFT code analyzer."
    SWIFT_CODE
    "UK driver's license number analyzer."
    UK_DL
    "UK electoral roll number analyzer."
    UK_ELECTORAL
    "UK national health service number analyzer."
    UK_NHS
    "UK national insurance number analyzer."
    UK_NINO
    "UK unique taxpayer reference number analyzer."
    UK_UTR
    "Undefined analyzer."
    UNDEFINED
    "U.S. bank account number analyzer."
    US_BANK_ACCT
    "California driver's license number analyzer."
    US_CA_DL
    "U.S. driver's license number analyzer."
    US_DL
    "U.S. healthcare NPI analyzer."
    US_HEALTHCARE_NPI
    "U.S. individual taxpayer identification number (ITIN) analyzer."
    US_ITIN
    "U.S. Medicare Beneficiary Identifier (MBI) analyzer."
    US_MBI
    "U.S. Social Security number (SSN) analyzer."
    US_SSN
    "Vehicle identification number analyzer."
    US_VIN
    "Word frequency analyzer."
    WORD_FREQUENCY
}

"Group anomaly results by field."
enum AnomalyResultGroupBy {
    "The unique ID of the cluster."
    CLUSTER_UUID
    "Group by day."
    DAY
    "Group by hour."
    HOUR
    "Is result an anomaly."
    IS_ANOMALY
    "The managed ID of the object."
    MANAGED_ID
    "Group by month."
    MONTH
    "Group by week."
    WEEK
    "Group by year."
    YEAR
}

"Sort anomaly results by field."
enum AnomalyResultSortBy {
    "Probability of anomaly."
    ANOMALY_PROBABILITY
    "Count of created bytes."
    BYTES_CREATED_COUNT
    "Count of deleted bytes."
    BYTES_DELETED_COUNT
    "Count of modified bytes."
    BYTES_MODIFIED_COUNT
    "Count of changed bytes."
    BYTES_NET_CHANGED_COUNT
    "Unique ID of the cluster."
    CLUSTER_UUID
    "Count of created files."
    FILES_CREATED_COUNT
    "Count of deleted files."
    FILES_DELETED_COUNT
    "Count of modified files."
    FILES_MODIFIED_COUNT
    "Is result an anomaly."
    IS_ANOMALY
    "Managed ID of the object."
    MANAGED_ID
    "Type of the object."
    OBJECT_TYPE
    "Date of the previous snapshot."
    PREVIOUS_SNAPSHOT_DATE
    "Id of the previous snapshot."
    PREVIOUS_SNAPSHOT_ID
    "Date of the snapshot."
    SNAPSHOT_DATE
    "Id of the snapshot."
    SNAPSHOT_ID
    "Count of suspicious files."
    SUSPICIOUS_FILES_COUNT
    "Name of the object."
    WORKLOAD_NAME
    "Type of the object."
    WORKLOAD_TYPE
}

enum AnomalyTableColumnEnum {
    BytesCreated
    BytesDeleted
    BytesModified
    BytesNetChanged
    FilesCreated
    FilesDeleted
    FilesModified
    IsAnomaly
    PreviousSnapshotDate
    PreviousSnapshotId
    SnapshotDate
    SnapshotId
    SuspiciousFilesAdded
    WorkloadName
    WorkloadType
}

"Authentication status of apps."
enum AppAuthStatus {
    "Apps with the complete set of required permissions."
    FULLY_AUTHENTICATED
    "Apps with a subset of required permissions."
    PARTIALLY_AUTHENTICATED
    "Apps with zero granted permissions."
    UNAUTHENTICATED
}

enum AppBlueprintFailoverStatus {
    CleanupInProgress
    InProgress
    Paused
    Ready
    TestCleanupInProgress
    TestInProgress
    TestPaused
    TestPending
    Tested
}

enum AppBlueprintLastFailoverStatus {
    Failed
    NotExist
    Succeeded
}

enum AppBlueprintRmStatus {
    Configured
    Invalid
    MissingVms
    NotConfigured
}

enum AppBlueprintStatus {
    Creating
    Deleted
    Deleting
    Ready
    Updating
}

"Parameter to filter Azure apps on."
enum AppFilterField {
    "Filter on app ID."
    APP_ID
    "Filter on app type."
    APP_TYPE
    "Filter on subscription name."
    SUBSCRIPTION
    "Filter on tenant ID."
    TENANT_ID
}

"Parameter to sort Azure apps by."
enum AppSortByParamField {
    "Sort by added at time."
    ADDED_AT
    "Sort by app ID."
    APP_ID
    "Sort by app owner type."
    APP_OWNER
    "Sort by app type."
    APP_TYPE
    "Sort by authentication status."
    IS_AUTHENTICATED
    "Sort by subscription name."
    SUBSCRIPTION
}

enum AppflowsBlueprintFailoverReportStatusEnum {
    ACTIVE
    CREATING
    EXPIRED
}

"Archival group sort fields."
enum ArchivalGroupQuerySortByField {
    "Name of aws group."
    NAME
}

"Tiering status options for archival groups."
enum ArchivalGroupTieringStatus {
    "Instant tiering not supported."
    INSTANT_TIERING_NOT_SUPPORTED
    "Smart tiering not supported."
    SMART_TIERING_NOT_SUPPORTED
    "Unknown tiering status."
    UNKNOWN_ARCHIVAL_GROUP_TIERING_STATUS
}

"Type of archival location."
enum ArchivalGroupType {
    "Archival location is created automatically and managed by Polaris."
    AUTOMATIC_ARCHIVAL_GROUP
    "Archival location created for cloud native workflows."
    CLOUD_NATIVE_ARCHIVAL_GROUP
    "This is a union field for both automatic and manual archival locations."
    DATACENTER_ARCHIVAL_GROUP
    "Archival location is created in Polaris."
    MANUAL_ARCHIVAL_GROUP
    "Type of archival location is unknown."
    UNKNOWN_ARCHIVAL_GROUP
}

"Archival locations sort fields."
enum ArchivalLocationQuerySortByField {
    "Name of the mapping the storage archival is part of."
    ARCHIVAL_GROUP_NAME
    "Name of the cluster."
    CLUSTER_NAME
    "Number of failed tasks."
    FAILED_TASKS
    "Immutability days configured."
    IMMUTABILITY_DAYS
    "Location type or provider."
    LOCATION_TYPE
    "Name of the archival location."
    NAME
    "Number of running tasks."
    RUNNING_TASKS
    "Availability status."
    STATUS
    "Storage bytes used."
    STORAGE_CONSUMED_BYTES
}

"Availability status of the archival location."
enum ArchivalLocationStatus {
    "Location is deleted."
    DELETED
    "Location is not enabled."
    DISABLED
    "Location is paused."
    PAUSED
    "Location is read-only."
    READ_ONLY
    "Location is read-write."
    READ_WRITE
    "Location status is unknown."
    UNKNOWN_ARCHIVAL_LOCATION_STATUS
}

"Warnings related to SLA Domain assignment."
enum AssignSLAWarningsEnum {
    "Archival configuration is not supported by object."
    ARCHIVAL_CONFIGURATION_NOT_RESPECTED
    "The SLA Domain does not have an archival location configured."
    ARCHIVAL_LOCATION_NOT_SPECIFIED
    "Archival location has not yet synced to cluster."
    ARCHIVAL_LOCATION_NOT_SYNCED_ON_CLUSTER_WARNING
    "AWS Archival not supported for Azure Gov Cloud objects."
    AWS_ARCHIVAL_NOT_SUPPORTED_FOR_GOVCLOUD_OBJECTS
    "Archival tiering for AWS is not supported for this cluster."
    AWS_ARCHIVAL_TIERING_NOT_SUPPORTED_ON_CLUSTER_WARNING
    "AWS cross-account replication configuration is not supported."
    AWS_CROSS_ACCOUNT_REPLICATION_CONFIG_WARNING
    "AWS RDS Log backup configuration is not supported for object."
    AWS_RDS_LOG_BACKUP_CONFIG_WARNING
    "AWS replication region not supported for this object."
    AWS_REPLICATION_REGION_VALIDATION
    "Archival tiering for Azure is not supported for this cluster."
    AZURE_ARCHIVAL_TIERING_NOT_SUPPORTED_ON_CLUSTER_WARNING
    "Azure full snapshots is not supported."
    AZURE_FULL_SNAPSHOTS
    "Azure national public replication not supported."
    AZURE_NATIONAL_PUBLIC_REPLICATION_NOT_SUPPORTED
    AZURE_SQL_DATABASE_NATIVE_BACKUP_INCOMPATIBLE_SLA_WARNING
    "Point-in-time recovery is affected for the object."
    AZURE_SQL_DATABASE_PITR_WINDOW_WARNING
    "Backup windows configured in the SLA Domain are not supported by the object."
    BACKUP_WINDOWS_NOT_RESPECTED
    "CDP log retention is not supported for this cluster."
    CDP_LOG_RETENTION_NOT_SUPPORTED_ON_CLUSTER_WARNING
    "Cloud replication location has not yet synced to cluster."
    CLOUD_REPLICATION_LOCATION_N0T_SYNCED_ON_CLUSTER_WARNING
    "Cross-region archiving is not supported."
    CROSS_REGION_ARCHIVAL
    "Differential backup frequency is not supported for the object."
    DIFFERENTIAL_BACKUP_FREQUENCY_NOT_RESPECTED
    "Incremental backup frequency is not respected for object."
    INCREMENTAL_BACKUP_FREQUENCY_NOT_RESPECTED
    "Instant archival disk size limit exceeded for the account."
    INSTANT_ARCHIVAL_ACCOUNT_LEVEL_DISK_SIZE_WARNING
    "Instant archival disk size limit exceeded for the object."
    INSTANT_ARCHIVAL_DISK_SIZE_WARNING
    "Minute-level configuration in SLA Domain is not supported for this object."
    MINUTE_LEVEL_CONFIGURATION_NOT_RESPECTED
    "Multiple or selective archival is not supported for object."
    MULTIPLE_ARCHIVAL_OR_SELECTIVE_FREQ_NOT_SUPPORTED_WARNING
    "SLA Domains not protecting NoSql objects is not supported on NoSql cluster."
    NON_NOSQL_SLA_NOT_SUPPORTED_ON_NOSQL_CLUSTER_WARNING
    "SLA Domains protecting NoSql objects is not supported on CDM cluster."
    NOSQL_SLA_NOT_SUPPORTED_ON_CDM_CLUSTER_WARNING
    "No warning."
    NO_WARNING
    "Remote configuration is not supported by object."
    REMOTE_CONFIGURATION_NOT_RESPECTED
    "Replication configuration is not suppored by object."
    REPLICATION_CONFIGURATION_NOT_RESPECTED
    "Replication setup on cluster has not yet completed."
    REPLICATION_SETUP_NOT_COMPLETE_ON_CLUSTER_WARNING
    "Replication target is same as the source of the object."
    REPLICATION_TARGET_SAME_AS_SOURCE
    "Retention lock config is not enabled on the cluster."
    RETENTION_LOCK_CONFIG_NOT_ENABLED_ON_CLUSTER_WARNING
    "Retention lock constraints are not satisified for the object."
    RETENTION_LOCK_CONSTRAINTS_NOT_RESPECTED
    "Retention lock policy is not supported for the object."
    RETENTION_LOCK_NOT_SUPPORTED_WARNING
    "Archiving is not supported for SAP HANA workload."
    SAP_HANA_ARCHIVAL_NOT_SUPPORTED_WARNING
    "SLA Domain is not synced to cluster yet."
    SLA_NOT_SYNCED
    "Snapshot may expire on assigning this SLA Domain."
    SNAPSHOTS_MAY_EXPIRE
    "Static Retention is not supported for the object."
    STATIC_RETENTION_NOT_SUPPORTED_WARNING
}

"Represents all the object types for which we expect to see audits."
enum AuditObjectType {
    "App blueprint audit object."
    APP_BLUEPRINT
    "Archival location audit object."
    ARCHIVAL_LOCATION
    "Unspecified audit object type."
    AUDIT_OBJECT_TYPE_UNSPECIFIED
    "Auth domain audit object."
    AUTH_DOMAIN
    "AWS account audit object."
    AWS_ACCOUNT
    "AWS event audit object."
    AWS_EVENT_TYPE
    "AWS native account."
    AWS_NATIVE_ACCOUNT
    "AWS native EBS volume object."
    AWS_NATIVE_EBS_VOLUME
    "AWS native EC2 instance object."
    AWS_NATIVE_EC2_INSTANCE
    "AWS native RDS instance object."
    AWS_NATIVE_RDS_INSTANCE
    "Azure native disk."
    AZURE_NATIVE_DISK
    "Azure native subscription."
    AZURE_NATIVE_SUBSCRIPTION
    "Azure native virtual machine."
    AZURE_NATIVE_VM
    "Azure SQL database object."
    AZURE_SQL_DATABASE
    "Azure SQL managed instance."
    AZURE_SQL_MANAGED_INSTANCE
    "Blueprint object."
    BLUEPRINT
    "Cassandra column family."
    CASSANDRA_COLUMN_FAMILY
    "Cassandra keyspace."
    CASSANDRA_KEYSPACE
    "Cassandra source."
    CASSANDRA_SOURCE
    "Cloud-native tag rule object."
    CLOUD_NATIVE_TAG_RULE
    "Cluster audit object."
    CLUSTER
    "Data location audit object."
    DATA_LOCATION
    "DB2 database object."
    DB2_DATABASE
    "DB2 instance object."
    DB2_INSTANCE
    "EC2 Instance object."
    EC2_INSTANCE
    "Exchange DAG."
    EXCHANGE_DAG
    "Exchange database."
    EXCHANGE_DATABASE
    "Exchange server."
    EXCHANGE_SERVER
    "Failover cluster app audit object."
    FAILOVER_CLUSTER_APP
    "Federated access audit object."
    FEDERATED_ACCESS
    "GCP native disk."
    GCP_NATIVE_DISK
    "GCP native GCE instance."
    GCP_NATIVE_GCE_INSTANCE
    "GCP native Project audit object."
    GCP_NATIVE_PROJECT
    "Host audit object."
    HOST
    "Host failover audit object."
    HOST_FAILOVER_CLUSTER
    "HyperV SCVVM audit object."
    HYPERV_SCVMM
    "HyperV server audit object."
    HYPERV_SERVER
    "HyperV virtual machine audit object."
    HYPERV_VM
    "IP Whitelist audit object."
    IP_WHITELIST
    "Job instance audit object."
    JOB_INSTANCE
    "LDAP audit object."
    LDAP
    "Linux fileset object."
    LINUX_FILESET
    "Linux host object."
    LINUX_HOST
    "Managed volume object."
    MANAGED_VOLUME
    "MongoDB source."
    MONGODB_SOURCE
    "Mongo source object."
    MONGO_SOURCE
    "Mosaic storage location."
    MOSAIC_STORAGE_LOCATION
    "MsSQL object."
    MSSQL
    "MsSQL database object."
    MSSQL_DATABASE
    "MsSQL mount object."
    MSSQL_MOUNT
    "MsSQL object."
    MSSQL_OBJECT
    "NAS host object."
    NAS_HOST
    "Nutanix cluster audit object."
    NUTANIX_CLUSTER
    "Nutanix virtual machine object."
    NUTANIX_VM
    "O365 Calendar object."
    O365_CALENDAR
    "O365 Group."
    O365_GROUP
    "O365 Mailbox audit object."
    O365_MAILBOX
    "O365 Onedrive audit object."
    O365_ONEDRIVE
    "O365 Organization object."
    O365_ORGANIZATION
    "O365 SharePoint drive."
    O365_SHAREPOINT_DRIVE
    "O365 SharePoint list."
    O365_SHAREPOINT_LIST
    "O365 SharePoint site audit object."
    O365_SHAREPOINT_SITE
    "O365 Team."
    O365_TEAM
    "Oracle database object."
    ORACLE_DB
    "Oracle host object."
    ORACLE_HOST
    "Oracle mount object."
    ORACLE_MOUNT
    "Oracle RAC object."
    ORACLE_RAC
    "Organization object."
    ORGANIZATION
    "Public cloud machine instance object."
    PUBLIC_CLOUD_MACHINE_INSTANCE
    "SAP HANA database object."
    SAP_HANA_DB
    "SAP HANA system object."
    SAP_HANA_SYSTEM
    "Share fileset object."
    SHARE_FILESET
    "SLA object."
    SLA
    "SLA domain object."
    SLA_DOMAIN
    "SMB domain object."
    SMB_DOMAIN
    "Snapshot object."
    SNAPSHOT
    "Storage array object."
    STORAGE_ARRAY
    "Storage array volume group."
    STORAGE_ARRAY_VOLUME_GROUP
    "Storage settings."
    STORAGE_SETTINGS
    "Storm audit object."
    STORM
    "Support tunnel."
    SUPPORT_TUNNEL
    "System preference."
    SYSTEM_PREFERENCE
    "Upgrade audit object."
    UPGRADE
    "User."
    USER
    "User action audit."
    USER_ACTION_AUDIT
    "User group."
    USER_GROUP
    "User role."
    USER_ROLE
    "VCD audit object."
    VCD
    "VCD vApp object."
    VCD_VAPP
    "VCenter audit object."
    VCENTER
    "VMware Compute Cluster object."
    VMWARE_COMPUTE_CLUSTER
    "VMware mount object."
    VMWARE_MOUNT
    "VMware virtual machine audit object."
    VMWARE_VM
    "Volume group audit object."
    VOLUME_GROUP
    "Windows fileset audit object."
    WINDOWS_FILESET
    "Windows host object."
    WINDOWS_HOST
}

"Represents the severity level for audits."
enum AuditSeverity {
    "Critical audit."
    CRITICAL
    "Informational audit."
    INFO
    "Unspecified severity."
    SEVERITY_UNSPECIFIED
    "Warning audit."
    WARNING
}

"Represents the audit status values."
enum AuditStatus {
    "Unspecified audit status."
    AUDIT_STATUS_UNSPECIFIED
    "Failed audit."
    FAILURE
    "Successful audit."
    SUCCESS
}

"Represents audit types."
enum AuditType {
    "Access management audit."
    ACCESS_MANAGEMENT
    "Audit."
    AUDIT
    "Unspecified audit type."
    AUDIT_TYPE_UNSPECIFIED
    "Backup audit."
    BACKUP
    "Classification audit."
    CLASSIFICATION
    "Configuration audit."
    CONFIGURATION
    "Diagnostic audit."
    DIAGNOSTIC
    "Download audit."
    DOWNLOAD
    "Failover audit."
    FAILOVER
    "Index audit."
    INDEX
    "Isolated recovery audit."
    ISOLATED_RECOVERY
    "Legal hold audit."
    LEGAL_HOLD
    "Local recovery audit."
    LOCAL_RECOVERY
    "Login audit."
    LOGIN
    "Quarantine audit."
    QUARANTINE
    "Recovery audit."
    RECOVERY
    "Search audit."
    SEARCH
    "SLA Domain assignment audit."
    SLA_ASSIGNMENT
    "SLA Domain modification audit."
    SLA_MODIFICATION
    "Sync audit."
    SYNC
    "Two-person rule audits."
    TPR
}

"Auth type for the NFS type location."
enum AuthTypeEnum {
    "Kerberos based auth type."
    KERBEROS
    "No auth type."
    NONE
}

"Options for authenticating the webhook."
enum AuthenticationType {
    "Unused default value."
    AUTH_TYPE_UNSPECIFIED
    "Webhook is authenticated with a username/password pair."
    BASIC
    "Webhook is authenticated with a bearer token."
    BEARER
    "Webhook is authenticated with a custom header."
    CUSTOM_HEADER
    "Webhook is authenticated with a URL token."
    URL
}

"Status of an AWS Account."
enum AwsAccountStatus {
    "The AWS account has been added."
    ADDED
    "The AWS account has been deleted."
    DELETED
    "The AWS account is in the process of being deleted."
    DELETING
    "The deletion of the AWS account has failed."
    DELETION_FAILED
    "The AWS account is disconnected."
    DISCONNECTED
    "The AWS account has been refreshed."
    REFRESHED
    "The AWS account is refreshing."
    REFRESHING
    "The AWS account has failed to refresh."
    REFRESH_FAILED
}

"AWS authentication server based cloud account region names."
enum AwsAuthServerBasedCloudAccountRegion {
    "AWS cloud unknown region."
    UNKNOWN_AWS_AUTH_SERVER_BASED_REGION
    "AWS cloud US ISOB East 1 region."
    US_ISOB_EAST_1
    "AWS cloud US ISO East 1 region."
    US_ISO_EAST_1
    "AWS cloud US ISO West 1 region."
    US_ISO_WEST_1
}

"AWS cloud account regions enum."
enum AwsCloudAccountRegion {
    "AWS cloud Africa (Cape Town) region."
    AF_SOUTH_1
    "AWS cloud Asia Pacific (Hong Kong) region."
    AP_EAST_1
    "AWS cloud Asia Pacific (Tokyo) region."
    AP_NORTHEAST_1
    "AWS cloud Asia Pacific (Seoul) region."
    AP_NORTHEAST_2
    "AWS cloud Asia Pacific (Singapore) region."
    AP_SOUTHEAST_1
    "AWS cloud Asia Pacific (Sydney) region."
    AP_SOUTHEAST_2
    "AWS cloud Asia Pacific (Mumbai) region."
    AP_SOUTH_1
    "AWS cloud Canada (Central) region."
    CA_CENTRAL_1
    "AWS cloud China (Ningxia) region."
    CN_NORTHWEST_1
    "AWS cloud China (Beijing) region."
    CN_NORTH_1
    "AWS cloud EU (Frankfurt) region."
    EU_CENTRAL_1
    "AWS cloud EU (Stockholm) region."
    EU_NORTH_1
    "AWS cloud EU (Milan) region."
    EU_SOUTH_1
    "AWS cloud EU (Ireland) region."
    EU_WEST_1
    "AWS cloud EU (London) region."
    EU_WEST_2
    "AWS cloud EU (Paris) region."
    EU_WEST_3
    "AWS cloud Middle East (Bahrain) region."
    ME_SOUTH_1
    "AWS cloud South America (Sao Paulo) region."
    SA_EAST_1
    "AWS cloud region is unknown."
    UNKNOWN_AWS_REGION
    "AWS cloud US East (N. Virginia) region."
    US_EAST_1
    "AWS cloud US East (Ohio) region."
    US_EAST_2
    "AWS Gov cloud US East 1 (N. Virginia) region."
    US_GOV_EAST_1
    "AWS Gov cloud US West 1 (N. California) region."
    US_GOV_WEST_1
    "AWS cloud US West (N. California) region."
    US_WEST_1
    "AWS cloud US West (Oregon) region."
    US_WEST_2
}

"Aws cloud account query filter fields."
enum AwsCloudComputeSettingFilterField {
    "Cloud account ID."
    CLOUD_ACCOUNT_ID
    "Retrieve from all clusters."
    CLUSTER_ALL
    "Cluster ID."
    CLUSTER_ID
    "If it has Rubrik managed security group."
    IS_SG_RUBRIK_MANAGED
    "Name of the compute setting."
    NAME
}

"Aws cloud compute settings sort fields."
enum AwsCloudComputeSettingQuerySortByField {
    "Name of aws compute setting."
    NAME
}

"AWS Cloud Type Enum."
enum AwsCloudType {
    "Cloud type for AWS C2S cloud account."
    C2S
    "Cloud type for AWS China cloud account."
    CHINA
    "Cloud type for AWS Gov cloud account."
    GOV
    "Cloud type for AWS SC2S cloud account."
    SC2S
    "Cloud type for AWS Commercial cloud account."
    STANDARD
}

"AWS feature for which we require some specific permissions."
enum AwsFeatureForPermissionCheck {
    "AWS feature for exporting virtual machine in powered off state."
    AWS_EXPORT_VM_IN_POWERED_OFF_STATE
    "AWS feature for exporting virtual machine with IAM instance profile."
    AWS_EXPORT_VM_WITH_IAM_INSTANCE_PROFILE
    "The feature is unspecified."
    AWS_UNSPECIFIED
}

enum AwsInstanceTenancy {
    DEDICATED
    DEFAULT
    HOST
}

"The field type used to sort AWS accounts."
enum AwsNativeAccountSortFields {
    "Use EBS volume count for sorting."
    EBS_VOLUME_COUNT
    "Use EC2 instance count for sorting."
    EC2_INSTANCE_COUNT
    "Use AWS account SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
    "Use AWS account name for sorting."
    NAME
}

"The field type used to sort the EBS volumes."
enum AwsNativeEbsVolumeSortFields {
    "Use AWS account name for sorting."
    AWS_NATIVE_ACCOUNT_NAME
    "Use EBS volume ID for sorting."
    EBS_VOLUME_ID
    "Use EBS volume name for sorting."
    EBS_VOLUME_NAME
    "Use size of EBS volume for sorting."
    EBS_VOLUME_SIZE
    "Use type of EBS volume for sorting."
    EBS_VOLUME_TYPE
    "Use EBS volume SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
}

"AWS EBS volume types."
enum AwsNativeEbsVolumeType {
    "EBS volume type is gp2."
    GP2
    "EBS volume type is gp3."
    GP3
    "EBS volume type is io1."
    IO1
    "EBS volume type is io2."
    IO2
    "EBS volume type is not specified."
    NOT_SPECIFIED
    "EBS volume type is sc1."
    SC1
    "EBS volume type is st1."
    ST1
    "Storage type is standard."
    STANDARD
    "EBS volume type is unknown."
    UNKNOWN
}

"The field type used to sort the EC2 instances."
enum AwsNativeEc2InstanceSortFields {
    "Use SLA Domain assignment for sorting."
    ASSIGNED_SLA_DOMAIN
    "Use AWS account name for sorting."
    AWS_NATIVE_ACCOUNT_NAME
    "Use VPC ID for sorting."
    AWS_VPC_ID
    "Use EC2 instance ID for sorting."
    EC2_INSTANCE_ID
    "Use EC2 instance name for sorting."
    EC2_INSTANCE_NAME
    "Use type of EC2 instance for sorting."
    EC2_INSTANCE_TYPE
    "Use EC2 instance SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
}

"AWS EC2 instance types."
enum AwsNativeEc2InstanceType {
    "EC2 instance type is a1.2xlarge."
    A1_2XLARGE
    "EC2 instance type is a1.4xlarge."
    A1_4XLARGE
    "EC2 instance type is a1.large."
    A1_LARGE
    "EC2 instance type is a1.medium."
    A1_MEDIUM
    "EC2 instance type is a1.metal."
    A1_METAL
    "EC2 instance type is a1.xlarge."
    A1_XLARGE
    "EC2 instance type is c1.medium."
    C1_MEDIUM
    "EC2 instance type is c1.xlarge."
    C1_XLARGE
    "EC2 instance type is c3.2xlarge."
    C3_2XLARGE
    "EC2 instance type is c3.4xlarge."
    C3_4XLARGE
    "EC2 instance type is c3.8xlarge."
    C3_8XLARGE
    "EC2 instance type is c3.large."
    C3_LARGE
    "EC2 instance type is c3.xlarge."
    C3_XLARGE
    "EC2 instance type is c4.2xlarge."
    C4_2XLARGE
    "EC2 instance type is c4.4xlarge."
    C4_4XLARGE
    "EC2 instance type is c4.8xlarge."
    C4_8XLARGE
    "EC2 instance type is c4.large."
    C4_LARGE
    "EC2 instance type is c4.xlarge."
    C4_XLARGE
    "EC2 instance type is c5d.12xlarge."
    C5D_12XLARGE
    "EC2 instance type is c5d.18xlarge."
    C5D_18XLARGE
    "EC2 instance type is c5d.24xlarge."
    C5D_24XLARGE
    "EC2 instance type is c5d.2xlarge."
    C5D_2XLARGE
    "EC2 instance type is c5d.4xlarge."
    C5D_4XLARGE
    "EC2 instance type is c5d.9xlarge."
    C5D_9XLARGE
    "EC2 instance type is c5d.large."
    C5D_LARGE
    "EC2 instance type is c5d.metal."
    C5D_METAL
    "EC2 instance type is c5d.xlarge."
    C5D_XLARGE
    "EC2 instance type is c5n.18xlarge."
    C5N_18XLARGE
    "EC2 instance type is c5n.2xlarge."
    C5N_2XLARGE
    "EC2 instance type is c5n.4xlarge."
    C5N_4XLARGE
    "EC2 instance type is c5n.9xlarge."
    C5N_9XLARGE
    "EC2 instance type is c5n.large."
    C5N_LARGE
    "EC2 instance type is c5n.xlarge."
    C5N_XLARGE
    "EC2 instance type is c5.12xlarge."
    C5_12XLARGE
    "EC2 instance type is c5.18xlarge."
    C5_18XLARGE
    "EC2 instance type is c5.24xlarge."
    C5_24XLARGE
    "EC2 instance type is c5.2xlarge."
    C5_2XLARGE
    "EC2 instance type is c5.4xlarge."
    C5_4XLARGE
    "EC2 instance type is c5.9xlarge."
    C5_9XLARGE
    "EC2 instance type is c5.large."
    C5_LARGE
    "EC2 instance type is c5.metal."
    C5_METAL
    "EC2 instance type is c5.xlarge."
    C5_XLARGE
    "EC2 instance type is cc1.4xlarge."
    CC1_4XLARGE
    "EC2 instance type is cc2.8xlarge."
    CC2_8XLARGE
    "EC2 instance type is cg1.4xlarge."
    CG1_4XLARGE
    "EC2 instance type is cr1.8xlarge."
    CR1_8XLARGE
    "EC2 instance type is d2.2xlarge."
    D2_2XLARGE
    "EC2 instance type is d2.4xlarge."
    D2_4XLARGE
    "EC2 instance type is d2.8xlarge."
    D2_8XLARGE
    "EC2 instance type is d2.xlarge."
    D2_XLARGE
    "EC2 instance type is f1.16xlarge."
    F1_16XLARGE
    "EC2 instance type is f1.2xlarge."
    F1_2XLARGE
    "EC2 instance type is f1.4xlarge."
    F1_4XLARGE
    "EC2 instance type is g2.2xlarge."
    G2_2XLARGE
    "EC2 instance type is g2.8xlarge."
    G2_8XLARGE
    "EC2 instance type is g3s.xlarge."
    G3S_XLARGE
    "EC2 instance type is g3.16xlarge."
    G3_16XLARGE
    "EC2 instance type is g3.4xlarge."
    G3_4XLARGE
    "EC2 instance type is g3.8xlarge."
    G3_8XLARGE
    "EC2 instance type is g4dn.2xlarge."
    G4DN_12XLARGE
    "EC2 instance type is g4dn.2xlarge."
    G4DN_16XLARGE
    "EC2 instance type is g4dn.2xlarge."
    G4DN_2XLARGE
    "EC2 instance type is g4dn.2xlarge."
    G4DN_4XLARGE
    "EC2 instance type is g4dn.2xlarge."
    G4DN_8XLARGE
    "EC2 instance type is g4dn.2xlarge."
    G4DN_XLARGE
    "EC2 instance type is h1.16xlarge."
    H1_16XLARGE
    "EC2 instance type is h1.2xlarge."
    H1_2XLARGE
    "EC2 instance type is h1.4xlarge."
    H1_4XLARGE
    "EC2 instance type is h1.8xlarge."
    H1_8XLARGE
    "EC2 instance type is hI1.4xlarge."
    HI1_4XLARGE
    "EC2 instance type is hs1.8xlarge."
    HS1_8XLARGE
    "EC2 instance type is i2.2xlarge."
    I2_2XLARGE
    "EC2 instance type is i2.4xlarge."
    I2_4XLARGE
    "EC2 instance type is i2.8xlarge."
    I2_8XLARGE
    "EC2 instance type is i2.xlarge."
    I2_XLARGE
    "EC2 instance type is i3en.12xlarge."
    I3EN_12XLARGE
    "EC2 instance type is i3en.24xlarge."
    I3EN_24XLARGE
    "EC2 instance type is i3en.2xlarge."
    I3EN_2XLARGE
    "EC2 instance type is i3en.3xlarge."
    I3EN_3XLARGE
    "EC2 instance type is i3en.6xlarge."
    I3EN_6XLARGE
    "EC2 instance type is i3en.large."
    I3EN_LARGE
    "EC2 instance type is i3en.metal."
    I3EN_METAL
    "EC2 instance type is i3en.xlarge."
    I3EN_XLARGE
    "EC2 instance type is i3.16xlarge."
    I3_16XLARGE
    "EC2 instance type is i3.2xlarge."
    I3_2XLARGE
    "EC2 instance type is i3.4xlarge."
    I3_4XLARGE
    "EC2 instance type is i3.8xlarge."
    I3_8XLARGE
    "EC2 instance type is i3.large."
    I3_LARGE
    "EC2 instance type is i3.metal."
    I3_METAL
    "EC2 instance type is i3.xlarge."
    I3_XLARGE
    "EC2 instance type is inf1.24xlarge."
    INF1_24XLARGE
    "EC2 instance type is inf1.2xlarge."
    INF1_2XLARGE
    "EC2 instance type is inf1.6xlarge."
    INF1_6XLARGE
    "EC2 instance type is inf1.xlarge."
    INF1_XLARGE
    "EC2 instance type is m1.large."
    M1_LARGE
    "EC2 instance type is m1.medium."
    M1_MEDIUM
    "EC2 instance type is m1.small."
    M1_SMALL
    "EC2 instance type is m1.xlarge."
    M1_XLARGE
    "EC2 instance type is m2.2xlarge."
    M2_2XLARGE
    "EC2 instance type is m2.4xlarge."
    M2_4XLARGE
    "EC2 instance type is m2.xlarge."
    M2_XLARGE
    "EC2 instance type is m3.2xlarge."
    M3_2XLARGE
    "EC2 instance type is m3.large."
    M3_LARGE
    "EC2 instance type is m3.medium."
    M3_MEDIUM
    "EC2 instance type is m3.xlarge."
    M3_XLARGE
    "EC2 instance type is m4.10xlarge."
    M4_10XLARGE
    "EC2 instance type is m4.16xlarge."
    M4_16XLARGE
    "EC2 instance type is m4.2xlarge."
    M4_2XLARGE
    "EC2 instance type is m4.4xlarge."
    M4_4XLARGE
    "EC2 instance type is m4.large."
    M4_LARGE
    "EC2 instance type is m4.xlarge."
    M4_XLARGE
    "EC2 instance type is m5ad.12xlarge."
    M5AD_12XLARGE
    "EC2 instance type is m5ad.16xlarge."
    M5AD_16XLARGE
    "EC2 instance type is m5ad.24xlarge."
    M5AD_24XLARGE
    "EC2 instance type is m5ad.2xlarge."
    M5AD_2XLARGE
    "EC2 instance type is m5ad.4xlarge."
    M5AD_4XLARGE
    "EC2 instance type is m5ad.8xlarge."
    M5AD_8XLARGE
    "EC2 instance type is m5ad.large."
    M5AD_LARGE
    "EC2 instance type is m5ad.xlarge."
    M5AD_XLARGE
    "EC2 instance type is m5a.12xlarge."
    M5A_12XLARGE
    "EC2 instance type is m5a.16xlarge."
    M5A_16XLARGE
    "EC2 instance type is m5a.24xlarge."
    M5A_24XLARGE
    "EC2 instance type is m5a.2xlarge."
    M5A_2XLARGE
    "EC2 instance type is m5a.4xlarge."
    M5A_4XLARGE
    "EC2 instance type is m5a.8xlarge."
    M5A_8XLARGE
    "EC2 instance type is m5a.large."
    M5A_LARGE
    "EC2 instance type is m5a.xlarge."
    M5A_XLARGE
    "EC2 instance type is m5dn.12xlarge."
    M5DN_12XLARGE
    "EC2 instance type is m5dn.16xlarge."
    M5DN_16XLARGE
    "EC2 instance type is m5dn.24xlarge."
    M5DN_24XLARGE
    "EC2 instance type is m5dn.2xlarge."
    M5DN_2XLARGE
    "EC2 instance type is m5dn.4xlarge."
    M5DN_4XLARGE
    "EC2 instance type is m5dn.8xlarge."
    M5DN_8XLARGE
    "EC2 instance type is m5dn.large."
    M5DN_LARGE
    "EC2 instance type is m5dn.xlarge."
    M5DN_XLARGE
    "EC2 instance type is m5d.12xlarge."
    M5D_12XLARGE
    "EC2 instance type is m5d.16xlarge."
    M5D_16XLARGE
    "EC2 instance type is m5d.24xlarge."
    M5D_24XLARGE
    "EC2 instance type is m5d.2xlarge."
    M5D_2XLARGE
    "EC2 instance type is m5d.4xlarge."
    M5D_4XLARGE
    "EC2 instance type is m5d.8xlarge."
    M5D_8XLARGE
    "EC2 instance type is m5d.large."
    M5D_LARGE
    "EC2 instance type is m5d.metal."
    M5D_METAL
    "EC2 instance type is m5d.xlarge."
    M5D_XLARGE
    "EC2 instance type is m5n.12xlarge."
    M5N_12XLARGE
    "EC2 instance type is m5n.16xlarge."
    M5N_16XLARGE
    "EC2 instance type is m5n.24xlarge."
    M5N_24XLARGE
    "EC2 instance type is m5n.2xlarge."
    M5N_2XLARGE
    "EC2 instance type is m5n.4xlarge."
    M5N_4XLARGE
    "EC2 instance type is m5n.8xlarge."
    M5N_8XLARGE
    "EC2 instance type is m5n.large."
    M5N_LARGE
    "EC2 instance type is m5n.xlarge."
    M5N_XLARGE
    "EC2 instance type is m5.12xlarge."
    M5_12XLARGE
    "EC2 instance type is m5.16xlarge."
    M5_16XLARGE
    "EC2 instance type is m5.24xlarge."
    M5_24XLARGE
    "EC2 instance type is m5.2xlarge."
    M5_2XLARGE
    "EC2 instance type is m5.4xlarge."
    M5_4XLARGE
    "EC2 instance type is m5.8xlarge."
    M5_8XLARGE
    "EC2 instance type is m5.large."
    M5_LARGE
    "EC2 instance type is m5.metal."
    M5_METAL
    "EC2 instance type is m5.xlarge."
    M5_XLARGE
    "EC2 instance type is not specified."
    NOT_SPECIFIED
    "EC2 instance type is p2.16xlarge."
    P2_16XLARGE
    "EC2 instance type is p2.8xlarge."
    P2_8XLARGE
    "EC2 instance type is p2.xlarge."
    P2_XLARGE
    "EC2 instance type is p3dn.24xlarge."
    P3DN_24XLARGE
    "EC2 instance type is p3.16xlarge."
    P3_16XLARGE
    "EC2 instance type is p3.2xlarge."
    P3_2XLARGE
    "EC2 instance type is p3.8xlarge."
    P3_8XLARGE
    "EC2 instance type is r3.2xlarge."
    R3_2XLARGE
    "EC2 instance type is r3.4xlarge."
    R3_4XLARGE
    "EC2 instance type is r3.8xlarge."
    R3_8XLARGE
    "EC2 instance type is r3.large."
    R3_LARGE
    "EC2 instance type is r3.xlarge."
    R3_XLARGE
    "EC2 instance type is r4.16xlarge."
    R4_16XLARGE
    "EC2 instance type is r4.2xlarge."
    R4_2XLARGE
    "EC2 instance type is r4.4xlarge."
    R4_4XLARGE
    "EC2 instance type is r4.8xlarge."
    R4_8XLARGE
    "EC2 instance type is r4.large."
    R4_LARGE
    "EC2 instance type is r4.xlarge."
    R4_XLARGE
    "EC2 instance type is r5ad.12xlarge."
    R5AD_12XLARGE
    "EC2 instance type is r5ad.16xlarge."
    R5AD_16XLARGE
    "EC2 instance type is r5ad.24xlarge."
    R5AD_24XLARGE
    "EC2 instance type is r5ad.2xlarge."
    R5AD_2XLARGE
    "EC2 instance type is r5ad.4xlarge."
    R5AD_4XLARGE
    "EC2 instance type is r5ad.8xlarge."
    R5AD_8XLARGE
    "EC2 instance type is r5ad.large."
    R5AD_LARGE
    "EC2 instance type is r5ad.xlarge."
    R5AD_XLARGE
    "EC2 instance type is r5a.12xlarge."
    R5A_12XLARGE
    "EC2 instance type is r5a.16xlarge."
    R5A_16XLARGE
    "EC2 instance type is r5a.24xlarge."
    R5A_24XLARGE
    "EC2 instance type is r5a.2xlarge."
    R5A_2XLARGE
    "EC2 instance type is r5a.4xlarge."
    R5A_4XLARGE
    "EC2 instance type is r5a.8xlarge."
    R5A_8XLARGE
    "EC2 instance type is r5a.large."
    R5A_LARGE
    "EC2 instance type is r5a.xlarge."
    R5A_XLARGE
    "EC2 instance type is r5dn.12xlarge."
    R5DN_12XLARGE
    "EC2 instance type is r5dn.16xlarge."
    R5DN_16XLARGE
    "EC2 instance type is r5dn.24xlarge."
    R5DN_24XLARGE
    "EC2 instance type is r5dn.2xlarge."
    R5DN_2XLARGE
    "EC2 instance type is r5dn.4xlarge."
    R5DN_4XLARGE
    "EC2 instance type is r5dn.8xlarge."
    R5DN_8XLARGE
    "EC2 instance type is r5dn.large."
    R5DN_LARGE
    "EC2 instance type is r5dn.xlarge."
    R5DN_XLARGE
    "EC2 instance type is r5d.12xlarge."
    R5D_12XLARGE
    "EC2 instance type is r5d.16xlarge."
    R5D_16XLARGE
    "EC2 instance type is r5d.24xlarge."
    R5D_24XLARGE
    "EC2 instance type is r5d.2xlarge."
    R5D_2XLARGE
    "EC2 instance type is r5d.4xlarge."
    R5D_4XLARGE
    "EC2 instance type is r5d.8xlarge."
    R5D_8XLARGE
    "EC2 instance type is r5d.large."
    R5D_LARGE
    "EC2 instance type is r5d.metal."
    R5D_METAL
    "EC2 instance type is r5d.xlarge."
    R5D_XLARGE
    "EC2 instance type is r5n.12xlarge."
    R5N_12XLARGE
    "EC2 instance type is r5n.16xlarge."
    R5N_16XLARGE
    "EC2 instance type is r5n.24xlarge."
    R5N_24XLARGE
    "EC2 instance type is r5n.2xlarge."
    R5N_2XLARGE
    "EC2 instance type is r5n.4xlarge."
    R5N_4XLARGE
    "EC2 instance type is r5n.8xlarge."
    R5N_8XLARGE
    "EC2 instance type is r5n.large."
    R5N_LARGE
    "EC2 instance type is r5n.xlarge."
    R5N_XLARGE
    "EC2 instance type is r5.12xlarge."
    R5_12XLARGE
    "EC2 instance type is r5.16xlarge."
    R5_16XLARGE
    "EC2 instance type is r5.24xlarge."
    R5_24XLARGE
    "EC2 instance type is r5.2xlarge."
    R5_2XLARGE
    "EC2 instance type is r5.4xlarge."
    R5_4XLARGE
    "EC2 instance type is r5.8xlarge."
    R5_8XLARGE
    "EC2 instance type is r5.large."
    R5_LARGE
    "EC2 instance type is r5.metal."
    R5_METAL
    "EC2 instance type is r5.xlarge."
    R5_XLARGE
    "EC2 instance type is t1.micro."
    T1_MICRO
    "EC2 instance type is t2.2xlarge."
    T2_2XLARGE
    "EC2 instance type is t2.large."
    T2_LARGE
    "EC2 instance type is t2.medium."
    T2_MEDIUM
    "EC2 instance type is t2.micro."
    T2_MICRO
    "EC2 instance type is t2.nano."
    T2_NANO
    "EC2 instance type is t2.small."
    T2_SMALL
    "EC2 instance type is t2.xlarge."
    T2_XLARGE
    "EC2 instance type is t3a.2xlarge."
    T3A_2XLARGE
    "EC2 instance type is t3a.large."
    T3A_LARGE
    "EC2 instance type is t3a.medium."
    T3A_MEDIUM
    "EC2 instance type is t3a.micro."
    T3A_MICRO
    "EC2 instance type is t3a.nano."
    T3A_NANO
    "EC2 instance type is t3a.small."
    T3A_SMALL
    "EC2 instance type is t3a.xlarge."
    T3A_XLARGE
    "EC2 instance type is t3.2xlarge."
    T3_2XLARGE
    "EC2 instance type is t3.large."
    T3_LARGE
    "EC2 instance type is t3.medium."
    T3_MEDIUM
    "EC2 instance type is t3.micro."
    T3_MICRO
    "EC2 instance type is t3.nano."
    T3_NANO
    "EC2 instance type is t3.small."
    T3_SMALL
    "EC2 instance type is t3.xlarge."
    T3_XLARGE
    "EC2 instance type is unknown."
    UNKNOWN
    "EC2 instance type is u-12tb1.metal."
    U_12TB1_METAL
    "EC2 instance type is u-18tb1.metal."
    U_18TB1_METAL
    "EC2 instance type is u-24tb1.metal."
    U_24TB1_METAL
    "EC2 instance type is u-6tb1.metal."
    U_6TB1_METAL
    "EC2 instance type is u-9tb1.metal."
    U_9TB1_METAL
    "EC2 instance type is x1e.16xlarge."
    X1E_16XLARGE
    "EC2 instance type is x1e.2xlarge."
    X1E_2XLARGE
    "EC2 instance type is x1e.32xlarge."
    X1E_32XLARGE
    "EC2 instance type is x1e.4xlarge."
    X1E_4XLARGE
    "EC2 instance type is x1e.8xlarge."
    X1E_8XLARGE
    "EC2 instance type is x1e.xlarge."
    X1E_XLARGE
    "EC2 instance type is x1.16xlarge."
    X1_16XLARGE
    "EC2 instance type is x1.32xlarge."
    X1_32XLARGE
    "EC2 instance type is z1d.12xlarge."
    Z1D_12XLARGE
    "EC2 instance type is z1d.2xlarge."
    Z1D_2XLARGE
    "EC2 instance type is z1d.3xlarge."
    Z1D_3XLARGE
    "EC2 instance type is z1d.6xlarge."
    Z1D_6XLARGE
    "EC2 instance type is z1d.large."
    Z1D_LARGE
    "EC2 instance type is z1d.metal."
    Z1D_METAL
    "EC2 instance type is z1d.xlarge."
    Z1D_XLARGE
}

"State of AWS native file recovery."
enum AwsNativeFileRecoveryStatus {
    "AWS native file recovery is not enabled."
    DISABLED
    "AWS native file recovery is enabled."
    ENABLED
    "State of AWS native file recovery is not specified."
    NOT_SPECIFIED
}

"AWS native protection features."
enum AwsNativeProtectionFeature {
    "AWS native protection feature is EC2."
    EC2
    "AWS native protection feature is RDS."
    RDS
}

"DB engine of an RDS instance."
enum AwsNativeRdsDbEngine {
    "DB engine is MariaDB."
    MARIADB
    "DB engine is MySQL."
    MYSQL
    "DB engine is Oracle EE."
    ORACLE_EE
    "DB engine is Oracle SE."
    ORACLE_SE
    "DB engine is Oracle SE1."
    ORACLE_SE1
    "DB engine is Oracle SE2."
    ORACLE_SE2
    "DB engine is PostgreSQL."
    POSTGRES
    "DB engine is SQL Server EE."
    SQLSERVER_EE
    "DB engine is SQL Server EX."
    SQLSERVER_EX
    "DB engine is SQL Server SE."
    SQLSERVER_SE
    "DB engine is SQL Server Web."
    SQLSERVER_WEB
    "DB engine is unknown."
    UNKNOWN
}

"DB class of an RDS instance."
enum AwsNativeRdsDbInstanceClass {
    "DB class is db.m1.large."
    DB_M1_LARGE
    "DB class is db.m1.medium."
    DB_M1_MEDIUM
    "DB class is db.m1.small."
    DB_M1_SMALL
    "DB class is db.m1.xlarge."
    DB_M1_XLARGE
    "DB class is db.m2.2xlarge."
    DB_M2_2XLARGE
    "DB class is db.m2.4xlarge."
    DB_M2_4XLARGE
    "DB class is db.m2.xlarge."
    DB_M2_XLARGE
    "DB class is db.m3.2xlarge."
    DB_M3_2XLARGE
    "DB class is db.m3.large."
    DB_M3_LARGE
    "DB class is db.m3.medium."
    DB_M3_MEDIUM
    "DB class is db.m3.xlarge."
    DB_M3_XLARGE
    "DB class is db.m4.10xlarge."
    DB_M4_10XLARGE
    "DB class is db.m4.16xlarge."
    DB_M4_16XLARGE
    "DB class is db.m4.2xlarge."
    DB_M4_2XLARGE
    "DB class is db.m4.4xlarge."
    DB_M4_4XLARGE
    "DB class is db.m4.large."
    DB_M4_LARGE
    "DB class is db.m4.xlarge."
    DB_M4_XLARGE
    "DB class is db.m5d.12xlarge."
    DB_M5D_12XLARGE
    "DB class is db.m5d.16xlarge."
    DB_M5D_16XLARGE
    "DB class is db.m5d.24xlarge."
    DB_M5D_24XLARGE
    "DB class is db.m5d.2xlarge."
    DB_M5D_2XLARGE
    "DB class is db.m5d.4xlarge."
    DB_M5D_4XLARGE
    "DB class is db.m5d.8xlarge."
    DB_M5D_8XLARGE
    "DB class is db.m5d.large."
    DB_M5D_LARGE
    "DB class is db.m5d.xlarge."
    DB_M5D_XLARGE
    "DB class is db.m5.12xlarge."
    DB_M5_12XLARGE
    "DB class is db.m5.16xlarge."
    DB_M5_16XLARGE
    "DB class is db.m5.24xlarge."
    DB_M5_24XLARGE
    "DB class is db.m5.2xlarge."
    DB_M5_2XLARGE
    "DB class is db.m5.4xlarge."
    DB_M5_4XLARGE
    "DB class is db.m5.8xlarge."
    DB_M5_8XLARGE
    "DB class is db.m5.large."
    DB_M5_LARGE
    "DB class is db.m5.xlarge."
    DB_M5_XLARGE
    "DB class is db.m6gd.12xlarge."
    DB_M6GD_12XLARGE
    "DB class is db.m6gd.16xlarge."
    DB_M6GD_16XLARGE
    "DB class is db.m6gd.2xlarge."
    DB_M6GD_2XLARGE
    "DB class is db.m6gd.4xlarge."
    DB_M6GD_4XLARGE
    "DB class is db.m6gd.8xlarge."
    DB_M6GD_8XLARGE
    "DB class is db.m6gd.large."
    DB_M6GD_LARGE
    "DB class is db.m6gd.xlarge."
    DB_M6GD_XLARGE
    "DB class is db.m6g.12xlarge."
    DB_M6G_12XLARGE
    "DB class is db.m6g.16xlarge."
    DB_M6G_16XLARGE
    "DB class is db.m6g.2xlarge."
    DB_M6G_2XLARGE
    "DB class is db.m6g.4xlarge."
    DB_M6G_4XLARGE
    "DB class is db.m6g.8xlarge."
    DB_M6G_8XLARGE
    "DB class is db.m6g.large."
    DB_M6G_LARGE
    "DB class is db.m6g.xlarge."
    DB_M6G_XLARGE
    "DB class is db.r3.2xlarge."
    DB_R3_2XLARGE
    "DB class is db.r3.4xlarge."
    DB_R3_4XLARGE
    "DB class is db.r3.8xlarge."
    DB_R3_8XLARGE
    "DB class is db.r3.large."
    DB_R3_LARGE
    "DB class is db.r3.xlarge."
    DB_R3_XLARGE
    "DB class is db.r4.12xlarge."
    DB_R4_12XLARGE
    "DB class is db.r4.16xlarge."
    DB_R4_16XLARGE
    "DB class is db.r4.2xlarge."
    DB_R4_2XLARGE
    "DB class is db.r4.4xlarge."
    DB_R4_4XLARGE
    "DB class is db.r4.8xlarge."
    DB_R4_8XLARGE
    "DB class is db.r4.large."
    DB_R4_LARGE
    "DB class is db.r4.xlarge."
    DB_R4_XLARGE
    "DB class is db.r5b.12xlarge."
    DB_R5B_12XLARGE
    "DB class is db.r5b.16xlarge."
    DB_R5B_16XLARGE
    "DB class is db.r5b.24xlarge."
    DB_R5B_24XLARGE
    "DB class is db.r5b.2xlarge."
    DB_R5B_2XLARGE
    "DB class is db.r5b.4xlarge."
    DB_R5B_4XLARGE
    "DB class is db.r5b.8xlarge."
    DB_R5B_8XLARGE
    "DB class is db.r5b.large."
    DB_R5B_LARGE
    "DB class is db.r5b.xlarge."
    DB_R5B_XLARGE
    "DB class is db.r5d.12xlarge."
    DB_R5D_12XLARGE
    "DB class is db.r5d.16xlarge."
    DB_R5D_16XLARGE
    "DB class is db.r5d.24xlarge."
    DB_R5D_24XLARGE
    "DB class is db.r5d.2xlarge."
    DB_R5D_2XLARGE
    "DB class is db.r5d.4xlarge."
    DB_R5D_4XLARGE
    "DB class is db.r5d.8xlarge."
    DB_R5D_8XLARGE
    "DB class is db.r5d.large."
    DB_R5D_LARGE
    "DB class is db.r5d.xlarge."
    DB_R5D_XLARGE
    "DB class is db.r5.12xlarge."
    DB_R5_12XLARGE
    "DB class is db.r5.16xlarge."
    DB_R5_16XLARGE
    "DB class is db.r5.24xlarge."
    DB_R5_24XLARGE
    "DB class is db.r5.2xlarge."
    DB_R5_2XLARGE
    "DB class is db.r5.4xlarge."
    DB_R5_4XLARGE
    "DB class is db.r5.8xlarge."
    DB_R5_8XLARGE
    "DB class is db.r5.large."
    DB_R5_LARGE
    "DB class is db.r5.xlarge."
    DB_R5_XLARGE
    "DB class is db.r6g.12xlarge."
    DB_R6G_12XLARGE
    "DB class is db.r6g.16xlarge."
    DB_R6G_16XLARGE
    "DB class is db.r6g.2xlarge."
    DB_R6G_2XLARGE
    "DB class is db.r6g.4xlarge."
    DB_R6G_4XLARGE
    "DB class is db.r6g.8xlarge."
    DB_R6G_8XLARGE
    "DB class is db.r6g.large."
    DB_R6G_LARGE
    "DB class is db.r6g.xlarge."
    DB_R6G_XLARGE
    "DB class is db.t2.2xlarge."
    DB_T2_2XLARGE
    "DB class is db.t2.large."
    DB_T2_LARGE
    "DB class is db.t2.medium."
    DB_T2_MEDIUM
    "DB class is db.t2.micro."
    DB_T2_MICRO
    "DB class is db.t2.small."
    DB_T2_SMALL
    "DB class is db.t2.xlarge."
    DB_T2_XLARGE
    "DB class is db.t3.2xlarge."
    DB_T3_2XLARGE
    "DB class is db.t3.large."
    DB_T3_LARGE
    "DB class is db.t3.medium."
    DB_T3_MEDIUM
    "DB class is db.t3.micro."
    DB_T3_MICRO
    "DB class is db.t3.small."
    DB_T3_SMALL
    "DB class is db.t3.xlarge."
    DB_T3_XLARGE
    "DB class is db.t4g.2xlarge."
    DB_T4G_2XLARGE
    "DB class is db.t4g.large."
    DB_T4G_LARGE
    "DB class is db.t4g.medium."
    DB_T4G_MEDIUM
    "DB class is db.t4g.micro."
    DB_T4G_MICRO
    "DB class is db.t4g.small."
    DB_T4G_SMALL
    "DB class is db.t4g.xlarge."
    DB_T4G_XLARGE
    "DB class is db.x1e.16xlarge."
    DB_X1E_16XLARGE
    "DB class is db.x1e.2xlarge."
    DB_X1E_2XLARGE
    "DB class is db.x1e.32xlarge."
    DB_X1E_32XLARGE
    "DB class is db.x1e.4xlarge."
    DB_X1E_4XLARGE
    "DB class is db.x1e.8xlarge."
    DB_X1E_8XLARGE
    "DB class is db.x1e.xlarge."
    DB_X1E_XLARGE
    "DB class is db.x1.16xlarge."
    DB_X1_16XLARGE
    "DB class is db.x1.32xlarge."
    DB_X1_32XLARGE
    "DB class is db.x2g.12xlarge."
    DB_X2G_12XLARGE
    "DB class is db.x2g.16xlarge."
    DB_X2G_16XLARGE
    "DB class is db.x2g.2xlarge."
    DB_X2G_2XLARGE
    "DB class is db.x2g.4xlarge."
    DB_X2G_4XLARGE
    "DB class is db.x2g.8xlarge."
    DB_X2G_8XLARGE
    "DB class is db.x2g.large."
    DB_X2G_LARGE
    "DB class is db.x2g.medium."
    DB_X2G_MEDIUM
    "DB class is db.x2g.xlarge."
    DB_X2G_XLARGE
    "DB class is db.z1d.12xlarge."
    DB_Z1D_12XLARGE
    "DB class is db.z1d.2xlarge."
    DB_Z1D_2XLARGE
    "DB class is db.z1d.4xlarge."
    DB_Z1D_4XLARGE
    "DB class is db.z1d.6xlarge."
    DB_Z1D_6XLARGE
    "DB class is db.z1d.large."
    DB_Z1D_LARGE
    "DB class is db.z1d.xlarge."
    DB_Z1D_XLARGE
    "DB class is unknown."
    UNKNOWN
}

"The field type used to sort the RDS instances."
enum AwsNativeRdsInstanceSortFields {
    "Use SLA Domain assignment for sorting."
    ASSIGNED_SLA_DOMAIN
    "Use AWS account name for sorting."
    AWS_NATIVE_ACCOUNT_NAME
    "Use DB engine of RDS instance for sorting."
    AWS_NATIVE_RDS_DB_ENGINE
    "Use DB class of RDS instance for sorting."
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    "Use VPC ID for sorting."
    AWS_VPC_ID
    "Use RDS instance SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
    "Use RDS instance name for sorting."
    NAME
}

"The storage type of an RDS instance."
enum AwsNativeRdsStorageType {
    "Storage type is gp2."
    GP2
    "Storage type is io1."
    IO1
    "Storage type is not specified."
    NOT_SPECIFIED
    "Storage type is standard."
    STANDARD
    "Storage type is unknown."
    UNKNOWN
}

"AWS native regions."
enum AwsNativeRegion {
    "AWS native Africa (Cape Town) region."
    AF_SOUTH_1
    "AWS native Asia Pacific (Hong Kong) region."
    AP_EAST_1
    "AWS native Asia Pacific (Tokyo) region."
    AP_NORTHEAST_1
    "AWS native Asia Pacific (Seoul) region."
    AP_NORTHEAST_2
    "AWS native Asia Pacific (Singapore) region."
    AP_SOUTHEAST_1
    "AWS native Asia Pacific (Sydney) region."
    AP_SOUTHEAST_2
    "AWS native Asia Pacific (Mumbai) region."
    AP_SOUTH_1
    "AWS native Canada (Central) region."
    CA_CENTRAL_1
    "AWS native China (Ningxia) region."
    CN_NORTHWEST_1
    "AWS native China (Beijing) region."
    CN_NORTH_1
    "AWS native EU (Frankfurt) region."
    EU_CENTRAL_1
    "AWS native EU (Stockholm) region."
    EU_NORTH_1
    "AWS native EU (Milan) region."
    EU_SOUTH_1
    "AWS native EU (Ireland) region."
    EU_WEST_1
    "AWS native EU (London) region."
    EU_WEST_2
    "AWS native EU (Paris) region."
    EU_WEST_3
    "AWS native Middle East (Bahrain) region."
    ME_SOUTH_1
    "AWS native region is not specified."
    NOT_SPECIFIED
    "AWS native South America (Sao Paulo) region."
    SA_EAST_1
    "AWS native US East (N. Virginia) region."
    US_EAST_1
    "AWS native US East (Ohio) region."
    US_EAST_2
    "AWS Gov native US East 1 (N. Virginia) region."
    US_GOV_EAST_1
    "AWS Gov native US West 1 (N. California) region."
    US_GOV_WEST_1
    "AWS LCK native US East region."
    US_ISOB_EAST_1
    "AWS DCA native US East region."
    US_ISO_EAST_1
    "AWS DCA native US West region."
    US_ISO_WEST_1
    "AWS native US West (N. California) region."
    US_WEST_1
    "AWS native US West (Oregon) region."
    US_WEST_2
}

"AWS native regions for replication."
enum AwsNativeRegionForReplication {
    "AWS native for replication Africa (Cape Town) region."
    AF_SOUTH_1
    "AWS native for replication Asia Pacific (Hong Kong) region."
    AP_EAST_1
    "AWS native for replication Asia Pacific (Tokyo) region."
    AP_NORTHEAST_1
    "AWS native for replication Asia Pacific (Seoul) region."
    AP_NORTHEAST_2
    "AWS native for replication Asia Pacific (Singapore) region."
    AP_SOUTHEAST_1
    "AWS native for replication Asia Pacific (Sydney) region."
    AP_SOUTHEAST_2
    "AWS native for replication Asia Pacific (Mumbai) region."
    AP_SOUTH_1
    "AWS native for replication Canada (Central) region."
    CA_CENTRAL_1
    "AWS native for replication China (Ningxia) region."
    CN_NORTHWEST_1
    "AWS native for replication China (Beijing) region."
    CN_NORTH_1
    "AWS native for replication EU (Frankfurt) region."
    EU_CENTRAL_1
    "AWS native for replication EU (Stockholm) region."
    EU_NORTH_1
    "AWS native for replication EU (Milan) region."
    EU_SOUTH_1
    "AWS native for replication EU (Ireland) region."
    EU_WEST_1
    "AWS native for replication EU (London) region."
    EU_WEST_2
    "AWS native for replication EU (Paris) region."
    EU_WEST_3
    "AWS native for replication Middle East (Bahrain) region."
    ME_SOUTH_1
    "AWS native for replication region is not defined."
    NOT_DEFINED
    "AWS native for replication South America (Sao Paulo) region."
    SA_EAST_1
    "AWS native for replication region is the source region."
    SOURCE_REGION
    "AWS native for replication US East (N. Virginia) region."
    US_EAST_1
    "AWS native for replication US East (Ohio) region."
    US_EAST_2
    "AWS Gov native for replication US East 1 (N. Virginia) region."
    US_GOV_EAST_1
    "AWS Gov native for replication US West 1 (N. California) region."
    US_GOV_WEST_1
    "AWS LCK native for replication US East region."
    US_ISOB_EAST_1
    "AWS DCA native for replication US East region."
    US_ISO_EAST_1
    "AWS DCA native for replication US West region."
    US_ISO_WEST_1
    "AWS native for replication US West (N. California) region."
    US_WEST_1
    "AWS native for replication US West (Oregon) region."
    US_WEST_2
}

"Regions for AWS."
enum AwsRegion {
    "AWS Africa (Cape Town) region."
    AF_SOUTH_1
    "AWS Asia Pacific (Hong Kong) region."
    AP_EAST_1
    "AWS Asia Pacific (Tokyo) region."
    AP_NORTHEAST_1
    "AWS Asia Pacific (Seoul) region."
    AP_NORTHEAST_2
    "AWS Asia Pacific (Seoul) region."
    AP_NORTHEAST_3
    "AWS Asia Pacific (Singapore) region."
    AP_SOUTHEAST_1
    "AWS Asia Pacific (Sydney) region."
    AP_SOUTHEAST_2
    "AWS Asia Pacific (Mumbai) region."
    AP_SOUTH_1
    "AWS Canada (Central) region."
    CA_CENTRAL_1
    "AWS China (Ningxia) region."
    CN_NORTHWEST_1
    "AWS China (Beijing) region."
    CN_NORTH_1
    "AWS EU (Frankfurt) region."
    EU_CENTRAL_1
    "AWS EU (Milan) region."
    EU_SOUTH_1
    "AWS EU (Ireland) region."
    EU_WEST_1
    "AWS EU (London) region."
    EU_WEST_2
    "AWS EU (Paris) region."
    EU_WEST_3
    "AWS Middle East (Bahrain) region."
    ME_SOUTH_1
    "AWS South America (Sao Paulo) region."
    SA_EAST_1
    "AWS region is unknown."
    UNKNOWN_AWS_REGION
    "AWS US East (N. Virginia) region."
    US_EAST_1
    "AWS US East (Ohio) region."
    US_EAST_2
    "AWS Cloud for Government US East 1 (North Virginia) region."
    US_GOV_EAST_1
    "AWS Cloud for Government US West 1 (North California) region."
    US_GOV_WEST_1
    "AWS US West (N. California) region."
    US_WEST_1
    "AWS US West (Oregon) region."
    US_WEST_2
}

"AWS retrieval tier."
enum AwsRetrievalTier {
    "Bulk AWS retrieval tier."
    BULK_TIER
    "Expedited AWS retrieval tier."
    EXPEDITED_TIER
    "Standard AWS retrieval tier."
    STANDARD_TIER
}

"Storage class for AWS type location."
enum AwsStorageClass {
    "Amazon S3 Glacier Instant Retrieval storage class."
    GLACIER_INSTANT_RETRIEVAL
    "Amazon S3 One Zone-IA storage class."
    ONEZONE_IA
    "Amazon S3 Standard storage class."
    STANDARD
    "Amazon S3 Standard-IA storage class."
    STANDARD_IA
    "Unknown AWS storage class."
    UNKNOWN_STORAGE_CLASS
}

"Azure cloud account region Enum."
enum AzureCloudAccountRegion {
    "Azure Cloud account region is Australia Central."
    AUSTRALIACENTRAL
    "Azure Cloud account region is Australia Central 2."
    AUSTRALIACENTRAL2
    "Azure Cloud account region is Australia East."
    AUSTRALIAEAST
    "Azure Cloud account region is Australia Southeast."
    AUSTRALIASOUTHEAST
    "Azure Cloud account region is Brazil South."
    BRAZILSOUTH
    "Azure Cloud account region is Canada Central."
    CANADACENTRAL
    "Azure Cloud account region is Canada East."
    CANADAEAST
    "Azure Cloud account region is Central India."
    CENTRALINDIA
    "Azure Cloud account region is Central US."
    CENTRALUS
    "Azure Cloud account region is China East."
    CHINAEAST
    "Azure Cloud account region is China East 2."
    CHINAEAST2
    "Azure Cloud account region is China North."
    CHINANORTH
    "Azure Cloud account region is China North 2."
    CHINANORTH2
    "Azure Cloud account region is East Asia."
    EASTASIA
    "Azure Cloud account region is East US."
    EASTUS
    "Azure Cloud account region is East US 2."
    EASTUS2
    "Azure Cloud account region is France Central."
    FRANCECENTRAL
    "Azure Cloud account region is France South."
    FRANCESOUTH
    "Azure Cloud account region is Germany North."
    GERMANYNORTH
    "Azure Cloud account region is Germany West Central."
    GERMANYWESTCENTRAL
    "Azure Cloud account region is Japan East."
    JAPANEAST
    "Azure Cloud account region is Japan West."
    JAPANWEST
    "Azure Cloud account region is Korea Central."
    KOREACENTRAL
    "Azure Cloud account region is Korea South."
    KOREASOUTH
    "Azure Cloud account region is North Central US."
    NORTHCENTRALUS
    "Azure Cloud account region is North Europe."
    NORTHEUROPE
    "Azure Cloud account region is Norway East."
    NORWAYEAST
    "Azure Cloud account region is Norway West."
    NORWAYWEST
    "Azure Cloud account region is South Africa North."
    SOUTHAFRICANORTH
    "Azure Cloud account region is South Africa West."
    SOUTHAFRICAWEST
    "Azure Cloud account region is South Central US."
    SOUTHCENTRALUS
    "Azure Cloud account region is South East Asia."
    SOUTHEASTASIA
    "Azure Cloud account region is South India."
    SOUTHINDIA
    "Azure Cloud account region is Switzerland North."
    SWITZERLANDNORTH
    "Azure Cloud account region is Switzerland West."
    SWITZERLANDWEST
    "Azure Cloud account region is UAE Central."
    UAECENTRAL
    "Azure Cloud account region is UAE North."
    UAENORTH
    "Azure Cloud account region is UK South."
    UKSOUTH
    "Azure Cloud account region is UK West."
    UKWEST
    "Azure Cloud account region is Unknown."
    UNKNOWN_AZURE_REGION
    "Azure Cloud account region is US Gov Arizona."
    USGOVARIZONA
    "Azure Cloud account region is US Gov Texas."
    USGOVTEXAS
    "Azure Cloud account region is US Gov Virginia."
    USGOVVIRGINIA
    "Azure Cloud account region is West Central US."
    WESTCENTRALUS
    "Azure Cloud account region is West Europe."
    WESTEUROPE
    "Azure Cloud account region is West India."
    WESTINDIA
    "Azure Cloud account region is West US."
    WESTUS
    "Azure Cloud account region is West US 2."
    WESTUS2
    "Azure Cloud account region is West US 3."
    WESTUS3
}

"Azure cloud type."
enum AzureCloudType {
    "Azure China Cloud."
    AZURECHINACLOUD
    "Azure public Cloud."
    AZUREPUBLICCLOUD
    "Azure Gov Cloud."
    AZUREUSGOVERNMENTCLOUD
}

"A list of Azure-native protection features that require additional permissions to be enabled on the Azure subscription."
enum AzureFeatureForPermissionCheck {
    "Azure native cross region replication."
    AZURE_CROSS_REGION_REPLICATION
    "Powering off the virtual machine after performing virtual machine export from virtual machine snapshot."
    AZURE_EXPORT_VM_IN_POWERED_OFF_STATE
    "Listing availabilty set during export and restore virtual machine wizard."
    AZURE_LIST_AVAILABILITY_SET
    "Azure feature is unspecified."
    AZURE_UNSPECIFIED
}

"Host type for Azure resources."
enum AzureHostType {
    "Switched from Customer- to Rubrik- hosted."
    BOTH_HOSTS
    "Customer-hosted."
    CUSTOMER_HOST
    "Rubrik-hosted."
    RUBRIK_HOST
    "Undefined host type."
    UNDEFINED
}

"Azure instance types."
enum AzureInstanceType {
    "V5 Dense Node."
    STANDARD_D16S_V5
    "V5 Custom Node Type - STANDARD_D32S_V5."
    STANDARD_D32S_V5
    "V5 Standard Node."
    STANDARD_D8S_V5
    "V2 Dense Node."
    STANDARD_DS5_V2
    "No instance type selected."
    TYPE_UNSPECIFIED
}

"The field type used to sort the resource groups."
enum AzureNativeCommonResourceGroupSortFields {
    "Use region name for sorting."
    AZURE_REGION
    "Use managed disk SLA Domain for sorting."
    AZURE_RG_DISK_EFFECTIVE_SLA
    "Use SQL Database SLA for sorting."
    AZURE_RG_SQL_DATABASE_DB_EFFECTIVE_SLA
    "Use Managed Instance Database SLA Domain for sorting."
    AZURE_RG_SQL_MANAGED_INSTANCE_DB_EFFECTIVE_SLA
    "Use subscription name for sorting."
    AZURE_RG_SUBSCRIPTION_NAME
    "Use virtual machine SLA Domain for sorting."
    AZURE_RG_VM_EFFECTIVE_SLA
    "Use resource group name for sorting."
    NAME
}

"The field type used to sort the managed disks."
enum AzureNativeDiskSortFields {
    "Use SLA Domain assignment for sorting."
    ASSIGNED_SLA_DOMAIN
    "Use common resource group name for sorting."
    AZURE_DISK_CRG_NAME
    "Use subscription name from common resource group for sorting."
    AZURE_DISK_CRG_SUBSCRIPTION_NAME
    "Use disk size for sorting."
    AZURE_DISK_SIZE
    "Use disk type for sorting."
    AZURE_DISK_TYPE
    "Use region name for sorting."
    AZURE_REGION
    "Use managed disk SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
    "Use managed disk name for sorting."
    NAME
}

"File indexing status."
enum AzureNativeFileIndexingStatus {
    "File indexing is not enabled."
    DISABLED
    "File indexing is enabled."
    ENABLED
    "File indexing status is not specified."
    NOT_SPECIFIED
}

"Azure Managed Disk types."
enum AzureNativeManagedDiskType {
    "Azure Managed Disk type is not specified."
    NOT_SPECIFIED
    "Azure Managed Disk type is Premium LRS."
    PREMIUM_LRS
    "Azure Managed Disk type is Standard SSD LRS."
    STANDARDSSD_LRS
    "Azure Managed Disk type is Standard LRS."
    STANDARD_LRS
    "Azure Managed Disk type is Ultra SSD LRS."
    ULTRASSD_LRS
    "Azure Managed Disk type is unknown."
    UNKNOWN
}

"The type of Azure Native feature Polaris supports."
enum AzureNativeProtectionFeature {
    "Protection on Azure SQL Databases."
    SQL_DB
    "Protection on Azure Native Managed Instances."
    SQL_MI
    "Protection on Azure Native Virtual Machines."
    VM
}

"Azure native regions."
enum AzureNativeRegion {
    "Azure native region is Australia Central."
    AUSTRALIA_CENTRAL
    "Azure native region is Australia Central 2."
    AUSTRALIA_CENTRAL2
    "Azure native region is Australia East."
    AUSTRALIA_EAST
    "Azure native region is Australia Southeast."
    AUSTRALIA_SOUTHEAST
    "Azure native region is Brazil South."
    BRAZIL_SOUTH
    "Azure native region is Canada Central."
    CANADA_CENTRAL
    "Azure native region is Canada East."
    CANADA_EAST
    "Azure native region is Central India."
    CENTRAL_INDIA
    "Azure native region is Central US."
    CENTRAL_US
    "Azure native region is China East."
    CHINA_EAST
    "Azure native region is China East 2."
    CHINA_EAST2
    "Azure native region is China North."
    CHINA_NORTH
    "Azure native region is China North 2."
    CHINA_NORTH2
    "Azure native region is East Asia."
    EAST_ASIA
    "Azure native region is East US."
    EAST_US
    "Azure native region is East US 2."
    EAST_US2
    "Azure native region is France Central."
    FRANCE_CENTRAL
    "Azure native region is France South."
    FRANCE_SOUTH
    "Azure native region is Germany North."
    GERMANY_NORTH
    "Azure native region is Germany West Central."
    GERMANY_WEST_CENTRAL
    "Azure native region is Japan East."
    JAPAN_EAST
    "Azure native region is Japan West."
    JAPAN_WEST
    "Azure native region is Korea Central."
    KOREA_CENTRAL
    "Azure native region is Korea South."
    KOREA_SOUTH
    "Azure native region is North Central US."
    NORTH_CENTRAL_US
    "Azure native region is North Europe."
    NORTH_EUROPE
    "Azure native region is Norway East."
    NORWAY_EAST
    "Azure native region is Norway West."
    NORWAY_WEST
    "Azure native region is not specified."
    NOT_SPECIFIED
    "Azure native region is Southeast Asia."
    SOUTHEAST_ASIA
    "Azure native region is South Africa North."
    SOUTH_AFRICA_NORTH
    "Azure native region is South Africa West."
    SOUTH_AFRICA_WEST
    "Azure native region is South Central US."
    SOUTH_CENTRAL_US
    "Azure native region is South India."
    SOUTH_INDIA
    "Azure native region is Switzerland North."
    SWITZERLAND_NORTH
    "Azure native region is Switzerland West."
    SWITZERLAND_WEST
    "Azure native region is UAE Central."
    UAE_CENTRAL
    "Azure native region is UAE North."
    UAE_NORTH
    "Azure native region is UK South."
    UK_SOUTH
    "Azure native region is UK West."
    UK_WEST
    "Azure native region is US Gov Arizona."
    US_GOV_ARIZONA
    "Azure native region is US Gov Texas."
    US_GOV_TEXAS
    "Azure native region is US Gov Virginia."
    US_GOV_VIRGINIA
    "Azure native region is West Central US."
    WEST_CENTRAL_US
    "Azure native region is West Europe."
    WEST_EUROPE
    "Azure native region is West India."
    WEST_INDIA
    "Azure native region is West US."
    WEST_US
    "Azure native region is West US 2."
    WEST_US2
    "Azure native region is West US 3."
    WEST_US3
}

"Azure native regions for replication."
enum AzureNativeRegionForReplication {
    "Azure native region for replication is Australia Central."
    AUSTRALIA_CENTRAL
    "Azure native region for replication is Australia Central 2."
    AUSTRALIA_CENTRAL2
    "Azure native region for replication is Australia East."
    AUSTRALIA_EAST
    "Azure native region for replication is Australia Southeast."
    AUSTRALIA_SOUTHEAST
    "Azure native region for replication is Brazil South."
    BRAZIL_SOUTH
    "Azure native region for replication is Canada Central."
    CANADA_CENTRAL
    "Azure native region for replication is Canada East."
    CANADA_EAST
    "Azure native region for replication is Central India."
    CENTRAL_INDIA
    "Azure native region for replication is Central US."
    CENTRAL_US
    "Azure native region for replication is China East."
    CHINA_EAST
    "Azure native region for replication is China East 2."
    CHINA_EAST2
    "Azure native region for replication is China North."
    CHINA_NORTH
    "Azure native region for replication is China North 2."
    CHINA_NORTH2
    "Azure native region for replication is East Asia."
    EAST_ASIA
    "Azure native region for replication is East US."
    EAST_US
    "Azure native region for replication is East US 2."
    EAST_US2
    "Azure native region for replication is France Central."
    FRANCE_CENTRAL
    "Azure native region for replication is France South."
    FRANCE_SOUTH
    "Azure native region for replication is Germany North."
    GERMANY_NORTH
    "Azure native region for replication is Germany West Central."
    GERMANY_WEST_CENTRAL
    "Azure native region for replication is Japan East."
    JAPAN_EAST
    "Azure native region for replication is Japan West."
    JAPAN_WEST
    "Azure native region for replication is Korea Central."
    KOREA_CENTRAL
    "Azure native region for replication is Korea South."
    KOREA_SOUTH
    "Azure native region for replication is North Central US."
    NORTH_CENTRAL_US
    "Azure native region for replication is North Europe."
    NORTH_EUROPE
    "Azure native region for replication is Norway East."
    NORWAY_EAST
    "Azure native region for replication is Norway West."
    NORWAY_WEST
    "Azure native region for replication is not defined."
    NOT_DEFINED
    "Azure native region for replication is the source region."
    SOURCE_REGION
    "Azure native region for replication is Southeast Asia."
    SOUTHEAST_ASIA
    "Azure native region for replication is South Africa North."
    SOUTH_AFRICA_NORTH
    "Azure native region for replication is South Africa West."
    SOUTH_AFRICA_WEST
    "Azure native region for replication is South Central US."
    SOUTH_CENTRAL_US
    "Azure native region for replication is South India."
    SOUTH_INDIA
    "Azure native region for replication is Switzerland North."
    SWITZERLAND_NORTH
    "Azure native region for replication is Switzerland West."
    SWITZERLAND_WEST
    "Azure native region for replication is UAE Central."
    UAE_CENTRAL
    "Azure native region for replication is UAE North."
    UAE_NORTH
    "Azure native region for replication is UK South."
    UK_SOUTH
    "Azure native region for replication is UK West."
    UK_WEST
    "Azure native region for replication is US Gov Arizona."
    US_GOV_ARIZONA
    "Azure native region for replication is US Gov Texas."
    US_GOV_TEXAS
    "Azure native region for replication is US Gov Virginia."
    US_GOV_VIRGINIA
    "Azure native region for replication is West Central US."
    WEST_CENTRAL_US
    "Azure native region for replication is West Europe."
    WEST_EUROPE
    "Azure native region for replication is West India."
    WEST_INDIA
    "Azure native region for replication is West US."
    WEST_US
    "Azure native region for replication is West US 2."
    WEST_US2
    "Azure native region for replication is West US 3."
    WEST_US3
}

"The field type used to sort the subscriptions."
enum AzureNativeSubscriptionSortFields {
    "Use SLA Domain assignment for sorting."
    ASSIGNED_SLA_DOMAIN
    "Use disk count for sorting."
    AZURE_SUBSCRIPTION_DISKCOUNT
    "Use virtual machine count for sorting."
    AZURE_SUBSCRIPTION_VMCOUNT
    "Use tenant ID for sorting."
    AZURE_TENANT_ID
    "Use subscription SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
    "Use subscription name for sorting."
    NAME
}

"The field type used to sort the virtual machines."
enum AzureNativeVirtualMachineSortFields {
    "Use SLA Domain assignment for sorting."
    ASSIGNED_SLA_DOMAIN
    "Use region name for sorting."
    AZURE_REGION
    "Use subnet name for sorting."
    AZURE_SUBNET_NAME
    "Use common resource group name for sorting."
    AZURE_VM_CRG_NAME
    "Use subscription name from common resource group for sorting."
    AZURE_VM_CRG_SUBSCRIPTION_NAME
    "Use virtual machine size for sorting."
    AZURE_VM_SIZE
    "Use VNet name for sorting."
    AZURE_VNET_NAME
    "Use virtual machine SLA Domain for sorting."
    EFFECTIVE_SLA_DOMAIN
    "Use virtual machine name for sorting."
    NAME
}

"OS type of an Azure virtual machine."
enum AzureNativeVmOsType {
    "The OS type is Linux."
    LINUX
    "The OS type is unknown."
    UNKNOWN
    "The OS type is Windows."
    WINDOWS
}

"Status of Azure network security rules."
enum AzureNetworkSecurityRulesStatus {
    "NSG denies egress required for successful deployment."
    BLOCKING
    "NSG in good status."
    GOOD
    "NSG denies egress that might be required for successful deployment."
    MAYBE_BLOCKING
}

"The resource for which OAuth access is requested."
enum AzureOauthResource {
    "Azure Resource Manager."
    AZURE_RESOURCE_MANAGER
    "Azure SQL resources."
    AZURE_SQL
}

"Redundancy value for the azure resource. For more information, see https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy."
enum AzureRedundancy {
    "Geo-redundant storage."
    GRS
    "Geo-zone-redundant storage."
    GZRS
    "Locally redundant storage."
    LRS
    "Read access Geo-redundant storage."
    RA_GRS
    "Read Access Geo-zone-redundant storage."
    RA_GZRS
    "Unknown Azure storage redundancy."
    UNKNOWN_AZURE_REDUNDANCY
    "Zone-redundant storage."
    ZRS
}

"Regions for Azure."
enum AzureRegion {
    "Azure region is East Asia."
    ASIA_EAST
    "Azure region is Southeast Asia."
    ASIA_SOUTHEAST
    "Azure region is Australia Central."
    AUSTRALIA_CENTRAL
    "Azure region is Australia Central 2."
    AUSTRALIA_CENTRAL2
    "Azure region is Australia East."
    AUSTRALIA_EAST
    "Azure region is Australia Southeast."
    AUSTRALIA_SOUTHEAST
    "Azure region is Brazil South."
    BRAZIL_SOUTH
    "Azure region is Canada Central."
    CANADA_CENTRAL
    "Azure region is Canada East."
    CANADA_EAST
    "Azure region is China East."
    CHINA_EAST
    "Azure region is China East 2."
    CHINA_EAST2
    "Azure region is China North."
    CHINA_NORTH
    "Azure region is North Europe."
    EUROPE_NORTH
    "Azure region is West Europe."
    EUROPE_WEST
    "Azure region is France Central."
    FRANCE_CENTRAL
    "Azure region is France South."
    FRANCE_SOUTH
    "Azure region is Germany Central."
    GERMANY_CENTRAL
    "Azure region is Germany Northeast."
    GERMANY_NORTHEAST
    "Azure region is Germany West Central."
    GERMANY_WEST_CENTRAL
    "Azure region is US Gov Arizona."
    GOV_US_ARIZONA
    "Azure region is US DoD Central."
    GOV_US_DOD_CENTRAL
    "Azure region is US DoD East."
    GOV_US_DOD_EAST
    "Azure region is US Gov Texas."
    GOV_US_TEXAS
    "Azure region is US Gov Virginia."
    GOV_US_VIRGINIA
    "Azure region is Central India."
    INDIA_CENTRAL
    "Azure region is South India."
    INDIA_SOUTH
    "Azure region is West India."
    INDIA_WEST
    "Azure region is Japan East."
    JAPAN_EAST
    "Azure region is Japan West."
    JAPAN_WEST
    "Azure region is Korea Central."
    KOREA_CENTRAL
    "Azure region is Korea South."
    KOREA_SOUTH
    "Azure region is Norway East."
    NORWAY_EAST
    "Azure region is Norway West."
    NORWAY_WEST
    "Azure region is South Africa North."
    SOUTH_AFRICA_NORTH
    "Azure region is South Africa West."
    SOUTH_AFRICA_WEST
    "Azure region is Switzerland North."
    SWITZERLAND_NORTH
    "Azure region is Switzerland West."
    SWITZERLAND_WEST
    "Azure region is UAE Central."
    UAE_CENTRAL
    "Azure region is UAE North."
    UAE_NORTH
    "Azure region is UK South."
    UK_SOUTH
    "Azure region is UK West."
    UK_WEST
    "Azure region is unknown."
    UNKNOWN_AZURE_REGION
    "Azure region is Central US."
    US_CENTRAL
    "Azure region is East US."
    US_EAST
    "Azure region is East US 2."
    US_EAST2
    "Azure region is North Central US."
    US_NORTH_CENTRAL
    "Azure region is South Central US."
    US_SOUTH_CENTRAL
    "Azure region is West US."
    US_WEST
    "Azure region is West US 2."
    US_WEST2
    "Azure region is West Central US."
    US_WEST_CENTRAL
    "Azure region is West US 3."
    WEST_US3
}

"Azure retrieval tier."
enum AzureRetrievalTier {
    "Unspecified Azure retrieval tier."
    AZURE_TIER_UNSPECIFIED
    "High priority Azure retrieval tier."
    HIGH_PRIORITY_AZURE_TIER
    "Standard Azure retrieval tier."
    STANDARD_AZURE_TIER
}

"The type of snapshot to be used in export or restore jobs."
enum AzureSnapshotType {
    "Use the archived snapshot."
    ARCHIVED
    "Use the replicated snapshot."
    REPLICATED
    "Use the source snapshot."
    SOURCE
}

"The type of backup storage redundancy for Azure SQL."
enum AzureSqlBackupStorageRedundancyType {
    "Geo-Redundant Storage."
    GRS
    "Locally-Redundant Storage."
    LRS
    "Zone-Redundant Storage."
    ZRS
}

"Fields on which the list of Azure SQL Database Servers can be sorted."
enum AzureSqlDatabaseServerSortFields {
    "Sort Azure SQL Database Servers by region."
    AZURE_SQL_DATABASE_SERVER_REGION
    "Sort Azure SQL Database Servers by resource group."
    AZURE_SQL_SERVER_RESOURCE_GROUP
    "Sort Azure SQL Database Servers by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort Azure SQL Database Servers by name."
    NAME
}

"Fields on which the list of Azure SQL Databases can be sorted."
enum AzureSqlDatabaseSortFields {
    "Sort Azure SQL Databases by region."
    AZURE_SQL_DATABASE_DB_REGION
    "Sort Azure SQL Databases by resource group."
    AZURE_SQL_DB_RESOURCE_GROUP
    "Sort Azure SQL Databases by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort Azure SQL Databases by name."
    NAME
}

"Status of the setup for taking Azure SQL database backup."
enum AzureSqlDbBackupSetupStatus {
    "The Azure database configuration is invalid because Change Data Capture (CDC) is not enabled."
    CDC_DISABLED
    "The Azure database configuration is invalid because Change Data Capture (CDC) is misconfigured."
    CDC_INVALID_CONFIG
    "The Azure database configuration is invalid because the credentials are invalid."
    INVALID_CREDENTIALS
    "The Azure database configuration is invalid because the backup user is missing some required permissions."
    MISSING_PERMISSIONS
    "The Azure backup setup status is not specified."
    NOT_SPECIFIED
    "The Azure database backup setup is successful."
    SUCCESS
    "The Azure database configuration is invalid due to the presence of multiple collations."
    UNSUPPORTED_COLLATION_CONFIG
}

"Fields on which the list of Azure SQL Managed Instance Databases can be sorted."
enum AzureSqlManagedInstanceDatabaseSortFields {
    "Sort Azure SQL Managed Instance Databases by resource group."
    AZURE_SQL_DB_RESOURCE_GROUP
    "Sort Azure SQL Managed Instance Databases by region."
    AZURE_SQL_MANAGED_INSTANCE_DB_REGION
    "Sort Azure SQL Managed Instance Databases by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort Azure SQL Managed Instance Databases by name."
    NAME
}

"Fields on which the list of Azure SQL Managed Instance Servers can be sorted."
enum AzureSqlManagedInstanceServerSortFields {
    "Sort Azure SQL Managed Instance Servers by region."
    AZURE_SQL_MANAGED_INSTANCE_SERVER_REGION
    "Sort Azure SQL Managed Instance Servers by resource group."
    AZURE_SQL_SERVER_RESOURCE_GROUP
    "Sort Azure SQL Managed Instance Servers by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort Azure SQL Managed Instance Servers by name."
    NAME
}

"Storage Tier for the storage accounts/containers. For more information, see https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers."
enum AzureStorageTier {
    "Optimized for storing data that is rarely accessed."
    ARCHIVE
    "Optimized for storing data that is accessed frequently."
    COOL
    "Optimized for storing data that is infrequently accessed."
    HOT
    "Unknown storage tier."
    UNKNOWN_STORAGE_TIER
}

"Status of an Azure subscription."
enum AzureSubscriptionStatus {
    "The Azure subscription has been added."
    ADDED
    "The Azure subscription has been deleted."
    DELETED
    "The Azure subscription is in the process of getting deleted."
    DELETING
    "The deletion of the Azure subscription has failed."
    DELETION_FAILED
    "The Azure subscription has been refreshed."
    REFRESHED
    "The Azure subscription is refreshing."
    REFRESHING
    "The Azure subscription has failed to refresh."
    REFRESH_FAILED
}

"Color of the banner displayed on UI for accounts with classified workloads."
enum BannerColor {
    "Blue."
    BLUE
    "Green."
    GREEN
    "None."
    NONE
    "Orange."
    ORANGE
    "Red."
    RED
    "Yellow."
    YELLOW
}

enum BlueprintFailoverIgnorableError {
    NETWORK_RECONFIGURE_ERROR
    POSTSCRIPT_EXECUTION_ERROR
}

"Failover error type."
enum BlueprintFailoverIgnorableErrorType {
    "Network_reconfigure_error."
    NETWORK_RECONFIGURE_ERROR
    "Postscript_execution_error."
    POSTSCRIPT_EXECUTION_ERROR
    "Unknown_error."
    UNKNOWN_ERROR
}

"Blueprint failover status enum."
enum BlueprintFailoverStatus {
    "Blueprint failover failed."
    FAILED
    "Blueprint failover does not exist."
    NOT_EXIST
    "Blueprint failover succeeded."
    SUCCEEDED
}

"Failover type."
enum BlueprintFailoverType {
    "Initiates failover for all children within a Blueprint. The source Blueprint children will be stopped."
    FAILOVER
    "Initiates in-place recovery for the Blueprint children."
    INPLACE_RECOVERY
    "Initiates isolated recovery for the children within the Blueprint."
    ISOLATED_RECOVERY
    "Recovers the children within the Blueprint."
    LOCALRECOVERY
    "Exports the local snapshots for the children within the Blueprint."
    LOCAL_EXPORT
    "Exports the remote snapshots for the children within the Blueprint."
    REMOTE_EXPORT
    "Tests the failover without affecting the source Blueprint children."
    TEST_FAILOVER
    "Unknown failover type."
    UNKNOWN_TYPE
}

enum BlueprintLocationType {
    AWS
    AZURE
    CDM
    UNKNOWN
}

enum BlueprintPlatform {
    AWS
    UNKNOWN_PLATFORM
    VSPHERE
}

"Blueprint recovery type."
enum BlueprintRecoveryType {
    "Cyber recovery."
    CYBER_RECOVERY
    "Disaster recovery."
    DISASTER_RECOVERY
    "In-Place recovery."
    IN_PLACE_RECOVERY
    "Unrecognized blueprint recovery type."
    UNKNOWN
}

enum BlueprintStatus {
    CONFIGURED
    INCOMPLETE
    INVALID
    MISSING_CHILDREN
    NOT_CONFIGURED
}

"CA certificate provider type."
enum CaCertProviderType {
    "Customer CA."
    CUSTOMER_CA
}

"Email address filter."
enum CalendarEmailAddressFilterType {
    "Search organizer or attendees by email."
    ALL
    "Search attendee by email."
    ATTENDEE
    "Search organizer by email."
    ORGANIZER
}

"Type of the calendar event."
enum CalendarEventType {
    "Series exception event type."
    SERIES_EXCEPTION
    "Series master event type."
    SERIES_MASTER
    "Series occurrence event type."
    SERIES_OCCURRENCE
    "Single instance event type."
    SINGLE_INSTANCE
}

"Recurrence type for calendar event."
enum CalendarRecurrenceType {
    "Event can be either recurring or non-recurring."
    ALL
    "Event is recurring."
    RECURRING
    "Event is a single instance (not recurring)."
    SINGLE
}

"Search keyword type for Calendar."
enum CalendarSearchKeywordType {
    "Search by event or calendar name."
    NAME
}

"Enum for cassandra source status."
enum CassandraSourceStatus {
    "Source is getting added."
    ADDING
    "Source is connected."
    CONNECTED
    "Source is deleted."
    DELETED
    "Source is getting deleted."
    DELETING
    "Source is disconnected."
    DISCONNECTED
    "Source data is getting refreshed."
    REFRESHING
    "Unknown source status."
    UNKNOWN_SYSTEM_STATUS
}

"Type of cluster."
enum CcpClusterType {
    "Cloud."
    CLOUD
    "Unknown."
    UNKNOWN
}

"Status of Job."
enum CcpJobStatus {
    "Bootstrapping cluster."
    BOOTSTRAPPING
    "Completed successfully."
    COMPLETED
    "Failed."
    FAILED
    "Initializing."
    INITIALIZING
    "Invalid status."
    INVALID
    "Node connection verify."
    NODE_CONNECTION_VERIFICATION
    "Node creation."
    NODE_CREATE
    "Node information retrieval."
    NODE_INFO_EXTRACTION
    "Rotate token."
    ROTATE_TOKEN
}

"Type of cluster job."
enum CcpJobType {
    "Add a node to cluster."
    ADD_NODE
    "Create cluster job."
    CLUSTER_CREATE
    "Delete cluster job."
    CLUSTER_DELETE
    "Remove node from cluster."
    REMOVE_NODE
}

"Cloud vendor provider."
enum CcpVendorType {
    "AWS."
    AWS
    "Azure."
    AZURE
    "GCP."
    GCP
}

"Different types of usages of a certificate on a Rubrik cluster."
enum CdmCertificateUsage {
    "Secondary Agent."
    AGENT
    "KMIP Client."
    KMIP_CLIENT
    "KMIP Server."
    KMIP_SERVER
    "LDAP."
    LDAP
    "RSA."
    RSA
    "SMTP."
    SMTP
    "Syslog."
    SYSLOG
    "The usage is unknown."
    USAGE_UNKNOWN
    "Web Server."
    WEB_SERVER
}

enum CdmClusterStatusTypeEnum {
    Disconnected
    DownloadPackageFailed
    DownloadingPackage
    FailedToInitiateUpgrade
    OnOldRelease
    PrechecksFailureError
    PrechecksFailureWarning
    PrechecksRunning
    ReadyForDownload
    ReadyForUpgrade
    ResumingUpgrade
    RollbackFailed
    RollingBackUpgrade
    Stable
    StableWithUpgradeInfo
    Unknown
    UpgradeFailed
    UpgradeRecommended
    UpgradeScheduled
    UpgradeScheduledWithWarning
    Upgrading
}

"""

Supported in v6.0+
Specifies whether this database is a Data Guard member, Data Guard group, or a non-Data Guard database.
"""
enum CdmDataGuardType {
    DATA_GUARD_TYPE_DATA_GUARD_GROUP
    DATA_GUARD_TYPE_DATA_GUARD_MEMBER
    DATA_GUARD_TYPE_NON_DATA_GUARD
}

"Cluster feature identifiers."
enum CdmFeatureFlagType {
    "AHV_CHANGE_RETENTION."
    AHV_CHANGE_RETENTION
    "AHV_DELETE_SNAPSHOTS."
    AHV_DELETE_SNAPSHOTS
    "AHV_LEGAL_HOLD_ALL_ACTIONS."
    AHV_LEGAL_HOLD_ALL_ACTIONS
    "AHV_LIVEMOUNT_ALL_ACTIONS."
    AHV_LIVEMOUNT_ALL_ACTIONS
    "AHV_MANAGE_PROTECTION."
    AHV_MANAGE_PROTECTION
    "AHV network restore."
    AHV_NETWORK_RESTORE
    "AHV_RADAR_RECOVERY."
    AHV_RADAR_RECOVERY
    "AHV_RECOVER_SNAPSHOTS."
    AHV_RECOVER_SNAPSHOTS
    "AHV_TAKE_ON_DEMAND_SNAPSHOT."
    AHV_TAKE_ON_DEMAND_SNAPSHOT
    "ARCHIVAL_AWS_BYPASS_PROXY."
    ARCHIVAL_AWS_BYPASS_PROXY
    "AWS Glacier instant retrieval."
    ARCHIVAL_AWS_GIR
    "ARCHIVAL_AWS_IMMUTABLE."
    ARCHIVAL_AWS_IMMUTABLE
    "ARCHIVAL_AZURE_BYPASS_PROXY."
    ARCHIVAL_AZURE_BYPASS_PROXY
    "ARCHIVAL_AZURE_HIGH_PRIORITY_REHYDRATION."
    ARCHIVAL_AZURE_HIGH_PRIORITY_REHYDRATION
    "ARCHIVAL_CASCADE_LOCATION."
    ARCHIVAL_CASCADE_LOCATION
    "ARCHIVAL_CLOUD_COMPUTE_CONNECTIVITY_CHECK."
    ARCHIVAL_CLOUD_COMPUTE_CONNECTIVITY_CHECK
    "ARCHIVAL_MULTIPLE_LOCATION."
    ARCHIVAL_MULTIPLE_LOCATION
    "Download snapshot from replication target."
    DOWNLOAD_REPLICATED_SNAPSHOT
    "HYPERV_CHANGE_RETENTION."
    HYPERV_CHANGE_RETENTION
    "HYPERV_DELETE_SNAPSHOTS."
    HYPERV_DELETE_SNAPSHOTS
    "HYPERV_EXCLUDE_VHD."
    HYPERV_EXCLUDE_VHD
    "HYPERV_LEGAL_HOLD_ALL_ACTIONS."
    HYPERV_LEGAL_HOLD_ALL_ACTIONS
    "HYPERV_LIVEMOUNT_ALL_ACTIONS."
    HYPERV_LIVEMOUNT_ALL_ACTIONS
    "HYPERV_MANAGE_PROTECTION."
    HYPERV_MANAGE_PROTECTION
    "HYPERV_RADAR_RECOVERY."
    HYPERV_RADAR_RECOVERY
    "HYPERV_RECOVER_SNAPSHOTS."
    HYPERV_RECOVER_SNAPSHOTS
    "HYPERV_RUBRIK_BACKUP_SERVICE."
    HYPERV_RUBRIK_BACKUP_SERVICE
    "HYPERV_TAKE_ON_DEMAND_SNAPSHOT."
    HYPERV_TAKE_ON_DEMAND_SNAPSHOT
    "MSSQL_ADD_LOG_SHIPPING_SECONDARY."
    MSSQL_ADD_LOG_SHIPPING_SECONDARY
    "MSSQL_CHANGE_RETENTION."
    MSSQL_CHANGE_RETENTION
    "MSSQL_DELETE_HOST."
    MSSQL_DELETE_HOST
    "MSSQL_DELETE_SNAPSHOTS."
    MSSQL_DELETE_SNAPSHOTS
    "MSSQL_EDIT_CBT."
    MSSQL_EDIT_CBT
    "MSSQL_EDIT_HOST."
    MSSQL_EDIT_HOST
    "MSSQL_EDIT_LOG_BACKUP_PROPERTIES."
    MSSQL_EDIT_LOG_BACKUP_PROPERTIES
    "MSSQL_LEGAL_HOLD_ALL_ACTIONS."
    MSSQL_LEGAL_HOLD_ALL_ACTIONS
    "MSSQL_LIVEMOUNT_ALL_ACTIONS."
    MSSQL_LIVEMOUNT_ALL_ACTIONS
    "MSSQL_MANAGE_PROTECTION."
    MSSQL_MANAGE_PROTECTION
    "MSSQL_RECOVER_SNAPSHOTS."
    MSSQL_RECOVER_SNAPSHOTS
    "MSSQL_REFRESH_HOST."
    MSSQL_REFRESH_HOST
    "MSSQL_REMOVE_LOG_SHIPPING."
    MSSQL_REMOVE_LOG_SHIPPING
    "MSSQL_RESEED_LOG_SHIPPING."
    MSSQL_RESEED_LOG_SHIPPING
    "MSSQL_TAKE_ON_DEMAND_SNAPSHOT."
    MSSQL_TAKE_ON_DEMAND_SNAPSHOT
    "MSSQL_TAKE_TLOG_BACKUP."
    MSSQL_TAKE_TLOG_BACKUP
    "MSSQL_UPDATE_HOST."
    MSSQL_UPDATE_HOST
    "MV_LIVEMOUNT_ALL_ACTIONS."
    MV_LIVEMOUNT_ALL_ACTIONS
    "NUTANIX_CONFIGURE_PRE_POST_SCRIPTS."
    NUTANIX_CONFIGURE_PRE_POST_SCRIPTS
    "NUTANIX_EXCLUDE_DISK."
    NUTANIX_EXCLUDE_DISK
    "NUTANIX_RUBRIK_BACKUP_SERVICE."
    NUTANIX_RUBRIK_BACKUP_SERVICE
    "ORACLEDB_CHANGE_RETENTION."
    ORACLEDB_CHANGE_RETENTION
    "ORACLEDB_DELETE_HOST."
    ORACLEDB_DELETE_HOST
    "ORACLEDB_DELETE_SNAPSHOTS."
    ORACLEDB_DELETE_SNAPSHOTS
    "ORACLEDB_EDIT_HOST."
    ORACLEDB_EDIT_HOST
    "ORACLEDB_LEGAL_HOLD_ALL_ACTIONS."
    ORACLEDB_LEGAL_HOLD_ALL_ACTIONS
    "ORACLEDB_LIVEMOUNT_ALL_ACTIONS."
    ORACLEDB_LIVEMOUNT_ALL_ACTIONS
    "ORACLEDB_MANAGE_PROTECTION."
    ORACLEDB_MANAGE_PROTECTION
    "ORACLEDB_RECOVER_SNAPSHOTS."
    ORACLEDB_RECOVER_SNAPSHOTS
    "ORACLEDB_REFRESH_HOST."
    ORACLEDB_REFRESH_HOST
    "ORACLEDB_TAKE_ON_DEMAND_SNAPSHOT."
    ORACLEDB_TAKE_ON_DEMAND_SNAPSHOT
    "ORACLEDB_TAKE_TLOG_BACKUP."
    ORACLEDB_TAKE_TLOG_BACKUP
}

"""

Supported in v5.1+
Describes the result of running the find_bad_disk script.
"""
enum CdmFindBadDiskResultType {
    FIND_BAD_DISK_RESULT_ENUM_FAILED
    FIND_BAD_DISK_RESULT_ENUM_MISSING
    FIND_BAD_DISK_RESULT_ENUM_OKAY
    FIND_BAD_DISK_RESULT_ENUM_TURNED_OFF
}

"""

Supported in v5.3+
Type of managed volume.
"""
enum CdmManagedVolumeType {
    "Specifies that type of the Managed Volume is Always Mounted."
    MANAGED_VOLUME_TYPE_ALWAYS_MOUNTED
    "Specifies that type of the Managed Volume is SLA Based."
    MANAGED_VOLUME_TYPE_SLA_BASED
}

"""

Supported in v5.0+
Consistency level mandated for this VM.
"""
enum CdmNutanixSnapshotConsistencyMandate {
    NUTANIX_SNAPSHOT_CONSISTENCY_MANDATE_APPLICATION_CONSISTENT
    NUTANIX_SNAPSHOT_CONSISTENCY_MANDATE_AUTOMATIC
    NUTANIX_SNAPSHOT_CONSISTENCY_MANDATE_CRASH_CONSISTENT
}

"Ways that CDM snapshots can be filtered."
enum CdmSnapshotFilterField {
    "Filter on the snapshot's cluster id."
    CLUSTER_UUID
    "No filter value."
    EMPTY
    "Filter on whether the snapshot is expired."
    IS_EXPIRED
    "Filter on whether the snapshot was taken as an on demand snapshot."
    IS_ON_DEMAND_SNAPSHOT
    "Filter by snappable id."
    SNAPPABLE_ID
    "Filter by snapshot id."
    SNAPSHOT_ID
    "Filter on the time the snapshot was taken."
    TIME_RANGE
}

enum CdmSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum CdmSnapshotSortByEnum {
    Date
    SnappableId
    SnapshotId
}

"""

Supported in v5.1+
Current Local CDP Status of virtual machine.
"""
enum CdpLocalStatus {
    CDP_LOCAL_STATUS_ACTIVE
    CDP_LOCAL_STATUS_FAILED
    CDP_LOCAL_STATUS_NOT_ENABLED
    CDP_LOCAL_STATUS_PENDING
    CDP_LOCAL_STATUS_RESYNCING
    CDP_LOCAL_STATUS_TAKING_SNAPSHOT
}

"CDP performance dashboard filter field."
enum CdpPerfDashboardFilterField {
    "CDP IO filter status filter field."
    CDP_IO_FILTER_STATUS
    "CDP local status filter field."
    LOCAL_STATUS
    "CDP replication status filter field."
    REPLICATION_STATUS
    "SLA domain ID filter field."
    SLA_DOMAIN_ID
    "Source cluster UUID field."
    SOURCE_CLUSTER_UUID
    "Unknown filter field."
    UNKNOWN
    "CDP virtual machine name filter field."
    VM_NAME
}

"CDP performance dashboard sort type Enum."
enum CdpPerfDashboardSortType {
    "CDP IO filter status."
    CDP_IO_FILTER_STATUS
    "Latest local snapshot time."
    LATEST_SNAPSHOT_TIME
    "CDP local status."
    LOCAL_STATUS
    "CDP replication status."
    REPLICATION_STATUS
    "Replication cluster."
    REPLICATION_TARGET
    "SLA domain."
    SLA_DOMAIN
    "Source cluster."
    SOURCE_CLUSTER
    "Unknown type."
    UNKNOWN
    "CDP virtual machine location."
    VM_LOCATION
    "CDP virtual machine name."
    VM_NAME
}

"""

Supported in v5.1+
Current CDP Replication Status of virtual machine.
"""
enum CdpReplicationStatus {
    CDP_REPLICATION_STATUS_FAILED
    CDP_REPLICATION_STATUS_HEALTHY
    CDP_REPLICATION_STATUS_INITIALIZING
    CDP_REPLICATION_STATUS_NOT_ENABLED
}

"Fields by which certificates can be sorted."
enum CertMgmtSortBy {
    "The date the CSR was created."
    CREATION_DATE
    "Name of the certificate."
    NAME
}

"Channel membership type filter."
enum ChannelMembershipType {
    "Used to retrieve both public and private channels."
    ALL
    "Used to retrieve only private channels."
    PRIVATE
    "Used to retrieve only public channels."
    STANDARD
}

"All reporting chart types."
enum ChartType {
    "The area chart."
    AREA_CHART
    "The column chart."
    COLUMN_CHART
    "The donut chart."
    DONUT_CHART
}

"All valid chart views."
enum ChartViewType {
    "The chart view type is unspecified."
    CHART_UNSPECIFIED
    "Local data store chart for the object-capacity-over-time report."
    OBJECT_CAPACITY_OVERTIME_LOCAL_DATA_STORE_CHART
    "Protected objects count chart for the object-capacity-over-time report."
    OBJECT_CAPACITY_OVERTIME_PROTECTED_OBJECTS_COUNT_CHART
    "Group by cluster chart for the protection-task-detail report."
    PROTECTION_TASKS_CLUSTER_CHART
    "Protection Task Detail report's GroupBy cluster type chart."
    PROTECTION_TASKS_CLUSTER_TYPE_CHART
}

enum ClassificationPolicyColor {
    COLOR_001
    COLOR_002
    COLOR_003
    COLOR_004
    COLOR_005
    COLOR_006
    COLOR_007
    COLOR_008
    COLOR_009
    COLOR_010
    COLOR_011
    COLOR_012
    UNKNOWN
}

enum ClassificationPolicyMode {
    COMPLIANCE
    DISCOVERY
}

"Actions that can be performed on a cloud account."
enum CloudAccountAction {
    "Create a cloud account."
    CREATE
    "Delete a cloud account."
    DELETE
    "Update child accounts of a cloud account."
    UPDATE_CHILD_ACCOUNTS
    "Update permissions of a cloud account."
    UPDATE_PERMISSIONS
    "Update regions in a cloud account."
    UPDATE_REGIONS
}

"Cloud account features."
enum CloudAccountFeature {
    "All cloud account features."
    ALL
    "Cloud account feature is App Flows."
    APP_FLOWS
    "Cloud account feature is Archival."
    ARCHIVAL
    "Cloud account feature is Azure SQL DB Protection."
    AZURE_SQL_DB_PROTECTION
    "Cloud account feature is Azure SQL MI Protection."
    AZURE_SQL_MI_PROTECTION
    "Cloud account feature is Cloud Accounts."
    CLOUDACCOUNTS
    "Cloud account feature is Cloud Native Archival."
    CLOUD_NATIVE_ARCHIVAL
    "Cloud account feature is Cloud Native Archival Encryption."
    CLOUD_NATIVE_ARCHIVAL_ENCRYPTION
    "Cloud account feature is Cloud Native Protection."
    CLOUD_NATIVE_PROTECTION
    "Cloud account feature is Exocompute."
    EXOCOMPUTE
    "Cloud account feature is GCP Shared VPC Host."
    GCP_SHARED_VPC_HOST
    "Cloud account feature is RDS Protection."
    RDS_PROTECTION
    "Cloud account feature is Servers and Apps."
    SERVERS_AND_APPS
}

"Cloud account query filter field types."
enum CloudAccountFilterFieldEnum {
    "Filter by cloud account provider."
    ACCOUNT_PROVIDER_TYPE
    "Filter by cloud account key support."
    IS_KEY_BASED
    "Filter for name."
    NAME
}

"Cloud account operation type."
enum CloudAccountOperation {
    "Cloud account add operation."
    ADD
    "Cloud account upgrade operation."
    UPGRADE
}

enum CloudAccountSortByFieldEnum {
    NAME
}

"Cloud account statuses."
enum CloudAccountStatus {
    "Cloud account is connected."
    CONNECTED
    "Cloud account is connecting."
    CONNECTING
    "Cloud account is not enabled."
    DISABLED
    "Cloud account is disconnected."
    DISCONNECTED
    "Cloud account requires additional permissions."
    MISSING_PERMISSIONS
}

"Cloud account type."
enum CloudAccountType {
    "Cloud account type is AWS."
    CLOUD_ACCOUNT_AWS
    "Cloud account type is role-based AWS."
    CLOUD_ACCOUNT_AWS_ROLE_BASED
    "Cloud account type is Azure."
    CLOUD_ACCOUNT_AZURE
    "Cloud account type is role-based Azure."
    CLOUD_ACCOUNT_AZURE_ROLE_BASED
    "Cloud account type is GCP."
    CLOUD_ACCOUNT_GCP
    "Cloud account type is unknown."
    UNKNOWN_CLOUD_ACCOUNT
}

"RBS Connection Status."
enum CloudInstanceRbsConnectionStatus {
    "RBS Agent on the host is connected."
    CONNECTED
    "RBS Agent on the host is disconnected."
    DISCONNECTED
    "RBS Agent connection status unknown."
    NA
}

"Cloud-native object type for the label."
enum CloudNativeLabelObjectType {
    "GCP Disk."
    GCP_DISK
    "GCP GCE Instance."
    GCP_GCE_INSTANCE
}

"The archival location template types."
enum CloudNativeLocTemplateType {
    "Cloud native location type is invalid."
    INVALID
    "Specifies that the target archival location should be in the same region as that of source workload."
    SOURCE_REGION
    "Specifies that target archival location should be in a specified region irrespective of the region of the source workloads."
    SPECIFIC_REGION
}

"Cloud-native Rubrik Backup Service(RBS) status."
enum CloudNativeRbaStatusType {
    "Cloud native RBS status is Not Registered."
    NOT_REGISTERED
    "Cloud native RBS status is Registered."
    REGISTERED
    "Cloud native RBS status is Unavailable."
    UNAVAILABLE
}

"Object Type for cloud-native tag rule."
enum CloudNativeTagObjectType {
    "AWS EBS Volume."
    AWS_EBS_VOLUME
    "AWS EC2 Instance."
    AWS_EC2_INSTANCE
    "AWS RDS Instance."
    AWS_RDS_INSTANCE
    "Azure Managed Disk."
    AZURE_MANAGED_DISK
    "Azure SQL Database DB."
    AZURE_SQL_DATABASE_DB
    "Azure SQL Database Server."
    AZURE_SQL_DATABASE_SERVER
    "Azure SQL Managed Instance Server."
    AZURE_SQL_MANAGED_INSTANCE_SERVER
    "Azure Virtual Machine."
    AZURE_VIRTUAL_MACHINE
}

"Fields to filter tag rules."
enum CloudNativeTagRuleFilterFields {
    "Filter by AWS account."
    AWS_ACCOUNT
    "Filter by cloud native account."
    CLOUD_NATIVE_ACCOUNT
    "Filter by name."
    NAME
    "Filter by SLA domain."
    SLA_DOMAIN
}

"Fields to sort tag rules."
enum CloudNativeTagRuleSortByFields {
    "Sort by name."
    NAME
    "Sort by SLA domain."
    SLA_DOMAIN
    "Sort by tag key and value."
    TAG
}

"Cloud-native virtual machine app-consistent object."
enum CloudNativeVmAppConsistentObjectType {
    "Azure virtual machine."
    AZURE_VIRTUAL_MACHINE
}

"Cloud provider."
enum CloudProvider {
    "Cloud provider is AWS."
    AWS
    "Cloud provider is Azure."
    AZURE
}

"Cloud provider type."
enum CloudProviderType {
    "AWS cloud type."
    AWS
    "Azure cloud type."
    AZURE
    "GCP cloud type."
    GCP
    "Cloud type not specified."
    NOT_SPECIFIED
}

"Cloud provider type."
enum CloudVendor {
    "Cloud provider is AWS."
    AWS
    "Cloud provider is Azure."
    AZURE
    "Cloud provider is GCP."
    GCP
}

"Connection status of the cluster with Rubrik."
enum ClusterConnectionStatus {
    "Cluster is connected to Rubrik."
    CONNECTED
    "Cluster is disconnected from Rubrik."
    DISCONNECTED
    "Cluster was not added or got removed from Rubrik."
    NOT_ATTACHED
}

"Enum representing the cluster's knowledge of a disk state."
enum ClusterDiskStatus {
    "Mounted disk."
    ACTIVE
    "Mounted disk continuously failing health checks."
    FAILED
    "Self encrypting disk in locked state (only for appliances supporting hardware encryption)."
    LOCKED
    "Disk present in node table but not on the node."
    MISSING
    "Disk needs replacement. The disk is still readable but SDFS will drain the data gradually in the background."
    PRE_REMOVAL
    "Disk needs software repair (e.g, fsck) and is not writable."
    PRE_REPAIR
    "Disk finished draininig. User can unplug the disk."
    READY_TO_REMOVE
    "Disk explicitly removed from the cluster."
    REMOVED
    "Disk is under repair (e.g., fsck) and is not available. The expectation is that the disk will become available soon but is not guaranteed. Both read and write operations will not be allowed in this status."
    REPAIR
    "Disk with no ext4 partitions."
    UNFORMATTED
    "Unused."
    UNKNOWN
}

"Rubrik cluster disk type."
enum ClusterDiskType {
    "Flash disk."
    FLASH
    "Hard disk drives (HDD)."
    HDD
    "Unknown disk."
    UNKNOWN
}

"Property representing fields to group a Rubrik cluster."
enum ClusterGroupByEnum {
    "Day."
    Day
    "Hour."
    Hour
    "Month."
    Month
    "Quarter."
    Quarter
    "Rubrik cluster type."
    Type
    "Week."
    Week
    "Year."
    Year
}

"Represents a Rubrik cluster's upgrade job status."
enum ClusterJobStatusTypeEnum {
    "Represents that download job failed in the Rubrik cluster."
    DownloadPackageFailed
    "Represents that download job is running in the Rubrik cluster."
    DownloadingPackage
    "Represents that upgrade failed to start in the Rubrik cluster."
    FailedToInitiateUpgrade
    "Represents that the Rubrik cluster has one or more upgrade precheck failure."
    PreCheckFailureError
    "Represents that the Rubrik cluster has one or more upgrade precheck warning."
    PreCheckFailureWarning
    "Represents that the Rubrik cluster is ready to download a new tarball."
    ReadyForDownload
    "Represents that the Rubrik cluster is ready for upgrade."
    ReadyForUpgrade
    "Represents that upgrade has resumed in the Rubrik cluster."
    ResumingUpgrade
    "Represents that upgrade rollback has failed in the Rubrik cluster."
    RollbackFailed
    "Represents that upgrade is being rolled back in the Rubrik cluster."
    RollingBackUpgrade
    "Represents the Rubrik cluster's upgrade status is not known."
    Unknown
    "Represents that the Rubrik cluster is up-to-date."
    UpToDate
    "Represents that upgrade has failed in the Rubrik cluster."
    UpgradeFailed
    "Represents that the Rubrik cluster is upgrading."
    Upgrading
}

"The type of cluster license information."
enum ClusterLicenseInfoType {
    "Represents cluster license information about an expired term."
    EXPIRED_TERM
    "Represents an unknown cluster license information type."
    INFO_TYPE_UNSPECIFIED
    "Represents cluster license information about insufficient capacity."
    INSUFFICIENT_CAPACITY
    "Represents cluster license information about licenses not found."
    LICENSE_NOT_FOUND
    "Represents cluster license information about valid licenses."
    VALID_LICENSE
}

"The computing platform that is running the Rubrik CDM software."
enum ClusterNodePlatformType {
    "Cisco UCS C220 M4."
    C220M4
    "Cisco UCS C220 M5."
    C220M5
    "Cisco UCS C240 M4."
    C240M4
    "Cisco UCS C240 M5."
    C240M5
    "Cloud Edition."
    CE
    "Cloud cluster."
    CLOUD
    "Internal virtual clusters."
    DEV
    "HPE DL360."
    DL360
    "HPE DL380."
    DL380
    "Enterprise ROBO system."
    E1000
    "All-flash appliance."
    F10000
    "Fat twin development unit."
    FATTWIN
    "LeanCloud cluster."
    LEANCLOUD
    "Dell PowerEdge C6420."
    PE6420
    "Dell PowerEdge R740xd."
    PE740
    "Dell PowerEdge 740 Citi."
    PE740CITI
    "Dell PowerEdge R740xd special config."
    PE740HD
    "Dell R750."
    PE750
    "Production r300."
    R300
    "Production r500."
    R500
    "Production r6000f with FIPS."
    R6000F
    "Production r6000s with software encrypted."
    R6000S
    "Production r6000se with enhanced flash."
    R6000SE
    "Non-TPM r6408."
    R6408
    "R6408M with Azure bundle."
    R6408M
    "Forge supported developer OVA."
    RKDEV
    "Lenovo SR-630."
    SR630
    "ThinkServer sd350."
    THINKSERVERSD350
    "Third-party appliance."
    THIRDPARTY
    "Unknown platform type."
    UNKNOWN
    "Rubrik Virtual Appliance (Edge)."
    VA
    "Rubrik Virtual Cluster."
    VC
}

"Represents the position of the node in a Rubrik chassis."
enum ClusterNodePosition {
    "Left bottom node in the Rubrik chassis."
    LEFT_BOTTOM
    "Left top node in the Rubrik chassis."
    LEFT_TOP
    "Right bottom node in the Rubrik chassis."
    RIGHT_BOTTOM
    "Right top node in the Rubrik chassis."
    RIGHT_TOP
}

"Represents the status of the node in a Rubrik cluster."
enum ClusterNodeStatus {
    "Node is unhealthy."
    BAD
    "Node is being bootstrapped with the Rubrik cluster. This state precedes the OK state and the node services will not be functional until the node transitions to status OK."
    BOOTSTRAPPING
    "Node is joining the cluster."
    JOINING
    "Node is down for maintenance."
    MAINTENANCE
    "Node is healthy and normal operation is expected."
    OK
    "Node is being taken down for maintenance. After all sanity checks, the node status will change to MAINTENANCE state."
    PRE_MAINTENANCE
    "Node has been removed from the cluster."
    REMOVED
    "Node status is not known."
    UNKNOWN
    "Node is being upgraded. The node will not accept any new jobs and the upgrade operation will begin after existing jobs are completed."
    UPGRADE
}

"Pause Status of the cluster."
enum ClusterPauseStatus {
    "Cluster not paused."
    NOT_PAUSED
    "Cluster paused."
    PAUSED
    "Unknown Status."
    UNKNOWN
}

"Product type of the registered cluster."
enum ClusterProductEnum {
    "The cluster is CDM cluster."
    CDM
    "The cluster is CLOUD_DIRECT cluster."
    CLOUD_DIRECT
    "The cluster is DATOS cluster."
    DATOS
    "The cluster is POLARIS cluster."
    POLARIS
}

"The mode in which the cluster is registered."
enum ClusterRegistrationMode {
    "The cluster is registered in Hybrid mode."
    HYBRID
    "The cluster is registered in Legacy mode."
    LEGACY
    "The cluster is registered in LOD mode."
    LIFE_OF_DEVICE
    "The cluster is not registered with Rubrik Security Cloud."
    NOT_REGISTERED
}

enum ClusterRemovalState {
    DATA_DELETING
    DISCONNECTING
    FAILED
    REGISTERED
    UNREGISTERED
    WAITING_FOR_DATA_DELETION
}

"Property to order the cluster list results."
enum ClusterSortByEnum {
    "Location of the Rubrik cluster."
    CLUSTER_LOCATION
    "Rubrik cluster name."
    ClusterName
    "Rubrik cluster type."
    ClusterType
    "Estimated time before cluster runs out of storage."
    ESTIMATED_RUNWAY
    "Version of the installed Rubrik cluster."
    INSTALLED_VERSION
    "Rubrik cluster registration date."
    RegisteredAt
}

"Status of the Rubrik cluster."
enum ClusterStatus {
    "The Rubrik cluster is connected."
    Connected
    "The Rubrik cluster is disconnected."
    Disconnected
    "The Rubrik cluster is initializing."
    Initializing
}

"Sub status of the cluster."
enum ClusterSubStatus {
    "The cluster has no sub status."
    DEFAULT
    "The cluster is currently initializing events."
    INITIALIZING_EVENTS
    "The cluster is currently syncing objects and SLAs."
    INITIALIZING_METADATA
    "The cluster is currently initializing reports."
    INITIALIZING_REPORTS
}

"Cluster system status."
enum ClusterSystemStatus {
    "Several nodes are experiencing failures."
    FATAL
    "All nodes are functioning normally."
    OK
    "Some nodes are experiencing failures."
    WARNING
}

"Cluster timezone."
enum ClusterTimezoneType {
    "Cluster timezone Johannesburg."
    CLUSTER_TIMEZONE_AFRICA_JOHANNESBURG
    "Cluster timezone Lagos."
    CLUSTER_TIMEZONE_AFRICA_LAGOS
    "Cluster timezone Nairobi."
    CLUSTER_TIMEZONE_AFRICA_NAIROBI
    "Cluster timezone Anchorage."
    CLUSTER_TIMEZONE_AMERICA_ANCHORAGE
    "Cluster timezone Araguaina."
    CLUSTER_TIMEZONE_AMERICA_ARAGUAINA
    "Cluster timezone Atikokan."
    CLUSTER_TIMEZONE_AMERICA_ATIKOKAN
    "Cluster timezone Barbados."
    CLUSTER_TIMEZONE_AMERICA_BARBADOS
    "Cluster timezone Bogota."
    CLUSTER_TIMEZONE_AMERICA_BOGOTA
    "Cluster timezone Chicago."
    CLUSTER_TIMEZONE_AMERICA_CHICAGO
    "Cluster timezone Costa Rica."
    CLUSTER_TIMEZONE_AMERICA_COSTA_RICA
    "Cluster timezone Denver."
    CLUSTER_TIMEZONE_AMERICA_DENVER
    "Cluster timezone Los Angeles."
    CLUSTER_TIMEZONE_AMERICA_LOS_ANGELES
    "Cluster timezone Mexico City."
    CLUSTER_TIMEZONE_AMERICA_MEXICO_CITY
    "Cluster timezone New York."
    CLUSTER_TIMEZONE_AMERICA_NEW_YORK
    "Cluster timezone Noronha."
    CLUSTER_TIMEZONE_AMERICA_NORONHA
    "Cluster timezone Panama."
    CLUSTER_TIMEZONE_AMERICA_PANAMA
    "Cluster timezone Phoenix."
    CLUSTER_TIMEZONE_AMERICA_PHOENIX
    "Cluster timezone Santiago."
    CLUSTER_TIMEZONE_AMERICA_SANTIAGO
    "Cluster timezone St. Johns."
    CLUSTER_TIMEZONE_AMERICA_ST_JOHNS
    "Cluster timezone Toronto."
    CLUSTER_TIMEZONE_AMERICA_TORONTO
    "Cluster timezone Vancouver."
    CLUSTER_TIMEZONE_AMERICA_VANCOUVER
    "Cluster timezone Bangkok."
    CLUSTER_TIMEZONE_ASIA_BANGKOK
    "Cluster timezone Dhaka."
    CLUSTER_TIMEZONE_ASIA_DHAKA
    "Cluster timezone Dubai."
    CLUSTER_TIMEZONE_ASIA_DUBAI
    "Cluster timezone Hong Kong."
    CLUSTER_TIMEZONE_ASIA_HONG_KONG
    "Cluster timezone Karachi."
    CLUSTER_TIMEZONE_ASIA_KARACHI
    "Cluster timezone Kathmandu."
    CLUSTER_TIMEZONE_ASIA_KATHMANDU
    "Cluster timezone Kolkata."
    CLUSTER_TIMEZONE_ASIA_KOLKATA
    "Cluster timezone Magadan."
    CLUSTER_TIMEZONE_ASIA_MAGADAN
    "Cluster timezone Singapore."
    CLUSTER_TIMEZONE_ASIA_SINGAPORE
    "Cluster timezone Tokyo."
    CLUSTER_TIMEZONE_ASIA_TOKYO
    "Cluster timezone Cape Verde."
    CLUSTER_TIMEZONE_ATLANTIC_CAPE_VERDE
    "Cluster timezone Adelaide."
    CLUSTER_TIMEZONE_AUSTRALIA_ADELAIDE
    "Cluster timezone Brisbane."
    CLUSTER_TIMEZONE_AUSTRALIA_BRISBANE
    "Cluster timezone Perth."
    CLUSTER_TIMEZONE_AUSTRALIA_PERTH
    "Cluster timezone Sydney."
    CLUSTER_TIMEZONE_AUSTRALIA_SYDNEY
    "Cluster timezone Amsterdam."
    CLUSTER_TIMEZONE_EUROPE_AMSTERDAM
    "Cluster timezone Athens."
    CLUSTER_TIMEZONE_EUROPE_ATHENS
    "Cluster timezone London."
    CLUSTER_TIMEZONE_EUROPE_LONDON
    "Cluster timezone Moscow."
    CLUSTER_TIMEZONE_EUROPE_MOSCOW
    "Cluster timezone Auckland."
    CLUSTER_TIMEZONE_PACIFIC_AUCKLAND
    "Cluster timezone Honolulu."
    CLUSTER_TIMEZONE_PACIFIC_HONOLULU
    "Cluster timezone Midway."
    CLUSTER_TIMEZONE_PACIFIC_MIDWAY
    "Cluster timezone unknown."
    CLUSTER_TIMEZONE_UNSPECIFIED
    "Cluster timezone UTC."
    CLUSTER_TIMEZONE_UTC
}

enum ClusterTypeEnum {
    Cloud
    ExoCompute
    OnPrem
    Polaris
    Robo
    Unknown
}

"Available cold storage class options for tiering."
enum ColdStorageClass {
    "Glacier cold storage class for AWS."
    AWS_GLACIER
    "GDA cold storage class for AWS."
    AWS_GLACIER_DEEP_ARCHIVE
    "Archive cold storage tier for Azure."
    AZURE_ARCHIVE
    "Unknown cold storage class."
    COLD_STORAGE_CLASS_UNKNOWN
}

"The compliance status of the workload."
enum ComplianceStatusEnum {
    EMPTY
    "The workload is in compliance."
    IN_COMPLIANCE
    "Compliance is not applicable for the workload."
    NOT_APPLICABLE
    "Compliance status is not available for the workload."
    NOT_AVAILABLE
    "Workload does not have a compliance status."
    NULL
    "The workload is out of compliance."
    OUT_OF_COMPLIANCE
    "The workload is unprotected."
    UNPROTECTED
}

enum ComponentEnum {
    APP_FLOWS
    AWS_NATIVE
    AWS_SOURCE
    AZURE_NATIVE
    BLOBSTORE
    CEREBRO
    CLOUD_ACCOUNTS
    CLOUD_NATIVE
    COLOSSUS
    CORE_EXPERIENCE
    DATA_GOV
    DHRC
    EXO_COMPUTE
    FELDSPAR
    FORGE
    GCP_NATIVE
    GPS
    KUPR
    LAMBDA
    O365
    PLATFORM
    QUICKSILVER
    RADAR
    SNAPPABLES
    SONAR
    THOR
    THOR_UPLOAD
    USER_AWARENESS
    USER_MANAGEMENT
    WATCHERS
}

"Represents sortable fields for configuration protection."
enum ConfigProtectionInfoSortBy {
    "Rubrik cluster name."
    CLUSTER_NAME
    "Configuration protection status."
    CONFIG_PROTECTION_STATUS
    "Last successful configuration backup date and time."
    LAST_BACKUP_TIME
    "Configuration protection upload location."
    UPLOAD_LOCATION
}

"Represents configuration protection status values."
enum ConfigProtectionStatus {
    "Configuration backup complete."
    BACKUP_COMPLETED
    "Configuration backup failed."
    BACKUP_FAILED
    "Configuration backup completed with warnings."
    BACKUP_PARTIALLY_COMPLETED
    "Configuration backup is in progress."
    BACKUP_RUNNING
    "Configuration protection is not set up."
    NOT_SETUP
    "Configuration restore complete."
    RESTORE_COMPLETED
    "Configuration restore failed."
    RESTORE_FAILED
    "Configuration restore completed with warnings."
    RESTORE_PARTIALLY_COMPLETED
    "Configuration restore is in progress."
    RESTORE_RUNNING
    "Configuration set up is complete, ready for configuration protection."
    SETUP_COMPLETED
    "Unable to complete configuration set up."
    SETUP_FAILED
    "Configuration set up is in progress."
    SETUP_RUNNING
}

"""

Supported in v7.0+
Supported configuration types for backup and restore.
"""
enum ConfigurationTypes {
    "Adaptive backup configuration."
    CONFIGURATION_TYPES_ADAPTIVE_BACKUP
    "Archival locations configuration."
    CONFIGURATION_TYPES_ARCHIVAL_LOCATIONS
    "Cluster settings configuration."
    CONFIGURATION_TYPES_CLUSTER_SETTINGS
    "Guest OS settings configuration."
    CONFIGURATION_TYPES_GUEST_OS_SETTINGS
    "KMIP settings configuration."
    CONFIGURATION_TYPES_KMIP_SETTINGS
    "LDAP servers configuration."
    CONFIGURATION_TYPES_LDAP_SERVERS
    "MSSQL defaults configuration."
    CONFIGURATION_TYPES_MSSQL_DEFAULTS
    "NAS hosts configuration."
    CONFIGURATION_TYPES_NAS_HOSTS
    "Network throttling configuration."
    CONFIGURATION_TYPES_NETWORK_THROTTLING
    "Notification settings configuration."
    CONFIGURATION_TYPES_NOTIFICATION_SETTINGS
    "Organizations configuration."
    CONFIGURATION_TYPES_ORGANIZATIONS
    "Replication targets configuration."
    CONFIGURATION_TYPES_REPLICATION_TARGETS
    "Reports configuration."
    CONFIGURATION_TYPES_REPORTS
    "Roles configuration."
    CONFIGURATION_TYPES_ROLES
    "SLA domains configuration."
    CONFIGURATION_TYPES_SLA_DOMAINS
    "SMTP settings configuration."
    CONFIGURATION_TYPES_SMTP_SETTINGS
    "SNMP settings configuration."
    CONFIGURATION_TYPES_SNMP_SETTINGS
    "Syslog settings configuration."
    CONFIGURATION_TYPES_SYSLOG_SETTINGS
    "Users configurations."
    CONFIGURATION_TYPES_USERS
    "Vcenter servers configuration."
    CONFIGURATION_TYPES_VCENTER_SERVERS
    "Windows and Unix hosts configuration."
    CONFIGURATION_TYPES_WIN_AND_UNIX_HOSTS
}

"""

Supported in v5.2+
Specifies whether the SLA Domain is used for protection or retention.
"""
enum ConfiguredSlaType {
    CONFIGURED_SLA_TYPE_PROTECTION_SLA
    CONFIGURED_SLA_TYPE_RETENTION_SLA
}

enum ConflictResolutionAuthzEnum {
    ALLOW_AUTO_CONFLICT_RESOLUTION
    NONE
    NO_CONFLICT_RESOLUTION
}

"Connected Through Enum Type."
enum ConnectedThroughEnumType {
    "CDM."
    CDM
    "NAS-DA."
    NAS_DA
    "No associated fileset."
    SRC_UNSPECIFIED
}

"The connection status type enum."
enum ConnectionStatusType {
    "The connection has been connected."
    CONNECTED
    "The connection has been disconnected."
    DISCONNECTED
}

"Tells whether snapshot has app or crash consistency."
enum ConsistencyLevelEnum {
    APP_CONSISTENT
    CRASH_CONSISTENT
    FILE_SYSTEM_CONSISTENT
    INCONSISTENT
    UNKNOWN
    VSS_CONSISTENT
}

enum ContextFilterTypeEnum {
    APPFLOWS_FAILOVER_TO_AWS
    APPFLOWS_FAILOVER_TO_CDM
    DEFAULT
}

enum CrawlStatusEnum {
    COMPLETE
    COMPLETE_WITH_FAIL
    IN_PROGRESS
    IN_PROGRESS_WITH_FAIL
}

enum CustomReportGroupByEnum {
    ReportFocus
}

enum CustomReportSortByEnum {
    CreationTime
    UpdateTime
    ViewTime
}

enum DataGovFileMode {
    DIRECTORY
    FILE
    SYMLINK
    UNKNOWN
}

"""

TODO: SPARK-150447 - Deprecate this enum to use managed object type
Filters objects by object type.
Note: All the object types, except CDM, are granular object types.
"""
enum DataGovObjectType {
    "Represents an Azure-native managed disk."
    AZURE_NATIVE_MANAGED_DISK
    "Represents an Azure-native virtual machine."
    AZURE_NATIVE_VIRTUAL_MACHINE
    """

    Represents all the object types that belong to CDM. This is the default
    value and is added for maintaining backward compatability.
    """
    CDM
    "Represents Hyper-V Virtual Machine objects."
    HYPERV_VIRTUAL_MACHINE
    "Represents Linux Fileset objects."
    LINUX_FILESET
    "Represents Nutanix Virtual Machine objects."
    NUTANIX_VIRTUAL_MACHINE
    "Represents O365 OneDrive objects."
    O365_ONEDRIVE
    "Represents O365 SharePoint Drive objects."
    O365_SHAREPOINT_DRIVE
    "Unknown object type."
    OBJECT_TYPE_UNSPECIFIED
    "Represents Share Fileset objects."
    SHARE_FILESET
    "Represents Volume Group objects."
    VOLUME_GROUP
    "Represents vSphere Virtual Machine objects."
    VSPHERE_VIRTUAL_MACHINE
    "Represents Windows Fileset objects."
    WINDOWS_FILESET
}

enum DataGovOsType {
    LINUX
    NONE
    WINDOWS
}

enum DataGovShareType {
    NFS
    SMB
    UNKNOWN_SHARE_TYPE
}

"Data Guard type of the Oracle database."
enum DataGuardType {
    "An Oracle Data Guard group."
    DATA_GUARD_GROUP
    "An Oracle Data Guard group member."
    DATA_GUARD_MEMBER
    "An Oracle database that is not a Data Guard group member."
    NON_DATA_GUARD
    "Unrecognized Oracle Data Guard type."
    UNRECOGNIZED_DATA_GUARD_TYPE
}

"Specifies the data location type."
enum DataLocationName {
    AZURE
    CLEVERSAFE
    CLOUD_NATIVE_AWS
    CLOUD_NATIVE_GCP
    GLACIER
    GOOGLE
    HDS
    LOCAL
    NFS
    QSTAR
    REHYDRATED
    REPLICATION_OFF
    REPLICATION_POLARIS_SOURCE
    REPLICATION_SOURCE
    REPLICATION_SOURCE_AND_TARGET
    REPLICATION_TARGET
    S3
    S3_COMPATIBLE
    SCALITY
}

enum DataTransferType {
    EMPTY_VALUE
    EXPORT
    HYDRATION
    INPLACE
    LIVEMOUNT
}

enum DataTypeEnum {
    BOOLEAN
    BYTE
    DATE_TIME
    FILTER_DATE_RANGE
    FLOAT
    INTEGER
    LONG
    STRING
    URL
}

"All reporting table schemas."
enum DataViewTypeEnum {
    BACKUP_COMPLIANCE
    CDM_UPGRADES
    "Global object database table schema."
    GLOBAL_OBJECT
    "Global object summary daily database table schema."
    GLOBAL_OBJECT_SUMMARY_DAILY
    "Global object summary monthly database table schema."
    GLOBAL_OBJECT_SUMMARY_MONTHLY
    INDEXING
    MONITORING_ALL
    MONITORING_CANCELED
    MONITORING_COMPLETED
    MONITORING_FAILED
    MONITORING_IN_PROGRESS
    MONITORING_RETRYABLE_CANCELED
    MONITORING_RETRYABLE_FAILED
    MONITORING_SCHEDULED
    MONITORING_TASK_COUNT_TIME_SERIES
    OBJECT_AUDIT_DETAIL
    OBJECT_AUDIT_LIST
    PROTECTION_TASK_DETAILS
    SLA_AUDIT_DETAIL
    SLA_AUDIT_LIST
    SLA_COMPLIANCE
}

"Day of the month."
enum DayOfMonth {
    "Fifteenth day of the month."
    FIFTEENTH
    "First day of the month."
    FIRST_DAY
    "Last day of the month."
    LAST_DAY
}

"Day of the quarter."
enum DayOfQuarter {
    "First day of the quarter."
    FIRST_DAY
    "Last day of the quarter."
    LAST_DAY
}

"Specifies the day of the week."
enum DayOfWeek {
    "Indicates Friday."
    FRIDAY
    "Indicates Monday."
    MONDAY
    "Indicates Saturday."
    SATURDAY
    "Indicates Sunday."
    SUNDAY
    "Indicates Thursday."
    THURSDAY
    "Indicates Tuesday."
    TUESDAY
    "Indicates Wednesday."
    WEDNESDAY
}

"Day of the year."
enum DayOfYear {
    "First day of the year."
    FIRST_DAY
    "Last day of the year."
    LAST_DAY
}

"Db2 database type."
enum Db2DatabaseType {
    "Unable to determine type of the Db2 database."
    DBTYPE_UNSPECIFIED
    "Db2 database is an HADR database."
    HADR
    "Db2 database is a Partitioned database."
    PARTITIONED
    "Db2 database is a Standalone database."
    STANDALONE
}

"Represents the different status values for a Db2 instance."
enum Db2InstanceSummaryStatus {
    "The Db2 instance is in ERROR state."
    DB2_INSTANCE_SUMMARY_STATUS_ERROR
    "The Db2 instance is in OK state."
    DB2_INSTANCE_SUMMARY_STATUS_OK
    "The Db2 instance is in UNKNOWN state."
    DB2_INSTANCE_SUMMARY_STATUS_UNKNOWN
    "The Db2 instance is in WARNING state."
    DB2_INSTANCE_SUMMARY_STATUS_WARNING
}

"Enum for db2 log snapshot sort by field."
enum Db2LogSnapshotSortBy {
    "Sort db2 snapshots by date."
    DATE
}

"Enum for db2 recoverable ranges sort by field."
enum Db2RecoverableRangeSortBy {
    "Sort Db2 recoverable range by end time."
    END_TIME
    "Sort Db2 recoverable range by start time."
    START_TIME
}

"Enum for db2 snapshot type."
enum Db2SnapshotType {
    "Db2 Snapshot since last successful full snapshot."
    DIFFERENTIAL
    "Db2 Full Snapshot."
    FULL
    "Db2 Snapshot since any (full/differential/incremental) successful snapshot."
    INCREMENTAL
}

"Db2 instance status."
enum Db2Status {
    "Error while connecting to Db2 Instance."
    ERROR
    "Db2 Instance is successfully connected."
    OK
    "Db2 Instance is in the connecting stage."
    UNKNOWN
    "Db2 Instance is connected with warnings."
    WARNING
}

"Default Action type for network rules."
enum DefaultActionType {
    "Allow network access."
    ALLOW
    "Deny network access."
    DENY
}

"Enum for vApp snapshot location."
enum DeleteVappSnapshotRequestLocation {
    "Delete snapshot in all location."
    V1_DELETE_VAPP_SNAPSHOT_V1_REQUEST_LOCATION_ALL
    "Delete snapshot only local."
    V1_DELETE_VAPP_SNAPSHOT_V1_REQUEST_LOCATION_LOCAL
}

"Enum for delete VMware snapshot location."
enum DeleteVmwareSnapshotRequestLocation {
    "Delete snapshot in all locations."
    V1_DELETE_VMWARE_SNAPSHOT_REQUEST_LOCATION_ALL
    "Delete snapshot in local only."
    V1_DELETE_VMWARE_SNAPSHOT_REQUEST_LOCATION_LOCAL
}

"""

Categories for comparing a selected snapshot and the snapshot taken prior
to the selected snapshot, at the time of browsing or searching snapshots.
"""
enum DeltaType {
    "Number of bytes created."
    BYTES_CREATED
    "Number of bytes deleted."
    BYTES_DELETED
    "Number of bytes modified."
    BYTES_MODIFIED
    "Number of files created."
    NODES_CREATED
    "Number of files deleted."
    NODES_DELETED
    "Number of files modified."
    NODES_MODIFIED
    "Number of files affected by the identified ransomware strain."
    NODES_RANSOMWARE_STRAIN_AFFECTED
    """

    Number of ransomware notes corresponding to the identified ransomware
    strain.
    """
    NODES_RANSOMWARE_STRAIN_NOTE
    "Number of files that are suspicious."
    NODES_SUSPICIOUS
}

"""

Category is used to categorize scores and recommendations. Note that the
values are stored in a database and hence cannot be changed.
"""
enum DhrcCategory {
    """

    The ANOMALIES_DETECTED category deals with objects flagged by the Radar
    component.
    """
    ANOMALIES_DETECTED
    "The CATEGORY_UNSPECIFIED category represents an unspecified category."
    CATEGORY_UNSPECIFIED
    """

    The DATA_SAFETY_SCORE category represents the combined score for all
    categories.
    """
    DATA_SAFETY_SCORE
    """

    The RECOVERABILITY_STATUS category deals with job status, meeting SLAs,
    etc.
    """
    RECOVERABILITY_STATUS
    """

    The SECURITY_CONFIG category deals with the safety of configurations such
    as permissions, key management, audit logs, etc.
    """
    SECURITY_CONFIG
    """

    The SENSITIVE_DATA category deals with policy violations, content flagging,
    etc.
    """
    SENSITIVE_DATA
    "The SUSPICIOUS_USER_ACTIVITY category deals with suspicious user activity."
    SUSPICIOUS_USER_ACTIVITY
}

"Recommendation keys uniquely identify the type of recommendation."
enum DhrcRecommendationKey {
    """

    Recommendation to increase the number of clusters enabled with Sensitive
    Data Discovery.
    """
    INCREASE_NUMBER_OF_DATA_DISCOVERY_ENABLED_CLUSTERS
    """

    INCREASE_NUMBER_OF_ENCRYPTED_CDM_NODES recommend the user to increase
    the number of encrypted CDM nodes.
    """
    INCREASE_NUMBER_OF_ENCRYPTED_CDM_NODES
    """

    INCREASE_NUMBER_OF_PROTECTED_OBJECTS recommend the user to increase the
    number of objects protected by Rubrik.
    """
    INCREASE_NUMBER_OF_PROTECTED_OBJECTS
    """

    INCREASE_NUMBER_OF_RADAR_ENABLED_CLUSTERS recommend the user to increase
    the number of radar enabled clusters.
    """
    INCREASE_NUMBER_OF_RADAR_ENABLED_CLUSTERS
    """

    INCREASE_NUMBER_OF_SLAS_USING_RETENTION_LOCK recommend the user to
    increase the number of SLAs using retention lock.
    """
    INCREASE_NUMBER_OF_SLAS_USING_RETENTION_LOCK
    """

    INCREASE_NUMBER_OF_SLA_COMPLIANT_OBJECTS recommend the user to increase
    the number of objects in compliance with the SLA.
    """
    INCREASE_NUMBER_OF_SLA_COMPLIANT_OBJECTS
    """

    INCREASE_NUMBER_OF_USERS_USING_TOTP recommend the user to increase the
    number of users using TOTP.
    """
    INCREASE_NUMBER_OF_USERS_USING_TOTP
    "The KEY_UNSPECIFIED key represents an unspecified key."
    KEY_UNSPECIFIED
}

"Timespan specifies a length of time."
enum DhrcScoreTimespan {
    "The MONTH timespan represents a timespan of one month."
    MONTH
    "The THREE_DAYS timespan represents a timespan of three days."
    THREE_DAYS
    "The THREE_MONTH timespan represents a timespan of three months."
    THREE_MONTHS
    "The TIMESPAN_UNSPECIFIED represents an unspecified timespan."
    TIMESPAN_UNSPECIFIED
    "The WEEK timespan represents a timespan of one week."
    WEEK
    "The YEAR timespan represents a timespan of one year."
    YEAR
}

"""

Supported in v5.0+
Status of the task.
"""
enum DiagnosticTaskStatus {
    DIAGNOSTIC_TASK_STATUS_CANCELED
    DIAGNOSTIC_TASK_STATUS_FAILED
    DIAGNOSTIC_TASK_STATUS_QUEUED
    DIAGNOSTIC_TASK_STATUS_RETRIED
    DIAGNOSTIC_TASK_STATUS_STARTED
    DIAGNOSTIC_TASK_STATUS_SUCCEEDED
}

enum DiscoveryContentReportGroupBy {
    ANALYZER
    CLUSTER
    FILE
    OBJECT_NAME
    POLICY
    SLA_DOMAIN
    TIME
}

enum DiscoveryContentReportSortBy {
    ANALYZER_NAME
    CLUSTER
    FILES_WITH_HITS
    FILE_NAME
    LOCATION
    OBJECT_NAME
    PATH
    POLICY_NAME
    SIZE
    SLA_DOMAIN
    SNAPSHOT_TIME
    TOTAL_HITS
}

enum DiscoveryReportGroupBy {
    POLICY_VIOLATIONS
    STATUS_POLICY
    TIME_ISSUES
    TIME_VIOLATIONS
}

enum DiscoveryReportSortBy {
    NUM_HIGH_RISK_LOCATIONS
    NUM_OBJECTS
    NUM_VIOLATED_FILES
    NUM_VIOLATION
    POLICY_NAME
    POLICY_STATUS
}

enum DiscoveryReportTablePolicyStatus {
    DISCOVERY
    IN_COMPLIANCE
    OUT_OF_COMPLIANCE
}

"GCP native disk encryption type."
enum DiskEncryptionType {
    "Encrypt disk using customer managed key in structured form."
    CUSTOMER_MANAGED_KEY
    "Encrypt disk using customer managed key in raw string form."
    CUSTOMER_MANAGED_KEY_RESOURCE_ID
    "Encrypt disk using Google managed key."
    GOOGLE_MANAGED_KEY
    "Encrypt disk using the same key as the source disk."
    SOURCE_DISK_ENCRYPTION
}

"Identifier for download files."
enum DownloadIdentifierEnum {
    "Threat hunt result CSV."
    ORION_THREAT_HUNT_DOWNLOAD
    "Download report CSV/PDF."
    REPORT
    "Send report email."
    SEND_NOW_EMAIL
    "Files Downloaded from a Snapshot."
    SNAPSHOT_FILES_DOWNLOAD
    "Data classification files download."
    SONAR_DOWNLOAD
}

enum DownloadStatusEnum {
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

"Email address filter for Mailbox search."
enum EmailAddressFilterType {
    "Search sender or recipients by email."
    ALL
    "Search sender by email."
    FROM
    "Search recipients by email."
    TO
}

"Level of encryption detected."
enum EncryptionLevel {
    "High level of encryption."
    HIGH
    "Low level of encryption."
    LOW
    "Medium level of encryption."
    MEDIUM
    "Encryption level is unavailable."
    UNAVAILABLE
}

"Represents the status of a user based on whether the user is the first user to view the current EULA."
enum EulaViewStatus {
    "The user is not the first user to view the current EULA."
    ALREADY_VIEWED
    "The user is the first user to view the current EULA."
    FIRST_VIEWED
    "It is unknown if a user has seen the current EULA."
    STATUS_UNSPECIFIED
}

"Enum representing all the cluster types."
enum EventClusterType {
    "Cloud Cluster."
    CLOUD
    "Exocompute cluster."
    EXO_COMPUTE
    "On-premises cluster."
    ON_PREM
    "ROBO cluster."
    ROBO
    "Rubrik SaaS cluster."
    RUBRIK_SAAS
    "Unknown cluster type."
    UNKNOWN_CLUSTER_TYPE
}

"Enum representing all the possible object types which generate events."
enum EventObjectType {
    "App Blueprint object."
    APP_BLUEPRINT
    "AppRecovery object."
    APP_FLOWS
    "AWS account object."
    AWS_ACCOUNT
    "AWS object."
    AWS_EVENT_TYPE
    "AWS native account object."
    AWS_NATIVE_ACCOUNT
    "AWS native EBS volume object."
    AWS_NATIVE_EBS_VOLUME
    "AWS native EC2 instance object."
    AWS_NATIVE_EC2_INSTANCE
    "AWS native RDS instance."
    AWS_NATIVE_RDS_INSTANCE
    "Azure native disk object."
    AZURE_NATIVE_DISK
    "Azure native subscription object."
    AZURE_NATIVE_SUBSCRIPTION
    "Azure native virtual machine object."
    AZURE_NATIVE_VM
    "Azure SQL database object."
    AZURE_SQL_DATABASE
    "Azure SQL database server object."
    AZURE_SQL_DATABASE_SERVER
    "Azure SQL managed instance object."
    AZURE_SQL_MANAGED_INSTANCE
    "Azure SQL managed instance database object."
    AZURE_SQL_MANAGED_INSTANCE_DATABASE
    "Capacity bundle object."
    CAPACITY_BUNDLE
    "Cassandra column family."
    CASSANDRA_COLUMN_FAMILY
    "Cassandra keyspace."
    CASSANDRA_KEYSPACE
    "Cassandra source."
    CASSANDRA_SOURCE
    "Certificate object."
    CERTIFICATE
    "Cloud Direct NAS export."
    CLOUD_DIRECT_NAS_EXPORT
    "Cluster object."
    CLUSTER
    "Compute instance object."
    COMPUTE_INSTANCE
    "Data location object."
    DATA_LOCATION
    "Db2 database object."
    DB2_DATABASE
    "Db2 instance object."
    DB2_INSTANCE
    "EC2 instance object."
    EC2_INSTANCE
    "Envoy object."
    ENVOY
    "Exchange database object."
    EXCHANGE_DATABASE
    "Exocompute object."
    EXOCOMPUTE
    "Failover cluster app."
    FAILOVER_CLUSTER_APP
    "GCP native disk."
    GCP_NATIVE_DISK
    "GCP native GCE instance."
    GCP_NATIVE_GCE_INSTANCE
    "GCP native project."
    GCP_NATIVE_PROJECT
    "Host object."
    HOST
    "HyperV virtual machine object."
    HYPERV_VM
    "Job instance."
    JOB_INSTANCE
    "Kubernetes cluster object."
    KUPR_CLUSTER
    "Kubernetes namespace object."
    KUPR_NAMESPACE
    "LDAP object."
    LDAP
    "Linux fileset object."
    LINUX_FILESET
    "Linux host object."
    LINUX_HOST
    "Managed Volume object."
    MANAGED_VOLUME
    "MongoDB collection."
    MONGODB_COLLECTION
    "MongoDB database."
    MONGODB_DATABASE
    "MongoDB source."
    MONGODB_SOURCE
    "MongoDB collection."
    MONGO_COLLECTION
    "MongoDB database."
    MONGO_DATABASE
    "MongoDB source."
    MONGO_SOURCE
    "MsSQL Object."
    MSSQL
    "NAS fileset object."
    NAS_FILESET
    "NAS host object."
    NAS_HOST
    "NAS system."
    NAS_SYSTEM
    "Nutanix virtual machine object."
    NUTANIX_VM
    "O365 Calendar object."
    O365_CALENDAR
    "O365 Group."
    O365_GROUP
    "O365 Mailbox object."
    O365_MAILBOX
    "O365 OneDrive object."
    O365_ONEDRIVE
    "O365 Organization object."
    O365_ORGANIZATION
    "O365 SharePoint drive object."
    O365_SHARE_POINT_DRIVE
    "O365 SharePoint list object."
    O365_SHARE_POINT_LIST
    "O365 Site object."
    O365_SITE
    "O365 Team object."
    O365_TEAM
    "Object protection."
    OBJECT_PROTECTION
    "Auth domain object."
    OBJECT_TYPE_AUTH_DOMAIN
    "Cloud-native virtual machine object."
    OBJECT_TYPE_CLOUD_NATIVE_VIRTUAL_MACHINE
    "Cloud-native virtual machine."
    OBJECT_TYPE_CLOUD_NATIVE_VM
    "HDFS object."
    OBJECT_TYPE_HDFS
    "HyperV SCVMM object."
    OBJECT_TYPE_HYPERV_SCVMM
    "HyperV server object."
    OBJECT_TYPE_HYPERV_SERVER
    "Nutanix cluster object."
    OBJECT_TYPE_NUTANIX_CLUSTER
    "Storage array."
    OBJECT_TYPE_STORAGE_ARRAY
    "Upgrade."
    OBJECT_TYPE_UPGRADE
    "VCD."
    OBJECT_TYPE_VCD
    "VCenter."
    OBJECT_TYPE_VCENTER
    "Volume group."
    OBJECT_TYPE_VOLUME_GROUP
    "Oracle."
    ORACLE
    "Oracle database object."
    ORACLE_DB
    "Oracle host object."
    ORACLE_HOST
    "Oracle RAC object."
    ORACLE_RAC
    "Public cloud machine instance."
    PUBLIC_CLOUD_MACHINE_INSTANCE
    "Rubrik SaaS account object."
    RUBRIK_SAAS_ACCOUNT
    "Rubrik SAAS EBS volume."
    RUBRIK_SAAS_EBS_VOLUME
    "Rubrik SAAS EC2 instance."
    RUBRIK_SAAS_EC2_INSTANCE
    "SAML single sign-on."
    SAML_SSO
    "SAP HANA database."
    SAP_HANA_DB
    "SAP HANA system."
    SAP_HANA_SYSTEM
    "Share fileset object."
    SHARE_FILESET
    "SLA domain."
    SLA_DOMAIN
    "Samba domain."
    SMB_DOMAIN
    "SnapMirror cloud."
    SNAP_MIRROR_CLOUD
    "Storage array Volume group."
    STORAGE_ARRAY_VOLUME_GROUP
    "Storage location."
    STORAGE_LOCATION
    "Storm object."
    STORM
    "Support bundle."
    SUPPORT_BUNDLE
    "Unknown event object type."
    UNKNOWN_EVENT_OBJECT_TYPE
    "User."
    USER
    "VCD vApp."
    VCD_VAPP
    "VMware compute cluster."
    VMWARE_COMPUTE_CLUSTER
    "VMware virtual machine."
    VMWARE_VM
    "Webhook object."
    WEBHOOK
    "Windows fileset."
    WINDOWS_FILESET
    "Windows host."
    WINDOWS_HOST
}

"Enum representing the severity of the event."
enum EventSeverity {
    "Severity Critical."
    SEVERITY_CRITICAL
    "Severity Informational."
    SEVERITY_INFO
    "Severity Warning."
    SEVERITY_WARNING
}

"Enum representing all the possible event statuses."
enum EventStatus {
    "Canceled."
    CANCELED
    "Cancelling."
    CANCELING
    "Failure."
    FAILURE
    "Information."
    INFO
    "Queued status."
    QUEUED
    "Running."
    RUNNING
    "Success."
    SUCCESS
    "Task failure status."
    TASK_FAILURE
    "Task success status."
    TASK_SUCCESS
    "Unknown event status."
    UNKNOWN_EVENT_STATUS
    "Warning."
    WARNING
}

"Enum representing all the possible event types."
enum EventType {
    "Anomaly event."
    ANOMALY
    "Archive event."
    ARCHIVE
    "Auth domain event."
    AUTH_DOMAIN
    "Aws event."
    AWS_EVENT
    "Backup event."
    BACKUP
    "Classification event."
    CLASSIFICATION
    "Event from cloud-native source."
    CLOUD_NATIVE_SOURCE
    "Event from cloud-native virtual machine."
    CLOUD_NATIVE_VIRTUAL_MACHINE
    "Event from cloud-native virtual machine."
    CLOUD_NATIVE_VM
    "Configuration event."
    CONFIGURATION
    "Connection event."
    CONNECTION
    "Conversion event."
    CONVERSION
    "Diagnostic event."
    DIAGNOSTIC
    "Discovery event."
    DISCOVERY
    "Download event."
    DOWNLOAD
    "Embedded event."
    EMBEDDED_EVENT
    "Failover event."
    FAILOVER
    "Fileset event."
    FILESET
    "Hardware event."
    HARDWARE
    "HDFS event."
    HDFS
    "Host event."
    HOST_EVENT
    "Hyper-V system center virtual machine event."
    HYPERV_SCVMM
    "HyperV Server event."
    HYPERV_SERVER
    "Index event."
    INDEX
    "Instantiate event."
    INSTANTIATE
    "Isolated recovery."
    ISOLATED_RECOVERY
    "Legal hold event."
    LEGAL_HOLD
    "Local recovery event."
    LOCAL_RECOVERY
    "Snapshot lock event."
    LOCK_SNAPSHOT
    "Maintenance event."
    MAINTENANCE
    "Nutanix cluster event."
    NUTANIX_CLUSTER
    "Ownership change event."
    OWNERSHIP
    "Ransomware Investigation analysis event."
    RANSOMWARE_INVESTIGATION_ANALYSIS
    "Recovery event."
    RECOVERY
    "Replication event."
    REPLICATION
    "Resource operations event."
    RESOURCE_OPERATIONS
    "Storage event."
    STORAGE
    "Storage array event."
    STORAGE_ARRAY
    "Storm resource event."
    STORM_RESOURCE
    "Support event."
    SUPPORT
    "Sync event."
    SYNC
    "System event."
    SYSTEM
    "Test failover event."
    TEST_FAILOVER
    "Threat hunt event."
    THREAT_HUNT
    "TPR event."
    TPR
    "Unknown event type."
    UNKNOWN_EVENT_TYPE
    "Upgrade event."
    UPGRADE
    "VCD event."
    VCD
    "Vcenter event."
    VCENTER
    "Volume group event."
    VOLUME_GROUP
}

"""

Supported in v8.0+
Backup preference of an Exchange DAG.
"""
enum ExchangeBackupPreference {
    EXCHANGE_BACKUP_PREFERENCE_PASSIVE_ONLY
    EXCHANGE_BACKUP_PREFERENCE_PREFER_PASSIVE
}

"Filter for Exchange Live Mount results."
enum ExchangeLiveMountFilterField {
    "Cluster UUID filter for Exchange Live Mount results."
    CLUSTER_UUID
    "Exchange Database ID filter for Exchange Live Mount results."
    DATABASE_ID
    "Organization ID filter for Exchange Live Mount results."
    ORG_ID
    """

    Filter is not specified. Any filter text would
    not be considered.
    """
    UNSPECIFIED
}

"Sort by parameters for Exchange Live Mount results."
enum ExchangeLiveMountSortByField {
    "Sort by Cluster Name."
    CLUSTER_NAME
    "Sort by Mount Creation Date."
    CREATION_DATE
    """

    Sort by field is not specified. Any filter text would
    not be considered.
    """
    UNSPECIFIED
}

"""

Supported in v5.0+
Specifies the retention policy to apply to existing snapshots when unprotecting an object.
"""
enum ExistingSnapshotRetention {
    EXISTING_SNAPSHOT_RETENTION_EXPIRE_IMMEDIATELY
    EXISTING_SNAPSHOT_RETENTION_KEEP_FOREVER
    EXISTING_SNAPSHOT_RETENTION_RETAIN_SNAPSHOTS
}

"Status values for Exocompute health check."
enum ExocomputeHealthCheckStatusValue {
    "Exocompute is healthy."
    HEALTHY
    "Health check job failed to determine the Exocompute health status."
    JOB_UNSUCCESSFUL
    "Exocompute is not healthy."
    UNHEALTHY
    "Health check status is unknown."
    UNKNOWN
    "Health check is in progress."
    VERIFYING
}

"""

Supported in v5.2+
Connection type options for the failover cluster app.
"""
enum FailoverClusterAppConnectionStatus {
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_REPLICATION_TARGET
}

"""

Supported in v5.2+
Connection type options for the failover cluster.
"""
enum FailoverClusterConnectionStatus {
    FAILOVER_CLUSTER_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_PARTIALLY_CONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_REPLICATION_TARGET
}

"Connection status between the Failover cluster objects and the CDM cluster."
enum FailoverClusterConnectivityStatus {
    "Failover cluster object is connected with the CDM cluster."
    CONNECTED
    "Failover cluster object is disconnected with the CDM cluster."
    DISCONNECTED
    "The connection status between CDM cluster and the failover cluster is refreshing."
    PARTIALLY_CONNECTED
    "Failover cluster object is connected with the replicated CDM cluster."
    REPLICATION_TARGET
    "The connection status between the failover cluster object and the CDM cluster is unknown."
    UNKNOWN_CONNECTIVITY_STATUS
}

"""

Supported in v5.2+
Connection type options for the failover cluster node.
"""
enum FailoverClusterNodeConnectionStatus {
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTOR_NOT_DEPLOYED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_PARTIALLY_CONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_REFRESHING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_REPLICATION_TARGET
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_SECONDARY_CLUSTER
}

"""

Supported in v5.2+
Operating system type of the failover cluster.
"""
enum FailoverClusterOsType {
    FAILOVER_CLUSTER_OS_TYPE_AIX
    FAILOVER_CLUSTER_OS_TYPE_ANY
    FAILOVER_CLUSTER_OS_TYPE_HPUX
    FAILOVER_CLUSTER_OS_TYPE_LINUX
    FAILOVER_CLUSTER_OS_TYPE_SUN_OS
    FAILOVER_CLUSTER_OS_TYPE_UNIX_LIKE
    FAILOVER_CLUSTER_OS_TYPE_WINDOWS
}

"""

Supported in v5.2+
Cluster type options for the failover cluster app.
"""
enum FailoverClusterType {
    FAILOVER_CLUSTER_TYPE_UNIX_LIKE
    FAILOVER_CLUSTER_TYPE_WINDOWS
}

enum FailoverGroupByEnum {
    Day
    FailoverStatus
    FailoverType
    Hour
    LastTestStatus
    Month
    Quarter
    Source
    TargetSite
    Week
    Year
}

enum FailoverSortByEnum {
    AppBlueprintName
    SourceSiteName
    StartTime
    TargetSiteName
}

enum FailoverStatusEnum {
    FAILOVER_CLEANUP_STARTED
    FAILOVER_FAILED
    FAILOVER_JOB_FAILED
    FAILOVER_JOB_SUCCEEDED
    LOCAL_RECOVERY_SUCCEEDED
    ONGOING
    PAUSED
    TEST_FAILOVER_SUCCEEDED
}

enum FailoverTableColumnEnum {
    AppBlueprintName
    Duration
    EndTime
    FailoverStatus
    FailoverType
    LastTestStatus
    LastTestTime
    Source
    StartTime
    TargetSite
}

"The Blueprint failover types."
enum FailoverTypeEnum {
    "Blueprint Failover."
    FAILOVER
    "Isolated Recovery."
    ISOLATED_RECOVERY
    "Local Recovery."
    LOCALRECOVERY
    "Blueprint Test Failover."
    TEST_FAILOVER
}

"Specifies the action to take in case of failure."
enum FailureActionType {
    "Unknown failure action."
    FAILURE_ACTION_TYPE_UNKNOWN
    "Ignore and continue in case of failure."
    IGNORE_AND_CONTINUE
}

enum FeatureFlagEntityType {
    ACCOUNT
    RANDOM
    SESSION
    USER
}

"Feature flag names."
enum FeatureFlagName {
    "Enables online registration workflow."
    ALLOW_ONLINE_REGISTRATION
    "Specifies whether the appflows bulk recovery workflow is enabled."
    APPFLOWS_BULK_RECOVERY_ENABLED
    "Determine whether compute cluster support is enabled for Appflows."
    APPFLOWS_COMPUTE_CLUSTER_ENABLED
    "Determines whether Cyber Recovery threat hunt is enabled for Application Recovery."
    APPFLOWS_CYBER_RECOVERY_THREAT_HUNT_ENABLED
    "Determines whether Datastore cluster is enabled for Appflows."
    APPFLOWS_DATASTORE_CLUSTER_ENABLED
    "Determines whether Datastore mapping is enabled for Appflows."
    APPFLOWS_DATASTORE_MAPPING_ENABLED
    "Determines whether Appflows Customer Demo features are enabled for Appflows."
    APPFLOWS_DEMO_ENABLED
    APPFLOWS_DEV_ENABLED
    "Determines whether fast fill is enabled for Appflows."
    APPFLOWS_FAST_FILL_ENABLED
    "Determines whether recovery plans is enabled for Appflows."
    APPFLOWS_RECOVERY_PLANS_ENABLED
    "Determines whether resource mapping persistence is enabled for Application Recovery."
    APPFLOWS_RESOURCE_MAPPING_PERSISTENCE_ENABLED
    "Determines if the AppFlows Zero RPO feature is enabled."
    APPFLOWS_ZERO_RPO
    "Determines if the Orchestrated Application Recovery Cyber Recovery features are enabled."
    APP_RECOVERY_CYBER_RECOVERY_ENABLED
    "Determines if the Orchestrated Application Recovery Cyber Recovery features are GA enabled."
    APP_RECOVERY_CYBER_RECOVERY_GA_ENABLED
    "Determines whether recovery operations are able to pause between priority groups."
    APP_RECOVERY_PAUSE_BETWEEN_PRIORITY_GROUPS_ENABLED
    AWSAutoProtectByTagsEnabled
    AWSCrossRegionReplicationEnabled
    AWSCustomKeyPairInExportEnabled
    AWSEc2CrashConsistentSnapshotEnabled
    AWSFileIndexingEnabled
    AWSOnDemandIndexingEnabled
    AWSSnapshotIntegrityEnabled
    "Enables iam instance profile recovery feature for ec2 export."
    AWS_EXPORT_IAM_INSTANCE_PROFILE_ENABLED
    AWS_NATIVE_INSTANT_ARCHIVAL_ENABLED
    "Determines whether Cross Account Replication and Export is supported for AWS RDS Instances or not."
    AWS_RDS_CROSS_ACCOUNT_REPLICATION_ENABLED
    "Determines whether we can use RDS API for taking RDS snapshot or we have to use AWS Backup Job."
    AWS_RDS_USE_MANUAL_SNAPSHOT_ENABLED
    "Enables granular disk recoveries feature for vm export and restore."
    AZURE_GRANULAR_DISK_RECOVERIES_ENABLED
    "Specifies whether the Azure cloud accounts can be configured manually without OAuth."
    AZURE_MANUAL_CLOUD_ACCOUNTS_SETUP_ENABLED
    "Determines whether Azure Shared Exocompute Settings is enabled."
    AZURE_SHARED_EXOCOMPUTE_ENABLED
    "Determines whether Setup Persistent Backup feature for Azure SQL databases and managed instances is enabled."
    AZURE_SQL_SETUP_PERSISTENT_BACKUP_ENABLED
    AZURE_SQL_V1_ENABLED
    "Determines whether Azure SQL V2 is enabled."
    AZURE_SQL_V2_ENABLED
    "Determines whether Azure SQL V2 GA is enabled."
    AZURE_SQL_V2_GA_ENABLED
    "Determines whether Ransomware Investigation for Azure Virtual Machine is enabled."
    AZURE_VM_RANSOMWARE_INVESTIGATION_ENABLED
    AddonsUIEnabled
    AppFlowsEnabled
    AppFlowsGAEnabled
    AutoStorageSettingClusterListEnabled
    AutoStorageSettingEnabled
    AwsChinaCloudEnabled
    AwsComputeSettingsEnabled
    AwsCrossAccountReplicationEnabled
    AwsExocomputeConfigEnabled
    AwsExportInstanceInPoweredOffStateEnabled
    AwsNativeArchivalEnabled
    AwsNativeArchivalShortTermRetentionEnabled
    AwsRDSAutoProtectByTagsEnabled
    AwsRDSCrossRegionReplicationEnabled
    AwsRDSProtectionEnabled
    AwsRoleBasedArchivalLocationsEnabled
    AwsSnsSqsBasedAutomatedFlowEnabled
    AzureAppConsistentSnapshotsEnabled
    AzureAutoProtectByTagsEnabled
    AzureCommonResourceGroupEnabled
    AzureCrossRegionReplicationEnabled
    AzureCrossSubscriptionExportEnabled
    AzureFileIndexingEnabled
    AzureLockSnapshotsEnabled
    AzureNationalCloudEnabled
    AzureNativeArchivalEnabled
    AzureRecoverPoweredOffEnabled
    AzureSeparateResourceGroupEnabled
    AzureSnapshotIntegrityEnabled
    BackupFailureRemediationEnabled
    CANCEL_TASKCHAIN_ENABLED
    "Determines whether the Capacity Overtime Report is enabled."
    CAPACITY_OVERTIME_REPORT_ENABLED
    "Determines whether cascading archival configuration is allowed for SLAs."
    CASCADING_ARCHIVAL_ENABLED
    CDM_CUSTOMER_ADOPTION_ENABLED
    "Determines if the CDP GA changes are enabled."
    CDP_ENABLED
    "Determines if the CDP Performance component is enabled."
    CDP_PERFORMANCE_ENABLED
    "Determines whether centralized snapshot management is enabled."
    CENTRALIZED_SNAPSHOT_MANAGEMENT_ENABLED
    "Specifies whether new certificate management feature for Polaris is enabled. Note CertMgmtEnabled flag is the older version for Trident."
    CERTIFICATE_MANAGEMENT_V2_ENABLED
    "Determines whether charge back related columns will be available in Capacity Reports. "
    CHARGE_BACK_REPORT_ENABLED
    CLASSIFICATION_BANNER_ENABLED
    CLASSIFICATION_LOGIN_ENABLED
    "Enables the Cloud Cluster ES beta changes."
    CLOUD_CLUSTER_ES_BETA
    CLOUD_CLUSTER_ES_ENABLED
    CLOUD_DIRECT_ENABLED
    "Enables cloud-native protection for federal customers."
    CLOUD_NATIVE_FOR_FEDRAMP_ENABLED
    "Enables the updated cluster card view."
    CLUSTER_CARD_V2_ENABLED
    "Determines whether the provision to take a backup of the cluster configuration is present."
    CLUSTER_CONFIG_PROTECTION_ENABLED
    "Enables the cluster monitoring dashboards UI."
    CLUSTER_MONITORING_ENABLED
    "Determines whether the cluster network settings are enabled."
    CLUSTER_NETWORK_ENABLED
    "Determines whether cluster operations are enabled."
    CLUSTER_OPERATIONS_ENABLED
    "Specifies whether archival immutability is enabled for AWS native protection."
    CNP_AWS_ARCHIVAL_IMMUTABILITY_ENABLED
    "Determines whether AWS Aurora support is enabled."
    CNP_AWS_AURORA_SUPPORT_ENABLED
    "Determines whether AWS Gov Cloud support is enabled."
    CNP_AWS_GOV_CLOUD_SUPPORT_ENABLED
    "Specifies whether archival immutability is enabled for Azure native protection."
    CNP_AZURE_ARCHIVAL_IMMUTABILITY_ENABLED
    "Specifies whether dynamic IP allocation is enabled for CNP Azure Exocompute."
    CNP_AZURE_DYNAMIC_IP_ALLOCATION_ENABLED
    "Determines whether the Azure Gov Cloud Support is enabled."
    CNP_AZURE_GOV_CLOUD_SUPPORT_ENABLED
    "Determines whether Azure in-place file restore is enabled."
    CNP_AZURE_INPLACE_FILE_RESTORE_ENABLED
    "Determine whether exocompute health check UI is enabled."
    CNP_EXOCOMPUTE_HEALTH_CHECK_UI_ENABLED
    "Determines if connect as reader functionality is enabled for RCV storage locations."
    CONNECT_READER_ENABLED
    "Determines whether scoped upload implementation is enabled for MDS."
    CUSTOMER_SCOPED_MDS_UPLOAD_ENABLED
    "Determines whether the customizable dashboards feature is enabled."
    CUSTOMIZABLE_DASHBOARDS_ENABLED
    CapacityReportNativeSnappableEnabled
    CardPinningEnabled
    CassandraBetaEnabled
    CdmUpgradesEnabled
    CdmUpgradesReportNgEnabled
    CertMgmtEnabled
    CloudAccountForAppFlowsEnabled
    CloudAccountsAwsUpgradePermissionEnabled
    CloudAccountsAzureUpgradePermissionEnabled
    CloudAccountsSeamlessFlowEnabled
    CloudAccountsStackSetFlowEnabled
    CloudNativeAWSEnabled
    CloudNativeAzureEnabled
    CloudNativeGCPEnabled
    CloudNativePermissionsVisibilityEnabled
    CloudNativeUnmanagedObjectsEnabled
    ClusterAddForbidden
    ClusterListFilterEnabled
    ClusterSyncJobsAlertsEnabled
    "Enables the dashboard switcher in the global header navbar."
    DASHBOARD_SWITCHER_ENABLED
    "Determines if immutable archival is enabled for data center storage locations. It does not impact RCV locations."
    DATA_CENTER_IMMUTABLE_ARCHIVAL_ENABLED
    "Determines whether batched policy sync to Rubrik CDM is enabled for Data Discovery."
    DATA_DISCOVERY_BATCHED_SYNC_ENABLED
    "Determines whether the Data Discovery dashboard database update is enabled."
    DATA_DISCOVERY_DASHBOARD_DB_UPDATE_ENABLED
    "Determines whether the Data Discovery dashboard user interface optimization is enabled."
    DATA_DISCOVERY_DASHBOARD_UI_OPTIMIZATION_ENABLED
    "Determines whether data discovery information will show up in Ransomware Investigation Anomalies list view."
    DATA_DISCOVERY_HITS_IN_ANOMALIES_LIST_ENABLED
    "Determines whether the machine learning based content analyzers are enabled."
    DATA_DISCOVERY_ML_ANALYZERS_ENABLED
    "Determines whether the Data Discovery object details computation is enabled."
    DATA_DISCOVERY_OBJECT_DETAILS_COMPUTE_ENABLED
    "Determines whether the feature for retrieving sensitive data discovery reports from optimized tables is enabled."
    DATA_DISCOVERY_OPTIMIZED_DB_SCHEMA_FOR_API_ENABLED
    "Determines whether the Data Discovery Optimized Management Page is enabled."
    DATA_DISCOVERY_OPTIMIZED_MANAGEMENT_PAGE_ENABLED
    "Determines whether the Data Discovery Optimized Objects List Query is enabled."
    DATA_DISCOVERY_OPTIMIZED_OBJECTS_LIST_ENABLED
    "Determines whether the Data Discovery object status optimization is enabled."
    DATA_DISCOVERY_OPTIMIZED_OBJECT_STATUS_ENABLED
    "Determines whether the optimized Data Discovery Policyobj API is enabled."
    DATA_DISCOVERY_OPTIMIZED_POLICYOBJ_API_ENABLED
    "Determines whether the optimized Data Discovery Policy Details page is enabled."
    DATA_DISCOVERY_OPTIMIZED_POLICY_DETAILS_ENABLED
    "Determines whether archiving is enabled for Db2."
    DB2_ARCHIVAL_ENABLED
    DB2_ENABLED
    DB2_HADR_ENABLED
    "Determines whether replication is enabled for Db2."
    DB2_REPLICATION_ENABLED
    "Determine whether download replicated snapshot feature is enabled."
    DOWNLOAD_REPLICATED_SNAPSHOT_ENABLED
    "Enables the DSaaS Ransomware Investigation beta features."
    DSAAS_RANSOMWARE_INVESTIGATION_BETA_ENABLED
    "Enables the DSaaS Ransomware Investigation GA features."
    DSAAS_RANSOMWARE_INVESTIGATION_GA_ENABLED
    "Determines whether the Data Security Command Center dashboard is enabled."
    DSCC_DASHBOARD_ENABLED
    "Determines whether metrics are collected for the Data Security Command Center."
    DSCC_METRICS_COLLECTION_ENABLED
    "Determines whether the second version of the Data Security Command Center metrics is enabled."
    DSCC_METRICS_V2_ENABLED
    "Determines whether the Data Security Command Center PDF report can be downloaded."
    DSCC_PDF_DOWNLOAD_ENABLED
    DarkSiteEnabled
    DataClassificationDevEnabled
    DataClassificationEnabled
    DatagovNasAuditEnabled
    DatagovUAEnabled
    DetailedInventoryCardEnabled
    "Enables option to change upgrade type."
    ENABLE_UPGRADE_TYPE
    EnforceMoatOnAPIsEnabled
    EntitlementsAndSubscriptionsEnabled
    ExpandedGlobalSearchEnabled
    FederatedLoginEnabled
    FederatedLoginManagementEnabled
    FilesetFeatureEnablementEnabled
    FilesetInventoryEAEnabled
    FilesetInventoryEnabled
    FilesetInventoryGAEnabled
    FilesetRbacEnabled
    "Determines if Global SLA Audit Report feature is enabled."
    GLOBAL_SLA_AUDIT_REPORT_ENABLED
    GPS_DASH_V2_ENABLED
    "Determines if Polaris GPS features are enabled."
    GPS_ENABLED
    "Determines whether changes to cloud out and replication configuration for gsla is enabled."
    GSLA_ARCHIVAL_REVAMP_ENABLED
    GcpNativeAutoProtectByTagsEnabled
    GcpNativeCrossProjectInstanceExport
    GcpNativeDiskProtection
    GcpNativeExportEncryptedInstances
    GcpNativeExportInstanceInStoppedState
    GcpNativeExportInstancesInSharedVPC
    GcpNativeRestoreEncryptedInstances
    GcpNativeSnapshotStorageReport
    GlobalDashboardEntryPointEnabled
    GlobalDashboardPageEnabled
    GlobalSLAForCDMSnappablesEnabled
    GlobalSLAGPSEnabled
    "Enables HyperV snappable inventory."
    HYPERV_ENABLED
    "Determines whether Radar is enabled for Hyper-V."
    HYPERV_RADAR_ENABLED
    HyperVHierarchyEnabled
    HyperVInventoryViewEnabled
    IAM_MULTITENANCY_ENABLED
    "Enables the inventory switcher in the global header navbar."
    INVENTORY_SWITCHER_ENABLED
    JobMonitoringUIEnabled
    KUPR_GA_ENABLED
    KUPR_REPLICATION_ENABLED
    KubernetesInventoryEnabled
    "Determines whether License Management UI is enabled for this account or not."
    LICENSE_MANAGEMENT_UI_ENABLED
    "Enables the new ListAndFiltersPage, with page-level scrolling, along with V2 filters."
    LIST_AND_FILTERS_V2_ENABLED
    LambdaEnabled
    LdapEnabled
    LegalHoldEnabled
    "Determines whether Microsoft 365 Bring Your Own Key feature is enabled."
    M365_BYOK_ENABLED
    "Determines whether Microsoft 365 Delegated Permissions support is enabled."
    M365_DELEGATED_PERMISSIONS
    "Determines whether M365 Full Sharepoint is enabled."
    M365_FULL_SHAREPOINT_ENABLED
    "Determines whether Microsoft 365 Multi-Geo support is enabled."
    M365_MULTI_GEO
    "Determines whether Ransomware Investigation for M365 OneDrive is enabled."
    M365_ONEDRIVE_RANSOMWARE_INVESTIGATION_ENABLED
    "Determines whether Microsoft 365 SLA Domain exclusion is enabled."
    M365_SLA_EXCLUSION
    "Determines if Managed Volume is enabled."
    MANAGED_VOLUME_ENABLED
    "Determines whether TOTP is mandatory for the account."
    MANDATORY_TOTP_ENABLED
    "Determines whether Minute level SLA frequency configuration is allowed."
    MINUTE_LEVEL_SLA_FREQUENCY_ENABLED
    "Specifies whether dark mode is allowed in modals."
    MODAL_DARK_MODE_ALLOWED
    MONGO_BETA_ENABLED
    "Determines whether MongoDB feature is enabled on CDM."
    MONGO_CDM_ENABLED
    "Enables the more items menu in the global header navbar."
    MORE_MENU_ENABLED
    "Determines if MS Exchange GA is enabled."
    MS_EXCHANGE_GA_ENABLED
    "Determines if MS Exchange is enabled."
    MS_EXCHANGE_INVENTORY_ENABLED
    MULTIPLE_ACCOUNT_OWNERS_ENABLED
    "Determines whether multiple archival configuration is allowed for SLAs."
    MULTIPLE_ARCHIVAL_ENABLED
    ManagedVolumeHierarchyEnabled
    MetadataIncrementalSyncEnabled
    MetadataPullerPrioritySchedulingEnabled
    MetadataSyncAdvancedMetricsEnabled
    MetadataSyncDeletionEnabled
    MetadataSyncEnabled
    MssqlBetaEnabled
    MssqlFeatureEnablementEnabled
    MssqlGAEnabled
    MssqlHierarchyEnabled
    "Determines if Rubrik Cluster Host tab is enabled for NAS Systems."
    NAS_CDM_HOST_TAB_ENABLED
    "Determines if NAS features can be toggled."
    NAS_FEATURE_ENABLEMENT_ENABLED
    "Enables the features for Nas Inventory."
    NAS_INVENTORY_ENABLED
    "Enables the GA features for NAS Inventory."
    NAS_INVENTORY_GA_ENABLED
    "Determines if Native Account Lockout feature is enabled."
    NATIVE_ACCOUNT_LOCKOUT_ENABLED
    "Specifies whether self service feature is supported during account lockout."
    NATIVE_ACCOUNT_LOCKOUT_SELF_SERVICE_SUPPORT_ENABLED
    NATIVE_SSO_ENABLED
    "Enables the popup based OAuth flows for O365."
    NEW_O365_AUTH_ENABLED
    "Determines whether the new settings menu is enabled."
    NEW_SETTINGS_MENU_ENABLED
    NEW_THEMES_MIXED_MODE_ENABLED
    "Determines whether the node removal feature for Rubrik clusters is enabled."
    NODE_REMOVAL_ENABLED
    NOTES_ENABLED
    "Enables Nutanix snappable inventory."
    NUTANIX_ENABLED
    "Enables Nutanix network restore in recovery flows."
    NUTANIX_NETWORK_RESTORE_ENABLED
    "Determines whether Radar is enabled for Nutanix."
    NUTANIX_RADAR_ENABLED
    NameSplitRefreshKorgJobEnabled
    NasFilesetRbacEnabled
    NewThemesEnabled
    O365CalendarEnabled
    O365DashboardEnabled
    O365DashboardV2Enabled
    O365ExchangeAppShardingEnabled
    O365InventoryEnabled
    O365OnedriveEnabled
    O365OnedriveGAEnabled
    O365OnedriveGAOrgSlaAssigmnentEnabled
    O365SharePointEnabled
    O365SharedMailboxEnabled
    O365TeamsEnabled
    O365_ADGROUPS_ENABLED
    "Determines whether O365 Exchange Contacts is enabled."
    O365_CONTACTS_ENABLED
    O365_EXPORT_ENABLED
    O365_LICENSE_ENFORCEMENT_V1_ENABLED
    "Allows you to download mailbox recovery from the cloud."
    O365_MAILBOX_DOWNLOAD_ENABLED
    O365_OBJECT_RBAC_ENABLED
    O365_SHAREPOINT_LIST_ENABLED
    "Determines whether O365 Teams Export is enabled."
    O365_TEAMS_EXPORT_ENABLED
    O365_TEAMS_POSTS_ENABLED
    "Determines if O365 teams private channel protection is enabled."
    O365_TEAMS_PRIVATE_CHANNELS_ENABLED
    ON_PREM_PREFERENCES_ENABLED
    ObjectLevelRBACEnabled
    ObjectTypeSLAEnhancementEnabled
    OnDemandCrawlEnabled
    OnDemandSnapshotExpirationEnabled
    OnPremNotificationEnabled
    "Determines if Oracle features are enabled."
    OracleEnabled
    "Determines if Oracle features can be toggled."
    OracleFeatureEnablementEnabled
    OracleHierarchyEnabled
    PACTSAFE_EULA_ENABLED
    "Specifies whether the new EULA Management workflow is enabled."
    PACTSAFE_EULA_V2_ENABLED
    "Determines if Rubrik cluster pause or resume protection and Global SLA Domain page to show paused clusters information features are enabled."
    PAUSE_SLA_FEEDBACK_ENABLED
    "Enables the CC-CNP unification changes."
    POLARIS2_CC_CNP_ENABLED
    "Enables the UX redesign updates for CC-CNP unification changes."
    POLARIS2_CC_CNP_UX_REDESIGN_ENABLED
    POLARIS2_ONBOARDING_ENABLED
    "Determines if limit check is enabled on PolicyObjConnection API."
    POLICYOBJ_CONNECTION_API_LIMIT_CHECK_ENABLED
    "Determines if product-entitlement-anomaly korg job should be enabled."
    PRODUCT_ENTITLEMENT_ANOMALY_KORGJOB_ENABLED
    "Determines whether promote to owner and refresh reader features are enabled for data center archival locations."
    PROMOTE_TO_OWNER_AND_REFRESH_ENABLED
    "Determines whether Prompt for RSC Migration UI is enabled for this account or not."
    PROMPT_RSC_MIGRATION_UI_ENABLED
    RADAR_ANOMALY_BETA_ENABLED
    "Determines Determines whether model-b is released for stage 1."
    RADAR_ANOMALY_MODEL_B_RELEASE_ENABLED
    "Determines if model-b is enabled in shadow mode for stage 1."
    RADAR_ANOMALY_MODEL_B_SHADOW_ENABLED
    "Determines whether the Radar dashboard performance optimization is enabled."
    RADAR_DASHBOARD_PERFORMANCE_OPTIMIZATION_ENABLED
    RADAR_ENCRYPTION_BETA_ENABLED
    "Determines if Rubrik Ransomeware Investigation is enabled for NAS Cloud Direct."
    RADAR_FOR_NAS_CD_ENABLED
    "Determines whether the RadarQuarantine is enabled."
    RADAR_QUARANTINE_ENABLED
    "Determines whether model-b is released for stage 2."
    RADAR_RANSOMWARE_MODEL_B_RELEASE_ENABLED
    "Determines if model-b is enabled in shadow mode for stage 2."
    RADAR_RANSOMWARE_MODEL_B_SHADOW_ENABLED
    RADAR_RUN_ANOMALY_MODELB_ENABLED
    RADAR_RUN_ENCRYPTION_MODELB_ENABLED
    "Enables the Ransomware Strain Detection feature."
    RANSOMWARE_STRAIN_ENABLED
    "Determines whether the Ransomware Investigation Mass Recovery to Suggested Snapshots feature is enabled."
    RANSOMWARE_SUGGESTED_SNAPSHOTS_ENABLED
    RBACForCDMSnappablesEnabled
    RBACForGlobalSLAEnabled
    RCS_ENABLED
    "Determines if customer is entitled to RCV Archive."
    RCV_ARCHIVE_ENTITLEMENT_ENABLED
    "Determines if customer is entitled to RCV Backup."
    RCV_BACKUP_ENTITLEMENT_ENABLED
    RCV_CONSUMPTION
    RCV_EDIT_DELETE_PAUSE_RESUME_ENABLED
    "Determines if RCV locations are allowed as archival target for GSLA."
    RCV_GSLA_ENABLED
    "Determines whether Rubrik Cloud Vault (RCV) locations are allowed as archival target for SLA Domain revamp."
    RCV_GSLA_REVAMP_ENABLED
    "Determines if deletion of the RCV immutable archival location based on the lock period is enabled."
    RCV_IMMUTABLE_DELETE_ENABLED
    "Determines if IP allow list feature is enabled for account."
    RCV_IP_ALLOW_LIST_ENABLED
    "Determines if Rubrik Cloud Vault (RCV) private endpoint feature is enabled."
    RCV_PRIVATE_ENDPOINT_ENABLED
    "Determines if RCV region bundle 2 is enabled for the customer."
    RCV_REGION_EXPANSION_ENABLED
    "Determines if RCV delete enforcement is allowed and if SFDC validations should be done in rcv-enforcer or not."
    RCV_SFDC_VALIDATIONS_DELETE_ENFORCE_ENABLED
    "Determines if Rubrik Data Protection features are enabled."
    RDP_ENABLED
    "Determines whether explicit creation, updates, and deletion of replication pairs is enabled."
    REPLICATION_EXPLICIT_CRUD_ENABLED
    REPLICATION_TARGETS_ENABLED
    "Specifies whether retention lock is enabled for cloud-native objects."
    RETENTION_LOCK_SLA_CNW_ENABLED
    "Determines if Retention Lock feature is enabled on SLA."
    RETENTION_LOCK_SLA_ENABLED
    "Determines whether RSC can pass user context to CDM through API headers."
    RSC_TO_CDM_USER_CTX_ENABLED
    "Determines if Rubrik Sensitive Data Discovery is enabled for O365 SharePoint Drive."
    RSDD_ON_O365_SHAREPOINT_DRIVE_ENABLED
    RadarAppFlowsEnabled
    RadarDemoEnabled
    RadarDevEnabled
    RadarSIEMEnabled
    RecoverySearchEnabled
    RemoveClusterEnabled
    ReportAsyncDownloadEnabled
    ReportForecasterEnabled
    ReportForwardUIEnabled
    ReportLastSyncedDateEnabled
    ReportPDFEnabled
    RkTableEnabled
    RollbackOnSuccessEnabled
    RollingUpgradeEnabled
    RubrikSEDemoEnabled
    "Determines if Archival in SAP HANA is enabled."
    SAP_HANA_ARCHIVAL_ENABLED
    "Determines whether Restore is enabled for SAP HANA."
    SAP_HANA_CROSS_RESTORE_ENABLED
    "Determines if Replication in SAP HANA is enabled."
    SAP_HANA_REPLICATION_ENABLED
    "Determines if the Self-help feature of Rubrik Security Cloud is enabled."
    SELF_HELP_ENABLED
    SENTRY_PERFORMANCE_ENABLED
    "Determines if Session Management feature is enabled."
    SESSION_MANAGEMENT_ENABLED
    SLAHierarchyEnabled
    SLASyncHighFreqEnabled
    SLA_DOMAIN_UPGRADE_ENABLED
    SLA_ONBOARDING_ENABLED
    "Enables SMB settings."
    SMB_SETTINGS_ENABLED
    "Determines if Snapmirror features can be toggled."
    SNAPMIRROR_FEATURE_ENABLEMENT_ENABLED
    "Enables Auto Enabled Policies in Sonar."
    SONAR_AUTOENABLED_POLICY_ENABLED
    "Determines if EU Default policies are enabled in Sonar."
    SONAR_EU_DEFAULT_POLICIES_ENABLED
    "Determines if Rubrik Sensitive Data Discovery is enabled for Azure."
    SONAR_FOR_AZURE_ENABLED
    "Determines if Rubrik Sensitive Data Discovery is enabled for NAS Cloud Direct."
    SONAR_FOR_NAS_CD_ENABLED
    "Determines if Rubrik Sensitive Data Discovery is enabled for O365 OneDrive."
    SONAR_ON_O365_ONEDRIVE_ENABLED
    "Determines if US Default policies are enabled in Sonar."
    SONAR_US_DEFAULT_POLICIES_ENABLED
    "Determines if Windows Volume Group is enabled on Sonar."
    SONAR_WINDOWS_VOLUME_GROUP_ENABLED
    SSOEnhancementEnabled
    STORAGE_LOCATIONS_ENABLED
    "Determines if the Raising support case feature of Rubrik Security Cloud is enabled."
    SUPPORT_CASE_ENABLED
    "Determines whether Support Impersonation UI is enabled for this account or not."
    SUPPORT_IMPERSONATION_UI
    SapHanaInventoryEnabled
    SapHanaOnGcpEnabled
    SecureUploadEnabled
    ServiceAccountEnabled
    SkipFailedEventQueryEnabled
    SlaComplianceFilterEnabled
    SlaPauseEnabled
    SnapMirrorInventoryEnabled
    SnapshotWindowEnabled
    SonarDashEnabled
    SonarObjectFilesEnabled
    SonarReplicatedObjectsEnabled
    SonarUKAnalyzersEnabled
    SonarVMObjectsEnabled
    SonarVirtualAppliancesEnabled
    SsoEnabled
    StaticRetentionEnabled
    SystemAnnouncementsEnabled
    "A flag that evaluates to the false variant for all entities on all configurations. Used for testing feature flagging."
    TEST_FALSE_FLAG
    THEME_SWITCHER_ENABLED
    "Specifies whether retrieving complete threat hunt results should be disabled."
    THREAT_HUNT_COMPLETE_MATCH_RESULTS_DISABLED
    "Determines whether threat hunt views are enabled."
    THREAT_HUNT_ENABLED
    "Specifies whether CSV download is enabled for threat hunt results."
    THREAT_HUNT_RESULTS_CSV_DOWNLOAD_ENABLED
    ThemedClusterCardEnabled
    UAFileCountsEnabled
    UAPermissionsTabEnabled
    "Determines whether the CTAs are disabled in the UI for unsupported cdm versions"
    UI_DISABLE_CTA_FOR_UNSUPPORTED_CDM_VERSIONS
    UnmanagedObjectEnabled
    UserAwarenessV1Enabled
    UserAwarenessV2Enabled
    "Determines whether support for the vCD workload is enabled."
    VCD_SNAPPABLE_ENABLED
    "Specifies whether datastore clusters are supported during recovery operations."
    VMWARE_DATASTORE_CLUSTER_ENABLED
    "Specifies whether virtual disk mapping is supported during recovery operations."
    VMWARE_VDISK_MAPPING_ENABLED
    "Determines whether Radar is enabled for Volume groups."
    VOLUME_GROUP_RADAR_ENABLED
    "Determines whether the vSphere duplicate virtual machine is enabled."
    VSPHERE_DUPLICATE_VM_ENABLED
    "Determines if the new search and recovery flow for vSphere and Filesets is enabled."
    VSPHERE_FILESETS_NEW_SEARCH_AND_RECOVERY_ENABLED
    VSphereSearchAndRecoveryRolloutEnabled
    VcdHierarchyEnabled
    "Determines if webhooks are enabled."
    WEBHOOKS_ENABLED
    WINDOWS_VOLUME_GROUP_INVENTORY_ENABLED
    WINDOWS_VOLUME_GROUP_LIVE_MOUNT_ENABLED
    WIPEnabled
}

"Feature toggle names."
enum FeatureName {
    "Feature toggle for Filesets."
    FilesetManagement
    "Feature toggle for MSSQL databases."
    MSSQL_MANAGEMENT
    "Feature toggle for NAS Systems."
    NAS_MANAGEMENT
    NotSpecified
    "Feature toggle for Oracle databases."
    ORACLE_MANAGEMENT
    "Feature toggle for SnapMirror Cloud."
    SNAPMIRROR_MANAGEMENT
    "Feature toggle for vSphere virtual machines."
    VmwareManagement
}

enum FieldEnum {
    ALL
    """

    When true, returns snapshots that have unexpired archived snapshots.
    When false, returns snapshots that do not have any unexpired archived
    snapshots.
    """
    HAS_UNEXPIRED_ARCHIVED_SNAPSHOTS
    IS_COMPLETE
    IS_CORRUPTED
    IS_DELETED_FROM_SOURCE
    IS_EXPIRED
    IS_HINT_SET
    IS_INDEXED
    IS_INDEX_MERGED
    IS_ON_DEMAND
    IS_REPLICA
    IS_SKIPPED_FOR_REPLICATION
    """

    Returns snapshots with a sequence number greater than the
    specified sequence number.
    """
    SEQUENCE_NUMBER_GREATER_THAN
    TIME_RANGE_WITH_OFFSET
}

enum FileActivitiesSortBy {
    NUM_ACTIVITIES
    USER_NAME
}

enum FileCountType {
    ANY
    HITS
    OPEN_ACCESS
    OPEN_ACCESS_HITS
    STALE
    STALE_HITS
}

"Type of file download location."
enum FileDownloadType {
    "Download to cloud."
    DOWNLOAD_TO_CLOUD
    "Download to virtual machine."
    DOWNLOAD_TO_VM
    "Unspecified download type."
    UNSPECIFIED
}

enum FileModeEnum {
    DIRECTORY
    FILE
    SYMLINK
}

"Cloud-native file recovery feasibility."
enum FileRecoveryFeasibility {
    "File recovery is not feasible because Exocompute is not configured."
    EXOCOMPUTE_NOT_CONFIGURED
    "File recovery is feasible."
    FEASIBLE
    "File recovery is not feasible because the snapshot expired."
    SNAPSHOT_EXPIRED
    "File recovery feasibility is unknown."
    UNKNOWN
}

enum FileResultSortBy {
    CLUSTER
    DAILY_CHANGE
    FILES_WITH_HITS
    FILES_WITH_OPEN_ACCESS_HITS
    HITS
    LAST_ACCESS_TIME
    NAME
    NATIVE_PATH
    NUM_ACTIVITIES
    NUM_ACTIVITIES_DELTA
    OBJECT_LOCATION
    OBJECT_NAME
    OPEN_ACCESS_TYPE
    SNAPSHOT_TIME
    STALE_FILES_WITH_HITS
}

"""

Supported in v5.0+
The type of the file system on this Volume.
"""
enum FileSystemType {
    FILE_SYSTEM_TYPE_NTFS
    FILE_SYSTEM_TYPE_RE_FS
}

enum FileTypeEnum {
    CSV
    PDF
}

enum FileVersionSourceEnum {
    CLOUD
}

"OS type of fileset."
enum FilesetOsType {
    "Linux OS."
    LINUX
    "No OS Type."
    NO_OS_TYPE
    "Unix like OS."
    UNIX_LIKE
    "Windows OS."
    WINDOWS
}

enum FilesetTemplateCreateOperatingSystemType {
    FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_UNIX_LIKE
    FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum FilesetTemplateCreateShareType {
    FILESET_TEMPLATE_CREATE_SHARE_TYPE_NFS
    FILESET_TEMPLATE_CREATE_SHARE_TYPE_SMB
}

enum FilesetTemplatePatchOperatingSystemType {
    FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_UNIX_LIKE
    FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum FilesetTemplatePatchShareType {
    FILESET_TEMPLATE_PATCH_SHARE_TYPE_NFS
    FILESET_TEMPLATE_PATCH_SHARE_TYPE_SMB
}

"All filter types in the reporting table."
enum FilterTypeEnum {
    "Cluster UUID filter."
    CLUSTER_FILTER
    "Date range picker filter."
    DATE_RANGE
    "Multiple options filter."
    MULTI_SELECT
    "Organization filter."
    ORGANIZATION
    "Input search filter."
    SEARCH
    "Single option filter."
    SINGLE_SELECT
    "SLA domain ID filter."
    SLA_DOMAIN
}

"Fields to sort GCP native disks."
enum GcpNativeDiskSortFields {
    "Sort by SLA Domain assignment."
    ASSIGNED_SLA_DOMAIN
    "Sort by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort by GCP disk location."
    GCP_DISK_LOCATION
    "Sort by GCP disk native ID."
    GCP_DISK_NATIVE_ID
    "Sort by GCP disk native name."
    GCP_DISK_NATIVE_NAME
    "Sort by GCP project name."
    GCP_DISK_PROJECT_NAME
    "Sort by GCP disk size."
    GCP_DISK_SIZE
}

"Fields to sort GCP native GCE instances."
enum GcpNativeGceInstanceSortFields {
    "Sort by SLA Domain assignment."
    ASSIGNED_SLA_DOMAIN
    "Sort by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort by GCP instance native ID."
    GCP_INSTANCE_NATIVE_ID
    "Sort by GCP instance native name."
    GCP_INSTANCE_NATIVE_NAME
    "Sort by network name."
    GCP_INSTANCE_NETWORK_NAME
    "Sort by GCP project name."
    GCP_INSTANCE_PROJECT_NAME
    "Sort by GCP region."
    GCP_INSTANCE_REGION
    "Sort by GCP instance type."
    GCP_INSTANCE_TYPE
}

"GCP native label filter type."
enum GcpNativeLabelFilterType {
    "Filter by label key."
    LABEL_KEY
    "Filter by label key and value."
    LABEL_KEY_VALUE
}

"Fields to sort GCP native projects."
enum GcpNativeProjectSortFields {
    "Sort by SLA Domain."
    EFFECTIVE_SLA_DOMAIN
    "Sort by disk count."
    GCP_PROJECT_DISK_COUNT
    "Sort by GCE instance count."
    GCP_PROJECT_INSTANCE_COUNT
    "Sort by GCP project native ID."
    GCP_PROJECT_NATIVE_ID
    "Sort by GCP project number."
    GCP_PROJECT_NUMBER
    "Sort by GCP project native name."
    GCP_PROJECT_ORG_NAME
    "Sort by GCP project name."
    NAME
}

"Status of a GCP project."
enum GcpNativeProjectStatus {
    "The GCP project has been deleted."
    DELETED
    "The GCP project is in the process of getting deleted."
    DELETING
    "The deletion of the GCP project has failed."
    DELETION_FAILED
    "The GCP project has been refreshed."
    REFRESHED
    "The GCP project is refreshing."
    REFRESHING
}

"Regions for GCP."
enum GcpRegion {
    "GCP region is Asia."
    ASIA
    "GCP region is Asia 1."
    ASIA1
    "GCP region is Asia East 1."
    ASIA_EAST1
    "GCP region is Asia East 2."
    ASIA_EAST2
    "GCP region is Asia North East 1."
    ASIA_NORTHEAST1
    "GCP region is Asia North East 2."
    ASIA_NORTHEAST2
    "GCP region is Asia North East 3."
    ASIA_NORTHEAST3
    "GCP region is Asia South 1."
    ASIA_SOUTH1
    "GCP region is Asia South East 1."
    ASIA_SOUTHEAST1
    "GCP region is Asia South East 2."
    ASIA_SOUTHEAST2
    "GCP region is Australia South East 1."
    AUSTRALIA_SOUTHEAST1
    "GCP region is Europe."
    EU
    "GCP region is Europe 4."
    EUR4
    "GCP region is Europe North 1."
    EUROPE_NORTH1
    "GCP region is Europe West 1."
    EUROPE_WEST1
    "GCP region is Europe West 2."
    EUROPE_WEST2
    "GCP region is Europe West 3."
    EUROPE_WEST3
    "GCP region is Europe West 4."
    EUROPE_WEST4
    "GCP region is Europe West 6."
    EUROPE_WEST6
    "GCP region is North America 4."
    NAM4
    "GCP region is North America North East 1."
    NORTHAMERICA_NORTHEAST1
    "GCP region is South America East 1."
    SOUTHAMERICA_EAST1
    "GCP region is Unknown."
    UNKNOWN_GCP_REGION
    "GCP region is US."
    US
    "GCP region is US Central 1."
    USCENTRAL1
    "GCP region is US East 1."
    USEAST1
    "GCP region is US East 4."
    USEAST4
    "GCP region is US West 1."
    USWEST1
    "GCP region is US West 2."
    USWEST2
    "GCP region is US West 3."
    US_WEST3
    "GCP region is US West 4."
    US_WEST4
}

"Storage class for GCP type location."
enum GcpStorageClass {
    "Coldline GCP storage class."
    COLDLINE_GCP
    "Durable reduced availability GCP storage class."
    DURABLE_REDUCED_AVAILABILITY_GCP
    "Nearline GCP storage class."
    NEARLINE_GCP
    "Standard GCP storage class."
    STANDARD_GCP
    "Unknown GCP storage class."
    UNKNOWN_STORAGE_CLASS_GCP
}

"Enum for vApp snapshot location."
enum GetVappSnapshotExportOptionsRequestExportMode {
    "Export snapshot to a new vApp."
    V1_GET_VAPP_SNAPSHOT_EXPORT_OPTIONS_V1_REQUEST_EXPORT_MODE_EXPORT_TO_NEW_VAPP
    "Export snapshot to an existing target vApp."
    V1_GET_VAPP_SNAPSHOT_EXPORT_OPTIONS_V1_REQUEST_EXPORT_MODE_EXPORT_TO_TARGET_VAPP
}

"How to sort the certificates."
enum GlobalCertificateSortBy {
    "Sort by the expiration date of the certificate."
    SORT_BY_EXPIRATION_DATE
    "Sort by the name of the certificate."
    SORT_BY_NAME
    "The sorting filter is unknown."
    SORT_BY_UNSPECIFIED
}

"The expiration status of the certificate."
enum GlobalCertificateStatus {
    "The certificate has expired."
    EXPIRED
    "The certificate is expiring within 30 days."
    EXPIRING_SOON
    "The expiration status of the certificate is unknown."
    STATUS_UNSPECIFIED
    "The certificate does not expire within 30 days."
    VALID
}

"Available options for retention of existing snapshots."
enum GlobalExistingSnapshotRetention {
    "Expire immediately."
    EXPIRE_IMMEDIATELY
    "Keep forever."
    KEEP_FOREVER
    "Not applicable."
    NOT_APPLICABLE
    "Preserve retention from previous SLA Domain."
    RETAIN_SNAPSHOTS
}

"Sort Global SLA Domains by filter."
enum GlobalSlaQueryFilterInputField {
    "Filter SLA Domains for assigned to this Archival group."
    ARCHIVAL_GROUP_ID
    "Filter SLA Domains for assigned to this Archival location."
    ARCHIVAL_LOCATION_ID
    "Filter by Rubrik cluster."
    CLUSTER_UUID
    "Filter SLA Domains eligible for upgrade."
    IS_ELIGIBLE_FOR_UPGRADE
    "Filter by SLA Domain name."
    NAME
    "Filter by object type."
    OBJECT_TYPE
    "Filter SLA Domains for the organizations that have view access."
    ORG_ID_WITH_VIEW_ACCESS_ONLY
    "Get all Global and cluster SLA Domains."
    SHOW_ALL_RUBRIK_AND_APPLIANCE_SLAS
    "Filter SLA Domains for this Rubrik cluster."
    SHOW_CLUSTER_SLAS_ONLY
    "Filter by SLA Domain upgrade status."
    UPGRADE_STATUS
}

enum GroupByFieldEnum {
    ANALYZER
    CLUSTER
    CLUSTER_UUID
    Cluster
    ClusterType
    ComplianceStatus
    DAY
    Day
    FILE
    FailoverStatus
    FailoverType
    HOUR
    Hour
    IS_ANOMALY
    LastActivityStatus
    LastActivityType
    LastTestStatus
    MANAGED_ID
    MONTH
    Month
    OBJECT_NAME
    Object
    ObjectType
    POLICY
    POLICY_VIOLATIONS
    ProtectionStatus
    PullTimeWithOffset
    Quarter
    SLA_DOMAIN
    STATUS_POLICY
    SlaDomain
    Source
    Status
    TIME
    TIME_ISSUES
    TIME_VIOLATIONS
    TargetSite
    TaskDetailClusterType
    TaskDetailObjectType
    Type
    UserAuditStatus
    UserAuditType
    WEEK
    Week
    YEAR
    Year
}

"Fields by which we can sort user groups."
enum GroupSortByField {
    "Group Name."
    NAME
}

"Guest credential authorization status."
enum GuestCredentialAuthorizationStatus {
    "Authorization failed."
    FAILED
    "Authorization pending."
    PENDING
    "Authorization succeeded."
    SUCCESSFUL
}

enum GuestOS {
    CENTOS
    RHEL
    UBUNTU
    UNKNOWN
    WINDOWS
}

"The guest operating system."
enum GuestOsType {
    "Linux operating system."
    LINUX
    "Unknown guest operating system type."
    UNKNOWN
    "Windows operating system."
    WINDOWS
}

"Represents policies for checking hardware health."
enum HardwareHealthPolicyName {
    "Policy to check health of Chassis."
    CHASSIS_CHECKER
    "Policy to check health of DIMM."
    DIMM_CHECKER
    "Policy to check disk status."
    DISK_CHECKER
    "Policy to trigger on-demand hardware health check."
    HARDWARE_HEALTH_UPDATER
    "Policy to check health of primary network interface."
    NETWORK_INTERFACE_CHECKER_PRIMARY
    "Policy to check health of secondary network interface."
    NETWORK_INTERFACE_CHECKER_SECONDARY
    "Policy to check health of Node FRU."
    NODE_CHECKER
    "Policy to check health of power supply."
    P_S_U_CHECKER
}

"""

Supported in v6.0+
Type of hash function to be computed for malware hits.
"""
enum HashType {
    HASH_TYPE_M_D5
    HASH_TYPE_SH_A1
    HASH_TYPE_SH_A256
}

"Initiator of a search request."
enum HelpContentSnippetsFilterInitiator {
    "Search request issued for testing purposes."
    DEBUG
    "Unspecified."
    INITIATOR_UNSPECIFIED
    "Search request issued on behalf of the user."
    RECOMMENDATION
    "Search request issued by user."
    USER
}

"Datasource of help content."
enum HelpContentSource {
    "Knowledge base articles."
    KB_ARTICLES
    "Product documentation."
    PRODUCT_DOCS
    "Unspecified."
    SOURCE_UNSPECIFIED
}

"""

Supported in v7.0+
v7.0: Actions to hide or reveal NAS shares and NAS namespaces.
v8.0+: Visibility actions that can be performed on a NAS shares and NAS namespaces.
"""
enum HideRevealAction {
    HIDE_REVEAL_ACTION_HIDE
    HIDE_REVEAL_ACTION_REVEAL
}

enum HierarchyFilterField {
    "Filter AWS EC2 instances based on RBS connection status."
    AWS_INSTANCE_CC_OR_CNP_RBS_CONNECTION_STATUS
    "Filter AWS native accounts based on the features enabled for them."
    AWS_NATIVE_ACCOUNT_ENABLED_FEATURE
    "Filter by AWS account ID."
    AWS_NATIVE_ACCOUNT_ID
    "Filter by the AWS Cloud Type."
    AWS_NATIVE_CLOUD_TYPE
    """

    ID of the AWS native EC2 instance (Rubrik ID), applicable for filtering
    EBS volumes with their EC2 instance IDs. Applicable only if the object
    type is AwsNativeEbsVolume.
    """
    AWS_NATIVE_EC2_INSTANCE_ID
    "Filter by RDS Instace DB Engine."
    AWS_NATIVE_RDS_DB_ENGINE
    "Filter by RDS Instance DB Instance Class."
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    """

    Filter by AWSAccount.aws_region_spec.region, EC2Instance.region, and
    EBSVolume.region.
    """
    AWS_REGION
    "Filter by aws_native_tags."
    AWS_TAG
    "Filter by VPC ID."
    AWS_VPC_ID
    "Filter Azure disks by ID of the attached virtual machine."
    AZURE_DISK_ATTACHED_VM
    "Filter Azure disks by common resource group name."
    AZURE_DISK_CRG_NAME
    "Filter Azure disks on subscription ID of common resource group."
    AZURE_DISK_CRG_SUBSCRIPTION_ID
    "Filter Azure disks on Disk size."
    AZURE_DISK_SIZE
    """

    Filter Azure disks by subscription ID.
    todo (SPARK-88655): remove usage of VMRG and DiskRG
    """
    AZURE_DISK_SUBSCRIPTION_ID
    "Filter Azure disks on Disk type."
    AZURE_DISK_TYPE
    "Filters Azure disks whose regions have a \"CONNECTED\" exocompute."
    AZURE_NATIVE_DISK_EXOCOMPUTE_CONNECTED
    "Filter by the \"indexing status\" of Azure disks."
    AZURE_NATIVE_DISK_INDEXING_STATUS
    "Filter Azure native subscriptions based on the features enabled for them."
    AZURE_NATIVE_SUBSCRIPTION_ENABLED_FEATURE
    "Filters Azure virtual machines whose regions have a \"CONNECTED\" exocompute."
    AZURE_NATIVE_VM_EXOCOMPUTE_CONNECTED
    "Filter by the \"indexing status\" of Azure VMs."
    AZURE_NATIVE_VM_INDEXING_STATUS
    """

    Filter by AzureSubscription.region_spec.region, AzureResourceGroup.region,
    AzureVm.Region and AzureDisk.region.
    """
    AZURE_REGION
    "Filter Azure resource groups by disk SLA or virtual machine SLA."
    AZURE_RG_DISK_OR_VM_SLA
    "Filter Azure resource groups by subscription ID."
    AZURE_RG_SUBSCRIPTION_ID
    """

    Filter Azure Resource Groups by SLAs of given workload types.
    SLAs need to be passed as "texts" and workload types need to be
    passed as "object_type_filter_params".
    Note: When using this filter for more than two types of workloads,
    test the performance for large data sizes because internally the operation performs
    some heavy joins to filter the results.
    """
    AZURE_RG_WORKLOAD_TYPES_SLA_DOMAIN
    "Filter Azure SQL Databases on resource group name."
    AZURE_SQL_DB_RG_NAME
    "Filter Azure SQL Database Servers on resource group name."
    AZURE_SQL_DB_SERVER_RG_NAME
    "Filter Azure SQL Database Servers on subscription ID."
    AZURE_SQL_DB_SERVER_SUBSCRIPTION_ID
    "Filter Azure SQL Databases on subscription ID."
    AZURE_SQL_DB_SUBSCRIPTION_ID
    "Filter Azure SQL Managed Instance Databases on resource group name."
    AZURE_SQL_MI_DB_RG_NAME
    "Filter Azure SQL Managed Instances Databases on subscription ID."
    AZURE_SQL_MI_DB_SUBSCRIPTION_ID
    "Filter Azure SQL Managed Instance Database Servers on resource group name."
    AZURE_SQL_MI_SERVER_RG_NAME
    "Filter Azure SQL Managed Instances Database Servers on subscription ID."
    AZURE_SQL_MI_SERVER_SUBSCRIPTION_ID
    "Filter by azure_native_tags."
    AZURE_TAG
    "Filter Azure Virtual Machines based on RBS connection status."
    AZURE_VM_CC_OR_CNP_RBS_CONNECTION_STATUS
    "Filter Azure virtual machines on common resource group name."
    AZURE_VM_CRG_NAME
    "Filter Azure virtual machines on subscription ID of common resource group."
    AZURE_VM_CRG_SUBSCRIPTION_ID
    "Filter Azure virtual machines on virtual machine size."
    AZURE_VM_SIZE
    """

    Filter Azure virtual machines on subscription ID.
    todo (SPARK-88655): remove usage of VMRG and DiskRG
    """
    AZURE_VM_SUBSCRIPTION_ID
    "Filter Azure virtual machines on VNet name."
    AZURE_VNET_NAME
    "Filter by ID of parent Cassandra Keyspace."
    CASSANDRA_KEYSPACE_ID
    "Filter by ID of parent Cassandra Source."
    CASSANDRA_SOURCE_ID
    "Filter by status of CassandraSource."
    CASSANDRA_SOURCE_STATUS
    "Filter by IO filter installation status of CDP Virtual Machine."
    CDP_IO_FILTER_STATUS
    "Filter by CDP state of CDP Virtual Machine."
    CDP_LOCAL_STATUS
    "Filter by CDP replication state of CDP Virtual Machine."
    CDP_REPLICATION_STATUS
    "Filter by CDP Virtual Machines."
    CDP_VMS
    "Filter by effective SLA Domain name of CDP Virtual Machine."
    CDP_VM_EFFECTIVE_SLA_ID
    "Filter by name of CDP Virtual Machine."
    CDP_VM_NAME
    "Filter by source cluster of the CDP Virtual Machine."
    CDP_VM_SOURCE_CLUSTER_ID
    """

    Filter cloud instances based on whether CDM App Protection
    is setup through a cloud cluster.
    """
    CLOUD_INSTANCE_CDM_APP_PROTECTION_SETUP
    "Filter cloud instance physical host by descendant object type."
    CLOUD_INSTANCE_HOST_DESCENDANT_OBJECT_TYPE
    "Filter cloud native databases using server name."
    CLOUD_NATIVE_SERVER_NAME_FILTER
    "Filter Rubrik CDM objects by cluster ID."
    CLUSTER_ID
    "Filter clusters by the ClusterTypeEnum."
    CLUSTER_TYPE
    "Filter the Db2 databases by database type."
    DB2_DB_TYPE
    "Filter based on fid of DB2 instance."
    DB2_INSTANCE_ID
    "Filter by status of Db2Instance."
    DB2_INSTANCE_STATUS
    "Filter by relic filesets of a NAS Share."
    DOES_NAS_SHARE_HAVE_RELIC_FILESETS
    """

    Filter NAS volumes based on whether they are associated
    with a SnapMirror Cloud object.
    """
    DOES_NAS_VOLUME_HAVE_SMC
    "Filter physical hosts that have protected volume group."
    DOES_PHYSICAL_HOST_HAVE_PROTECTED_VOLUME_GROUP
    "Filter by relic filesets of a physical host."
    DOES_PHYSICAL_HOST_HAVE_RELIC_FILESETS
    "Filter by relic volume group of a physical host."
    DOES_PHYSICAL_HOST_HAVE_RELIC_VOLUME_GROUP
    "Filter whether the sharepoint is relic or contains relic object."
    DOES_SHAREPOINT_HAVE_RELIC_OBJECTS
    "Filter by EBSVolume native ID."
    EBS_VOLUME_ID
    "Filter EBS Volumes by status of indexing."
    EBS_VOLUME_INDEXING_STATUS
    "Filter by EBSVolume.name."
    EBS_VOLUME_NAME
    "Filter by EBS volume name or volume ID."
    EBS_VOLUME_NAME_OR_VOLUME_ID
    "Filter by EbsVolume.type."
    EBS_VOLUME_TYPE
    "Filter by EC2Instance native ID."
    EC2_INSTANCE_ID
    """

    Filter EC2 Instances by status of indexing. Possible values for
    filter are generated strings from AwsIndexingStatusFilter enum.
    """
    EC2_INSTANCE_INDEXING_STATUS
    "Filter by EC2Instance.name."
    EC2_INSTANCE_NAME
    "Filter by EC2 instance name or instance ID."
    EC2_INSTANCE_NAME_OR_INSTANCE_ID
    "Filter by Ec2Instance.type."
    EC2_INSTANCE_TYPE
    """

    Filter managed objects by the SLA Domain ID. Objects returned are
    either retained or protected by the SLA Domain.
    """
    EFFECTIVE_RETENTION_SLA
    "Filter by effective SLA Domain."
    EFFECTIVE_SLA
    """

    Filter to include or exclude objects with a specific effective SLA
    source object.
    """
    EFFECTIVE_SLA_SOURCE_OBJECT
    "Filter by the SLA type of the effective SLA."
    EFFECTIVE_SLA_TYPE
    """

    The behavior of this filter is similar to the EFFECTIVE_SLA filter,
    except, the behavior when it returns objects that have a
    retention SLA Domain assigned along with the DoNotProtect SLA Domain.
    """
    EFFECTIVE_SLA_WITH_RETENTION_SLA
    "Filter Exchange Databases by the ID of the Exchange Dag."
    EXCHANGE_DATABASE_BY_DAG_ID
    "Filter Exchange Databases by the ID of the Exchange Host."
    EXCHANGE_DATABASE_BY_HOST_ID
    "Filter Exchange Databases by the ID of the Exchange Server."
    EXCHANGE_DATABASE_BY_SERVER_ID
    "Filter Exchange Server by the ID of the Exchange Dag."
    EXCHANGE_SERVER_BY_DAG_ID
    "Filter SharePoint Libraries by excluding list template types."
    EXCLUDED_SHAREPOINT_LIBRARY_TYPE
    "Filter by SLA domain of the Microsoft SQL (MSSQL) Failover Clusters."
    FAILOVER_CLUSTERS_BY_MSSQL_EFFECTIVE_SLA
    "Filter by failover cluster app connection status."
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS
    "Filter by the ID of Failover cluster app."
    FAILOVER_CLUSTER_APP_ID
    "Filter by failover cluster connection status."
    FAILOVER_CLUSTER_CONNECTION_STATUS
    "Filter by ID of parent of Failover Cluster."
    FAILOVER_CLUSTER_ID
    "Filter physical hosts by SLAs attached to their filesets."
    FILESET_SLA
    """

    Filter physical hosts by which fileset templates are attached
    to them.
    """
    FILESET_TEMPLATE_ID
    "Filter fileset templates by OS Type."
    FILESET_TEMPLATE_OS_TYPE
    "Filter by gcp_native_labels."
    GCP_LABEL
    "Filter by GCP Disk location (for regional disk: location=region, for zonal disk: location=zone)."
    GCP_NATIVE_DISK_LOCATION
    "Filter by GCP Disk name or native ID."
    GCP_NATIVE_DISK_NAME_OR_NATIVE_ID
    "Filter by GCP Disk project name."
    GCP_NATIVE_DISK_PROJECT
    """

    Filter by GCP Disk type.
    Text of the GCP_DISK_TYPE can have one of the following values:
    regional-pd-ssd regional-pd-standard regional-pd-balanced
    zonal-pd-ssd zonal-pd-standard zonal-pd-balanced.
    """
    GCP_NATIVE_DISK_TYPE
    "Filter by GCP instance native ID or name."
    GCP_NATIVE_INSTANCE_NAME_OR_NATIVE_ID
    "Filter by GCP Instance Network Name."
    GCP_NATIVE_INSTANCE_NETWORK_NAME
    "Filter by GCP instance type."
    GCP_NATIVE_INSTANCE_TYPE
    "Filter by GCP project ID for GCE instances."
    GCP_NATIVE_PROJECT_ID
    "Filter by GCP project name or project number."
    GCP_NATIVE_PROJECT_NAME_OR_PROJECT_NUMBER
    "Filter GCP projects by their native ID."
    GCP_NATIVE_PROJECT_NATIVE_ID
    "Filter by GCP region."
    GCP_NATIVE_REGION
    "Filter VSphere virtual machines by guest OS type for file export."
    GUEST_OS_TYPE_FOR_FILE_RESTORE
    "Filter if a workload has parent workload."
    HAS_PARENT_SNAPPABLE
    "Filter hosts based on CBT status."
    HOST_CBT_STATUS
    "Filter the hosts by their Operating System."
    HOST_OPERATING_SYSTEM
    """

    Return only the workloads that are active.
    An active workload is a workload that is without a workload group or
    workload with the highest primary sequence number in the workload group.
    """
    IS_ACTIVE
    "Filters active object from a group of duplicated objects."
    IS_ACTIVE_AMONG_DUPLICATED_OBJECTS
    "Filters archived workloads."
    IS_ARCHIVED
    "Filter archived and non-relic managed-objects."
    IS_GHOST
    "Filter by status of a fileset protection on cdm host."
    IS_HOST_PROTECTED
    "Filter the kooper hosts from the host list."
    IS_KUPR_HOST
    "Filter MSSQL databases that are log shipping secondaries."
    IS_LOG_SHIPPING_SECONDARY
    "Filter Live Mounts from Managed Volume Exports."
    IS_MAIN_MOUNT
    "Filter child objects by Managed Volume archival status."
    IS_MANAGED_VOLUME_ARCHIVED
    "Filter MSSQL databases that are Live Mounts."
    IS_MOUNT
    "Filter by the protection status of a NAS share."
    IS_NAS_SHARE_PROTECTED
    "Workload must not be a member of any active Blueprint."
    IS_NOT_BLUEPRINT_CHILD
    "Filter by whether object is protected by an SLA Domain."
    IS_PROTECTED
    "Filter by recovery plan visibility."
    IS_RECOVERY_PLAN_VISIBLE
    "Filters workloads that are relics."
    IS_RELIC
    "Filters replicated workloads."
    IS_REPLICATED
    "Filter unmanaged objects."
    IS_UNMANAGED_OBJECT
    """

    Filter Kubernetes clusters based on associated Rubrik cluster.
    Since the Kubernetes cluster is natively managed by Rubrik SaaS, a separate filter is used.
    """
    KUPR_CDM_CLUSTER_ID
    "Filter Kubernetes clusters based on connection status."
    KUPR_CLUSTER_STATUS
    """

    Filter Kubernetes namespaces based on the associated Rubrik cluster of the parent Kubernetes cluster.
    Since Kubernetes namespace is natively managed by Rubrik SaaS, a separate filter is used.
    """
    KUPR_NAMESPACE_CDM_CLUSTER_ID
    "Filter Kubernetes namespace based on the connection status of the parent."
    KUPR_NAMESPACE_CLUSTER_STATUS
    "Filter by location or path of an object."
    LOCATION
    "Filter by preferred data location. Applicable for M365 workloads."
    M365_PREFERRED_DATA_LOCATION
    "Filter by Managed Volume Export ID."
    MANAGED_VOLUME_EXPORT_ID
    "Filter Managed Volume Exports for a given Managed Volume ID."
    MANAGED_VOLUME_ID
    "Filter Managed Volume Type."
    MANAGED_VOLUME_TYPE
    "Filter by ID of parent MongoDB Keyspace."
    MONGODB_DATABASE_ID
    "Filter by ID of parent MongoDB Source."
    MONGODB_SOURCE_ID
    "Filter by status of MongoDB Source."
    MONGODB_SOURCE_STATUS
    "Filter by ID of parent Mongo Database."
    MONGO_DATABASE_ID
    "Filter by ID of parent Mongo Source."
    MONGO_SOURCE_ID
    "Filter by name."
    NAME
    """

    There is already a filter called NAME which filters for all the rows
    where name is "LIKE" the provided string. We have a use-case in
    Azure where we would like to Filter by name but exact-match, not just
    similar match. The use case is that resource groups are identified by
    the tuple of subscription ID and resource group name, similarity
    measure will not distinguish between two similar names.
    """
    NAME_EXACT_MATCH
    "Filter by name or email-address of O365 user."
    NAME_OR_EMAIL_ADDRESS
    "Filter by the ID of the NAS namespace."
    NAS_NAMESPACE_ID
    "Filter by hidden shares."
    NAS_SHARE_HIDDEN
    "Filter by the Namespace ID of the NAS Share."
    NAS_SHARE_NAMESPACE_ID
    "Filter by the effective SLA Domain ID of the NAS Share."
    NAS_SHARE_SLA
    "Filter by stale shares."
    NAS_SHARE_STALE
    "Filter by the type of the NAS Share."
    NAS_SHARE_TYPE
    "Filter by the vendor type of the NAS System."
    NAS_VENDOR_TYPE
    """

    Filter by the SLA Domain of the SnapMirror Cloud objects under
    the NAS volume.
    """
    NAS_VOLUME_EFFECTIVE_SLA
    "Filter Nutanix virtual machines by the agent's connection status."
    NUTANIX_VM_BY_AGENT_STATUS
    "Filter Nutanix virtual machines by the Nutanix cluster CDMID."
    NUTANIX_VM_BY_NUTANIX_CLUSTER_CDMID
    "Filter by group type. Applicable to Microsoft 365 group workloads."
    O365_GROUP_TYPE
    """

    O365 specific type: O365_SHARED_USER, O365_SHARED_MAILBOX...This filter is
    introduced to support api-server since it is not convenient to add object-specific
    subtype knowledge there. To query for shared users, we can either:
    1. Specify O365_USER in object type AND this filter with value O365_SHARED_USER
    (api-server way)
    2. Specify O365_SHARED_USER in object type, ignore this filter
    (others should do this).
    """
    O365_SPECIFIC_TYPE
    "Filter by software version of the cluster."
    ON_OR_ABOVE_CLUSTER_VERSION
    "Filter by organization ID."
    ORGANIZATION_ID
    "Filter physical hosts by OS name."
    OS_NAME
    "Filter physical hosts by OS type."
    OS_TYPE
    "Filter physical host by cloud instance id."
    PHYSICAL_HOST_BY_CLOUD_INSTANCE_ID
    "Filter by SLA domain of the Microsoft SQL (MSSQL) hosts."
    PHYSICAL_HOST_BY_MSSQL_EFFECTIVE_SLA
    "Filter by the SLA Domain of the volume group of the physical host."
    PHYSICAL_HOST_BY_VOLUME_GROUP_EFFECTIVE_SLA
    "Filter by the RBS status of the physical host."
    PHYSICAL_HOST_CONNECTION_STATUS
    "Filter by the SLA Domain of the host filesets."
    PHYSICAL_HOST_EFFECTIVE_SLA
    """

    tag_filter_params field.
    Filter by the ID of a Physical Host.
    """
    PHYSICAL_HOST_ID
    "Filter by recovery plan name."
    RECOVERY_PLAN_NAME
    "Filter by recovery plan type."
    RECOVERY_PLAN_TYPE
    "Filter by the name by a given regex expression."
    REGEX
    """

    Filter by whether Rubrik SaaS native workload object
    has an unindexed snapshot or it has a snapshot that is expired
    and has an unmerged index.
    """
    RUBRIK_NATIVE_HAS_UNINDEXED_OR_EXPIRED_SNAPSHOT
    "Filter by the Rubrik CDM ID of the SAP HANA database."
    SAP_HANA_DATABASE_CDM_ID
    "Filter by the ID of parent SAP HANA system."
    SAP_HANA_SYSTEM_ID
    "Filter by SID of SapHanaSystem."
    SAP_HANA_SYSTEM_SID
    "Filter by status of SapHanaSystem."
    SAP_HANA_SYSTEM_STATUS
    "Filter based on type of database in UDF schema."
    UDF_DATABASE_TYPE
    "Filter vCD vApps by type."
    VCD_VAPP_TYPE
    "Filter isLocal of virtualhost.descendant."
    VSPHERE_DATASTORE_IS_LOCAL
    """

    Filter for the the root level of compute resources for the restore
    hierarchy, which includes compute clusters and standalone hosts.
    """
    VSPHERE_GET_ROOT_RESTORE_HIERARCHY
}

"Type of hierarchy object."
enum HierarchyObjectTypeEnum {
    AZURE_SQL_DATABASE_DB
    AZURE_SQL_MANAGED_INSTANCE_DB
    AllSubHierarchyType
    AppBlueprint
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeResourceGroup
    AzureNativeSubscription
    AzureNativeVm
    AzureSqlDatabaseServer
    AzureSqlManagedInstanceServer
    Blueprint
    "Cassandra Column Family."
    CASSANDRA_COLUMN_FAMILY
    "Cassandra Keyspace."
    CASSANDRA_KEYSPACE
    "Cassandra Source."
    CASSANDRA_SOURCE
    "Cloud Direct NAS export."
    CLOUD_DIRECT_NAS_EXPORT
    CloudNativeTagRule
    Db2Database
    Db2Instance
    "Exchange DAG."
    EXCHANGE_DAG
    "Exchange Server."
    EXCHANGE_SERVER
    Ec2Instance
    "Exchange Database."
    ExchangeDatabase
    "Failover Cluster App."
    FAILOVER_CLUSTER_APP
    FeldsparSite
    Fileset
    FilesetTemplate
    GcpNativeDisk
    GcpNativeGCEInstance
    GcpNativeProject
    "Host Failover Cluster."
    HOST_FAILOVER_CLUSTER
    Hdfs
    HostShare
    HypervCluster
    HypervSCVMM
    HypervServer
    HypervVirtualMachine
    KuprCluster
    KuprNamespace
    LinuxFileset
    "Managed Volume Export."
    MANAGED_VOLUME_EXPORT
    "MongoDB Collection."
    MONGODB_COLLECTION
    "MongoDB Database."
    MONGODB_DATABASE
    "MongoDB Source Cluster."
    MONGODB_SOURCE
    "MongoDB collection."
    MONGO_COLLECTION
    "MongoDB Database."
    MONGO_DATABASE
    "MongoDB database."
    MONGO_DB
    "MongoDB source."
    MONGO_SOURCE
    "Managed Volume."
    ManagedVolume
    Mssql
    MssqlAvailabilityGroup
    MssqlDatabaseBatchMaintenance
    MssqlInstance
    "NAS Fileset."
    NAS_FILESET
    NasNamespace
    NasShare
    NasSystem
    NasVolume
    NutanixCluster
    NutanixVirtualMachine
    O365Calendar
    O365File
    O365Group
    O365Mailbox
    O365Onedrive
    O365Org
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Teams
    O365User
    ORACLE_DATA_GUARD_GROUP
    "Orchestrated Application Recovery Blueprint."
    ORCHESTRATED_APPLICATION_RECOVERY_BLUEPRINT
    "Orchestrated Application Recovery Plan."
    ORCHESTRATED_APPLICATION_RECOVERY_PLAN
    OracleDatabase
    OracleHost
    OracleRac
    PhysicalHost
    RubrikEbsVolume
    RubrikEc2Instance
    SapHanaDatabase
    SapHanaSystem
    ShareFileset
    SnapMirrorCloud
    StorageArrayVolumeGroup
    "VSphere Datastore cluster."
    VSPHERE_DATASTORE_CLUSTER
    "VSphere Virtual Disk."
    VSPHERE_VIRTUAL_DISK
    VSphereComputeCluster
    VSphereDatacenter
    VSphereDatastore
    VSphereFolder
    VSphereHost
    VSphereNetwork
    VSphereResourcePool
    VSphereTag
    VSphereTagCategory
    VSphereVCenter
    Vcd
    VcdCatalog
    VcdOrg
    VcdOrgVdc
    VcdVapp
    VcdVimServer
    VmwareVirtualMachine
    VolumeGroup
    WindowsCluster
    WindowsFileset
    WindowsVolumeGroup
}

enum HierarchySortByField {
    ASSIGNED_SLA_DOMAIN
    "Sort by AWS native account name."
    AWS_NATIVE_ACCOUNT_NAME
    "Sort RDS Instance DB Instance Class."
    AWS_NATIVE_RDS_DB_ENGINE
    "Sort RDS Instance DB Engine."
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    "Sort by AWS region."
    AWS_REGION
    "Sort by AWS VPC ID."
    AWS_VPC_ID
    AZURE_DISK_ATTACHED_VM
    "Sort Azure disks by common resource group name."
    AZURE_DISK_CRG_NAME
    "Sort Azure disks by subscription name from common resource group."
    AZURE_DISK_CRG_SUBSCRIPTION_NAME
    "Sort Azure disks by Disk size."
    AZURE_DISK_SIZE
    "Sort Azure disks by Disk type."
    AZURE_DISK_TYPE
    "Sort by Azure region."
    AZURE_REGION
    "Sort Azure resource groups by disk count."
    AZURE_RG_DISKCOUNT
    "Sort Azure resource groups by effective SLA Domain."
    AZURE_RG_DISK_EFFECTIVE_SLA
    "Sort Azure resource groups by effective SLA for SQL Database DB."
    AZURE_RG_SQL_DATABASE_DB_EFFECTIVE_SLA
    "Sort Azure resource groups by effective SLA for SQL Managed Instance DB."
    AZURE_RG_SQL_MANAGED_INSTANCE_DB_EFFECTIVE_SLA
    "Sort Azure resource groups by subscription name."
    AZURE_RG_SUBSCRIPTION_NAME
    "Sort Azure resource groups by virtual machine count."
    AZURE_RG_VMCOUNT
    "Sort Azure resource groups by effective SLA Domain for virtual machine."
    AZURE_RG_VM_EFFECTIVE_SLA
    "Sort by region for Azure SQL Database."
    AZURE_SQL_DATABASE_DB_REGION
    "Sort by region for Azure SQL Database Server."
    AZURE_SQL_DATABASE_SERVER_REGION
    "Sort by resource group for Azure SQL Database or Azure SQL Managed Instance Database."
    AZURE_SQL_DB_RESOURCE_GROUP
    "Sort by region for Azure Managed Instance Database."
    AZURE_SQL_MANAGED_INSTANCE_DB_REGION
    "Sort by region for Azure Managed Instance Server."
    AZURE_SQL_MANAGED_INSTANCE_SERVER_REGION
    "Sort by resource group for Azure SQL Database Server or Azure SQL Managed Instance Server."
    AZURE_SQL_SERVER_RESOURCE_GROUP
    "Sort Azure virtual machines by Subnet name."
    AZURE_SUBNET_NAME
    "Sort Azure subscription by disk count."
    AZURE_SUBSCRIPTION_DISKCOUNT
    "Sort Azure Subscription by virtual machine count."
    AZURE_SUBSCRIPTION_VMCOUNT
    "Sort by Azure Tenant ID."
    AZURE_TENANT_ID
    "Sort Azure virtual machines by common resource group name."
    AZURE_VM_CRG_NAME
    "Sort Azure virtual machines by subscription_name from common resource group."
    AZURE_VM_CRG_SUBSCRIPTION_NAME
    "Sort Azure virtual machines by virtual machine size."
    AZURE_VM_SIZE
    "Sort Azure virtual machines by VNet name."
    AZURE_VNET_NAME
    "Sort based on the IO filter status of the CDP virtual machines."
    CDP_IO_FILTER_STATUS
    "Sort based on the latest snapshot time of the CDP virtual machine."
    CDP_LATEST_SNAPSHOT_TIME
    "Sort based on the local CDP status of the CDP virtual machine."
    CDP_LOCAL_STATUS
    "Sort based on the replication cluster name of the CDP virtual machine."
    CDP_REPLICATION_CLUSTER_NAME
    "Sort based on the replication CDP status of the CDP virtual machine."
    CDP_REPLICATION_STATUS
    "Sort based on the source cluster name of the CDP virtual machine."
    CDP_VM_CLUSTER_NAME
    "Sort based on the effective SLA Domain name of the CDP virtual machine."
    CDP_VM_EFFECTIVE_SLA_NAME
    "Sort based on the name of the CDP virtual machine."
    CDP_VM_NAME
    "Sort based on the vCenter of the CDP virtual machine."
    CDP_VM_VCENTER_LOCATION
    "Sort DB2 Instance based on instance ID."
    DB2_INSTANCE_ID
    "Sort by EBS volume count."
    EBS_VOLUME_COUNT
    "Sort by EBS volume native ID."
    EBS_VOLUME_ID
    "Sort by EBS volume name."
    EBS_VOLUME_NAME
    "Sort by EBS volume size."
    EBS_VOLUME_SIZE
    "Sort by for EBS volume type."
    EBS_VOLUME_TYPE
    "Sort by EC2 instance count."
    EC2_INSTANCE_COUNT
    "Sort by EC2 instance native ID."
    EC2_INSTANCE_ID
    "Sort by EC2 instance name."
    EC2_INSTANCE_NAME
    "Sort by EC2 instance type."
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA_DOMAIN
    "Sort by O365 user email address."
    EMAIL_ADDRESS
    "Sort based on failover cluster app connection status."
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS
    "Sort based on failover cluster connection status."
    FAILOVER_CLUSTER_CONNECTION_STATUS
    "Sort fileset templates based on the not excluded files."
    FILESET_TEMPLATE_DOES_NOT_EXCLUDE
    "Sort fileset templates based on the excluded files."
    FILESET_TEMPLATE_EXCLUDES
    "Sort fileset templates by included files."
    FILESET_TEMPLATE_INCLUDES
    "Sort GCP disk by location (for regional disk: location=region, for zonal disk: location=zone)."
    GCP_DISK_LOCATION
    "Sort GCP disks by native ID."
    GCP_DISK_NATIVE_ID
    "Sort GCP disks by native name."
    GCP_DISK_NATIVE_NAME
    "Sort GCP disks by project name."
    GCP_DISK_PROJECT_NAME
    "Sort GCP disk by size."
    GCP_DISK_SIZE
    "Sort GCP Instances by Native ID."
    GCP_INSTANCE_NATIVE_ID
    "Sort GCP Instances by Native Name."
    GCP_INSTANCE_NATIVE_NAME
    "Sort GCP Instances by Network Name."
    GCP_INSTANCE_NETWORK_NAME
    "Sort GCP Instances by Project Name."
    GCP_INSTANCE_PROJECT_NAME
    "Sort GCP Instances by Region."
    GCP_INSTANCE_REGION
    "Sort GCP Instances by Instance Type."
    GCP_INSTANCE_TYPE
    "Sort GCP Project by Disk count."
    GCP_PROJECT_DISK_COUNT
    "Sort GCP Projects by Instance Count."
    GCP_PROJECT_INSTANCE_COUNT
    "Sort GCP Projects by Native ID."
    GCP_PROJECT_NATIVE_ID
    "Sort GCP Projects by Project Number."
    GCP_PROJECT_NUMBER
    "Sort GCP Projects by Organization Name."
    GCP_PROJECT_ORG_NAME
    "Sort by ID of managed object."
    ID
    "Sort MSSQL availability groups by copy only."
    MSSQL_AVAILABILITY_GROUP_COPY_ONLY
    "Sort MSSQL databases by copy only."
    MSSQL_DATABASE_COPY_ONLY
    "Sort MSSQL failover clusters by database count."
    MSSQL_FAILOVER_DATABASE_COUNT
    "Sort MSSQL hosts by number of databases."
    MSSQL_HOST_DB_COUNT
    "Sort MSSQL instance count on host page."
    MSSQL_HOST_INSTANCE_COUNT
    "Sort MSSQL instances by number of databases."
    MSSQL_INSTANCE_DB_COUNT
    NAME
    "Sort physical hosts by connection status."
    PHYSICAL_HOST_CONNECTION_STATUS
    "Sort physical hosts by OS name."
    PHYSICAL_HOST_OS_NAME
    "Sort SAP HANA systems by system SID."
    SAP_HANA_SYSTEM_SID
    "Sort SAP HANA systems by system RBS status."
    SAP_HANA_SYSTEM_STATUS
    "Sort unmanaged objects by archival storage size."
    UNMANAGED_OBJECTS_ARCHIVAL_STORAGE_BYTES
    "Sort unmanaged objects by local storage size."
    UNMANAGED_OBJECTS_LOCAL_STORAGE_BYTES
    "Sort based on unmanaged object location."
    UNMANAGED_OBJECTS_LOCATION
    "Sort based on unmanaged object status."
    UNMANAGED_OBJECTS_STATUS
    "Sort unmanaged objects by number of snapshot count."
    UNMANAGED_OBJECTS_UNEXPIRED_SNAPSHOT_COUNT
    "Sort vSphere datastores by capacity."
    VSPHERE_DATASTORE_CAPACITY
    "Sort vSphere datastores by free space."
    VSPHERE_DATASTORE_FREE_SPACE
    "Sort vSphere datastores by datastore type."
    VSPHERE_DATASTORE_TYPE
}

enum HostConnectivityStatusEnum {
    BADLY_CONFIGURED
    CONNECTED
    CONNECTING
    CONNECTOR_NOT_DEPLOYED
    DELETED
    DELETING
    DELETION_FAILED
    DISCONNECTED
    PARTIALLY_CONNECTED
    REFRESHING
    REFRESH_FAILED
    REMOTE
    REPLICATED_TARGET
    SECONDARY_CLUSTER
    UNKNOWN_CONNECTIVITY_STATUS
}

"Host failover cluster roots."
enum HostFailoverClusterRoot {
    "Linux host Root."
    LINUX_HOST_ROOT
    "Windows host Root."
    WINDOWS_HOST_ROOT
}

"""

Supported in v5.1+
Status of Rubrik Io Filter on Hosts.
"""
enum HostFilterStatus {
    HOST_FILTER_STATUS_INSTALLED
    HOST_FILTER_STATUS_OUT_OF_DATE
    HOST_FILTER_STATUS_PAST_EXPECTED_DATE
    HOST_FILTER_STATUS_UNINSTALLED
    HOST_FILTER_STATUS_UNKNOWN
    HOST_FILTER_STATUS_UNSUPPORTED_BY_VMWARE
}

"Host roots."
enum HostRoot {
    "Exchange Host Root."
    EXCHANGE_ROOT
    "Linux Host Root."
    LINUX_HOST_ROOT
    "NAS Host Root."
    NAS_HOST_ROOT
    "Windows Host Root."
    WINDOWS_HOST_ROOT
}

"""

Supported in v5.1+
Status of Rubrik Io Filter on ESX Host.
"""
enum HostUiFilterStatus {
    HOST_UI_FILTER_STATUS_CHECK_VCENTER
    HOST_UI_FILTER_STATUS_ERROR_CONTACT_SUPPORT
    HOST_UI_FILTER_STATUS_ERROR_MAINTENANCE_MODE
    HOST_UI_FILTER_STATUS_INSTALL_IN_PROGRESS
    HOST_UI_FILTER_STATUS_NO_FILTER
    HOST_UI_FILTER_STATUS_OK
    HOST_UI_FILTER_STATUS_RETRY_INSTALL
    HOST_UI_FILTER_STATUS_UNINSTALL_IN_PROGRESS
    HOST_UI_FILTER_STATUS_UNKNOWN
    HOST_UI_FILTER_STATUS_UNSUPPORTED_BY_VMWARE
    HOST_UI_FILTER_STATUS_UPGRADE_IN_PROGRESS
    HOST_UI_FILTER_STATUS_UPGRADE_NEEDED
}

"""

Supported in v5.0+
VFD host support status.
"""
enum HostVfdInstallConfig {
    HOST_VFD_INSTALL_CONFIG_DISABLED
    HOST_VFD_INSTALL_CONFIG_ENABLED
}

"""

Supported in v5.0+
VFD host install state.
"""
enum HostVfdState {
    HOST_VFD_STATE_INSTALLED
    HOST_VFD_STATE_INSTALLED_BUT_RESTART_REQUIRED
    HOST_VFD_STATE_NOT_INSTALLED
    HOST_VFD_STATE_UNINSTALLED_BUT_RESTART_REQUIRED
}

"""

Supported in v5.3+
The type of the HotAdd proxy virtual machine.
"""
enum HotAddProxyVmStatusType {
    HOT_ADD_PROXY_VM_STATUS_TYPE_EXPIRED
    HOT_ADD_PROXY_VM_STATUS_TYPE_FAILED
    HOT_ADD_PROXY_VM_STATUS_TYPE_MAINTAINING
    HOT_ADD_PROXY_VM_STATUS_TYPE_RUNNING
}

"The connection status of Hyper-V object."
enum HypervHostStatusType {
    "Hyper-V object is connected."
    CONNECTED
    "Hyper-V object is connecting."
    CONNECTING
    "Hyper-V object is deleted."
    DELETED
    "Hyper-V object is deleting."
    DELETING
    "Hyper-V object is disconnected."
    DISCONNECTED
    "Some servers in the Hyper-V cluster are connected."
    PARTIALLYCONNECTED
    "Hyper-V object is refreshing."
    REFRESHING
    """

    Hyper-V object status could
    not be parsed.
    """
    UNKNOWN
}

"Filter for Hyper-V Live Mount results."
enum HypervLiveMountFilterField {
    "Cluster UUID filter for Hyper-V Live Mount results."
    CLUSTER_UUID
    "Mount Name filter for Hyper-V Live Mount results."
    MOUNT_NAME
    """

    Organization ID filter field for Hyper-V
    Live Mount results.
    """
    ORG_ID
    "Hyper-V original virtual machine ID filter for Live Mount results."
    ORIGINAL_VM_ID
    """

    Filter is not specified. Any filter text would
    not be considered.
    """
    UNSPECIFIED
}

"Sort by parameters for Hyper-V Live mount results."
enum HypervLiveMountSortByField {
    "Sort by Rubrik cluster name."
    CLUSTER_NAME
    "Sort by mount creation date."
    CREATION_DATE
    "Sort by mount name."
    MOUNT_NAME
    """

    Sort by field is not specified. Any filter text would
    not be considered.
    """
    UNSPECIFIED
}

"The connection status of Hyper-V Host server."
enum HypervMountedVmStatusType {
    """

    Hyper-V Live Mount
    is Powered Off.
    """
    POWEREDOFF
    """

    Hyper-V Live Mount
    is Powered On.
    """
    POWEREDON
    """

    Hyper-V Live Mount
    is Powering Off.
    """
    POWERINGOFF
    """

    Hyper-V Live Mount
    is Powering On.
    """
    POWERINGON
    """

    Hyper-V Live Mount virtual machine status could
    not be parsed.
    """
    UNKNOWN
}

enum HypervVirtualMachineDetailGuestOsType {
    HYPERV_VIRTUAL_MACHINE_DETAIL_GUEST_OS_TYPE_LINUX
    HYPERV_VIRTUAL_MACHINE_DETAIL_GUEST_OS_TYPE_UNKNOWN
    HYPERV_VIRTUAL_MACHINE_DETAIL_GUEST_OS_TYPE_WINDOWS
}

enum HypervVirtualMachineDetailOperatingSystemType {
    HYPERV_VIRTUAL_MACHINE_DETAIL_OPERATING_SYSTEM_TYPE_LINUX
    HYPERV_VIRTUAL_MACHINE_DETAIL_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum HypervVirtualMachineMountSummaryPowerStatus {
    HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERED_OFF
    HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERED_ON
    HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERING_OFF
    HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERING_ON
}

"Supported Indicators Of Compromise are Yara, File Hash, and File Pattern."
enum IndicatorOfCompromiseKind {
    "Matching file patterns."
    IOC_FILE_PATTERN
    "Match for files with specified hash."
    IOC_HASH
    "Unused default."
    IOC_UNSPECIFIED
    "Matching Yara rules."
    IOC_YARA
}

"""

Supported in v6.0+
Type of indicator.
"""
enum IndicatorOfCompromiseType {
    INDICATOR_OF_COMPROMISE_TYPE_HASH
    INDICATOR_OF_COMPROMISE_TYPE_PATH_OR_FILENAME
    INDICATOR_OF_COMPROMISE_TYPE_YARA_RULE
}

enum InfrastructureTableColumnEnum {
    ClusterName
    ClusterType
    EncryptionEnabled
    Location
    TotalCapacity
    UsedCapacity
}

enum InodeType {
    DIRECTORY
    FILE
    UNKNOWN_INODE
}

"Instance type of the location."
enum InstanceTypeEnum {
    "Azure China instance type."
    AZURE_CHINA
    "Azure Default instance type."
    AZURE_DEFAULT
    "Azure Germany instance type."
    AZURE_GERMANY
    "Azure Government instance type."
    AZURE_GOVERNMENT
    "Instance type of location is unknown."
    UNKNOWN_INSTANCE
}

enum InterfaceType {
    BOND0
    BOND1
    CUSTOM
    UNKNOWN_TYPE
}

enum InternalDeleteHypervVirtualMachineSnapshotRequestLocation {
    INTERNAL_DELETE_HYPERV_VIRTUAL_MACHINE_SNAPSHOT_REQUEST_LOCATION_ALL
    INTERNAL_DELETE_HYPERV_VIRTUAL_MACHINE_SNAPSHOT_REQUEST_LOCATION_LOCAL
}

enum InternalDeleteNutanixSnapshotRequestLocation {
    INTERNAL_DELETE_NUTANIX_SNAPSHOT_REQUEST_LOCATION_ALL
    INTERNAL_DELETE_NUTANIX_SNAPSHOT_REQUEST_LOCATION_LOCAL
}

enum InternalQueryHypervHostRequestSlaAssignment {
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SLA_ASSIGNMENT_DERIVED
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SLA_ASSIGNMENT_DIRECT
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SLA_ASSIGNMENT_UNASSIGNED
}

enum InternalQueryHypervHostRequestSortBy {
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_BY_EFFECTIVE_SLA_DOMAIN_NAME
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_BY_NAME
}

enum InternalQueryHypervHostRequestSortOrder {
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_ORDER_ASC
    INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_ORDER_DESC
}

"Inventory Card options that the user can select as a workload."
enum InventoryCard {
    "Inventory Card is AHV VMS."
    AHV_VMS_CDM
    "Inventory Card is AWS EC2."
    AWS_EC2
    "Inventory Card is AWS RDS."
    AWS_RDS
    "Inventory Card is Azure Virtual Machines."
    AZURE
    "Inventory Card is Azure SQL Databases."
    AZURE_SQL_DB
    "Inventory Card is Azure SQL Managed Instances."
    AZURE_SQL_MI
    "Inventory Card is Cassandra."
    CASSANDRA
    "Inventory Card is DB2."
    DB2
    "Inventory Card is Exchange."
    EXCHANGE
    "Inventory Card is GCP."
    GCP
    "Inventory Card is HyperV."
    HYPERV
    "Inventory Card is HyperV CDM."
    HYPERV_VMS_CDM
    "Inventory Card is Kubernetes."
    KUBERNETES
    "Inventory Card is Linux Filesets."
    LINUX_UNIX_FILESETS
    "Inventory Card is Linux Hosts."
    LINUX_UNIX_HOSTS_CDM
    "Inventory Card is Managed Volumes."
    MANAGED_VOLUMES
    "Inventory Card is Managed Volumes CDM."
    MANAGED_VOLUMES_CDM
    "Inventory Card is Microsoft 365."
    MICROSOFT_365
    "Inventory Card is Mongo."
    MONGO
    "Inventory Card is MongoDB."
    MONGODB
    "Inventory Card is MSSQL."
    MSSQL
    "Inventory Card is NAS Shares."
    NAS_SHARES
    "Inventory Card is NAS Shares CDM."
    NAS_SHARES_CDM
    "Inventory Card is Nutanix AHV."
    NUTANIX_AHV
    "Inventory Card is Oracle."
    ORACLE
    "Inventory Card is Oracle DBs."
    ORACLE_DBS_CDM
    "Inventory Card is Sap Hana."
    SAP_HANA
    "Inventory Card is Snapmirror."
    SNAPMIRROR
    "Inventory Card is SQL Server DBs."
    SQL_SERVER_DBS_CDM
    "Inventory Card is vCD vApps."
    VCD_VAPPS
    "Inventory Card is vCD vApps CDM."
    VCD_VAPPS_CDM
    "Inventory Card is vSphere."
    VSPHERE
    "Inventory Card is vSphere VMs."
    VSPHERE_VMS_CDM
    "Inventory Card is Windows Filesets."
    WINDOWS_FILESETS
    "Inventory Card is Windows Hosts."
    WINDOWS_HOSTS_CDM
    "Inventory Card is Windows Volume Group."
    WINDOWS_VOLUME_GROUP
}

"Inventory workloads that are supported on Rubrik."
enum InventorySubHierarchyRootEnum {
    APPFLOWS_ROOT
    AWSNATIVE_ROOT
    AZURENATIVE_ROOT
    "Cassandra Root."
    CASSANDRA_ROOT
    "Cloud Direct NAS export root."
    CLOUD_DIRECT_NAS_EXPORT_ROOT
    CLOUD_NATIVE_TAG_RULE_ROOT
    DB2_ROOT
    "Root of exchange hierarchy."
    EXCHANGE_ROOT
    FELDSPAR_ROOT
    GCPNATIVE_ROOT
    HYPERV_ROOT
    KUPR_ROOT
    LINUX_HOST_ROOT
    MANAGED_VOLUME_ROOT
    "MongoDB Root."
    MONGODB_ROOT
    "MongoDB Root."
    MONGO_ROOT
    MSSQL_ROOT
    NAS_HOST_ROOT
    NAS_ROOT
    NUTANIX_ROOT
    O365_ROOT
    ORACLE_ROOT
    PHYSICAL_HOST_ROOT
    SAP_HANA_ROOT
    VCD_ROOT
    VSPHERE_ROOT
    WINDOWS_HOST_ROOT
}

"""

Supported in v5.1+
Status of Rubrik Io Filter on Cluster.
"""
enum IoFilterStatus {
    IO_FILTER_STATUS_INCONSISTENT
    IO_FILTER_STATUS_INSTALLED
    IO_FILTER_STATUS_INSTALL_ERROR
    IO_FILTER_STATUS_INSTALL_IN_PROGRESS
    IO_FILTER_STATUS_OUT_OF_DATE
    IO_FILTER_STATUS_UNAVAILABLE
    IO_FILTER_STATUS_UNINSTALLED
    IO_FILTER_STATUS_UNINSTALL_ERROR
    IO_FILTER_STATUS_UNINSTALL_IN_PROGRESS
    IO_FILTER_STATUS_UNKNOWN
    IO_FILTER_STATUS_UNSUPPORTED
    IO_FILTER_STATUS_UNSUPPORTED_BY_RUBRIK
    IO_FILTER_STATUS_UNSUPPORTED_BY_VMWARE
    IO_FILTER_STATUS_UPGRADE_ERROR
    IO_FILTER_STATUS_UPGRADE_IN_PROGRESS
}

enum IssueEventType {
    ADD_WHITELIST_EVENT
    CREATE_EVENT
    DELETE_POLICY_EVENT
    NO_ISSUES_SNAPSHOT_EVENT
    REMOVE_POLICY_OBJ_EVENT
    REMOVE_WHITELIST_EVENT
    SNAPSHOT_EVENT
}

enum IssueStatus {
    OPEN
    RESOLVED
}

"Type of the Kubernetes cluster."
enum K8sClusterProtoType {
    "The cluster is hosted on AWS."
    AWS
    "The cluster is hosted on Azure."
    AZURE
    "The cluster is hosted on GCP."
    GCP
    "The cluster is hosted on private cloud."
    ON_PREM
    "Unknown cluster host."
    UNKNOWN
}

"Connection status of the Kubernetes cluster."
enum K8sClusterStatus {
    "The cluster is connected."
    STATUS_CONNECTED
    "The cluster is disconnected."
    STATUS_DISCONNECTED
    "The cluster connection has encountered errors."
    STATUS_ERROR
    "The cluster has not established connection with RSC yet."
    STATUS_INIT
    "Unknown connection status."
    STATUS_UNKNOWN
}

"Type of the Kubernetes cluster."
enum K8sClusterType {
    "The cluster is hosted on AWS."
    AWS
    "The cluster is hosted on Azure."
    AZURE
    "The cluster is hosted on GCP."
    GCP
    "The cluster is hosted on private cloud."
    ON_PREM
}

"Content type of the Kubernetes manifest information."
enum K8sContentType {
    "Manifest contains a string in the YAML format."
    STRING
    "Manifest contains a signed URL to download the YAML file."
    URL
}

"The type of the port range."
enum KuprClusterPortsType {
    "BACKUP type of ports."
    BACKUP
    "USER_DRIVEN type of ports."
    USER_DRIVEN
}

enum LastTestStatusEnum {
    Failed
    NotExist
    Succeeded
}

"Field Enum for Authorized LDAP Principal list."
enum LdapAuthorizedPrincipalFieldEnum {
    "Authentication domain of principal."
    DirectoryName
    "Email of principal."
    Email
    "Last login time of principal."
    LAST_LOGIN
    "Name of principal."
    Name
}

enum LdapIntegrationFieldEnum {
    Name
}

enum LdapPrincipalFieldEnum {
    Name
}

"Legal hold query filter field."
enum LegalHoldQueryFilterField {
    "Legal hold time."
    LEGAL_HOLD_TIME
    "Workload name."
    SNAPPABLE_NAME
    "Workload type."
    SNAPPABLE_TYPE
    "Snapshot taken time."
    SNAPSHOT_TAKEN_TIME
    "Snapshot type."
    SNAPSHOT_TYPE
    "Unknown filter field."
    UNKNOWN
}

"Legal hold sort type Enum."
enum LegalHoldSortType {
    "Legal hold snapshot count."
    LEGAL_HOLD_SNAPSHOT_COUNT
    "Legal hold time."
    LEGAL_HOLD_TIME
    "Snappable name."
    SNAPPABLE_NAME
    "Snappable type."
    SNAPPABLE_TYPE
    "Snapshot time."
    SNAPSHOT_TIME
    "Snapshot type."
    SNAPSHOT_TYPE
    "Unknown type."
    UNKNOWN
}

enum ListAccessUsersSort {
    EMAIL
    NUM_ACTIVITIES
    NUM_ACTIVITY_DELTA
    USERNAME
}

"Scope of the target location based on how it is managed."
enum LocationScope {
    "Target location is managed by Polaris."
    GLOBAL
    "Target location is managed by CDM."
    LOCAL
    "Scope of target location is unknown."
    UNKNOWN
}

enum LocationType {
    AWS
    AZURE
    CDM
    GCP
    UNKNOWN_TYPE
}

"Locking mechanisms for a user account."
enum LockMethod {
    "Account locked by the administrator."
    ADMINISTRATIVE_LOCK
    "Account locked due to too many failed login attempts (Brute-force attack)."
    BRUTE_FORCE
    "Unspecified."
    LOCK_METHOD_UNSPECIFIED
}

"The filter for lockout status."
enum LockoutStateFilter {
    "Select all users irrespective of lockout status."
    ALL
    "Select only the locked-out users."
    LOCKED
    "Select only the users that are not locked-out."
    NOT_LOCKED
}

"Log level to be used in the Rubrik CDM cluster jobs."
enum LogLevel {
    "Debug level logs."
    DEBUG
    "Information level logs."
    INFO
}

"Period of time to look back."
enum LookbackPeriod {
    "Last 24 hours."
    LAST_24_HOURS
    "Past 30 days."
    PAST_30_DAYS
    "Past 365 days."
    PAST_365_DAYS
    "Past 7 days."
    PAST_7_DAYS
    "Past 90 days."
    PAST_90_DAYS
    "Since protection of the object started."
    START_OF_PROTECTION
}

"The cloud type for o365 subscription."
enum M365Cloud {
    "Commercial cloud type."
    COMMERCIAL
    "GCC high cloud type."
    GCC_HIGH
    "GCC mil cloud type."
    GCC_MIL
    "Cloud type not defined."
    NULL_CLOUD_TYPE
}

"""

Supported in v6.0+
Status of detecting malware within a Snapshot.
"""
enum MalwareScanInSnapshotStatus {
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_ERROR
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_FINISHED
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_PARTIALLY_SUCCEEDED
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_PENDING
}

"Represents whether a cluster is managed by Rubrik Security Cloud."
enum ManagedByRubrik {
    "The cluster is not managed by Rubrik Security Cloud."
    NO
    "It is unknown whether the cluster is managed by Rubrik Security Cloud or not."
    UNKNOWN
    "The cluster is managed by Rubrik Security Cloud."
    YES
}

"All supported managed objects."
enum ManagedObjectType {
    "Orchestrated Application Recovery Blueprint."
    APP_BLUEPRINT
    "AWS account."
    AWS_NATIVE_ACCOUNT
    "AWS Elastic Block Store volume."
    AWS_NATIVE_EBS_VOLUME
    "AWS Elastic Compute Cloud instance."
    AWS_NATIVE_EC2_INSTANCE
    "AWS Relational Database Service instance."
    AWS_NATIVE_RDS_INSTANCE
    "Azure managed disk."
    AZURE_MANAGED_DISK
    "Azure common resource group."
    AZURE_RESOURCE_GROUP
    "Azure resource group for disk hierarchy."
    AZURE_RESOURCE_GROUP_FOR_DISK_HIERARCHY
    "Azure resource group for virtual machine hierarchy."
    AZURE_RESOURCE_GROUP_FOR_VM_HIERARCHY
    "Azure SQL Database."
    AZURE_SQL_DATABASE_DB
    "Azure SQL Database server."
    AZURE_SQL_DATABASE_SERVER
    "Azure SQL Managed Instance database."
    AZURE_SQL_MANAGED_INSTANCE_DB
    "Azure SQL Managed Instance server."
    AZURE_SQL_MANAGED_INSTANCE_SERVER
    "Azure subscription."
    AZURE_SUBSCRIPTION
    "Azure unmanaged disk."
    AZURE_UNMANAGED_DISK
    "Azure virtual machine."
    AZURE_VIRTUAL_MACHINE
    "Blueprint."
    BLUEPRINT
    "Cassandra column family."
    CASSANDRA_COLUMN_FAMILY
    "Cassandra keyspace."
    CASSANDRA_KEYSPACE
    "Cassandra source."
    CASSANDRA_SOURCE
    "Cloud Direct NAS export."
    CLOUD_DIRECT_NAS_EXPORT
    "Cloud tag rule."
    CLOUD_NATIVE_TAG_RULE
    "DB2 database."
    DB2_DATABASE
    "DB2 instance."
    DB2_INSTANCE
    "Exchange Database Availability Group."
    EXCHANGE_DAG
    "Exchange Database."
    EXCHANGE_DATABASE
    "Exchange Server."
    EXCHANGE_SERVER
    "Failover cluster app."
    FAILOVER_CLUSTER_APP
    "Feldspar site."
    FELDSPAR_SITE
    "Fileset template."
    FILESET_TEMPLATE
    "GCP disk."
    GCP_NATIVE_DISK
    "GCP Google Compute Engine instance."
    GCP_NATIVE_GCE_INSTANCE
    "GCP project."
    GCP_NATIVE_PROJECT
    "Rubrik SaaS user group."
    GROUP
    "Host failover cluster."
    HOST_FAILOVER_CLUSTER
    "Host share."
    HOST_SHARE
    "Hyper-V cluster."
    HYPERV_CLUSTER
    "Hyper-V System Center Virtual Machine Manager."
    HYPERV_SCVMM
    "Hyper-V server."
    HYPERV_SERVER
    "Hyper-V virtual machine."
    HYPERV_VIRTUAL_MACHINE
    "Kubernetes cluster."
    KUPR_CLUSTER
    "Kubernetes namespace."
    KUPR_NAMESPACE
    "Linux fileset."
    LINUX_FILESET
    "Managed Volume."
    MANAGED_VOLUME
    "Managed Volume Export."
    MANAGED_VOLUME_EXPORT
    "MongoDB collection."
    MONGODB_COLLECTION
    "MongoDB database."
    MONGODB_DATABASE
    "MongoDB source."
    MONGODB_SOURCE
    "Mongo collection."
    MONGO_COLLECTION
    "Mongo database."
    MONGO_DATABASE
    "Mongo database - deprecated."
    MONGO_DB
    "Mongo source."
    MONGO_SOURCE
    "MSSQL availability group."
    MSSQL_AVAILABILITY_GROUP
    "MSSQL database availability group."
    MSSQL_DAG
    "MSSQL database."
    MSSQL_DATABASE
    "MSSQL instance."
    MSSQL_INSTANCE
    "NAS fileset associated with a NAS share object."
    NAS_FILESET
    "NAS namespace."
    NAS_NAMESPACE
    "NAS share."
    NAS_SHARE
    "NAS system."
    NAS_SYSTEM
    "NAS volume."
    NAS_VOLUME
    "Nutanix cluster."
    NUTANIX_CLUSTER
    "Nutanix virtual machine."
    NUTANIX_VIRTUAL_MACHINE
    "O365 calendar."
    O365_CALENDAR
    "O365 group."
    O365_GROUP
    "O365 individual mailbox."
    O365_INDIVIDUAL_MAILBOX
    "O365 individual user."
    O365_INDIVIDUAL_USER
    "O365 mailbox."
    O365_MAILBOX
    "O365 OneDrive."
    O365_ONEDRIVE
    "O365 organization."
    O365_ORGANIZATION
    "O365 shared mailbox."
    O365_SHARED_MAILBOX
    "O365 shared user."
    O365_SHARED_USER
    "O365 SharePoint drive."
    O365_SHAREPOINT_DRIVE
    "O365 SharePoint list."
    O365_SHAREPOINT_LIST
    "O365 site."
    O365_SITE
    "O365 Teams."
    O365_TEAMS
    "O365 user."
    O365_USER
    "Oracle database."
    ORACLE_DATABASE
    "Oracle Data Guard Group."
    ORACLE_DATA_GUARD_GROUP
    "Oracle host."
    ORACLE_HOST
    "Oracle Real Application Cluster."
    ORACLE_RAC
    "Physical host."
    PHYSICAL_HOST
    "Recovery plan."
    RECOVERY_PLAN
    "SAP HANA database."
    SAP_HANA_DATABASE
    "SAP HANA system."
    SAP_HANA_SYSTEM
    "Share fileset."
    SHARE_FILESET
    "SnapMirror Cloud."
    SNAPMIRROR_CLOUD
    "Rubrik SaaS user."
    USER
    "VMware vCloud Director."
    VCD
    "VMware vCloud Director catalog."
    VCD_CATALOG
    "VMware vCloud Director organization."
    VCD_ORG
    "VMware vCloud Director organization virtual datacenter."
    VCD_ORG_VDC
    "VMware vCloud Director vApp."
    VCD_VAPP
    "VMware vCloud Director Virtualized Infrastructure Manager Server."
    VCD_VIM_SERVER
    "Volume Group."
    VOLUME_GROUP
    "VMware vSphere compute cluster."
    VSPHERE_COMPUTE_CLUSTER
    "VMware vSphere datacenter."
    VSPHERE_DATACENTER
    "VMware vSphere datastore."
    VSPHERE_DATASTORE
    "VMware vSphere database cluster."
    VSPHERE_DATASTORE_CLUSTER
    "VMware vSphere folder."
    VSPHERE_FOLDER
    "VMware vSphere host."
    VSPHERE_HOST
    "VMware vSphere network."
    VSPHERE_NETWORK
    "VMware vSphere resource pool."
    VSPHERE_RESOURCE_POOL
    "VMware vSphere tag."
    VSPHERE_TAG
    "VMware vSphere tag category."
    VSPHERE_TAG_CATEGORY
    "VMware vSphere vCenter."
    VSPHERE_VCENTER
    "VMware vSphere virtual disk."
    VSPHERE_VIRTUAL_DISK
    "VMware vSphere virtual machine."
    VSPHERE_VIRTUAL_MACHINE
    "Windows cluster."
    WINDOWS_CLUSTER
    "Windows fileset."
    WINDOWS_FILESET
}

"""

Supported in v5.0+
Application whose data will be stored in managed volume.
"""
enum ManagedVolumeApplicationTag {
    "Application tag for creating a Managed Volume for DB Transaction log backups."
    MANAGED_VOLUME_APPLICATION_TAG_DB_TRANSACTION_LOG
    "Application tag for creating a Managed Volume for MSSQL backups."
    MANAGED_VOLUME_APPLICATION_TAG_MS_SQL
    "Application tag for creating a Managed Volume for MySQL backups."
    MANAGED_VOLUME_APPLICATION_TAG_MY_SQL
    "Application tag for creating Managed Volume for Oracle backups."
    MANAGED_VOLUME_APPLICATION_TAG_ORACLE
    "Application tag for creating Managed Volume for Oracle incremental backups."
    MANAGED_VOLUME_APPLICATION_TAG_ORACLE_INCREMENTAL
    "Application tag for creating Managed Volume for Postgres backups."
    MANAGED_VOLUME_APPLICATION_TAG_POSTGRE_SQL
    "Application tag for creating Managed Volume for RecoverX backups."
    MANAGED_VOLUME_APPLICATION_TAG_RECOVER_X
    "Application tag for creating Managed Volume for SAP HANA backups."
    MANAGED_VOLUME_APPLICATION_TAG_SAP_HANA
    "Application tag for creating Managed Volume for SAP HANA log backups."
    MANAGED_VOLUME_APPLICATION_TAG_SAP_HANA_LOG
}

"Group Managed Volume queued snapshots by time."
enum ManagedVolumeQueuedSnapshotGroupByTime {
    "Group by day."
    DAY
    "Group by hour."
    HOUR
    "Group by month."
    MONTH
    "Group by quarter."
    QUARTER
    "Group by week."
    WEEK
    "Group by year."
    YEAR
}

"Sort Managed Volume queued snapshots."
enum ManagedVolumeQueuedSnapshotSortBy {
    "Sort by date."
    DATE
}

"""

Supported in v5.0+
Type of exported share.
"""
enum ManagedVolumeShareType {
    "Specifies that the share type for Managed Volume is NFS."
    MANAGED_VOLUME_SHARE_TYPE_NFS
    "Specifies that the share type for Managed Volume is SMB."
    MANAGED_VOLUME_SHARE_TYPE_SMB
}

"""

Supported in v5.0+
State of a managed volume.
"""
enum ManagedVolumeState {
    "Specifies that the Managed Volume is in destroyed state."
    MANAGED_VOLUME_STATE_DESTROYED
    "Specifies that the Managed Volume is in exported state."
    MANAGED_VOLUME_STATE_EXPORTED
    "Specifies that the Managed Volume is exporting."
    MANAGED_VOLUME_STATE_EXPORTING
    "Specifies that export has been requested for the Managed Volume."
    MANAGED_VOLUME_STATE_EXPORT_REQUESTED
    "Specifies that the Managed Volume is in resetting state."
    MANAGED_VOLUME_STATE_RESETTING
    "Specifies that reset has been requested for the Managed Volume."
    MANAGED_VOLUME_STATE_RESET_REQUESTED
    "Specifies that resize has been requested for the Managed Volume."
    MANAGED_VOLUME_STATE_RESIZE_REQUESTED
    "Specifies that the Managed Volume is in resizing state."
    MANAGED_VOLUME_STATE_RESIZING
    "Specifies that the Managed Volume is in snapshotting state."
    MANAGED_VOLUME_STATE_SNAPSHOTTING
    "Specifies that a snapshot has been requested for the Managed Volume."
    MANAGED_VOLUME_STATE_SNAPSHOT_REQUESTED
    "Specifies that the Managed Volume is in unexporting state."
    MANAGED_VOLUME_STATE_UNEXPORTING
    "Specifies that unexport has been requested for the Managed Volume."
    MANAGED_VOLUME_STATE_UNEXPORT_REQUESTED
}

"Type of Managed Volume."
enum ManagedVolumeType {
    "Always Mounted Managed Volume."
    ALWAYS_MOUNTED
    "Unspecified Managed Volume."
    MANAGED_VOLUME_TYPE_UNSPECIFIED
    "SLA Managed Volume."
    SLA_BASED
}

"""

Supported in v5.0+
Units for missed snapshot dayOfTime.
"""
enum MissedSnapshotDayOfTimeUnit {
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FIFTEENTH
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FIRST_DAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FRIDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_LAST_DAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_MONDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_SATURDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_SUNDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_THURSDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_TUESDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_WEDNESDAY
}

"Group missed snapshots by time."
enum MissedSnapshotGroupByTime {
    "Group by day."
    DAY
    "Group by hour."
    HOUR
    "Group by month."
    MONTH
    "Group by quarter."
    QUARTER
    "Group by week."
    WEEK
    "Group by year."
    YEAR
}

enum MissedSnapshotSortByEnum {
    Date
}

"Represents the state of the MongoDB source."
enum MongoSourceStatus {
    "Add Source Failed state."
    ADD_SOURCE_FAILED
    "Add Source in Progress state."
    ADD_SOURCE_IN_PROGRESS
    "Add Source Successful state."
    ADD_SOURCE_SUCCESSFUL
    "Unsupported."
    _UNSUPPORTED
}

"Represents the type of MongoDB deployment."
enum MongoSourceType {
    "MongoDB replica set."
    REPLICA_SET
    "MongoDB sharded cluster."
    SHARDED
}

"""

Specifies whether SSL certificates are required.
"""
enum MongoSslCertificateRequirement {
    MONGO_SSL_CERTIFICATE_REQUIREMENT_NONE
    MONGO_SSL_CERTIFICATE_REQUIREMENT_OPTIONAL
    MONGO_SSL_CERTIFICATE_REQUIREMENT_REQUIRED
}

"""

Type of MongoDB being added.
"""
enum MongoType {
    MONGO_TYPE_REPLICA_SET
    MONGO_TYPE_SHARDED_CLUSTER
}

"Represents connection status of MongoDB source to Mosaic cluster."
enum MongodbSourceStatus {
    "Source is being added to nosql cluster. Onboarding tasks are in process and source is not confirmed yet."
    ADDING
    "Source is connected."
    CONNECTED
    "Source is deleted from nosql cluster and it will not be tracked."
    DELETED
    "Source is being removed from nosql cluster and cleanup activities are in process."
    DELETING
    "Source is disconnected. This message is displayed when source is down or unreachable from nosql cluster."
    DISCONNECTED
    "Source is connected and metadata is being refreshed."
    REFRESHING
    "Represents error in displaying status. This status does not necessarily mean that something is wrong with the source."
    UNKNOWN_SYSTEM_STATUS
}

"Month."
enum Month {
    "April."
    APRIL
    "August."
    AUGUST
    "December."
    DECEMBER
    "February."
    FEBRUARY
    "January."
    JANUARY
    "July."
    JULY
    "June."
    JUNE
    "March."
    MARCH
    "May."
    MAY
    "November."
    NOVEMBER
    "October."
    OCTOBER
    "September."
    SEPTEMBER
}

enum MosaicAddStoreRequestStoreType {
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_AZURE_STORE
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_GS_STORE
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_NFS_STORE
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_S3_STORE
}

"Source type for NoSQL protection bulk recoverable range request."
enum MosaicBulkRecoverableRangeRequestSourceType {
    "Specifies that the source type for NoSQL protection bulk recoverable range request is Cassandra."
    MOSAIC_BULK_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_CASSANDRA
    "Specifies that the source type for NoSQL protection bulk recoverable range request is MongoDB."
    MOSAIC_BULK_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_MONGO
}

"Source type for NoSQL protection recoverable range request."
enum MosaicRecoverableRangeRequestSourceType {
    "Specifies that the source type for NoSQL protection recoverable range request is Cassandra."
    MOSAIC_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_CASSANDRA
    "Specifies that the source type for NoSQL protection recoverable range request is MongoDB."
    MOSAIC_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_MONGO
}

"Source type for NoSQL protection retrieve request."
enum MosaicRetrieveRequestSourceType {
    "Specifies that the source type for NoSQL protection retrieve request is Cassandra."
    MOSAIC_RETRIEVE_REQUEST_SOURCE_TYPE_CASSANDRA
    "Specifies that the source type for NoSQL protection retrieve request is MongoDB."
    MOSAIC_RETRIEVE_REQUEST_SOURCE_TYPE_MONGO
}

"Group mosaic snapshots."
enum MosaicSnapshotGroupBy {
    "Group snapshots by day."
    DAY
    "Group snapshots by hour."
    HOUR
    "Group snapshots by month."
    MONTH
    "Group snapshots by quarter."
    QUARTER
    "Group snapshots by week."
    WEEK
    "Group snapshots by year."
    YEAR
}

"Sort mosaic snapshots."
enum MosaicSnapshotSortBy {
    "Sort snapshots by date."
    DATE
    "Sort snapshots by snapshot ID."
    SNAPSHOT_ID
    "Sort snapshots by workload ID."
    WORKLOAD_ID
}

"Type of Mosaic snapshot."
enum MosaicSnapshotType {
    "Full(initial) sync snapshot."
    FULL
    "Incremental(delta) sync snapshot."
    INCREMENTAL
    "Invalid snapshot type."
    INVALID
}

"Mosaic storage location filter."
enum MosaicStorageLocationFilterField {
    "Cluster ID of Mosaic cluster."
    CLUSTER_UUID
    "Name of storage location."
    NAME
    "Type of storage location."
    STORE_TYPE
}

"Field to sort by for mosaic storage locations."
enum MosaicStorageLocationQuerySortByField {
    "Field Name."
    NAME
}

"Status of Mosaic Store Connection."
enum MosaicStoreConnectionStatus {
    "Unable to determine the connection status right now."
    STATUS_UNAVAILABLE
    "Store is connected with Mosaic."
    STORE_CONNECTED
    "Store is disconnected with Mosaic."
    STORE_DISCONNECTED
}

enum MosaicStoreObjectStoreType {
    MOSAIC_STORE_OBJECT_STORE_TYPE_AZURE_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_GS_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_NFS_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_S3_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_SWIFT_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_VFS_STORE
}

"Type of storage location."
enum MosaicStoreType {
    "Microsoft Azure Store."
    AZURE_STORE
    "Google Cloud Store."
    GS_STORE
    "NFS Store."
    NFS_STORE
    "AWS S3 Store."
    S3_STORE
    "Store Type is not available for this store."
    TYPE_UNAVAILABLE
}

"Version state of NoSQL protection version object."
enum MosaicVersionObjectVersionState {
    "Specifies that the version state of NoSQL protection version object is data copied."
    MOSAIC_VERSION_OBJECT_VERSION_STATE_DATA_COPIED
    "Specifies that the version state of NoSQL protection version object is replayed."
    MOSAIC_VERSION_OBJECT_VERSION_STATE_REPLAYED
}

"Mount state of the Managed Volume."
enum MountState {
    "Changing to read only mount state."
    CHANGING_TO_READ_ONLY
    "Changing to writable mount state."
    CHANGING_TO_WRITABLE
    "Invalid mount state."
    INVALID
    "Read only mount state."
    READ_ONLY
    "Writable mount state."
    WRITABLE
}

"""

Supported in v5.2+
The type of the backup.
"""
enum MssqlBackupType {
    MSSQL_BACKUP_TYPE_LOG
    MSSQL_BACKUP_TYPE_SNAPSHOT
}

"""

Supported in v5.0+
Effective CBT host status.
"""
enum MssqlCbtEffectiveStatusType {
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF_DEFAULT
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON_DEFAULT
}

"""

Supported in v5.0+
CBT host support status.
"""
enum MssqlCbtStatusType {
    MSSQL_CBT_STATUS_TYPE_DEFAULT
    MSSQL_CBT_STATUS_TYPE_DISABLED
    MSSQL_CBT_STATUS_TYPE_ENABLED
}

"""

Supported in v5.0+
File type of a database file.
"""
enum MssqlDatabaseFileType {
    MSSQL_DATABASE_FILE_TYPE_DATA
    MSSQL_DATABASE_FILE_TYPE_FILESTREAM
    MSSQL_DATABASE_FILE_TYPE_LOG
}

"Filter for MSSQL database Live Mount results."
enum MssqlDatabaseLiveMountFilterField {
    "Cluster UUID filter field for MSSQL database Live Mount results."
    CLUSTER_UUID
    """

    Mounted database name filter field for MSSQL database Live Mount
    results.
    """
    MOUNTED_DATABASE_NAME
    """

    Organization ID filter field for MSSQL database Live Mount
    results.
    """
    ORG_ID
    """

    Source database ID filter field for MSSQL database Live Mount
    results.
    """
    SOURCE_DATABASE_ID
}

"Parameters to sort MSSQL database Live Mount results."
enum MssqlDatabaseLiveMountSortByField {
    """

    Creation date sort by field for MSSQL database
    Live Mount results.
    """
    CREATION_DATE
    """

    Mounted database name sort by field for MSSQL database
    Live Mount results.
    """
    MOUNTED_DATABASE_NAME
}

"""

Supported in v5.1+
Recovery model for a SQL Server database.
"""
enum MssqlDatabaseRecoveryModel {
    MSSQL_DATABASE_RECOVERY_MODEL_BULK_LOGGED
    MSSQL_DATABASE_RECOVERY_MODEL_FULL
    MSSQL_DATABASE_RECOVERY_MODEL_SIMPLE
}

enum MssqlDbReplicaAvailabilityInfoRole {
    MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_PRIMARY
    MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_RESOLVING
    MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_SECONDARY
}

enum MssqlDbReplicaRecoveryModel {
    MSSQL_DB_REPLICA_RECOVERY_MODEL_BULK_LOGGED
    MSSQL_DB_REPLICA_RECOVERY_MODEL_FULL
    MSSQL_DB_REPLICA_RECOVERY_MODEL_SIMPLE
}

enum MssqlDbSummaryRecoveryModel {
    MSSQL_DB_SUMMARY_RECOVERY_MODEL_BULK_LOGGED
    MSSQL_DB_SUMMARY_RECOVERY_MODEL_FULL
    MSSQL_DB_SUMMARY_RECOVERY_MODEL_SIMPLE
}

"""

Supported in v5.0+
v5.0-v5.2: Secondary database states for log shipping configurations which have a status of OK.
v5.3+: Secondary database states for log shipping configurations with a status of OK.
"""
enum MssqlLogShippingOkState {
    MSSQL_LOG_SHIPPING_OK_STATE_RESTORING
    MSSQL_LOG_SHIPPING_OK_STATE_STANDBY
}

"""

Supported in v5.0+
v5.0-v5.2: Status of a log shipping configuration.
v5.3: Status of the log shipping configuration. One of:
v6.0+: Status of the log shipping configuration.
"""
enum MssqlLogShippingStatus {
    MSSQL_LOG_SHIPPING_STATUS_BROKEN
    MSSQL_LOG_SHIPPING_STATUS_INITIALIZING
    MSSQL_LOG_SHIPPING_STATUS_OK
    MSSQL_LOG_SHIPPING_STATUS_STALE
}

"Filter for MSSQL log shipping target results."
enum MssqlLogShippingTargetFilterField {
    "Cluster UUID filter field for MSSQL log shipping target results."
    CLUSTER_UUID
    """

    Primary DB CDM ID filter field for MSSQL log shipping
    target results.
    """
    PRIMARY_DB_ID
    """

    Primary name filter field for MSSQL log shipping
    target results.
    """
    PRIMARY_NAME
    """

    Secondary name filter field for MSSQL log shipping
    target results.
    """
    SECONDARY_NAME
    "Cluster filter field for MSSQL log shipping target results."
    STATUS
}

"Parameters to sort MSSQL log shipping target results."
enum MssqlLogShippingTargetSortByField {
    """

    Last applied point sort by field for MSSQL log shipping target
    results.
    """
    LAST_APPLIED_POINT
    "Location sort by field for MSSQL log shipping target results."
    LOCATION
    """

    Primary  name sort by field for MSSQL log shipping target
    results.
    """
    PRIMARY_NAME
    """

    Secondary name sort by field for MSSQL log shipping target
    results.
    """
    SECONDARY_NAME
}

enum MssqlRootPropertiesRootType {
    MSSQL_ROOT_PROPERTIES_ROOT_TYPE_HOST
    MSSQL_ROOT_PROPERTIES_ROOT_TYPE_MSSQL_AVAILABILITY_GROUP
    MSSQL_ROOT_PROPERTIES_ROOT_TYPE_WINDOWS_CLUSTER
}

"""

Supported in v5.0
Unprotectable type
"""
enum MssqlUnprotectableType {
    MSSQL_UNPROTECTABLE_TYPE_INSUFFICIENT_PERMISSIONS
}

"Organization name validity."
enum NameValidity {
    "Name already exists."
    ALREADY_EXISTS
    "Illegal name."
    ILLEGAL
    "Name validity unknown."
    UNKNOWN
    "Name is valid."
    VALID
}

"NAS System connection status."
enum NasSystemConnectivityStatus {
    "NAS System is connected."
    CONNECTED
    "NAS System is connecting."
    CONNECTING
    "NAS System connector not deployed."
    CONNECTOR_NOT_DEPLOYED
    "NAS System is deleted."
    DELETED
    "NAS System is being deleted."
    DELETING
    "NAS System is disconnected."
    DISCONNECTED
    "NAS System is partially connected."
    PARTIALLY_CONNECTED
    "NAS System is refreshing."
    REFRESHING
    "NAS System is connected as a replication target."
    REPLICATION_TARGET
    "NAS System is connected as a secondary cluster."
    SECONDARY_CLUSTER
    "Unknown NAS System Connectivity."
    UNKNOWN_CONNECTIVITY_STATUS
}

"""

Supported in v5.2+
NAS Vendor Type.
"""
enum NasVendorType {
    NAS_VENDOR_TYPE_FLASHBLADE
    NAS_VENDOR_TYPE_GENERIC
    NAS_VENDOR_TYPE_ISILON
    NAS_VENDOR_TYPE_NETAPP
    NAS_VENDOR_TYPE_NUTANIX
}

enum NetworkAdapterType {
    E1000
    E1000E
    PCNET32
    VMXNET
    VMXNET2
    VMXNET3
}

"""

Supported in v5.0+
Type of network interfaces.
"""
enum NetworkInterfaceType {
    NETWORK_INTERFACE_TYPE_DATA
    NETWORK_INTERFACE_TYPE_MANAGEMENT
    NETWORK_INTERFACE_TYPE_OTHER
    NETWORK_INTERFACE_TYPE_SERVICE
}

enum NetworkProtocolTypeEnum {
    TCP
    UDP
}

"""

Supported in v5.0+
v5.0-v5.3: Resource types that support network throttling
v6.0+: Resource types that support network throttling.
"""
enum NetworkThrottleResourceId {
    NETWORK_THROTTLE_RESOURCE_ID_ARCHIVAL_EGRESS
    NETWORK_THROTTLE_RESOURCE_ID_REPLICATION_EGRESS
}

enum NetworkType {
    DHCP
    STATIC
}

"Describes the failure handling if the backup script fails."
enum NutanixBackupScriptFailureHandling {
    "Backup is aborted if the script fails."
    ABORT
    "Backup ignores the failure and continue even if the script fails."
    CONTINUE
    "Backup script failure handling is unknown."
    UNKNOWN_FAILURE_HANDLING
}

"Filters for Nutanix virtual machine live mount results."
enum NutanixLiveMountFilterField {
    "Filter the results by UUID of the Rubrik cluster."
    CLUSTER_UUID
    """

    Filter is not specified. Any filter text will
    not be considered.
    """
    FIELD_UNSPECIFIED
    "Filter the results by name of the live mount."
    MOUNT_NAME
    """

    Filter the results by Organization ID of the original
    virtual machine.
    """
    ORG_ID
    """

    Filter the results by CDM ID of the original
    virtual machine.
    """
    SOURCE_VM_CDMID
}

"Sort by fields for Nutanix virtual machine live mount results."
enum NutanixLiveMountSortByField {
    "Sort by Cluster Name."
    CLUSTER_NAME
    "Sort by Mount Creation Date."
    CREATION_DATE
    """

    Sort by field is not specified.
    Any filter text would not be considered.
    """
    FIELD_UNSPECIFIED
    "Sort by Mount Name."
    MOUNT_NAME
}

"Nutanix Virtual Machine snapshot consistency mandate."
enum NutanixSnapshotConsistencyMandate {
    "Application consistent."
    APP_CONSISTENT
    "Automatic."
    AUTOMATIC
    "Crash consistent."
    CRASH_CONSISTENT
}

enum NutanixVirtualMachineScriptDetailFailureHandling {
    NUTANIX_VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_ABORT
    NUTANIX_VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_CONTINUE
}

"Nutanix virtual machine agent connection status."
enum NutanixVmAgentConnectionStatus {
    "Agent is connected."
    CONNECTED
    "Agent is disconnected."
    DISCONNECTED
    "Connection status is unknown."
    FIELD_UNSPECIFIED
    "Agent is registered as secondary."
    SECONDARY_CLUSTER
    "Agent is not registered."
    UNREGISTERED
}

"Type of O365 app."
enum O365AppType {
    "Identifies Unknown App."
    APP_TYPE_UNSPECIFIED
    "Identifies the Azure AD App used for managing resources in customer's Azure account."
    AZURE
    "Identifies the Azure AD App used for managing resources in customer's Azure Gov account."
    AZUREGOV
    "Identifies the Azure AD app used by Exchange to interact with the customer's O365 account."
    EXCHANGE
    "Identifies the Azure AD app used by refresh operation for the customer's M365 account."
    M365MGMT
    "Identifies the Azure AD app used by Onedrive to interact with the customer's O365 account."
    ONEDRIVE
    "Identifies the Azure AD app used by Sharepoint to interact with customer's O365 account."
    SPOINT
    "Identifies the Azure AD app used by Teams to interact with customer's O365 account."
    TEAMS
}

"Cloud type for Azure storage account."
enum O365AzureCloudType {
    "Public cloud."
    PUBLIC
    "US Gov cloud."
    USGOV
}

"Object type to constrain search against."
enum O365CalendarSearchObjectType {
    "Search all."
    ALL
    "Search for calendars only."
    CALENDAR
    "Search for calendar events only."
    EVENT
}

"Object type of the configured group member."
enum O365ConfiguredGroupMemberType {
    "SharePoint site."
    SITE
    "SharePoint team."
    TEAM
    "Unknown member type."
    UNKNOWN
}

"Object type to constrain the search against."
enum O365ContactsSearchObjectType {
    "Search all."
    ALL
    "Search contacts only."
    CONTACT
    "Search contact folders only."
    CONTACT_FOLDER
}

"Type of an O365 Group."
enum O365GroupType {
    "AD Group."
    AD_GROUP
    "Configured Group."
    CONFIGURED_GROUP
    "Unknown group type."
    UNTYPED_GROUP
}

"Recover task type i.e Restore/Export."
enum O365RestoreActionType {
    "Used for export task."
    EXPORT_SNAPPABLE
    "Used for restore task."
    RESTORE_SNAPPABLE
}

"Status of o365 service account."
enum O365ServiceAccountStatus {
    "Service account is invalid."
    INVALID
    "Service account not configured."
    NOT_CONFIGURED
    "Service account is valid."
    VALID
}

"Service status of o365."
enum O365ServiceStatusIndication {
    "Service is down."
    DOWN
    "Service is online."
    ONLINE
}

enum ObjectPolicyStatus {
    STALE
    UNKNOWN
    UP_TO_DATE
}

enum ObjectTypeEnum {
    AZURE_SQL_DATABASE_DB
    AZURE_SQL_MANAGED_INSTANCE_DB
    AppBlueprint
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeVm
    "Cassandra Column Family."
    CASSANDRA_COLUMN_FAMILY
    "Cassandra Keyspace."
    CASSANDRA_KEYSPACE
    "Cassandra Source."
    CASSANDRA_SOURCE
    Db2Database
    Ec2Instance
    "Exchange Database."
    ExchangeDatabase
    Fileset
    GcpNativeDisk
    GcpNativeGCEInstance
    Hdfs
    HypervVirtualMachine
    KuprNamespace
    LinuxFileset
    "MongoDB Collection."
    MONGODB_COLLECTION
    "MongoDB Database."
    MONGODB_DATABASE
    "MongoDB Source Cluster."
    MONGODB_SOURCE
    "Managed Volume."
    ManagedVolume
    Mssql
    MssqlDatabaseBatchMaintenance
    NAS_FILESET
    NutanixVirtualMachine
    O365Calendar
    O365File
    O365Mailbox
    O365Onedrive
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Teams
    ORACLE_DATA_GUARD_GROUP
    OracleDatabase
    RubrikEbsVolume
    RubrikEc2Instance
    SapHanaDatabase
    ShareFileset
    SnapMirrorCloud
    StorageArrayVolumeGroup
    VcdVapp
    VmwareVirtualMachine
    VolumeGroup
    WindowsFileset
    WindowsVolumeGroup
}

"Search keyword type."
enum OnedriveSearchKeywordType {
    "Search by file type."
    FILE_TYPE
    "Search by file or folder name."
    NAME
}

"Object type to constrain the search against."
enum OnedriveSearchObjectType {
    "Search all."
    ALL
    "Search folders only."
    O365_FOLDER
    "Search files only."
    ONEDRIVE_FILE
}

enum OpenAccessType {
    EXPLICIT
    INHERITED
    NOT_OPEN
    UNKNOWN_ACCESS
}

"Operations defined in the RBAC system."
enum Operation {
    ADD_AWS_CLOUD_ACCOUNT
    ADD_AZURE_CLOUD_ACCOUNT
    ADD_CLUSTER
    "Add nodes to the cluster."
    ADD_CLUSTER_NODES
    ADD_GCP_CLOUD_ACCOUNT
    ADD_INVENTORY
    ADD_STORAGE_SETTINGS
    ALLOW_SUPPORT_USER_SESSIONS
    CANCEL_RUNNING_ACTIVITY
    CATEGORY_MANAGE_DATA_SOURCE
    CATEGORY_PROTECTION
    CATEGORY_RECOVERY
    CATEGORY_VIEW_DATA_SOURCE
    CONFIGURE_DATA_CLASS_GLOBAL
    CREATE_REPORT
    CREATE_SLA
    CREATE_THREAT_HUNT
    DELETE_AWS_CLOUD_ACCOUNT
    DELETE_AZURE_CLOUD_ACCOUNT
    DELETE_GCP_CLOUD_ACCOUNT
    DELETE_INVENTORY
    DELETE_REPORT
    DELETE_SLA
    DELETE_SNAPSHOT
    DELETE_STORAGE_SETTINGS
    DOWNLOAD
    DOWNLOAD_FROM_ARCHIVAL_LOCATION
    DOWNLOAD_SNAPSHOT_FROM_REPLICATION_TARGET
    EDIT_AWS_CLOUD_ACCOUNT
    EDIT_AZURE_CLOUD_ACCOUNT
    EDIT_CDM_NETWORK_SETTING
    EDIT_CDM_SUPPORT_SETTING
    EDIT_CDM_SYS_CONFIG
    EDIT_GCP_CLOUD_ACCOUNT
    EDIT_NETWORK_THROTTLE_SETTINGS
    EDIT_ORGANIZATION
    EDIT_QUARANTINE
    EDIT_REPLICATION_SETTINGS
    EDIT_SECURITY_SETTINGS
    EDIT_STORAGE_SETTINGS
    EDIT_SYSTEM_PREFERENCE
    EDIT_USER_MANAGEMENT
    EXPORT
    EXPORT_DATA_CLASS_GLOBAL
    EXPORT_FILES
    EXPORT_SNAPSHOTS
    INSTANT_RECOVER
    MANAGE_ACCESS
    "The operation to manage CDP IO Filter."
    MANAGE_CDP_IO_FILTER
    "Manage certificates and certificate signing requests."
    MANAGE_CERTIFICATE
    "Set up or remove disks on a cluster."
    MANAGE_CLUSTER_DISKS
    "Edit cluster settings."
    MANAGE_CLUSTER_SETTINGS
    MANAGE_DATA_SOURCE
    MANAGE_LEGAL_HOLD
    MANAGE_PROTECTION
    MANAGE_SLA
    "The operation to manage the SMB domain."
    MANAGE_SMB_DOMAIN
    MANAGE_WEBHOOKS
    MODIFY_CLUSTER
    MODIFY_INVENTORY
    MODIFY_REPORT
    MODIFY_SLA
    MOUNT
    PROVISION_ON_INFRASTRUCTURE
    RECOVER_FROM_QUARANTINE
    REFRESH_DATA_SOURCE
    REMOVE_CLUSTER
    "Remove nodes from the cluster."
    REMOVE_CLUSTER_NODES
    "Operation to Resize Managed Volume."
    RESIZE_MANAGED_VOLUME
    RESTORE
    RESTORE_TO_ORIGIN
    TAKE_ON_DEMAND_SNAPSHOT
    TOGGLE_BLACKOUT_WINDOW
    TRANSFER_ACCOUNT_OWNERSHIP
    UPDATE_ACCOUNT_OWNERSHIP
    UPGRADE_CLUSTER
    VIEW_ACCESS
    VIEW_AUDIT_LOG
    VIEW_AWS_CLOUD_ACCOUNT
    VIEW_AZURE_CLOUD_ACCOUNT
    VIEW_CDM_NETWORK_SETTING
    VIEW_CDM_SUPPORT_SETTING
    VIEW_CDM_SYS_CONFIG
    "View certificates and certificate signing requests."
    VIEW_CERTIFICATE
    VIEW_CLUSTER
    VIEW_DASHBOARD
    VIEW_DATA_CLASS_GLOBAL
    "View account-wide data security risk metrics, scores, and recommendations."
    VIEW_DATA_SECURITY_DETAILS
    VIEW_GCP_CLOUD_ACCOUNT
    VIEW_INVENTORY
    VIEW_INVENTORY_WITH_HIERARCHY
    VIEW_NON_SYSTEM_EVENT
    VIEW_ORGANIZATION
    VIEW_REPLICATION_SETTINGS
    VIEW_REPORT
    VIEW_SECURITY_SETTINGS
    VIEW_SLA
    "The operation to view the SMB domain."
    VIEW_SMB_DOMAIN
    VIEW_STORAGE_SETTINGS
    VIEW_SYSTEM_EVENT
    VIEW_SYSTEM_PREFERENCE
    VIEW_THREAT_HUNT_RESULTS
    VIEW_USER_MANAGEMENT
    VIEW_WEBHOOKS
}

"Filter for Oracle Live Mount results."
enum OracleLiveMountFilterField {
    "Cluster UUID filter for Oracle Live Mount results."
    CLUSTER_UUID
    "Name filter for the Oracle Live Mount results."
    NAME
    "Organization ID filter for the Oracle Live Mount results."
    ORG_ID
    "Source Database ID filter for Oracle Live Mount results."
    SOURCE_DATABASE_ID
    "Filter is not specified. Any filter text would not be considered."
    UNSPECIFIED
}

"Sort by parameters for Oracle Live Mounts."
enum OracleLiveMountSortByField {
    "Sort by the creation date of the Oracle Live Mount."
    CREATION_DATE
    "Sort by the name of the Oracle Live Mount."
    NAME
    "Sort by the source database name of the Oracle Live Mount."
    SOURCE_DATABASE_NAME
    """

    Sort by field is not specified. Any sort by text would
    not be considered.
    """
    UNSPECIFIED
}

"Status of the Oracle Live Mount."
enum OracleLiveMountStatus {
    "Oracle Live Mount is available."
    AVAILABLE
    "Oracle Live Mount is mounting."
    MOUNTING
    "Oracle Live Mount is unavailable."
    UNAVAILABLE
    "Oracle Live Mount is unmounting."
    UNMOUNTING
}

"Open mode of an Oracle Pluggable Database (PDB)."
enum OraclePdbOpenMode {
    "Oracle PDB is in open migrate mode."
    MIGRATE
    "Oracle PDB is in mounted mode."
    MOUNTED
    "Oracle PDB is in open read-only mode."
    READ_ONLY
    "Oracle PDB is in open read/write mode."
    READ_WRITE
    "Open mode is unknown."
    UNKNOWN_OPEN_MODE
}

"Fields in an organization."
enum OrgField {
    "Full name of the organization."
    FULL_NAME
    "Name of the organization."
    NAME
}

"Status of the M365 org."
enum OrgStatus {
    "Org is in active state."
    ACTIVE
    "Org is in deleted state."
    DELETED
    "Org is being deleted."
    DELETING
    "Org is in refresh stage."
    REFRESHING
}

"Type of the Operating System."
enum OsType {
    "Linux Operating System."
    LINUX
    "An Operating System other than Linux or Windows."
    OTHER
    "The Operating System is not defined."
    UNDEFINED
    "Windows Operating System."
    WINDOWS
}

enum PastDurationEnum {
    NONE
    PAST_12_MONTHS
    PAST_24_HOURS
    PAST_30_DAYS
    PAST_3_DAYS
    PAST_7_DAYS
}

"Pause Status of the SLA."
enum PauseStatus {
    "SLA not paused."
    NOT_PAUSED
    "SLA paused."
    PAUSED
    "Unknown Status."
    UNKNOWN
}

enum PendingActionGroupTypeEnum {
    APP_FLOW
    ARCHIVAL_LOCATION
    CLOUD_ACCOUNTS
    GLOBAL_SLA
    REPLICATION
    UNMANAGED_OBJECTS
}

enum PendingActionStatus {
    FAILED
    IN_PROGRESS
    QUEUED
    SUCCEEDED
    SYNCED_TO_CDM
}

enum PendingActionSubGroupTypeEnum {
    ADD_CLUSTER_AS_REPLICATION_TARGET
    ARCHIVAL_LOCATION_DELETE
    ARCHIVAL_LOCATION_DISABLE
    ARCHIVAL_LOCATION_ENABLE
    ARCHIVAL_LOCATION_PAUSE
    ARCHIVAL_LOCATION_RESUME
    AWS_COMPUTE_SETTING_UPSERT
    AWS_IAM_CUSTOMER_ACCOUNT_UPSERT
    AWS_ROLE_BASED_ARCHIVAL_LOCATION
    BLUEPRINT_CREATE
    BLUEPRINT_DELETE
    BLUEPRINT_DEPRECATE
    BLUEPRINT_UPDATE
    CLUSTER_PEER_TOKEN_GET
    CLUSTER_PEER_TOKEN_GET_AND_SET
    CLUSTER_PEER_TOKEN_SET
    DISABLE_REPLICATION_LOCATION_PUT
    ENABLE_LOCATION_AS_REPLICATION_TARGET
    ENABLE_POLARIS_AS_REPLICATION_SOURCE
    GLOBAL_SLA_ASSIGN
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPPABLE
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT_V2
    GLOBAL_SLA_DELETE
    GLOBAL_SLA_PUT
    NFS_LOCATION_PUT
    NFS_LOCATION_READER_POST
    OBJECT_STORE_LOCATION_PUT
    OBJECT_STORE_LOCATION_READER_POST
    S3COMPATIBLE_LOCATION_PUT
    S3COMPATIBLE_LOCATION_READER_POST
    UNMANAGED_OBJECT_DELETE_SNAPSHOTS
    UNMANAGED_OBJECT_DELETE_SNAPSHOTS_OF_OBJECT
}

"Sync Location for Pending Actions."
enum PendingActionSyncType {
    "The target of the pending action is CDM."
    CDM
    "The target of the pending action is Cloud Direct."
    CLOUD_DIRECT
    "The target of the pending action can be derived from the pending action."
    DERIVED
    "The target of the pending action is Mosaic."
    MOSAIC
    "The target of the pending action is RSC."
    POLARIS
}

enum PlanName {
    ISOLATED_RECOVERY
    PROD
    PROD_LOCAL
    TEST
}

"Rubrik SaaS authorized operations."
enum PolarisObjectAuthorizedOperationsEnum {
    MANAGE_DATA_SOURCE
    MANAGE_PROTECTION
    REFRESH_DATA_SOURCE
    VIEW_INVENTORY
}

"All valid report views."
enum PolarisReportViewType {
    "The object capacity over time report."
    OBJECT_CAPACITY_OVERTIME_REPORT
    "The protection tasks detail report."
    PROTECTION_TASKS_DETAIL_REPORT
    "The report view type is unspecified."
    REPORT_UNSPECIFIED
}

enum PolarisSnappableAuthorizedOperationsEnum {
    DELETE_SNAPSHOT
    DOWNLOAD
    EXPORT_SNAPSHOTS
    MANAGE_PROTECTION
    RESTORE_TO_ORIGIN
    TAKE_ON_DEMAND_SNAPSHOT
    VIEW_INVENTORY
}

enum PolarisSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum PolarisSnapshotSortByEnum {
    Date
    SnappableId
    SnapshotId
}

"Fields to sort the policy detail entries."
enum PolicyDetailsSortBy {
    "Sort field not specified."
    SORT_UNSPECIFIED
    "Sort by workload name."
    WORKLOAD_NAME
}

enum PolicyObjectFilter {
    ALL
    HAS_OBJECTS
    NO_OBJECTS
}

enum PrePostScriptFailureHandlingEnum {
    abort
    continue
}

"Represents upgrade precheck status."
enum PrechecksStatusTypeEnum {
    "Precheck failed."
    PrechecksFailureError
    "Precheck succeeded but has warnings."
    PrechecksFailureWarning
    "Precheck is in progress."
    PrechecksRunning
    "Precheck success."
    PrechecksSuccess
    "Unknown precheck status."
    Unknown
}

enum PrincipalTypeEnum {
    CLIENT
    GROUP
    UNKNOWN
    USER
}

"Private endpoint connection status for an RCV archival location."
enum PrivateEndpointConnectionStatus {
    "RCV private endpoint connection is in approved state."
    APPROVED
    "RCV private endpoint connection is in pending state."
    PENDING
    "RCV private endpoint connection is in rejected state."
    REJECTED
    "RCV private endpoint connection is in removed state."
    REMOVED
    "Not specified RCV private endpoint connection."
    UNSPECIFIED_PE_CONNECTION_STATUS
}

"Represents a licensed product."
enum Product {
    "Represents a Cloud Cluster product."
    CLOUD
    "Represents an E1000 product."
    E1000
    "Represents a Rubrik Edge product."
    EDGE
    "Represents an RSC product."
    FREE_RSC
    "Represents an unknown product."
    PRODUCT_UNKNOWN
    "Represents a Rubrik Appliance product."
    RUBRIK_APPLIANCE
    "Represents a Rubrik Virtual Cluster product."
    RVC
    "Represents a Scale product."
    SCALE
    "Represents a third party hardware product."
    THIRDPARTY_HARDWARE
}

"Type of the product documentation."
enum ProductDocumentationType {
    "Concept."
    CONCEPT
    "Reference."
    REFERENCE
    "Task."
    TASK
    "Unspecified."
    TYPE_UNSPECIFIED
}

"Name of product."
enum ProductName {
    "AppFlows."
    APPFLOWS
    "Cloud Cluster ES."
    CC_ES
    "CloudNative."
    CLOUDNATIVE
    "GPS."
    GPS
    "Kubernetes protection."
    KUBERNETES
    "NoSQL protection."
    NOSQL
    "O365."
    O365
    "Radar."
    RADAR
    "Rubrik Cloud Vault (RCV)."
    RCV
    "Rubrik Data Protection (RDP)."
    RDP
    "Saphana."
    SAPHANA
    "Sonar."
    SONAR
    "Unknown name."
    UNSPECIFIED_NAME
}

"State of product."
enum ProductState {
    "Product failed to activate."
    ACTIVATION_FAILED
    "Product is in activation."
    ACTIVATION_PENDING
    "Active product."
    ACTIVE
    "Disabled Product."
    DISABLED
    "Product couldn't be disabled."
    DISABLE_FAILED
    "Product is being disabled."
    DISABLE_PENDING
    "Product has been selected for expiration, but somehow expiration failed."
    EXPIRATION_PENDING
    "Expired product."
    EXPIRED
    "Unknown state."
    UNSPECIFIED_STATE
}

"Type of product."
enum ProductType {
    "POC product."
    POC
    "Revenue product."
    REVENUE
    "Trial product."
    TRIAL
    "Unknown type."
    UNSPECIFIED_TYPE
}

"Protection status of an object."
enum ProtectionStatusEnum {
    "Do not protect."
    DoNotProtect
    "No SLA Domain."
    NoSla
    "Protected."
    Protected
}

"The provider of the endpoint to which the webhook will be sent."
enum ProviderType {
    "A generic endpoint receives the webhook."
    CUSTOM
    "A PagerDuty endpoint receives the webhook."
    PAGERDUTY
    "Unused default value."
    PROVIDER_TYPE_UNSPECIFIED
    "A Splunk endpoint receives the webhook."
    SPLUNK
}

"Provision status of o365 subscription."
enum ProvisionStatus {
    "Organization is active to use."
    ACTIVE
    "Organization is deleted."
    DELETED
    "Organization is being deleted."
    DELETING
    "Organization is being refreshed."
    REFRESHING
}

"Proxy protocol type."
enum ProxyProtocol {
    "HTTP."
    HTTP
    "HTTPS."
    HTTPS
    "UNSPECIFIED."
    PROTOCOL_UNSPECIFIED
    "SOCKS5."
    SOCKS5
}

"Filters based on the quarantine state."
enum QuarantineFilter {
    "Include only quarantined entries."
    INCLUDE_ONLY_QUARANTINE
}

"Parameters that specify the sort order of the query results."
enum QueryVcdClusterRequestSortBy {
    "Sort results by vCD name."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_SORT_BY_NAME
    "Sort results by vCD status."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_SORT_BY_STATUS
}

"Parameters to sort the query results."
enum QueryVcdClusterRequestSortOrder {
    "Sort by ascending order."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_SORT_ORDER_ASC
    "Sort by descending order."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_SORT_ORDER_DESC
}

"Request status of the vCD cluster."
enum QueryVcdClusterRequestStatus {
    "Filter for results when vCD status is badly configured."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_STATUS_BADLY_CONFIGURED
    "Filter for results when vCD status is connected."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_STATUS_CONNECTED
    "Filter for results when vCD status is deleting."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_STATUS_DELETING
    "Filter for results when vCD status is disconnected."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_STATUS_DISCONNECTED
    "Filter for results when vCD status is refreshing."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_STATUS_REFRESHING
    "Filter for results when vCD status is remote."
    V1_QUERY_VCD_CLUSTER_V1_REQUEST_STATUS_REMOTE
}

"Parameters that specify the sort order of the query results."
enum QueryVcdVimServerRequestSortBy {
    "Sort results by VIM server name."
    V1_QUERY_VCD_VIM_SERVER_V1_REQUEST_SORT_BY_NAME
    "Sort results by VIM server status."
    V1_QUERY_VCD_VIM_SERVER_V1_REQUEST_SORT_BY_STATUS
}

"Parameters to sort the query results."
enum QueryVcdVimServerRequestSortOrder {
    "Sort by ascending order."
    V1_QUERY_VCD_VIM_SERVER_V1_REQUEST_SORT_ORDER_ASC
    "Sort by descending order."
    V1_QUERY_VCD_VIM_SERVER_V1_REQUEST_SORT_ORDER_DESC
}

"Entities on which ransomware investigation can be enabled."
enum RansomwareInvestigationEnablementEntity {
    "CDM Cluster."
    CDM_CLUSTER
    "Microsoft 365 subscription."
    MICROSOFT_365
    "Rubrik Cloud Vault."
    RCV
    "Unknown entity type."
    UNKNOWN
}

"Group ransomware results by field."
enum RansomwareResultGroupBy {
    "The unique ID of the cluster."
    CLUSTER_UUID
    "The managed ID of the object."
    MANAGED_ID
    "The day the snapshot was taken."
    SNAPSHOT_DAY
    "The hour the snapshot was taken."
    SNAPSHOT_HOUR
    "The month the snapshot was taken."
    SNAPSHOT_MONTH
    "The week the snapshot was taken."
    SNAPSHOT_WEEK
    "The year the snapshot was taken."
    SNAPSHOT_YEAR
}

"Sort ransomware results by field."
enum RansomwareResultSortBy {
    "The unique ID of the cluster."
    CLUSTER_UUID
    "The probability of encryption."
    ENCRYPTION_PROBABILITY
    "Is the snapshot encrypted."
    IS_ENCRYPTED
    "The managed ID of the object."
    MANAGED_ID
    "The date of the snapshot."
    SNAPSHOT_DATE
    "The ID of the snapshot."
    SNAPSHOT_ID
    "The ID of the object."
    WORKLOAD_ID
}

"Consumption stats metric name for Rubrik Cloud Storage Archival Location."
enum RcsConsumptionMetricNameType {
    "Blob capacity and Forecasted Blob capacity consumption stats for Rubrik Cloud Storage Archival Location."
    BLOB_CAPACITY
    "Egress and ingress capacity consumption stats for Rubrik Cloud Storage Archival Location."
    EGRESS_INGRESS
}

"Consumption stats metric name for Rubrik Cloud Storage Archival Location."
enum RcsConsumptionMetricOutputNameType {
    "Blob capacity consumption stats for Rubrik Cloud Storage Archival Location."
    BLOB_CAPACITY
    "Egress capacity consumption stats for Rubrik Cloud Storage Archival Location."
    EGRESS
    "Forecasted blob capacity consumption stats for Rubrik Cloud Storage Archival Location."
    FORECASTED_BLOB_CAPACITY
    "Ingress capacity consumption stats for Rubrik Cloud Storage Archival Location."
    INGRESS
}

"Regions for Rubrik Cloud Storage Archival Location."
enum RcsRegionEnumType {
    "Asia East or Hong Kong."
    ASIA_EAST
    "Asia Southeast or Singapore."
    ASIA_SOUTHEAST
    "Australia East or New South Wales."
    AUSTRALIA_EAST
    "Canada East or Quebec City."
    CANADA_EAST
    "Europe north or Netherlands."
    EUROPE_NORTH
    "Europe west or Ireland."
    EUROPE_WEST
    "Germany West Central or Frankfurt."
    GERMANY_WEST_CENTRAL
    "Gov US Arizona or US Gov Arizona."
    GOV_US_ARIZONA
    "Gov US Virginia or US Gov Virginia."
    GOV_US_VIRGINIA
    "India South or Chennai."
    INDIA_SOUTH
    "Japan East or Tokyo."
    JAPAN_EAST
    "Norway East or Oslo."
    NORWAY_EAST
    "South Africa North or Johannesburg."
    SOUTH_AFRICA_NORTH
    "Switzerland North or Zurich."
    SWITZERLAND_NORTH
    "UAE North or Dubai."
    UAE_NORTH
    "UK South or London."
    UK_SOUTH
    "Rubrik Cloud Vault Azure region is unknown."
    UNKNOWN_AZURE_REGION
    "US central or Iowa."
    US_CENTRAL
    "US east 2 or Virginia."
    US_EAST_2
    "US west 2 or Washington."
    US_WEST_2
}

"Tiers for Rubrik Cloud Vault Archival Location."
enum RcsTierEnumType {
    "Archive tier for Rubrik Cloud Vault Archival Location."
    ARCHIVE
    "Backup tier for Rubrik Cloud Vault Archival Location."
    BACKUP
}

"Rubrik Cloud Vault (RCV) region bundle."
enum RcvRegionBundle {
    "Rubrik Cloud Vault (RCV) Region bundle 1."
    BUNDLE_1
    "Rubrik Cloud Vault (RCV) Region bundle 2."
    BUNDLE_2
}

"Retrieval method for reader archival locations."
enum ReaderRetrievalMethod {
    "Retrieval method that lists workloads as well as snapshots of each workload."
    OBJECT_LIST_AND_DETAILS
    "Retrieval method that lists only workloads."
    OBJECT_LIST_ONLY
    "Unknown retrieval method."
    UNKNOWN_RETRIEVAL_METHOD
}

"Specifies the recovery destination type."
enum RecoveryDestinationType {
    "Export snappable."
    EXPORT_SNAPPABLE
    "Unknown recovery destination."
    RECOVERY_DESTINATION_UNKNOWN
    "Restore to same workload ID."
    RESTORE_TO_SAME
}

"Recovery domain type."
enum RecoveryDomainType {
    "O365."
    O365
    "Unknown recovery domain."
    RECOVERY_DOMAIN_UNKNOWN
}

"Specifies bulk recovery mode."
enum RecoveryModeType {
    "Ad Hoc bulk recovery."
    AD_HOC
    "Unknown bulk recovery."
    RECOVERY_MODE_UNKNOWN
}

"Failover type."
enum RecoveryPlanFailoverType {
    "Production failover."
    PROD
    "Test failover."
    TEST
    "Unknown recovery plan type."
    UNKNOWN_RP_TYPE
}

"Location type."
enum RecoveryPlanLocationType {
    "AWS."
    LOCATION_TYPE_AWS
    "Azure."
    LOCATION_TYPE_AZURE
    "CDM."
    LOCATION_TYPE_CDM
    "GCP."
    LOCATION_TYPE_GCP
    "Unknown."
    LOCATION_TYPE_UNKNOWN
}

"Operation type."
enum RecoveryPlanOperationType {
    "Cleanup operation."
    CLEANUP_OPERATION
    "Failover operation."
    FAILOVER_OPERATION
    "Resume operation."
    RESUME_OPERATION
    "Unknown operation."
    UNKNOWN_OPERATION
}

"Recovery plan type."
enum RecoveryPlanType {
    "Cyber Recovery."
    CYBER_RECOVERY
    "Disaster Recovery."
    DISASTER_RECOVERY
    "In-Place Recovery."
    IN_PLACE_RECOVERY
    "Unknown recovery plan type."
    UNKNOWN_BLUEPRINT_TYPE
}

enum RecoverySpecType {
    AWS_EC2
    UNKNOWN_VM
    VMWARE_VM
}

"Workload Recovery Statuses."
enum RecoveryStatuses {
    "Cleaned up."
    CLEANED_UP
    "Failure."
    FAILURE
    "In Progress."
    IN_PROGRESS
    "Paused."
    PAUSED
    "Success."
    SUCCESS
    "Unspecified."
    UNKNOWN
}

"""

Supported in v5.0+
Status of the refreshable object. Possible values are "Disconnected" (no communication possible with object), "Refreshing" (able to communicate with object but has not refreshed yet), "Connected" (refreshed the metadata for the object), "BadlyConfigured" (object not configured correctly), "Deleting" (in process of removing the object), and "Remote" (replicated object that we should not connect to).
"""
enum RefreshableObjectConnectionStatusType {
    REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_BADLY_CONFIGURED
    REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_CONNECTED
    REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_DELETING
    REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_DISCONNECTED
    REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_REFRESHING
    REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_REMOTE
}

"Registered mode."
enum RegisteredMode {
    "Hybrid."
    REGISTERED_MODE_ENUM_HYBRID
    "Legacy."
    REGISTERED_MODE_ENUM_LEGACY
    "Life of device."
    REGISTERED_MODE_ENUM_LIFE_OF_DEVICE
    "Not registered."
    REGISTERED_MODE_ENUM_NOT_REGISTERED
    "Registered mode unknown."
    REGISTERED_MODE_ENUM_UNSPECIFIED
}

"Connection status of the replication pair."
enum ReplicationPairConnectionStatus {
    "Rubrik clusters are connected and replication is unpaused."
    REPLICATION_ACTIVE
    "Rubrik clusters are disconnected from each other."
    REPLICATION_DISCONNECTED
    "Replication is paused between the Rubrik clusters."
    REPLICATION_PAUSED
}

"Field to sort by for replication pairs."
enum ReplicationPairsQuerySortByField {
    "Active network throttle limit for source Rubrik Cluster."
    CURRENT_THROTTLE_LIMIT
    "Failed replication task count."
    FAILED_TASKS
    "Running replication task count."
    RUNNING_TASKS
    "Source Rubrik cluster name."
    SOURCE_CLUSTER_NAME
    "Connection status of the replication pair."
    STATUS
    "Storage consumed by replicated snapshots."
    STORAGE
    "Target Rubrik cluster name."
    TARGET_CLUSTER_NAME
}

"Replication setup type."
enum ReplicationSetupType {
    "Rubrik clusters connected using gateway configurations."
    NAT
    "Rubrik clusters connected using private IP addresses."
    PRIVATE
    "Unspecified default value."
    REPLICATION_SETUP_TYPE_UNSPECIFIED
}

"Type of replication."
enum ReplicationType {
    "Replication to cloud location."
    REPLICATION_TO_CLOUD_LOCATION
    "Replication to the cloud region."
    REPLICATION_TO_CLOUD_REGION
    "Unidirectional replication to the Rubrik CDM cluster."
    UNIDIRECTIONAL_REPLICATION_TO_CLUSTER
    "Replication type unknown."
    UNKNOWN_REPLICATION_TYPE
}

"ReportAttachmentType defines the attachment type for report emails."
enum ReportAttachmentType {
    "CSV attachment type for report emails."
    REPORT_ATTACHMENT_TYPE_CSV
    "PDF attachment type for report emails."
    REPORT_ATTACHMENT_TYPE_PDF
    "Unspecified attachment type."
    REPORT_ATTACHMENT_TYPE_UNSPECIFIED
}

enum ReportFocusEnum {
    Activity
    Anomaly
    Audit
    Capacity
    Compliance
    Failover
    Infrastructure
    Protection
    ProtectionTaskDetail
    RecoveryTaskDetail
    Sonar
    SonarContent
    TaskSummary
}

enum ReportTableColumnEnum {
    ActivityStatus
    ActivityType
    AnalyzersBreakdown
    AppBlueprintName
    ArchivalTarget
    ArchiveSnapshots
    ArchiveStorage
    BytesCreated
    BytesDeleted
    BytesModified
    BytesNetChanged
    Cluster
    ClusterLocation
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    DataTransferred
    DirectArchive
    Duration
    EncryptionEnabled
    EndDate
    EndTime
    FailoverStatus
    FailoverType
    FailureReason
    FileName
    FilesCreated
    FilesDeleted
    FilesModified
    IsAnomaly
    LastSnapshot
    LastTestStatus
    LastTestTime
    LastUpdated
    LocalSnapshots
    Location
    LogicalByte
    LogicalBytes
    MissedSnapshots
    NumCoveredObjects
    NumHighRiskLocations
    NumOfCanceled
    NumOfExpected
    NumOfFailed
    NumOfSucceeded
    NumViolatedFiles
    NumViolations
    ObjectName
    ObjectType
    Path
    PhysicalBytes
    PoliciesBreakdown
    PolicyName
    PolicyStatus
    PreviousSnapshotDate
    PreviousSnapshotId
    ProtectedVolume
    RecoveryPoint
    RecoveryPointType
    ReplicaSnapshots
    ReplicaStorage
    ReplicationSource
    ReplicationTarget
    Size
    SlaDomain
    SlaDomainName
    SnappableName
    SnapshotConsistency
    SnapshotDate
    SnapshotId
    SnapshotTime
    Source
    StartDate
    StartTime
    Status
    SuspiciousFilesAdded
    TargetSite
    TaskType
    TotalCapacity
    TotalFileTransferred
    TotalHits
    TotalSnapshots
    TransferredBytes
    UsedCapacity
    UserAuditStatus
    UserAuditType
    UserName
    WorkloadName
    WorkloadType
}

"The types of report versions."
enum ReportVersionType {
    "The New Generation report."
    NG_REPORT
    "The alpha version of the New Generation report."
    NG_REPORT_ALPHA
    "The old version of the report."
    OLD_REPORT
}

enum ResolutionType {
    RESOLVED_AD
    RESOLVED_ON_HOST
    UNRESOLVED
    WELL_KNOWN
}

"Resource specification type."
enum ResourceSpecType {
    "Instance resource specification type."
    INSTANCE
    "Template resource specification type."
    TEMPLATE
    "Unknown resource specification type."
    UNKNOWN_SPEC_TYPE
}

enum ResourceType {
    BLUEPRINT
    CLUSTER
    SNAPPABLE
}

"Unit of retention."
enum RetentionUnit {
    "Days."
    DAYS
    "Hours."
    HOURS
    "Minutes."
    MINUTES
    "Months."
    MONTHS
    "Quarter."
    QUARTERS
    "Weeks."
    WEEKS
    "Years."
    YEARS
}

enum RiskLevelType {
    HIGH_RISK
    LOW_RISK
    MEDIUM_RISK
    NO_RISK
    UNKNOWN_RISK
}

enum RoleFieldEnum {
    Name
}

"The different subtypes of an S3-compatible archival location."
enum S3CompatibleSubType {
    "Default subtype."
    DEFAULT
    "IbmCos subtype."
    IBMCOS
    "Scality subtype."
    SCALITY
    "Unknown subtype."
    TYPE_UNSPECIFIED
}

enum SLAAuditDetailFilterFieldEnum {
    USER_NAME
}

enum SMTPSecurityTypeEnum {
    NONE
    SSL
    STARTTLS
    TLS
}

"""

Supported in v6.0+
Data path of the SAP HANA BACKINT interface specifying the location where the BACKINT interface stores backups. Supported data path types are MANAGED_VOLUME, GCP, and LOCAL. MANAGED_VOLUME specifies a data path used by the BACKINT interface to store backups on an on-premises Rubrik CDM cluster. GCP specifies that backups are stored on Google Cloud Platform. LOCAL indicates the backup is stored locally.
"""
enum SapHanaDataPathType {
    "The type of SAP HANA datapath is GCP."
    SAP_HANA_DATA_PATH_TYPE_GCP
    "The type of SAP HANA datapath is local."
    SAP_HANA_DATA_PATH_TYPE_LOCAL
    "The type of SAP HANA datapath is Managed Volume."
    SAP_HANA_DATA_PATH_TYPE_MANAGED_VOLUME
}

"The encryption provider for the SAPA HANA system."
enum SapHanaEncryptionProvider {
    "Common Crypto."
    COMMON_CRYPTO
    "Encryption provider not set."
    EMPTY_VALUE
    "OpenSSL."
    OPENSSL
    "SAP Crypto."
    SAP_CRYPTO
}

"Represents the types of SAP HANA hosts."
enum SapHanaHostHostType {
    "SAP HANA host type is primary master."
    SAP_HANA_HOST_HOST_TYPE_MASTER
    "SAP HANA host type is secondary master."
    SAP_HANA_HOST_HOST_TYPE_SECONDARY_MASTER
    "SAP HANA host type is secondary slave."
    SAP_HANA_HOST_HOST_TYPE_SECONDARY_SLAVE
    "SAP HANA host type is primary slave."
    SAP_HANA_HOST_HOST_TYPE_SLAVE
}

"Fields for sorting SAP HANA log snapshots."
enum SapHanaLogSnapshotSortBy {
    "Sort SAP HANA log snapshots by date."
    DATE
}

"Fields for sorting SAP HANA recoverable ranges."
enum SapHanaRecoverableRangeSortBy {
    "Sort SAP HANA recoverable range by end time."
    END_TIME
    "Sort SAP HANA recoverable range by start time."
    START_TIME
}

"Represents the different SAP HANA SSL information encryption providers."
enum SapHanaSslInfoEncryptionProvider {
    "The SAP HANA SSL info encryption provider is common crypto."
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_COMMON_CRYPTO
    "The SAP HANA SSL info encryption provider is openssl."
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_OPENSSL
    "The SAP HANA SSL info encryption provider is SAP crypto."
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_SAP_CRYPTO
}

"SAP HANA system status."
enum SapHanaSystemStatus {
    "Error while connecting to SAP HANA system."
    ERROR
    "SAP HANA system is successfully connected."
    OK
    "SAP HANA system is in the connecting stage."
    UNKNOWN_SYSTEM_STATUS
    "SAP HANA system is connected with warnings."
    WARNING
}

"Represents the SAP HANA system container types."
enum SapHanaSystemSummaryContainerType {
    "The type of SAP HANA system is multi-container."
    SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_MULTI_CONTAINER
    "The type of SAP HANA system is single container."
    SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_SINGLE_CONTAINER
}

"Represents the SAP HANA system status."
enum SapHanaSystemSummaryStatus {
    "The SAP HANA system is in ERROR state."
    SAP_HANA_SYSTEM_SUMMARY_STATUS_ERROR
    "The SAP HANA system is in OK state."
    SAP_HANA_SYSTEM_SUMMARY_STATUS_OK
    "The SAP HANA system is in UNKNOWN state."
    SAP_HANA_SYSTEM_SUMMARY_STATUS_UNKNOWN
    "The SAP HANA system is in WARNING state."
    SAP_HANA_SYSTEM_SUMMARY_STATUS_WARNING
}

"""

Supported in v5.0+
Action to take if the script returns an error or times out.
"""
enum ScriptErrorAction {
    SCRIPT_ERROR_ACTION_ABORT
    SCRIPT_ERROR_ACTION_CONTINUE
}

"Search keyword type for Mailbox search."
enum SearchKeywordType {
    "Search subject or folder name by keyword."
    ALL
    "Search folder name by keyword."
    FOLDER_NAME
    "Search subject field by keyword."
    SUBJECT
}

"Object type for Mailbox search."
enum SearchObjectType {
    "Search emails only."
    EMAIL
    "Search folders only."
    FOLDER
}

"Fields by which service accounts may be sorted."
enum ServiceAccountSortBy {
    "Name of the service account."
    NAME
}

"Azure native service tiers."
enum ServiceTier {
    "Basic service tier."
    BASIC
    "Business critical service tier."
    BUSINESS_CRITICAL
    "General purpose service tier."
    GENERAL_PURPOSE
    "Hyperscale service tier."
    HYPERSCALE
    "Premium service tier."
    PREMIUM
    "Standard service tier."
    STANDARD
}

"SharePoint descendant object type."
enum SharePointDescendantType {
    "Unspecified type."
    DESCENDANT_UNSPECIFIED
    "Library SharePoint descendant type."
    LIBRARY
    "List SharePoint descendant type."
    LIST
    "Site SharePoint descendant type."
    SITE
    "Webpart SharePoint descendant type."
    WEBPART
}

"The keyword filter for SharePoint search."
enum SharePointSearchKeywordType {
    "Unspecified keyword type."
    KEYWORD_UNSPECIFIED
    "Search by object name."
    NAME
}

"Object type to constrain the search against."
enum SharePointSearchObjectType {
    "Search all."
    ALL
    "Search library only."
    LIBRARY
    "Search list only."
    LIST
    "Unspecified object type."
    OBJECT_UNSPECIFIED
    "Search site only."
    SITE
    "Search webpart only."
    WEBPART
}

"Share type for fileset."
enum ShareTypeEnum {
    "NFS share."
    NFS
    "Not shared."
    NoShareType
    "SMB share."
    SMB
}

"Warning codes of SLA Archival."
enum SlaArchivalWarning {
    "Archival retention greater lock duration."
    ARCHIVAL_RETENTION_GREATER_THAN_IMMUTABILITY_DURATION_PROVIDED
    "SLA Domain archival retention is not compliant with the expected minimum retention for the tier."
    NON_COMPLIANT_ARCHIVAL_RETENTION_FOR_TIER
    "Archival retention of SLA not compliant."
    NON_COMPLIANT_ARCHIVAL_RETENTION_PROVIDED
    "SLA Domain archival retention is not compliant with immutable locations, and the locations do not share a common allowed retention range."
    NON_COMPLIANT_ARCHIVAL_RETENTION_WITHOUT_COMMON_RANGE_PROVIDED
    "SLA Domain archival retention is not compliant with immutable locations, but the locations share an allowed retention range."
    NON_COMPLIANT_ARCHIVAL_RETENTION_WITH_COMMON_RANGE_PROVIDED
    "SLA Domain archival tiers are not compatible with each other."
    NON_COMPLIANT_ARCHIVAL_TIERS
    "No warning."
    NO_WARNINGS
    "SLA does not have single frequency archival."
    SINGLE_FREQUENCY_ARCHIVAL_NOT_PROVIDED
}

"SLA Domain assignment type."
enum SlaAssignTypeEnum {
    "Do not protect SLA Domain assignment type."
    doNotProtect
    "No SLA Domain assignment."
    noAssignment
    "Protected with an SLA Domain."
    protectWithSlaId
}

"""

Supported in v5.0+
Specifies the method used to apply an SLA Domain to an object. Possible values are Derived, Direct, and Unassigned.
"""
enum SlaAssignment {
    SLA_ASSIGNMENT_DERIVED
    SLA_ASSIGNMENT_DIRECT
    SLA_ASSIGNMENT_UNASSIGNED
}

enum SlaAssignmentTypeEnum {
    Derived
    Direct
    Unassigned
}

"SLA Domain time range."
enum SlaComplianceTimeRange {
    "Past 24 hours."
    LAST_24_HOURS
    "Last 2 snapshots."
    LAST_2_SNAPSHOTS
    "Last 3 snapshots."
    LAST_3_SNAPSHOTS
    "Last snapshot."
    LAST_SNAPSHOT
    "Past 30 days."
    PAST_30_DAYS
    "Past 365 days."
    PAST_365_DAYS
    "Past 7 days."
    PAST_7_DAYS
    "Past 90 days."
    PAST_90_DAYS
    "Start of protection."
    SINCE_PROTECTION
}

"Reasons for the SLA being ineligible for migration."
enum SlaMigrationIneligibilityReason {
    "The remote SLA Domain has an archival policy configured, which is not supported in Rubrik currently."
    CASCADED_ARCHIVAL_CONFIGURED
    "Rubrik cluster associated with the SLA Domain is disconnected."
    CLUSTER_DISCONNECTED
    "This SLA Domain has cascading archival configured. However, the Rubrik CDM version on the replication target cluster does not support migration of SLA Domains with cascading archival configured."
    INVALID_CASCADING_ARCHIVAL_VERSION
    "The version of the Rubrik cluster associated with the SLA Domain is not valid for SLA migration."
    INVALID_CLUSTER_VERSION
    "SLA Domain is not associated with a Rubrik cluster."
    INVALID_LOCAL_SLA
    "The type of replication targets is invalid for migration."
    INVALID_REPLICATION_TARGET
    "Replication targets associated with the SLA Domain have invalid cluster version for migration."
    INVALID_REPLICATION_TARGET_VERSION
    "The SLA Domain has frequency configured in minutes, which is currently not supported in Rubrik."
    MINUTE_FREQUENCY_CONFIGURED
    "SLA Domain is eligible for migration."
    NOT_APPLICABLE
    "Replication targets associated with the SLA Domain are disconnected."
    REPLICATION_TARGET_DISCONNECTED
    "The SLA Domain has retention lock configured, which is not supported in Rubrik currently."
    RETENTION_LOCK_CONFIGURED
    "The Two-person rule is enabled on the Rubrik cluster, which is not supported for SLA Domain migration."
    TPR_ENABLED_ON_CLUSTER
    "The SLA Domain is protecting some objects which are currently not supported for upgrade."
    UNSUPPORTED_PROTECTED_OBJECTS
}

"SLA Domain migration status."
enum SlaMigrationStatus {
    "Failed."
    FAILED
    "In progress."
    IN_PROGRESS
    "Stuck."
    STUCK
    "Succeeded."
    SUCCEEDED
}

"Type of objects managed by SLA Domains."
enum SlaObjectType {
    "AWS EC2 EBS object."
    AWS_EC2_EBS_OBJECT_TYPE
    "AWS RDS object."
    AWS_RDS_OBJECT_TYPE
    "Azure object."
    AZURE_OBJECT_TYPE
    "Azure SQL Database object."
    AZURE_SQL_DATABASE_OBJECT_TYPE
    "Azure SQL Managed Instance object."
    AZURE_SQL_MANAGED_INSTANCE_OBJECT_TYPE
    "Cassandra object."
    CASSANDRA_OBJECT_TYPE
    "Db2."
    DB2_OBJECT_TYPE
    "Microsoft Exchange."
    EXCHANGE_OBJECT_TYPE
    "Fileset object."
    FILESET_OBJECT_TYPE
    "GCP object."
    GCP_OBJECT_TYPE
    "HyperV SLA Domain object."
    HYPERV_OBJECT_TYPE
    "Kubernetes object."
    KUPR_OBJECT_TYPE
    "Managed Volume object."
    MANAGED_VOLUME_OBJECT_TYPE
    "MongoDB object."
    MONGODB_OBJECT_TYPE
    "CDM Mongo object."
    MONGO_OBJECT_TYPE
    "MSSQL object."
    MSSQL_OBJECT_TYPE
    "NAS object."
    NAS_OBJECT_TYPE
    "Nutanix object."
    NUTANIX_OBJECT_TYPE
    "Office 365 object."
    O365_OBJECT_TYPE
    "Oracle object."
    ORACLE_OBJECT_TYPE
    "SAP HANA object."
    SAP_HANA_OBJECT_TYPE
    "SnapMirror Cloud object."
    SNAPMIRROR_CLOUD_OBJECT_TYPE
    "Unknown object."
    UNKNOWN_OBJECT_TYPE
    "VCD vApp object."
    VCD_OBJECT_TYPE
    "Volume group object."
    VOLUME_GROUP_OBJECT_TYPE
    "VSphere object."
    VSPHERE_OBJECT_TYPE
}

"Sort Global SLA Domains by field name."
enum SlaQuerySortByField {
    "Sort by SLA Domain name."
    NAME
    "Sort by SLA Domain paused cluster count."
    PAUSED_CLUSTER_COUNT
    "Sort by SLA Domain protected object count."
    PROTECTED_OBJECT_COUNT
    "Sort by SLA Domain retention time."
    RETENTION
}

"Fields to return the status of SLA Domains based on the specified value."
enum SlaStatusFilterField {
    "Returns the status of all SLA Domains on the Rubrik cluster identified by the cluster name."
    CLUSTER_NAME
    "Returns the status of all SLA Domains on the Rubrik cluster identified by the cluster ID."
    CLUSTER_UUID
    "This filter takes boolean values: true or false. When true, it returns the Rubrik clusters where the SLA Domain is paused. When false, it returns the Rubrik clusters where the SLA Domain is not paused."
    PAUSE_STATUS
}

"Status of the latest attempt to sync the SLA Domain to the clusters."
enum SlaSyncStatus {
    "Sync failed."
    FAILED
    "Sync not attempted."
    NOT_ATTEMPTED
    "Sync pending."
    PENDING
    "Sync successful."
    SUCCEEDED
}

"""

Supported in v5.0+
Units for frequency and retention. Accepted values are Minute, Hourly, Daily, Weekly, Monthly, Quarterly, and Yearly.
"""
enum SlaTimeUnit {
    SLA_TIME_UNIT_DAILY
    SLA_TIME_UNIT_HOURLY
    SLA_TIME_UNIT_MINUTE
    SLA_TIME_UNIT_MONTHLY
    SLA_TIME_UNIT_QUARTERLY
    SLA_TIME_UNIT_WEEKLY
    SLA_TIME_UNIT_YEARLY
}

"Assignment operation with the SLA Domain."
enum SlaWarningsOperation {
    "Downloading a snapshot."
    DOWNLOAD_SNAPSHOT
    "Taking an on-demand snapshot."
    ON_DEMAND_SNAPSHOT
    "Default assignment operation."
    OPERATION_UNSPECIFIED
}

"Authentication status of SMB domains."
enum SmbAuthenticationStatus {
    "SMB domain authorization is configured."
    CONFIGURED
    "SMB domain authorization failed."
    FAILED
    "SMB domain authorization is not configured."
    NOT_CONFIGURED
    "SMB Domain authorization is unspecified."
    UNSPECIFIED
}

"Filter for SMB domain results."
enum SmbDomainFilterField {
    "Filters SMB domain results by Rubrik cluster UUID."
    CLUSTER_UUID
    "Filters SMB domain result by SMB domain name."
    DOMAIN_NAME
    "Filter is not specified. Any filter text would not be considered."
    FIELD_UNSPECIFIED
    "Filters SMB domain result by configuration status."
    STATUS
}

"Sort by parameters for SMB domain results."
enum SmbDomainSortByField {
    "Sort by Cluster name."
    CLUSTER_NAME
    "Sort by Domain name."
    DOMAIN_NAME
    """

    Sort by field is not specified.
    Any filter text would not be considered.
    """
    FIELD_UNSPECIFIED
}

"""

Supported in v5.0+
Status of the current authentication attempt.
"""
enum SmbDomainStatus {
    SMB_DOMAIN_STATUS_CONFIGURED
    SMB_DOMAIN_STATUS_FAILED
    SMB_DOMAIN_STATUS_NOT_CONFIGURED
}

"Columns of a workload that can be aggregated."
enum SnappableAggregationsEnum {
    "The amount of storage used by archived snapshots."
    ArchiveStorage
    "Total count of the snapshots."
    Count
    "The logical size of the workload's last snapshot."
    LAST_SNAPSHOT_LOGICAL_BYTES
    "Logical bytes used by snapshots of this workload."
    LogicalBytes
    "The number of snapshots that were missed."
    MissedSnapshots
    "Physical bytes used by snapshots of this workload."
    PhysicalBytes
    "The amount of storage used by replicated snapshots."
    ReplicaStorage
    "The total number of snapshots present for this workload."
    TotalSnapshots
}

enum SnappableCrawlStatus {
    COMPLETE
    FAIL
    IN_PROGRESS
}

enum SnappableGroupByEnum {
    Cluster
    ClusterType
    ComplianceStatus
    Day
    Hour
    Month
    ObjectType
    ProtectionStatus
    PullTimeWithOffset
    Quarter
    SlaDomain
    Week
    Year
}

enum SnappableSlaAssignment {
    SNAPPABLE_SLA_ASSIGNMENT_DERIVED
    SNAPPABLE_SLA_ASSIGNMENT_DIRECT
    SNAPPABLE_SLA_ASSIGNMENT_UNASSIGNED
}

enum SnappableSortByEnum {
    ArchivalComplianceStatus
    ArchivalSnapshotLag
    ArchiveSnapshots
    ArchiveStorage
    AwaitingFirstFull
    Cluster
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    LastSnapshot
    LatestArchivalSnapshot
    LatestReplicationSnapshot
    LocalOnDemandSnapshots
    LocalSLASnapshots
    LocalSnapshots
    Location
    LogicalBytes
    LogicalDataReduction
    MissedSnapshots
    Name
    ObjectType
    PULL_TIME
    PhysicalBytes
    ProtectionStatus
    ReplicaSnapshots
    ReplicaStorage
    ReplicationComplianceStatus
    ReplicationSnapshotLag
    SlaDomainName
    TotalSnapshots
    TransferredBytes
}

enum SnappableTableColumnEnum {
    ArchiveSnapshots
    ArchiveStorage
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    LastSnapshot
    LocalSnapshots
    Location
    LogicalByte
    MissedSnapshots
    ObjectType
    PhysicalBytes
    ReplicaSnapshots
    ReplicaStorage
    SlaDomain
    SnappableName
    TotalSnapshots
    TransferredBytes
}

"Snappable type."
enum SnappableType {
    "Used for search of the Calendar subsnappable of Exchange."
    CALENDAR
    "Used for search of the Contacts subsnappable of Exchange."
    CONTACTS
    "Exchange snappable. Used for recovery of any subsnappable (Mailbox, Calendar, Contacts) objects."
    EXCHANGE
    "Used for search of the Mailbox subsnappable of Exchange."
    MAILBOX
    "OneDrive snappable."
    ONEDRIVE
    "Sharepoint drive snappable."
    SHAREPOINT_DRIVE
    "Sharepoint list snappable."
    SHAREPOINT_LIST
    "Sharepoint site snappable."
    SHAREPOINT_SITE
    "Teams snappable."
    TEAMS
}

"""

Supported in v5.1+
v5.1-v5.2: The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, and Cold.

v5.3+: The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, AzureArchive (with Azure locations), Glacier, and GlacierDeepArchive (for AWS S3 locations). The value Cold has been deprecated in favor of AzureArchive, which is the recommended replacement value.
"""
enum SnapshotCloudStorageTier {
    SNAPSHOT_CLOUD_STORAGE_TIER_AZURE_ARCHIVE
    SNAPSHOT_CLOUD_STORAGE_TIER_COLD
    SNAPSHOT_CLOUD_STORAGE_TIER_COOL
    SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER
    SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER_DEEP_ARCHIVE
    SNAPSHOT_CLOUD_STORAGE_TIER_HOT
}

enum SnapshotConsistencyLevel {
    SNAPSHOT_APP_CONSISTENT
    SNAPSHOT_CRASH_CONSISTENT
    UNKNOWN_CONSISTENCY_LEVEL
}

"Specifies the snapshot frequency."
enum SnapshotFrequency {
    "Daily snapshot."
    DAILY
    "Hourly snapshot."
    HOURLY
    "Monthly snapshot."
    MONTHLY
    "Snapshot frequency not applicable."
    NA
    "Quarterly snapshot."
    QUARTERLY
    "Weekly snapshot."
    WEEKLY
    "Yearly snapshot."
    YEARLY
}

enum SnapshotGroupByTime {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

"Filters to query snapshots."
enum SnapshotQueryFilterField {
    """

    A comma-separated list of archival location IDs. Returns snapshots from
    all archival locations corresponding to the specified IDs.
    """
    ARCHIVAL_LOCATION_IDS
    "Returns all AWS EBS snapshots from the specified AWS account."
    EBS_AWS_NATIVE_ACCOUNT_ID
    "Returns all AWS EC2 snapshots from the specified AWS account."
    EC2_AWS_NATIVE_ACCOUNT_ID
    "When true, returns snapshots that are not anomalous."
    EXCLUDE_ANOMALOUS
    "When true, returns snapshots that are not quarantined."
    EXCLUDE_QUARANTINED
    """

    When true, returns snapshots for which index files are present,
    i.e. either the index storage path is present or there have been indexing
    attempts on the snapshot.
    Note: In case of cloud native indexing failures(indexing attempts > 0),
    some indexing status log files are stored at the location where index
    files are usually stored.
    """
    HAS_CLOUD_NATIVE_INDEX_FILES
    """

    When the value is true, returns snapshots with one or more unexpired
    archived snapshots.
    """
    HAS_UNEXPIRED_ARCHIVED_SNAPSHOTS
    """

    When the value is true, this filter returns snapshots with one or more
    unexpired replicas.
    """
    HAS_UNEXPIRED_REPLICAS
    """

    Returns the entries where value of lock_end_time column is null or
    is less than the the provided time in the field time.
    """
    IMMUTABLE_LOCK_END_TIME_BEFORE
    "Does not return AppFlows-related details for the snapshots."
    IS_APPFLOWS_QUERY_SNAPSHOT_DETAILS_NOT_NEEDED
    """

    When true, this filter returns the snapshots created as a result of
    archiving source snapshots. When false, the filter returns snapshots
    that were not created due to archiving.
    """
    IS_ARCHIVAL_COPY
    "When the value is true, this filter returns snapshots that are archived."
    IS_ARCHIVED
    "When true, returns snapshots that are deleted from source."
    IS_DELETED_FROM_SOURCE
    IS_DOWNLOADED
    """

    When true, returns snapshots that have been deleted, else
    returns all non-deleted snapshots (may/may not be expired).
    """
    IS_GCED
    """

    When true, this returns snapshots that have been indexed, else
    returns snapshots that have not been indexed.
    """
    IS_INDEXED
    """

    When true, returns snapshots that have been placed on legal
    hold, else return all snapshots which are not legally held.
    """
    IS_LEGALLY_HELD
    """

    When true, returns source snapshots that are not globally expired
    i.e. snapshot is unexpired on source or has an unexpired replica/archival
    copy, else returns globally expired source snapshots.
    """
    IS_NOT_GLOBALLY_EXPIRED
    IS_ON_DEMAND
    IS_REPLICA
    """

    When true, returns snapshots that have been replicated.
    When false, returns snapshots which have not been replicated.
    """
    IS_REPLICATED
    """

    When true, returns incremental snapshots of SAP HANA
    workload. When false, returns full snapshots.
    """
    IS_SAP_HANA_INCREMENTAL_SNAPSHOT
    """

    When true, returns snapshots that were skipped for
    replication. When false, returns snapshots which were not skipped.
    """
    IS_SKIPPED_FOR_REPLICATION
    """

    When the filter text list is provided, returns all on-demand snapshots
    that are assigned any of the given SLA Domain IDs.
    Note: text field will not be used for this filter.
    """
    ON_DEMAND_SLA_ID
    "Returns all AWS RDS snapshots from the specified AWS account."
    RDS_AWS_NATIVE_ACCOUNT_ID
    SLA_ID
    """

    List of protectable object types. When this list is configured with
    object types, it returns snapshots of that type.
    """
    SNAPPABLE_TYPES
    """

    Returns snapshots for which the snapshot_status field is in
    the specified state. This is a text field.
    """
    SNAPSHOT_STATUS
    SNAPSHOT_TYPE
}

enum SnapshotQuerySortByField {
    CREATION_TIME
    UNKNOWN
}

"Errors which may occur when searching for a snapshot."
enum SnapshotSearchError {
    "Access to the resource is denied."
    AccessDenied
    "No matching snapshot found."
    NoSnapshotFound
}

"Enum to describe whether snapshot has AMI-based or crash-consistent consistency."
enum SnapshotServiceConsistencyLevel {
    "AMI-based consistency level."
    AMI_BASED
    "Crash-consistent snapshot."
    CRASH_CONSISTENT
}

"Type of snapshot to be used for recovery."
enum SnapshotType {
    "Archived snapshot."
    ARCHIVED
    "Replicated snapshot."
    REPLICATED
    "Source snapshot."
    SOURCE
}

enum SnapshotTypeEnum {
    DOWNLOADED
    ON_DEMAND
    SCHEDULED
}

"The type of snapshot to be used for recovery operations if source snapshot is expired."
enum SnapshotTypeForRestoreIfSourceExpired {
    "Use the archived snapshot."
    ARCHIVED
    "Use the replicated snapshot."
    REPLICATED
}

"The snapshot type to use if source snapshot is expired."
enum SnapshotTypeToUseIfSourceExpired {
    "Archived snapshot."
    ARCHIVED
    "Replicated snapshot."
    REPLICATED
}

"""

Supported in v5.2+
Describes the security level for an SNMP trap receiver host.
"""
enum SnmpSecurityLevel {
    SNMP_SECURITY_LEVEL_ENUM_AUTH_NO_PRIV
    SNMP_SECURITY_LEVEL_ENUM_AUTH_PRIV
    SNMP_SECURITY_LEVEL_ENUM_NO_AUTH_NO_PRIV
}

enum SonarContentReportTableColumnEnum {
    AnalyzersBreakdown
    Cluster
    FileName
    ObjectName
    ObjectType
    Path
    PoliciesBreakdown
    Size
    SnapshotTime
    TotalHits
}

enum SonarReportTableColumnEnum {
    NumCoveredObjects
    NumHighRiskLocations
    NumViolatedFiles
    NumViolations
    PolicyName
    PolicyStatus
}

enum SortByFieldEnum {
    ANALYZER_NAME
    "Probability of anomaly."
    ANOMALY_PROBABILITY
    ActivityStatus
    ActivityType
    AppBlueprintName
    ArchivalComplianceStatus
    ArchivalSnapshotLag
    ArchiveSnapshots
    ArchiveStorage
    AwaitingFirstFull
    "Count of created bytes."
    BYTES_CREATED_COUNT
    "Count of deleted bytes."
    BYTES_DELETED_COUNT
    "Count of modified bytes."
    BYTES_MODIFIED_COUNT
    "Count of changed bytes."
    BYTES_NET_CHANGED_COUNT
    CLUSTER
    "Location of the Rubrik cluster."
    CLUSTER_LOCATION
    "Unique ID of the cluster."
    CLUSTER_UUID
    Cluster
    "Rubrik cluster name."
    ClusterName
    "Rubrik cluster type."
    ClusterType
    ComplianceStatus
    DataReduction
    Date
    "Estimated time before cluster runs out of storage."
    ESTIMATED_RUNWAY
    EndTime
    "Count of created files."
    FILES_CREATED_COUNT
    "Count of deleted files."
    FILES_DELETED_COUNT
    "Count of modified files."
    FILES_MODIFIED_COUNT
    FILES_WITH_HITS
    FILE_NAME
    "Version of the installed Rubrik cluster."
    INSTALLED_VERSION
    "Is result an anomaly."
    IS_ANOMALY
    LOCATION
    LastSnapshot
    LastUpdated
    LatestArchivalSnapshot
    LatestReplicationSnapshot
    LocalOnDemandSnapshots
    LocalSLASnapshots
    LocalSnapshots
    Location
    LogicalBytes
    LogicalDataReduction
    "Managed ID of the object."
    MANAGED_ID
    MissedSnapshots
    NUM_HIGH_RISK_LOCATIONS
    NUM_OBJECTS
    NUM_VIOLATED_FILES
    NUM_VIOLATION
    Name
    NumCanceled
    NumExpected
    NumFailed
    NumSucceeded
    OBJECT_NAME
    "Type of the object."
    OBJECT_TYPE
    ObjectName
    ObjectType
    PATH
    POLICY_NAME
    POLICY_STATUS
    "Date of the previous snapshot."
    PREVIOUS_SNAPSHOT_DATE
    "Id of the previous snapshot."
    PREVIOUS_SNAPSHOT_ID
    PULL_TIME
    PhysicalBytes
    ProtectionStatus
    "Rubrik cluster registration date."
    RegisteredAt
    ReplicaSnapshots
    ReplicaStorage
    ReplicationComplianceStatus
    ReplicationSnapshotLag
    SIZE
    SLA_DOMAIN
    "Date of the snapshot."
    SNAPSHOT_DATE
    "Id of the snapshot."
    SNAPSHOT_ID
    SNAPSHOT_TIME
    "Count of suspicious files."
    SUSPICIOUS_FILES_COUNT
    Severity
    SlaDomainName
    SourceSiteName
    StartTime
    TOTAL_HITS
    TargetSiteName
    Time
    TotalSnapshots
    TransferredBytes
    "Name of the object."
    WORKLOAD_NAME
    "Type of the object."
    WORKLOAD_TYPE
}

"Specifies how the results are sorted."
enum SortOrder {
    "The items are sorted in ascending order."
    ASC
    "The items are sorted in descending order."
    DESC
}

enum SourceSourceType {
    "Specifies that the source type is Cassandra."
    SOURCE_SOURCE_TYPE_CASSANDRA
    "Specifies that the source type is MongoDB."
    SOURCE_SOURCE_TYPE_MONGO
}

enum SourceSslCertReqs {
    SOURCE_SSL_CERT_REQS_NONE
    SOURCE_SSL_CERT_REQS_OPTIONAL
    SOURCE_SSL_CERT_REQS_REQUIRED
}

"Authentication mechanism for SQL Server or any SQL compliant database."
enum SqlAuthenticationMechanism {
    "Authentication mechanism is not specified."
    AUTHENTICATION_MECHANISM_UNSPECIFIED
    "Authenticate using Azure Active Directory authorization code."
    AZURE_ACTIVE_DIRECTORY_AUTH_CODE
    "Authenticate using traditional SQL Server credentials."
    SQL_AUTHENTICATION
}

enum StalenessType {
    IS_STALE
    NOT_STALE
}

"Azure Storage account SKU type."
enum StorageAccountSku {
    "Standard Geo Redundant Storage."
    STANDARD_GRS
    "Standard Locally Redundant Storage."
    STANDARD_LRS
    "Standard Zone Redundant Storage."
    STANDARD_ZRS
}

"Azure Storage Account Tier."
enum StorageAccountTier {
    "Storage account configured with cool access tier."
    COOL
    "Storage account configured with hot access tier."
    HOT
}

"""

Supported in v5.0+
Storage array type/brand.
"""
enum StorageArrayType {
    STORAGE_ARRAY_TYPE_DELL_EMC_POWER_STORE
    STORAGE_ARRAY_TYPE_NET_APP_ONTAP
    STORAGE_ARRAY_TYPE_PURE_STORAGE
}

"Type of the field."
enum SupportCaseFieldType {
    "Contact method."
    CONTACT_METHOD
    "Unspecified."
    FIELD_TYPE_UNSPECIFIED
    "Priority."
    PRIORITY
    "Type."
    TYPE
}

"Fields to filter support access objects."
enum SupportUserAccessFilterField {
    "Filter by access provider or impersonated user email address."
    ACCESS_PROVIDER_OR_IMPERSONATED_USER
    "Filter by access status."
    ACCESS_STATUS
    "Filter by support access enable time."
    ENABLE_AT
    "Filter by impersonated user ID."
    IMPERSONATED_USER_ID
    "Filter expired requests."
    IS_EXPIRED
    "Filter by support access ID."
    SUPPORT_ACCESS_ID
    "Filter by support user ID."
    SUPPORT_USER_ID
}

"Fields to sort support user access."
enum SupportUserAccessSortByField {
    "Sort by support access enable time."
    ENABLE_AT
}

"Support access status values."
enum SupportUserAccessStatus {
    "Support access status is closed."
    SUPPORT_ACCESS_STATUS_CLOSED
    "Support access status is open."
    SUPPORT_ACCESS_STATUS_OPEN
    "Support access status is unknown."
    SUPPORT_ACCESS_STATUS_UNSPECIFIED
}

"""

Supported in v5.1+
The syslog message classification based on RFC 5424.
"""
enum SyslogFacility {
    SYSLOG_FACILITY_ALL
    SYSLOG_FACILITY_AUTH
    SYSLOG_FACILITY_CLOCK
    SYSLOG_FACILITY_CRON
    SYSLOG_FACILITY_DAEMON
    SYSLOG_FACILITY_FTP
    SYSLOG_FACILITY_KERNEL
    SYSLOG_FACILITY_LOG_ALERT
    SYSLOG_FACILITY_LOG_AUDIT
    SYSLOG_FACILITY_LPR
    SYSLOG_FACILITY_MAIL
    SYSLOG_FACILITY_NEWS
    SYSLOG_FACILITY_NTP
    SYSLOG_FACILITY_RUBRIK_APP
    SYSLOG_FACILITY_RUBRIK_CLI
    SYSLOG_FACILITY_RUBRIK_EVENT
    SYSLOG_FACILITY_RUBRIK_SSH
    SYSLOG_FACILITY_SECURITY
    SYSLOG_FACILITY_SYSLOG
    SYSLOG_FACILITY_USER
    SYSLOG_FACILITY_UUCP
}

enum SyslogFacilityTypeEnum {
    ALL_SYSLOG
    AUTH
    RUBRIK_CLI
    RUBRIK_EVENT
    RUBRIK_SSH
    SECURITY
    SYSLOG
}

"""

Supported in v5.1+
The syslog message severity based on RFC 5424.
"""
enum SyslogSeverity {
    SYSLOG_SEVERITY_ALERT
    SYSLOG_SEVERITY_ALL
    SYSLOG_SEVERITY_CRITICAL
    SYSLOG_SEVERITY_DEBUG
    SYSLOG_SEVERITY_EMERGENCY
    SYSLOG_SEVERITY_ERROR
    SYSLOG_SEVERITY_INFORMATIONAL
    SYSLOG_SEVERITY_NOTICE
    SYSLOG_SEVERITY_WARNING
}

enum SyslogSeverityTypeEnum {
    ALL_SEVERITY
    CRITICAL
    INFORMATIONAL
    WARNING
}

"All valid table views."
enum TableViewType {
    "Object capacity over time report's main table."
    OBJECT_CAPACITY_OVERTIME_ALL_TABLE
    "Protection task detail report's main table."
    PROTECTION_TASKS_DETAIL_TABLE
    "The table view type is unspecified."
    TABLE_UNSPECIFIED
}

"Tag filter type."
enum TagFilterType {
    "Filter by exact value of key, and all the tag values."
    TAG_KEY
    "Filter by exact values of tag key and value."
    TAG_KEY_VALUE
}

"SLA assignment type of a tag rule."
enum TagRuleSlaAssignType {
    "The tag rule is not protected."
    DO_NOT_PROTECT
    "The tag rule is protected with an SLA domain."
    PROTECT_WITH_SLA_ID
}

"Encryption type for data on AWS storage location."
enum TargetEncryptionTypeEnum {
    "Password based encryption."
    ENCRYPTION_PASSWORD_BASED
    "KMS Master Key ID based encryption."
    KMS_MASTER_KEY_BASED
    "RSA Key based encryption."
    RSA_KEY_BASED
    "Unknown encryption type."
    UNKNOWN_ENCRYPTION_TYPE
}

"Target mapping filter field."
enum TargetMappingQueryFilterField {
    "Filter by target mapping ID."
    ARCHIVAL_GROUP_ID
    "Filter by target mapping type."
    ARCHIVAL_GROUP_TYPE
    "Filter by target mapping type."
    ARCHIVAL_LOCATION_TYPE
    "Filter by cloud account ID."
    CLOUD_ACCOUNT_ID
    "Filter by cloud native use case."
    CLOUD_NATIVE_USE_CASE
    "Filter by excluding target type."
    EXCLUDE_ARCHIVAL_LOCATION_TYPE
    "Filter to exclude group types."
    EXCLUDE_GROUP_TYPE
    "Filter by target mapping name."
    NAME
}

"Target filter field."
enum TargetQueryFilterField {
    "Filter for conveying which additional fields of storage locations are required."
    ADDITIONAL_FIELDS_REQUIRED
    "Filter by Rubrik cluster ID."
    CLUSTER_ID
    "Filter for excluding cloud native locations."
    EXCLUDE_CLOUD_NATIVE
    "Filter by name of the archival location the storage location is part of."
    GROUP_NAME
    "Filter by archived storage locations."
    IS_ARCHIVED
    "Filter by is storage location part of an automatically created archival location."
    IS_MANAGED_BY_AUTO_AG
    "Filter for location ID."
    LOCATION_ID
    "Filter by region filter for RCS archival location."
    LOCATION_REGION
    "Filter by global/locally managed storage location."
    LOCATION_SCOPE
    "Filter by tier for RCS archival location."
    LOCATION_TIER
    "Filter by storage location type."
    LOCATION_TYPE
    "Filter by name of storage location or archival location."
    LOC_NAME_OR_GROUP_NAME
    "Filter by storage location name."
    NAME
    "Filter by availability status of the storage location."
    STATUS
}

"Sync status of the archival location."
enum TargetSyncStatus {
    "Location sync failed."
    ACTION_FAILED
    "Location sync failure being retried."
    ACTION_FAILED_RETRY
    "Location is not created on cluster."
    NOT_CREATED_ON_CDM
    "Reader location is being promoted to owner."
    PENDING_PROMOTE
    "Reader location is being refreshed."
    PENDING_REFRESH
    "Location is syncing with cluster."
    PENDING_SYNC
    "Location is synced with cluster."
    SYNCED
}

"Type of storage location."
enum TargetType {
    "Amazon S3 type of archival location."
    AWS
    "Azure container type of archival location."
    AZURE
    "Legacy glacier type of archival location."
    GLACIER
    "Google Cloud Platform type of archival location."
    GOOGLE
    "Network File System type of archival location."
    NFS
    "Rubrik Cloud Vault type of archival location."
    RCS_AZURE
    "Amazon S3 compatible type of archival location."
    S3_COMPATIBLE
    "Tape type of archival location."
    TAPE
}

enum TaskDetailGroupByEnum {
    Cluster
    Day
    Hour
    Month
    Quarter
    Status
    TaskDetailClusterType
    TaskDetailObjectType
    Week
    Year
}

enum TaskDetailSortByEnum {
    EndTime
}

enum TaskDetailTableColumnEnum {
    ArchivalTarget
    ClusterLocation
    DataTransferred
    DirectArchive
    EndTime
    FailureReason
    Location
    LogicalBytes
    ObjectName
    ObjectType
    PhysicalBytes
    ProtectedVolume
    RecoveryPoint
    RecoveryPointType
    ReplicationSource
    ReplicationTarget
    SlaDomainName
    SnapshotConsistency
    StartTime
    Status
    TaskType
    TotalFileTransferred
    UserName
}

enum TaskReportTableColumnEnum {
    EndDate
    Location
    NumOfCanceled
    NumOfExpected
    NumOfFailed
    NumOfSucceeded
    ObjectName
    ObjectType
    SlaDomainName
    StartDate
}

enum TaskSummaryGroupByEnum {
    Cluster
    ClusterType
    Day
    Month
    Object
    ObjectType
    Quarter
    SlaDomain
    Week
    Year
}

enum TaskSummarySortByEnum {
    Date
    NumCanceled
    NumExpected
    NumFailed
    NumSucceeded
    ObjectName
    ObjectType
    SlaDomainName
}

"Job instance state."
enum TaskchainState {
    "Job instance canceled."
    CANCELED
    "Job instance is canceling."
    CANCELING
    "Job instance failed."
    FAILED
    "Job instance is waiting to be executed."
    READY
    "Job instance is running."
    RUNNING
    "Job instance succeeded."
    SUCCEEDED
    "Job instance has hit an error and is undoing."
    UNDOING
    "Job instance is in an unknown state."
    UNKNOWN
}

"Specifies whether to use the SSO/LDAP configuration of the global organization or to use configuration specific to this organization."
enum TenantAuthDomainConfig {
    "Allows the tenant to set its own SSO/LDAP configuration."
    ALLOW_AUTH_DOMAIN_CONTROL
    "Auth domain configuration unspecified."
    AUTH_DOMAIN_UNSPECIFIED
    "Uses the global org's SSO/LDAP configuration."
    INHERIT_AUTH_DOMAIN
    "Only local users allowed."
    LOCAL_AUTH_DOMAIN_ONLY
}

"Tenant network health."
enum TenantNetworkHealth {
    "One or more tenant networks unreachable."
    CRITICAL_TENANT_NETWORK_HEALTH
    "All tenant networks are connected, but at least one or more Rubrik Envoys are disconnected."
    DEGRADED_TENANT_NETWORK_HEALTH
    "All tenant networks and all Rubrik Envoys are connected."
    HEALTHY_TENANT_NETWORK_HEALTH
    "Tenant network health unspecified."
    TENANT_NETWORK_HEALTH_UNSPECIFIED
}

"Any matches found during the threat hunt."
enum ThreatHuntMatchesFound {
    "One of more matches found."
    MATCHES_FOUND
    "Unused default."
    MATCHES_FOUND_UNSPECIFIED
    "No matches found."
    NO_MATCHES
}

"Matches found during the threat hunt that are also quarantined."
enum ThreatHuntQuarantinedMatchType {
    "No quarantined matched paths."
    NO_QUARANTINED_MATCHES
    "One of more matches are quarantined."
    QUARANTINED_MATCHES
    "Unused default."
    QUARANTINED_MATCHES_UNSPECIFIED
}

"Status of the running threat hunt."
enum ThreatHuntStatus {
    "Threat hunt canceled."
    CANCELED
    "Threat hunt is being canceled."
    CANCELING
    "Threat hunt failed."
    FAILED
    "Threat hunt is in progress."
    IN_PROGRESS
    "Threat hunt partially succeeded."
    PARTIALLY_SUCCEEDED
    "Unused default."
    STATUS_UNSPECIFIED
    "Threat hunt succeeded."
    SUCCEEDED
}

enum TimeDuration {
    DAY
    HOUR
    MONTH
}

enum TimeGranularity {
    DAY
    MONTH
}

enum TimeUnitEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

"""

Supported in v5.1+
The network protocol to use, either UDP or TCP.
"""
enum TransportLayerProtocol {
    TRANSPORT_LAYER_PROTOCOL_TCP
    TRANSPORT_LAYER_PROTOCOL_UDP
}

"Methods for unlocking a locked account."
enum UnlockMethod {
    "Account unlocked by the administrator."
    ADMINISTRATIVE_UNLOCK
    "Account unlocked automatically."
    AUTO_UNLOCK
    "Account unlocked using a self-service link."
    SELF_SERVICE
    "Account unlocked with help from Rubrik Support."
    SUPPORT_UNLOCK
    "Unspecified."
    UNLOCK_METHOD_UNSPECIFIED
}

"The types of status for unmanaged object."
enum UnmanagedObjectAvailabilityFilter {
    "Unmanaged object status is Protected."
    PROTECTED
    "Unmanaged object status is Relic."
    RELIC
    "Unmanaged object status is Remote unrotected."
    REMOTE_UNPROTECTED
    "Unmanaged object status is Repliocated relic."
    REPLICATED_RELIC
    "Unmanaged object status is unknown."
    UNMANAGED_OBJECT_UNKNOWN
    "Unmanaged object status is Unprotected."
    UNPROTECTED
}

"Unmanaged objects sort type Enum."
enum UnmanagedObjectsSortType {
    "Archival storage."
    ARCHIVAL_STORAGE
    "Local storage."
    LOCAL_STORAGE
    "Location."
    LOCATION
    "Object name."
    NAME
    "Retention SLA domain name."
    RETENTION_SLA_DOMAIN_NAME
    "Snapshot count."
    SNAPSHOTS_COUNT
    "Unmanaged status."
    UNMANAGED_STATUS
}

"""

Supported in v5.2+
Attributes that are available to use when filtering query results based on snapshot type.
"""
enum UnmanagedSnapshotType {
    UNMANAGED_SNAPSHOT_TYPE_ON_DEMAND
    UNMANAGED_SNAPSHOT_TYPE_POLICY_BASED
    UNMANAGED_SNAPSHOT_TYPE_RETRIEVED
}

"Property to group Rubrik clusters upgrade data."
enum UpgradeInfoGroupByEnum {
    "Rubrik cluster's upgrade jobstatus."
    ClusterJobStatus
    "Rubrik cluster type."
    Type
    "Rubrik cluster version."
    VersionStatus
}

enum UpgradeInfoSortByEnum {
    ClusterJobStatus
    ClusterLocation
    ClusterName
    ClusterType
    DownloadedVersion
    InstalledVersion
    RegisteredAt
    VersionStatus
}

"Upgrade Type."
enum UpgradeType {
    "Fast Upgrade."
    FAST
    "Rolling Upgrade."
    ROLLING
}

"Represents configuration protection upload location types."
enum UploadLocationType {
    "A replication target of the existing cluster."
    REPLICATION_TARGET
}

"""

UserAuditsGroupBy captures the fields on user audits on which we can
perform group by operation.
"""
enum UserAuditGroupBy {
    "Group user audits by object type."
    AUDIT_OBJECT_TYPE
    "Group user audits by audit status."
    AUDIT_STATUS
    "Group user audits by audit type."
    AUDIT_TYPE
    "Group user audits by cluster type."
    CLUSTER_TYPE
    "Group user audits by cluster uuid."
    CLUSTER_UUID
    "Group user audits by the day."
    DAY
    "Unspecified group by field."
    GROUP_BY_UNSPECIFIED
    "Group user audits by the hour."
    HOUR
    "Group user audits by month."
    MONTH
    "Group user audits by quarter."
    QUARTER
    "Group user audits by the week."
    WEEK
    "Group user audits by the year."
    YEAR
}

enum UserAuditGroupByEnum {
    Cluster
    ClusterType
    Day
    Hour
    Month
    ObjectType
    Quarter
    UserAuditStatus
    UserAuditType
    Week
    Year
}

"User audit object type."
enum UserAuditObjectTypeEnum {
    AppBlueprint
    ArchivalLocation
    AuthDomain
    AwsAccount
    AwsEventType
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeDisk
    AzureNativeSubscription
    AzureNativeVm
    AzureSqlDatabase
    AzureSqlManagedInstance
    Blueprint
    "Cassandra column family type."
    CASSANDRA_COLUMN_FAMILY
    "Cassandra keyspace type."
    CASSANDRA_KEYSPACE
    "Cassandra source type."
    CASSANDRA_SOURCE
    CloudNativeTagRule
    Cluster
    DB2_DATABASE
    DB2_INSTANCE
    DataLocation
    "Exchange DAG type."
    EXCHANGE_DAG
    "Exchange Database type."
    EXCHANGE_DATABASE
    "Exchange Server type."
    EXCHANGE_SERVER
    Ec2Instance
    FailoverClusterApp
    FederatedAccess
    GcpNativeDisk
    GcpNativeGceInstance
    GcpNativeProject
    Host
    HostFailoverCluster
    HypervScvmm
    HypervServer
    HypervVm
    IpWhitelist
    JobInstance
    Ldap
    LinuxFileset
    LinuxHost
    "MongoDB source type."
    MONGODB_SOURCE
    "Mongo Source object type."
    MONGO_SOURCE
    "NoSQL storage location type."
    MOSAIC_STORAGE_LOCATION
    "MSSQL Mount type."
    MSSQL_MOUNT
    "MSSQL object type."
    MSSQL_OBJECT
    ManagedVolume
    Mssql
    MssqlDatabase
    NasHost
    NutanixCluster
    NutanixVm
    O365Calendar
    O365Group
    O365Mailbox
    O365Onedrive
    O365Organization
    O365SharepointDrive
    O365SharepointList
    O365Team
    "O365 SharePoint Site type."
    O365_SHAREPOINT_SITE
    "Oracle Mount type."
    ORACLE_MOUNT
    "Organization type."
    ORGANIZATION
    OracleDb
    OracleHost
    OracleRac
    PublicCloudMachineInstance
    SapHanaDb
    SapHanaSystem
    ShareFileset
    Sla
    SlaDomain
    SmbDomain
    Snapshot
    StorageArray
    StorageArrayVolumeGroup
    StorageSettings
    Storm
    SupportTunnel
    SystemPreference
    Unknown
    Upgrade
    User
    UserActionAudit
    UserGroup
    UserRole
    "VMware Compute Cluster type."
    VMWARE_COMPUTE_CLUSTER
    Vcd
    VcdVapp
    Vcenter
    VmwareMount
    VmwareVm
    VolumeGroup
    WindowsFileset
    WindowsHost
}

"User audit severity."
enum UserAuditSeverityEnum {
    Critical
    Info
    NA
    Warning
}

enum UserAuditSortByEnum {
    Time
}

"Represents the supported fields on which we can sort user audit response."
enum UserAuditSortField {
    "Sort user audits by time."
    TIME
}

"User audit status."
enum UserAuditStatusEnum {
    Failure
    Success
}

enum UserAuditTableColumnEnum {
    ClusterName
    ClusterType
    UserAuditStatus
    UserAuditType
}

"User audit type."
enum UserAuditTypeEnum {
    AccessManagement
    Audit
    Backup
    Classification
    Configuration
    Diagnostic
    Download
    Failover
    ISOLATED_RECOVERY
    Index
    LOCAL_RECOVERY
    LegalHold
    Login
    "Audit type for quarantine usecases."
    QUARANTINE
    Recovery
    Search
    SlaAssignment
    SlaModification
    Sync
    UnknownUserAuditType
}

enum UserDomainEnum {
    CLIENT
    LDAP
    LOCAL
    SSO
    SUPPORT
}

enum UserFieldEnum {
    Domain
    Email
    LastLogin
    Status
}

"Fields by which we can sort users."
enum UserSortByField {
    "Domain Type."
    DOMAIN
    "Email."
    EMAIL
    "Last Login."
    LAST_LOGIN
    "Status."
    STATUS
}

"Current account status of user."
enum UserStatus {
    "Status of the user account is active."
    ACTIVE
    "Status of the user account is deactivated."
    DEACTIVATED
    "Login is controlled by SSO, current user account status is unknown to system."
    UNKNOWN
}

enum V1GetCompatibleMssqlInstancesV1RequestRecoveryType {
    V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_EXPORT
    V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_MOUNT
    V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_RESTORE
}

enum V1QueryCertificatesRequestSortBy {
    V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_DESCRIPTION
    V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_EXPIRATION
    V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_HAS_KEY
    V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_NAME
}

enum V1QueryCertificatesRequestSortOrder {
    V1_QUERY_CERTIFICATES_REQUEST_SORT_ORDER_ASC
    V1_QUERY_CERTIFICATES_REQUEST_SORT_ORDER_DESC
}

enum V1QueryUnmanagedObjectSnapshotsV1RequestSnapshotType {
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SNAPSHOT_TYPE_ON_DEMAND
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SNAPSHOT_TYPE_POLICY_BASED
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SNAPSHOT_TYPE_RETRIEVED
}

enum V1QueryUnmanagedObjectSnapshotsV1RequestSortBy {
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_BY_ARCHIVAL_LOCATION
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_BY_LOCAL_EXPIRATION_DATE
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_BY_SNAPSHOT_DATE_AND_TIME
}

enum V1QueryUnmanagedObjectSnapshotsV1RequestSortOrder {
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_ORDER_ASC
    V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_ORDER_DESC
}

"Request source types for the request to delete NoSQL protection sources in bulk."
enum V2BulkDeleteMosaicSourcesRequestSourceType {
    "Specifies that the request source type for the request to delete NoSQL protection sources in bulk is Cassandra."
    V2_BULK_DELETE_MOSAIC_SOURCES_REQUEST_SOURCE_TYPE_CASSANDRA
    "Specifies that the request source type for the request to delete NoSQL protection sources in bulk is MongoDB."
    V2_BULK_DELETE_MOSAIC_SOURCES_REQUEST_SOURCE_TYPE_MONGO
}

"Request source types for the request to delete a NoSQL protection source."
enum V2DeleteMosaicSourceRequestSourceType {
    "Specifies that NoSQL protection source Request source type is Cassandra source."
    V2_DELETE_MOSAIC_SOURCE_REQUEST_SOURCE_TYPE_CASSANDRA
    "Specifies that NoSQL protection source Request source type is MongoDB source."
    V2_DELETE_MOSAIC_SOURCE_REQUEST_SOURCE_TYPE_MONGO
}

enum V2QueryLogShippingConfigurationsV2RequestSortBy {
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_LAST_APPLIED_POINT
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_LOCATION
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_PRIMARY_DATABASE_NAME
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_SECONDARY_DATABASE_NAME
}

enum V2QueryLogShippingConfigurationsV2RequestSortOrder {
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_ORDER_ASC
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_ORDER_DESC
}

enum V2QueryLogShippingConfigurationsV2RequestStatus {
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_BROKEN
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_INITIALIZING
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_OK
    V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_STALE
}

enum ValidationStatus {
    FAILURE
    SUCCESS
    WARNING
}

"""

Supported in v5.0+
Target type for the specified vApp export.
"""
enum VappExportMode {
    VAPP_EXPORT_MODE_EXPORT_TO_NEW_VAPP
    VAPP_EXPORT_MODE_EXPORT_TO_TARGET_VAPP
}

"""

Supported in v5.0+
Method used to allocate IP addresses for the specified vApp network.
"""
enum VappVmIpAddressingMode {
    "DHCP IP addressing mode."
    VAPP_VM_IP_ADDRESSING_MODE_DHCP
    "Manual IP addressing mode."
    VAPP_VM_IP_ADDRESSING_MODE_MANUAL
    "Not specified IP addressing mode."
    VAPP_VM_IP_ADDRESSING_MODE_NONE
    "Pool IP addressing mode."
    VAPP_VM_IP_ADDRESSING_MODE_POOL
}

enum VcenterConfigConflictResolutionAuthz {
    VCENTER_CONFIG_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
    VCENTER_CONFIG_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}

enum VcenterConfigV2ConflictResolutionAuthz {
    VCENTER_CONFIG_V2_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
    VCENTER_CONFIG_V2_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}

enum VcenterSummaryConflictResolutionAuthz {
    VCENTER_SUMMARY_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
    VCENTER_SUMMARY_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}

enum VersionSourceType {
    "Specifies that the version source type is Cassandra."
    VERSION_SOURCE_TYPE_CASSANDRA
    "Specifies that the version source type is MongoDB."
    VERSION_SOURCE_TYPE_MONGO
}

"Cluster version status."
enum VersionStatus {
    "Cluster version is stable."
    STABLE
    "Cluster version is unknown."
    UNKNOWN
    "Cluster upgrade is recommended."
    UPGRADE_RECOMMENDED
}

enum VirtualMachineScriptDetailFailureHandling {
    VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_ABORT
    VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_CONTINUE
}

enum VirtualMachineSummarySnapshotConsistencyMandate {
    VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_APP_CONSISTENT
    VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_CRASH_CONSISTENT
    VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_FILE_SYSTEM_CONSISTENT
    VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_INCONSISTENT
    VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_UNKNOWN
    VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_VSS_CONSISTENT
}

enum VirtualMachineUpdateSnapshotConsistencyMandate {
    VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_APP_CONSISTENT
    VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_CRASH_CONSISTENT
    VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_FILE_SYSTEM_CONSISTENT
    VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_INCONSISTENT
    VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_UNKNOWN
    VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_VSS_CONSISTENT
}

"Virtual machine power status."
enum VmPowerStatus {
    "Virtual machine is powered off."
    POWERED_OFF
    "Virtual machine is powered on."
    POWERED_ON
    "Virtual machine is suspended."
    SUSPENDED
}

"Type of VM, standard or dense."
enum VmType {
    "Dense Node."
    DENSE
    "Standard Node."
    STANDARD
}

"Filter for volume group Live Mount results."
enum VolumeGroupLiveMountFilterField {
    "Cluster UUID filter field for volume group Live Mount results."
    CLUSTER_UUID
    """

    Live Mount name filter field for
    Live Mount results.
    """
    MOUNT_NAME
    """

    Organization ID filter field for live
    mount results.
    """
    ORG_ID
    """

    Source host ID filter field for
    Live Mount results.
    """
    SOURCE_HOST_ID
}

"Parameters to sort volume group Live Mount results."
enum VolumeGroupLiveMountSortByField {
    "Sort by cluster name."
    CLUSTER_NAME
    "Sort by creation date."
    CREATION_DATE
    "Sort by mount name."
    MOUNT_NAME
}

"Filter for vSphere Live Mount results."
enum VsphereLiveMountFilterField {
    "Cluster UUID filter for vSphere Live Mount results."
    CLUSTER_UUID
    "Mount name filter for vSphere Live Mount results."
    MOUNT_NAME
    "Organization ID filter for vSphere Live Mount results."
    ORG_ID
    "Original Virtual Machine ID filter for vSphere Live Mount results."
    ORIGINAL_VM_ID
    "Filter is not specified. Any filter text would not be considered."
    UNSPECIFIED
}

"Sort by field for vSphere Live Mount results."
enum VsphereLiveMountSortByField {
    "Sort by the cluster name of the vSphere Live Mount."
    CLUSTER_NAME
    "Sort by the creation date of the vSphere Live Mount."
    CREATION_DATE
    "Sort by the name of the vSphere Live Mount."
    MOUNT_NAME
    """

    Sort by field is not specified. Any sort by text would
    not be considered.
    """
    UNSPECIFIED
    "Sort by the status of the vSphere Live Mount."
    VM_STATUS
}

"Vsphere Live Mount status."
enum VsphereLiveMountStatus {
    "Vsphere Live Mount is available."
    DATASTORE_MOUNTED
    "Vsphere Live Mount is unavailable."
    MIGRATING_DATASTORE
    "Vsphere Live Mount is mounting."
    MOUNTING
    "Vsphere Live Mount is powering off."
    POWERED_OFF
    "Vsphere Live Mount is powering on."
    POWERED_ON
    "Vsphere Live Mount status is unknown."
    UNKNOWN
    "Vsphere Live Mount is unmounting."
    UNMOUNTING
}

enum VsphereMountSortBy {
    CLUSTER_NAME
    MOUNT_TIME
    NEW_VM_NAME
    SOURCE_VM_NAME
    STATUS
}

"Vsphere Live Mount status."
enum VsphereMountStatus {
    "Vsphere Live Mount is available."
    DATASTORE_MOUNTED
    "Vsphere Live Mount is unavailable."
    MIGRATING_DATASTORE
    "Vsphere Live Mount is mounting."
    MOUNTING
    "Vsphere Live Mount is powering off."
    POWERED_OFF
    "Vsphere Live Mount is powering on."
    POWERED_ON
    "Vsphere Live Mount status is unknown."
    UNKNOWN
    "Vsphere Live Mount is unmounting."
    UNMOUNTING
}

"Specifies how to sort virtual disks."
enum VsphereVirtualDiskSortBy {
    "Sort by file name."
    FILE_NAME
    "Sort by size."
    SIZE
}

enum WarningSeverityEnum {
    BLOCKING
    NONE
    NON_BLOCKING
}

"Enum representing the webhook status."
enum WebhookStatus {
    "The webhook was turned off by the system."
    AUTO_DISABLED
    "The webhook is not enabled."
    DISABLED
    "The webhook is enabled."
    ENABLED
    "Unused default value."
    WEBHOOK_STATUS_UNSPECIFIED
}

"Specifies the day of the week."
enum WeekDay {
    "Day of week is not specified."
    DAY_OF_WEEK_UNSPECIFIED
    "Indicates Friday."
    FRIDAY
    "Indicates Monday."
    MONDAY
    "Indicates Saturday."
    SATURDAY
    "Indicates Sunday."
    SUNDAY
    "Indicates Thursday."
    THURSDAY
    "Indicates Tuesday."
    TUESDAY
    "Indicates Wednesday."
    WEDNESDAY
}

enum WhitelistModeEnum {
    ALL_USERS
    LOCAL_USERS
}

"Fields to sort workload anomalies."
enum WorkloadAnomaliesSortBy {
    "Sort by the number of new files created in the snapshot."
    CREATED_FILE_COUNT
    "Sort by the number of files deleted in the snapshot."
    DELETED_FILE_COUNT
    "Sort by encryption level of the snapshot."
    ENCRYPTION
    "Sort by the number of files modified in the snapshot."
    MODIFIED_FILE_COUNT
    "Sort by workload name."
    NAME
    "Sort by number of sensitive files."
    SENSITIVE_FILES
    "Sort by number of sensitive hits."
    SENSITIVE_HITS
    "Sort by anomaly severity."
    SEVERITY
    "Sort by snapshot date."
    SNAPSHOT_DATE
    "Sort by the number of suspicious files in the snapshot."
    SUSPICIOUS_FILE_COUNT
}

"Cyber recovery objects sorting type."
enum WorkloadDetailsSortType {
    "Name."
    NAME
    "Retention."
    RETENTION_SLA_DOMAIN_NAME
}

"The enum of all available group by columns of workload query."
enum WorkloadGroupByEnum {
    "The group by field is not specified."
    GROUP_BY_UNSPECIFIED
    "Group by object type of the workload."
    OBJECT_TYPE
    "Group by protection status of the workload."
    PROTECTION_STATUS
}

"Workload Last Failover Status."
enum WorkloadLastFailoverStatus {
    "Failed."
    FAILED
    "Unspecified."
    FAILOVER_STATUS_UNSPECIFIED
    "Running."
    RUNNING
    "Succeeded."
    SUCCEEDED
}

enum WorkloadLevelHierarchy {
    AllSubHierarchyType
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeVirtualMachine
    AzureSqlDatabaseDb
    AzureSqlManagedInstanceDb
    GcpNativeGCEInstance
    KuprNamespace
    O365Mailbox
    O365Onedrive
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Teams
}

"Specifies the workload type."
enum WorkloadType {
    "Office 365 OneDrive."
    O365_ONEDRIVE
    "Unknown workload type."
    SNAPPABLE_TYPE_UNKNOWN
}

scalar AnyScalar

"DateTime."
scalar DateTime

"The `LocalTimeType` scalar type a time of day (i.e., between 00:00 and 23:59) WITHOUT an associated timezone. The timezone is assumed to be the local timezone, so if you want an explicit timezone you'll need to associate it explicitly."
scalar LocalTime

"The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar URL

scalar UUID

"No value is returned."
scalar Void

"Specifies the Active Directory group selector and recovery specification."
input ADGroupSelectorWithRecoverySpec {
    "Active Directory group ID."
    adGroupId: UUID!
    "Specifies the base Office 365 selector."
    baseInfo: BaseO365SelectorWithRecoverySpec!
}

"Filters for list of event series."
input ActivitySeriesFilter {
    "Filter by ancestor ID."
    ancestorId: UUID
    "Filter by cluster UUID."
    clusterId: [UUID!]
    "Filter by cluster type."
    clusterType: [EventClusterType!]
    "Filter by last activity status."
    lastActivityStatus: [EventStatus!]
    "Filter by last activity type."
    lastActivityType: [EventType!]
    "Filter activites having last updated time after the specified value."
    lastUpdatedTimeGt: DateTime
    "Filter activites having last updated time before than the specified value."
    lastUpdatedTimeLt: DateTime
    "Filter by object fid."
    objectFid: [UUID!]
    "Filter by object name."
    objectName: String
    "Filter by object type."
    objectType: [EventObjectType!]
    "Filter by organization ID."
    orgIds: [String!]
    "Filter by search term."
    searchTerm: String
    "Filter by severity of the activity."
    severity: [EventSeverity!]
    "Filter activities having start time after the specified value."
    startTimeGt: DateTime
    "Filter activities having start time before the specified value."
    startTimeLt: DateTime
}

"Filter event series data."
input ActivitySeriesFilterInput {
    "Ancestor ID of the object."
    ancestorId: UUID
    "Cluster ID and type."
    cluster: CommonClusterFilterInput
    "Status of the last event in the event series."
    lastActivityStatus: [ActivityStatusEnum!]
    "Type of the last event in the event series."
    lastActivityType: [ActivityTypeEnum!]
    "Last updated time greater than."
    lastUpdatedGt: DateTime
    "Last updated time less than."
    lastUpdatedLt: DateTime
    "Forever IDs of objects."
    objectFids: [UUID!]
    "Name of the object."
    objectName: String
    "Object type."
    objectType: [ActivityObjectTypeEnum!]
    "Text to search event content."
    searchTerm: String
    "Severity of the event series."
    severity: [ActivitySeverityEnum!]
    "Start time greater than."
    startTimeGt: DateTime
    "Start time less than."
    startTimeLt: DateTime
}

"Input for retrieving an activity series."
input ActivitySeriesInput {
    "The activity series ID."
    activitySeriesId: UUID!
    "The cluster UUID."
    clusterUuid: UUID
}

"Configuration for the addition of Azure AD Groups."
input AddAdGroupsToHierarchyInput {
    "The natural IDs of the Azure AD groups to add."
    naturalIds: [UUID!]!
    "UUID of the org."
    orgId: UUID!
}

input AddAndJoinSmbDomainInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Configuration for joining Active Directory."
    config: SmbDomainAddRequestInput!
}

"Input to add authentication server-based AWS cloud account for native protection."
input AddAwsAuthenticationServerBasedCloudAccountInput {
    "Name of the agency that provisioned the AWS C2S/SC2S account. Agency name is required only while adding a new AWS cloud account."
    agencyName: String
    "Certificate ID for authentication server CA certificate. If a CA certificate ID is not provided, authentication server will be trusted on first use."
    authServerCaCertId: AwsAuthServerCertificateIdInput
    "Hostname of the authentication server. Hostname is required only while adding a new AWS cloud account."
    authServerHostName: String
    "Certificate ID for authentication server user client certificate. Client certificate is required only while adding a new AWS cloud account."
    authServerUserClientCertId: AwsAuthServerCertificateIdInput
    "C2S mission name or SC2S account name."
    awsAccountName: String!
    "Certificate ID for AWS CA certificate. If a CA certificate ID is not provided, AWS server will be trusted on first use."
    awsCaCertId: AwsAuthServerCertificateIdInput
    "List of SC2S/C2S AWS regions for the cloud account. By default, all regions will be added."
    awsRegions: [AwsAuthServerBasedCloudAccountRegion!]
    "AWS C2S/SC2S cloud type to which the AWS account belongs."
    cloudType: AwsCloudType!
    "List of features to be enabled for cloud native protection."
    features: [CloudAccountFeature!]!
    "Native ID of the cloud account. Native ID is required only while adding a feature to an existing cloud account."
    nativeId: String
    "Name of the role created on the authentication server to enable cloud-native protection for the AWS cloud account. Role name is required only while adding a new AWS cloud account."
    roleName: String
}

"Input to add IAM user-based AWS cloud account for native protection."
input AddAwsIamUserBasedCloudAccountInput {
    "Access key for IAM user with native protection policy on AWS cloud account. Access key is required only while adding new AWS cloud account."
    accessKey: String
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegion!]
    "Name of cloud account."
    cloudAccountName: String!
    "Cloud type (Standard/China/Gov) for the cloud account."
    cloudType: AwsCloudType = STANDARD
    "List of features to be enabled for cloud native protection."
    features: [CloudAccountFeature!]!
    "Native ID of cloud account."
    nativeId: String!
    "AWS Role ARN with native protection policy on AWS cloud account. Role name must start with 'rubrik-polaris-'. Role ARN is required only while adding new AWS cloud account."
    roleArn: String
    "Secret key for IAM user with native protection policy on AWS cloud account. Secret key is required only while adding new AWS cloud account."
    secretKey: String
}

"Input for adding Exocompute configurations for an Azure Cloud Account."
input AddAzureCloudAccountExocomputeConfigurationsInput {
    "List of Exocompute configurations to be added."
    azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!
    "Rubrik ID of the Azure Cloud Account."
    cloudAccountId: UUID!
    "Specifies whether to start Exocompute health check."
    triggerHealthCheck: Boolean = false
}

"Input for enabling a feature for an Azure cloud account."
input AddAzureCloudAccountFeatureInput {
    "Feature to be enabled."
    featureType: CloudAccountFeature!
    "Resource group to be used for creating all the resources for the feature. It is required only for the Cloud Native Archival feature. It will be ignored for other features."
    resourceGroup: AddAzureCloudAccountResourceGroupInput
}

"Input for enabling a feature for an Azure cloud account without oauth."
input AddAzureCloudAccountFeatureInputWithoutOauth {
    "Feature to be enabled."
    featureType: CloudAccountFeature!
    "Version of the Azure role policy."
    policyVersion: Int!
    "Resource group to be used for creating all the resources for the feature. Resource group is required only for the Cloud Native Archival/Archival-Encryption features. It will be ignored for other features."
    resourceGroup: AddAzureCloudAccountResourceGroupInput
    "Specific feature input to be used for enabling the feature. It is required only for the Cloud Native Archival Encryption feature. It will be ignored for other features."
    specificFeatureInput: AddAzureCloudAccountSpecificFeatureInput
}

"Input for adding an Azure Cloud Account."
input AddAzureCloudAccountInput {
    "Regions to be added to the Azure Cloud Account."
    regions: [AzureCloudAccountRegion!]!
    "Session ID of the current OAuth session."
    sessionId: String!
    "Subscriptions to be added to the Azure Cloud Account."
    subscriptions: [AddAzureCloudAccountSubscriptionInput!]!
    "Domain name of the Azure Tenant."
    tenantDomainName: String!
}

"Input for the resource group to be used for the feature being enabled."
input AddAzureCloudAccountResourceGroupInput {
    "The name of the resource group."
    name: String!
    "The region name of the resource group."
    region: AzureCloudAccountRegion!
    "The tags to be added on the resource group. If not passed, no tags will be added on the resource group."
    tags: TagsInput
}

"Input for specific feature details to be used for the feature being enabled."
input AddAzureCloudAccountSpecificFeatureInput {
    "Details of the user-assigned managed identity."
    userAssignedManagedIdentityInput: AddAzureCloudAccountUserAssignedManagedIdentityInput!
}

"Input for adding a subscription."
input AddAzureCloudAccountSubscriptionInput {
    "Features to be enabled for the Azure Cloud Account."
    features: [AddAzureCloudAccountFeatureInput!]!
    "Subscription to be added to the Azure Cloud Account."
    subscription: AzureSubscriptionInput!
}

"Input for adding a subscription without oauth."
input AddAzureCloudAccountSubscriptionInputWithoutOauth {
    "Features to be enabled for the Azure Cloud Account."
    features: [AddAzureCloudAccountFeatureInputWithoutOauth!]!
    "Subscription to be added to the Azure Cloud Account."
    subscription: AzureSubscriptionInput!
}

"Input to specify the details of the user-assigned managed identity to be used for CLOUD_NATIVE_ARCHIVAL_ENCRYPTION feature."
input AddAzureCloudAccountUserAssignedManagedIdentityInput {
    "The name of the managed identity."
    name: String!
    "The ID of the service principal object associated with the managed identity."
    principalId: String!
    "The region of the managed identity."
    region: AzureCloudAccountRegion!
    "The name of the resource group of the managed identity."
    resourceGroupName: String!
}

"Input for adding an Azure Cloud Account without OAuth."
input AddAzureCloudAccountWithoutOauthInput {
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudType = AZUREPUBLICCLOUD
    "Regions to be added to the Azure Cloud Account."
    regions: [AzureCloudAccountRegion!]!
    "Subscriptions to be added to the Azure Cloud Account."
    subscriptions: [AddAzureCloudAccountSubscriptionInputWithoutOauth!]!
    "Domain Name of the Azure tenant."
    tenantDomainName: String!
}

"Input required to add credentials for performing backups."
input AddCloudNativeSqlServerBackupCredentialsInput {
    "Credentials for the user in the databases with authorization to perform backups."
    backupCredentials: LoginCredentials!
    "Rubrik IDs of the objects. Some examples of objects are: Azure Subscriptions, Resource Groups."
    objectIds: [UUID!]!
    "The object type to which the credentials apply to."
    workloadType: WorkloadLevelHierarchy!
}

"Input for adding cluster certificate."
input AddClusterCertificateInput {
    "Required. Request to import a certificate."
    certImportRequest: CertificateImportRequestInput!
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

"Input for AddClusterNodes."
input AddClusterNodesInput {
    "Required. ID of the Rubrik cluster."
    clusterUuid: UUID!
    "Required. IP configuration map for added nodes."
    nodesMap: [NodesMapInput!]!
    "Required. The request object for addNodes."
    request: AddNodesConfigInput!
}

"Configuration for the addition of Configured Groups in O365."
input AddConfiguredGroupToHierarchyInput {
    "The display name for the configured group."
    displayName: String!
    "UUID of the org."
    orgId: UUID!
    "The preferred data locations configured for this group. When empty, group members will not be constrained on data location. These are three-letter region codes as defined in Microsoft Azure."
    pdls: [String!]!
    "The wildcard pattern configured for this group. When empty, group members will not be constrained on name or URL identifiers."
    wildcard: String
}

"Input for adding a DB2 instance."
input AddDb2InstanceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The request object containing parameters like username, password, and list of hosts required to add a Db2 instance to the Rubrik cluster."
    db2InstanceRequestConfig: Db2InstanceRequestConfigInput!
}

"Input to add a global certificate."
input AddGlobalCertificateInput {
    "The certificate in x509 PEM format."
    certificate: String!
    "The clusters on which to add the certificate."
    clusters: [CertificateClusterInput!]
    "The CSR corresponding to the certificate, if applicable."
    csrId: Long
    "The description of the certificate."
    description: String
    "The display name of the certificate."
    name: String!
    "The private key of the certificate."
    privateKey: String
}

"Inventory workloads to add for an account."
input AddInventoryWorkloadsInput {
    "List of Inventory Cards."
    inventoryCards: [InventoryCard!]!
}

"Input for adding a Managed Volume."
input AddManagedVolumeInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Managed Volume configuration."
    managedVolumeConfig: ManagedVolumeConfigInput!
}

"Input for adding a MongoDB source."
input AddMongoSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The request object containing parameters like username, password, and a list of hosts required to add the MongoDB source to the Rubrik cluster."
    mongoSourceAddRequestConfig: MongoSourceAddRequestConfigInput!
}

"Input for adding a NoSQL protection source."
input AddMosaicSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Source object with the details of the source to be added."
    sourceData: SourceInput!
}

"Input for adding a NoSQL protection store."
input AddMosaicStoreInput {
    "Required. Add store request object with details of store to be added."
    addStoreData: MosaicAddStoreRequestInput!
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

"Input for node configuration."
input AddNodesConfigInput {
    "The password previously used to encrypt the Rubrik cluster string."
    encryptionPassword: String
    "IPMI password."
    ipmiPassword: String!
    "A Boolean value that specifies whether to use IPv4 manual discovery mode during node addition."
    isIpv4ManualDiscoveryMode: Boolean
    "A Boolean that specifies whether to use link-local IPv4 mode during node addition."
    isLinkLocalIpv4Mode: Boolean
}

"Nodes add request for a cloud cluster."
input AddNodesToCloudClusterInput {
    "Customer cloud account UUID."
    cloudAccountId: UUID!
    "Cluster UUID."
    clusterUuid: UUID!
    "Number of nodes to add."
    numberOfNodes: Int = 0
    "Cloud vendor type."
    vendor: CcpVendorType!
}

"Configuration for the addition of an O365 org."
input AddO365OrgInput {
    "Types of the apps created in the flow."
    appTypes: [String!]!
    "ID of the exocompute cluster."
    exocomputeClusterId: String!
    "CSRF token for the setup flow."
    stateToken: String!
    "ID of the Microsoft 365 tenant."
    tenantId: String!
}

"Input for adding a SAP HANA system."
input AddSapHanaSystemInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Add a SAP HANA system to the Rubrik cluster. Contains parameters like username, list of hosts, password required while adding a SAP HANA system."
    sapHanaSystem: SapHanaSystemConfigInput!
}

"Storage array to add in a cluster."
input AddStorageArrayInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: String!
    "Required. JSON object for storage array definition."
    definition: StorageArrayDefinitionInput!
}

"Storage array configurations."
input AddStorageArraysInput {
    "List of Storage array configurations to add in Rubrik cluster."
    configs: [AddStorageArrayInput!]!
}

input AddSyslogExportRuleInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Syslog export rule."
    syslogExportRuleV51: SyslogExportRuleInput
    "Syslog export rule."
    syslogExportRuleV52: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV53: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV60: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV70: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV80: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV90: SyslogExportRuleFullInput
}

"VCD instance to add in a cluster."
input AddVcdInstanceInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: String!
    "Required. JSON object for a vCD instance."
    definition: VcdClusterConfigInput!
}

"VCD instance configurations."
input AddVcdInstancesInput {
    "List of vCD instances to add."
    vcdConfigs: [AddVcdInstanceInput!]!
}

input AddVlanInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Required. VLAN Configuration."
    vlanInfo: VlanConfigInput!
}

"Input required to add Azure native virtual machine application consistency specifications."
input AddVmAppConsistentSpecsInput {
    "Specifies whether to cancel backup if pre snapshot script failed to execute on virtual machine."
    cancelBackupIfPreScriptFails: Boolean!
    "Object type for adding Azure native virtual machine application consistency specifications."
    objectType: CloudNativeVmAppConsistentObjectType!
    "Path of post snapshot script in VM."
    postSnapshotScriptPath: String
    "Timeout (in seconds) for post snapshot script to run in VM."
    postSnapshotScriptTimeoutInSeconds: Int
    "Path of pre snapshot script in VM."
    preSnapshotScriptPath: String
    "Timeout (in seconds) for pre snapshot script to run in VM."
    preSnapshotScriptTimeoutInSeconds: Int
    "List of virtual machine Rubrik IDs."
    snappableIds: [UUID!]!
}

"A key-value map that specifies the configuration parameters for Oracle advanced recovery."
input AdvancedRecoveryConfigMap {
    "Name of the Oracle advanced recovery parameter."
    key: String = ""
    "Value of the Oracle advanced recovery parameter."
    value: String = ""
}

"Input for retrieving event digests."
input AllEventDigestsInput {
    "User IDs of recipients whose event digests must be retrieved."
    recipientUserIds: [String!]!
}

"Sorting parameters for getting all failover job reports."
input AllFailoverJobReportsSortParam {
    "Sort order."
    sortOrder: SortOrder = ASC
    "Sort type."
    sortType: AllFailoverJobReportsSortType = UNKNOWN
}

"Input to retrieve  Amazon Machine Image (AMI) type for AWS Archived snapshot export."
input AmiTypeForAwsNativeArchivedSnapshotExportInput {
    "Rubrik ID of the target AWS account for export."
    destinationAwsAccountRubrikId: UUID!
    "Target region for export."
    destinationRegionId: AwsNativeRegion!
    "ID of snapshot to export. Snapshot should have an archived copy present."
    snapshotId: UUID!
}

input AnalyzerGroupInput {
    analyzers: [CreateCustomAnalyzerInput!] = []
    groupType: AnalyzerGroupTypeEnum = UNDEFINED
    id: String = ""
    name: String = ""
}

"Filter anomaly result data."
input AnomalyResultFilterInput {
    "Filter by Rubrik cluster ID."
    clusterUuid: [UUID!]
    "End of filtering time range."
    endTime: DateTime
    "Filter based on anomalous status of the snapshot."
    isAnomaly: Boolean
    "Filter by internal managed ID."
    managedId: [String!]
    "Start of filtering time range."
    startTime: DateTime
    "Filter by internal object fid."
    workloadFid: [UUID!]
}

input AppBlueprintChildInput {
    bootPriority: Int!
    fid: UUID!
    snappableType: ObjectTypeEnum!
}

input AppBlueprintChildSnappableExportSpec {
    datastoreId: String! = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    vmName: String = ""
}

input AppBlueprintChildSnappableInstantRecoverySpec {
    dataStoreName: String = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    preserveMoid: Boolean = false
    vlan: Int = 0
}

input AppBlueprintChildSnappableLocalRecoverySpec {
    disableNetwork: Boolean = false
    hostId: String = ""
    originalVmId: String! = ""
    recoveredVmName: String = ""
    removeNetworkDevices: Boolean = false
    shouldKeepMacAddresses: Boolean = false
    shouldUnregisterVm: Boolean = false
}

input AppBlueprintChildSnappableMountSpec {
    dataStoreName: String = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    vlan: Int = 0
    vmName: String = ""
}

input AppBlueprintExportSnapshotJobConfig {
    baseConfig: AppBlueprintRestoreSnapshotJobConfigBase
    childrenToRestore: [AppBlueprintChildSnappableExportSpec!]! = []
    newAppName: String = ""
}

input AppBlueprintMountSnapshotJobConfig {
    childrenToRestore: [AppBlueprintChildSnappableMountSpec!]! = []
    jobConfigBase: AppBlueprintRestoreSnapshotJobConfigBase
    newAppName: String = ""
}

input AppBlueprintRecoverySpecCreateReqInputType {
    childRecoverySpecs: [ChildRecoverySpecCreateReqInputType!]!
    failoverId: UUID
    locationInfo: LocationInfo
    planType: PlanName!
    resourceSpecType: ResourceSpecType
    userData: String
}

input AppBlueprintRestoreSnapshotJobConfigBase {
    "Power on the new virtual machine(s) if set to True."
    shouldPowerOn: Boolean = true
}

"O365 app filter."
input AppFilter {
    field: AppFilterField = APP_TYPE
    texts: [String!] = []
}

"Parameters to sort O365 apps."
input AppSortByParam {
    field: AppSortByParamField = APP_ID
    sortOrder: SortOrder = ASC
}

"Mapping between archival location and Rubrik cluster."
input ArchivalLocationToClusterMappingInput {
    "Rubrik cluster UUID."
    clusterUuid: String = ""
    "Archival location ID."
    locationId: String = ""
}

"Archiving specification."
input ArchivalSpecInput {
    "ID of the archival group."
    archivalGroupId: String = ""
    "Mapping between archival location and Rubrik cluster."
    archivalLocationToClusterMapping: [ArchivalLocationToClusterMappingInput!] = []
    "Archival tiering specification."
    archivalTieringSpecInput: ArchivalTieringSpecInput
    "Archives all snapshots taken with the specified frequency."
    frequencies: [RetentionUnit!] = []
    "Archival threshold."
    threshold: Int = 0
    "Unit of archival threshold."
    thresholdUnit: RetentionUnit = MINUTES
}

"Archival tiering specification input."
input ArchivalTieringSpecInput {
    "Cold storage class for tiering."
    coldStorageClass: ColdStorageClass = COLD_STORAGE_CLASS_UNKNOWN
    "Set when instant tiering enabled."
    isInstantTieringEnabled: Boolean = false
    "Min accessible duration specified for smart tiering."
    minAccessibleDurationInSeconds: Long = 0
    "Set to tier existing snapshots for instant tiering."
    shouldTierExistingSnapshots: Boolean = false
}

"Configuration of the Kubernetes cluster to archive."
input ArchiveK8sClusterInput {
    "UUID of the Kubernetes cluster."
    clusterId: UUID!
}

"Archive Recovery Plan configuration."
input ArchiveRecoveryPlanInput {
    "Recovery Plan ID."
    id: String!
}

"Input for assigning SLA Domain to MSSQL objects."
input AssignMssqlSlaDomainPropertiesAsyncInput {
    "Required. Update information."
    updateInfo: MssqlSlaDomainAssignInfoInput!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for assigning SLA Domain to MSSQL objects."
input AssignMssqlSlaDomainPropertiesInput {
    "Required. Update information."
    updateInfo: MssqlSlaDomainAssignInfoInput!
}

"Represents the assign protection input."
input AssignProtectionInput {
    "Specifies backup input parameters of the protection."
    backupInput: MosaicSlaInfoInput!
    "Corresponds to the assignment type for the global SLA."
    globalSlaAssignType: SlaAssignTypeEnum!
    "Global SLA Domain forever UUID."
    globalSlaOptionalFid: UUID
    "A list of object forever UUIDs to assign to the global SLA Domain."
    objectIds: [UUID!]!
}

"Input to assign Rubrik SLA Domains."
input AssignSlaInput {
    "Provide optional workload type under the object for SLA Domain assignment. This is meant to be used only for objects that support multiple workload hierarchies. This allows an SLA Domain to be set for one or more specific workload types under the object, instead of applying the SLA Domain for all the workload types. For example, an AWS account object can potentially have 2 different workload types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA Domain only gets applied to workloads of the selected type under that account. If the SLA Domain must be applicable for all the workload types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA Domain to a workload or to an object that does not support multiple workload types."
    applicableWorkloadType: WorkloadLevelHierarchy
    "Choose what to do with existing snapshot in case of do not protect SLA Domains."
    existingSnapshotRetention: GlobalExistingSnapshotRetention
    "Provide list of object IDs you want to assign SLA Domain."
    objectIds: [UUID!]!
    "Boolean value to indicate whether to apply changes made to the SLA Domain to existing snapshots."
    shouldApplyToExistingSnapshots: Boolean
    "Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain."
    shouldApplyToNonPolicySnapshots: Boolean
    "Corresponds to the assignment type for the SLA Domain."
    slaDomainAssignType: SlaAssignTypeEnum!
    "Corresponds to optional SLA Domain ID."
    slaOptionalId: UUID
    "Optional User note."
    userNote: String
}

"The authentication type and token to authenticate the endpoint."
input AuthInfoInput {
    "The type of authentication that protects the URL endpoint."
    authType: AuthenticationType!
    "The custom authentication header key and value to authenticate the endpoint."
    customHeader: CustomHeader
    "The token used for authentication."
    token: String
    "The username and password of the user to authenticate the endpoint."
    userCredentials: UserCredentials
}

"Input to add certificate details for authentication server-based cloud accounts."
input AwsAuthServerCertificateIdInput {
    "Certificate ID."
    id: Long!
}

"Input to update regions in authentication server-based AWS cloud accounts."
input AwsAuthServerRegionsInput {
    "List of regions for cloud account."
    regions: [AwsAuthServerBasedCloudAccountRegion!]!
}

"Input to update role name in authentication server-based cloud accounts."
input AwsAuthServerRoleNameInput {
    "Name of the role."
    name: String!
}

"CDM versions for Aws account."
input AwsCdmVersionRequest {
    "Cloud account ID of the AWS account."
    cloudAccountId: String = ""
    "Aws region."
    region: String = ""
}

input AwsCloudAccountAdminInput {
    "Name of cloud account."
    accountName: String = ""
    "Cloud type (Standard/China) for the cloud account."
    cloudType: AwsCloudType = STANDARD
    id: String = ""
    "Native ID of cloud account."
    nativeId: String = ""
    "Whether seamless setup flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean = false
}

"Input to get AWS cloud account configurations."
input AwsCloudAccountConfigsInput {
    "Admin account ID to filter."
    awsAdminAccountFilter: UUID
    "Search text to match in native ID, account name, or role ARN."
    columnSearchFilter: String
    "Type of cloud native protection feature."
    feature: CloudAccountFeature!
    "List of status filters for listing cloud accounts."
    statusFilters: [CloudAccountStatus!]!
}

"Input to protect a feature for the AWS cloud account."
input AwsCloudAccountFeatureVersionInput {
    "Name of feature to be protected for cloud account."
    feature: CloudAccountFeature!
    "Version of feature. This should be same as the response given in the first step (validateAndCreateAwsCloudAccount)."
    version: Int!
}

input AwsCloudAccountInitiateInput {
    action: CloudAccountAction!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    awsChildAccounts: [AwsCloudAccountInput!]!
    features: [CloudAccountFeature!]!
}

"Details of an AWS cloud account."
input AwsCloudAccountInput {
    "Name of cloud account."
    accountName: String = ""
    "Cloud type (Standard/China) for the cloud account."
    cloudType: AwsCloudType = STANDARD
    "Rubrik ID of the AWS cloud account."
    id: String = ""
    "Native ID of cloud account."
    nativeId: String = ""
    "Whether seamless setup flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean = false
}

input AwsCloudAccountValidateInput {
    awsAdminAccount: AwsCloudAccountAdminInput
    awsChildAccounts: [AwsCloudAccountInput!]!
    features: [CloudAccountFeature!]!
}

"AWS cloud account with features."
input AwsCloudAccountWithFeaturesInput {
    "Type of cloud native protection features."
    features: [CloudAccountFeature!]!
}

"AWS cloud accounts with features."
input AwsCloudAccountsWithFeaturesInput {
    "Admin account ID to filter."
    awsAdminAccountFilter: UUID
    "Search text to match in native ID, account name, and role ARN."
    columnSearchFilter: String
    "Type of cloud native protection feature."
    feature: CloudAccountFeature!
    "List of status filters for listing cloud accounts."
    statusFilters: [CloudAccountStatus!]!
}

"Filter for AWS cloud compute query request."
input AwsCloudComputeSettingFilterInput {
    "Field from which query should be filtered."
    field: AwsCloudComputeSettingFilterField = NAME
    "Value of the field."
    text: String = ""
}

"Cloud compute settings input for the AWS archival target."
input AwsCloudComputeSettingsInput {
    "Compute proxy settings of the AWS target."
    computeProxySettings: ProxySettingsInput
    "Security Group ID of the AWS target."
    securityGroupId: String = ""
    "Subnet ID of the AWS target."
    subnetId: String = ""
    "VPC ID of the AWS target."
    vpcId: String = ""
}

"Input to filter AWS accounts by the specified cloud types."
input AwsCloudTypeFilter {
    "List of AWS cloud types."
    cloudTypes: [AwsCloudType!]!
}

"ES storage for AWS account."
input AwsEsConfigInput {
    "Bucket name in AWS."
    bucketName: String = ""
    "Enable immutability on rubrik filesystem."
    enableImmutability: Boolean = false
    "Enable object locking on bucket."
    enableObjectLock: Boolean = false
    "Create new bucket or use existing."
    shouldCreateBucket: Boolean = false
}

"AWS exocompute configuration to add."
input AwsExocomputeConfigInput {
    "AWS ID of cluster control plane security group. If isRscManaged is true, this parameter is optional."
    clusterSecurityGroupId: String = ""
    "If security groups are to be managed by Rubrik Security Cloud, this parameter should be set to true. False, if users are in charge of managing security groups."
    isRscManaged: Boolean!
    "AWS ID of worker node security group. If isRscManaged is true, this parameter is optional."
    nodeSecurityGroupId: String = ""
    "The region for which the configuration is specified."
    region: AwsCloudAccountRegion!
    "List of exactly 2 subnets."
    subnets: [AwsExocomputeSubnetInputType!]!
    "AWS ID of the VPC."
    vpcId: String!
}

"AWS exocompute subnet input."
input AwsExocomputeSubnetInputType {
    "Availability zone of the subnet."
    availabilityZone: String!
    "AWS ID of subnet."
    subnetId: String!
}

"Immutability settings for creating AWS locations."
input AwsImmutabilitySettings {
    "Immutability lock duration of AWS location in days."
    lockDurationDays: Int = 0
}

"Input to filter AWS EC2 instances based on RBS connection status."
input AwsInstanceCcOrCnpRbsConnectionStatusFilter {
    "Connection status of the Rubrik Backup Service (RBS) installed on the instance."
    status: CloudInstanceRbsConnectionStatus!
}

"Filter to return AWS objects which have account rubrik ID in the given list of account rubrik IDs."
input AwsNativeAccountFilter {
    "List of AWS account Rubrik IDs."
    accountIds: [String!]!
}

"Filters for list of AWS accounts."
input AwsNativeAccountFilters {
    "Filter by AWS cloud type."
    cloudTypeFilter: AwsCloudTypeFilter
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
}

"Filter to return AWS EBS volumes which are attached to one of the EC2 instances in the given list of EC2 instance IDs."
input AwsNativeAttachedInstanceFilter {
    "List of EC2 instance IDs."
    ec2InstanceIds: [String!]!
}

"Filter to return AWS EBS volumes which have file recovery enabled."
input AwsNativeEbsVolumeFileRecoveryStatusFilter {
    "List of file recovery statuses."
    statuses: [AwsNativeFileRecoveryStatus!]!
}

"Filters for list of AWS EBS volumes."
input AwsNativeEbsVolumeFilters {
    "Filter by AWS account."
    accountFilter: AwsNativeAccountFilter
    "Filter by attached EC2 instance."
    attachedInstanceFilter: AwsNativeAttachedInstanceFilter
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by file recovery status."
    fileRecoveryStatusFilter: AwsNativeEbsVolumeFileRecoveryStatusFilter
    "Filter by name or ID substring."
    nameOrIdSubstringFilter: AwsNativeEbsVolumeNameOrIdSubstringFilter
    "Filter by organization ID."
    orgFilter: OrgFilter
    "Filter by region."
    regionFilter: AwsNativeRegionFilter
    "Filter by relic status."
    relicFilter: RelicFilter
    "Filter by tags."
    tagFilter: AwsNativeTagFilter
    "Filter by EBS volume type."
    typeFilter: AwsNativeEbsVolumeTypeFilter
}

"Filter to return AWS EBS volumes with a given substring in their name or instance ID."
input AwsNativeEbsVolumeNameOrIdSubstringFilter {
    "Name or ID substring."
    nameOrIdSubstring: String!
}

"Filter to return AWS EBS volumes which have volume type in the given list of volume types."
input AwsNativeEbsVolumeTypeFilter {
    "List of EBS volume types."
    ebsVolumeTypes: [AwsNativeEbsVolumeType!]!
}

"Filter to return AWS EC2 instances which have file recovery enabled."
input AwsNativeEc2InstanceFileRecoveryStatusFilter {
    "List of file recovery statuses."
    statuses: [AwsNativeFileRecoveryStatus!]!
}

"Filters for list of AWS EC2 instances."
input AwsNativeEc2InstanceFilters {
    "Filter by AWS account."
    accountFilter: AwsNativeAccountFilter
    "Filter by the protection status of the App."
    appProtectionStatusFilter: CloudNativeInstaceAppProtectionFilter
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by file recovery status."
    fileRecoveryStatusFilter: AwsNativeEc2InstanceFileRecoveryStatusFilter
    "Filter by name or ID substring."
    nameOrIdSubstringFilter: AwsNativeEc2InstanceNameOrIdSubstringFilter
    "Filter by organization ID."
    orgFilter: OrgFilter
    "Filter by RBS connection status."
    rbsStatusFilter: AwsInstanceCcOrCnpRbsConnectionStatusFilter
    "Filter by region."
    regionFilter: AwsNativeRegionFilter
    "Filter by relic status."
    relicFilter: RelicFilter
    "Filter by tags."
    tagFilter: AwsNativeTagFilter
    "Filter by EC2 instance type."
    typeFilter: AwsNativeEc2InstanceTypeFilter
    "Filter by VPC."
    vpcFilter: AwsNativeVpcFilter
}

"Filter to return AWS EC2 instances with a given substring in their name or instance ID."
input AwsNativeEc2InstanceNameOrIdSubstringFilter {
    "Name or ID substring."
    nameOrIdSubstring: String!
}

"Filter to return AWS EC2 instances which have instance type in the given list of instance types."
input AwsNativeEc2InstanceTypeFilter {
    "List of EC2 instance types."
    ec2InstanceTypes: [AwsNativeEc2InstanceType!]!
}

input AwsNativeProtectionAccountAddRequest {
    "12-digit AWS Cloud Account ID."
    accountId: String!
    "Name or account alias to identify AWS account."
    name: String!
    "Enabled regions for native protection."
    regions: [String!]!
}

"Filter to return AWS RDS instances which have database engine in the given list of database engines."
input AwsNativeRdsDbEngineFilter {
    "List of database engines."
    dbEngines: [AwsNativeRdsDbEngine!]!
}

"Filter to return AWS RDS instances which have database instance class in the given list of database instance classes."
input AwsNativeRdsDbInstanceClassFilter {
    "List of database instance classes."
    dbInstanceClasses: [AwsNativeRdsDbInstanceClass!]!
}

"Filters for list of AWS RDS instances."
input AwsNativeRdsInstanceFilters {
    "Filter by AWS account."
    accountFilter: AwsNativeAccountFilter
    "Filter by database engine."
    dbEngineFilter: AwsNativeRdsDbEngineFilter
    "Filter by database instance class."
    dbInstanceClassFilter: AwsNativeRdsDbInstanceClassFilter
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by organization ID."
    orgFilter: OrgFilter
    "Filter by region."
    regionFilter: AwsNativeRegionFilter
    "Filter by relic status."
    relicFilter: RelicFilter
    "Filter by tags."
    tagFilter: AwsNativeTagFilter
    "Filter by VPC."
    vpcFilter: AwsNativeVpcFilter
}

"Filter to return AWS objects which have region in the given list of regions."
input AwsNativeRegionFilter {
    "List of regions."
    regions: [AwsNativeRegion!]!
}

"Filter to return AWS objects which have at least one tag in the given list of tags."
input AwsNativeTagFilter {
    "Tag filter parameters."
    tagFilterParams: [TagFilterParams!]!
}

"Filter to return AWS EC2 instances which have VPC ID in the given list of VPC IDs."
input AwsNativeVpcFilter {
    "Virtual Private Cloud (VPC) IDs to filter."
    vpcIds: [String!]!
}

"AWS RDS configuration."
input AwsRdsConfigInput {
    "Log retention of the configuration."
    logRetention: SlaDurationInput
}

"Input to update regions for AWS cloud account."
input AwsRegionsInput {
    "AWS regions for native protection."
    regions: [AwsCloudAccountRegion!]!
}

"Input to update role ARN for IAM user-based AWS cloud account."
input AwsRoleArnInput {
    "AWS role ARN for native protection."
    roleArn: String!
}

"Input to update AWS IAM user keys for IAM user-based AWS cloud account."
input AwsUserKeysInput {
    "IAM user access key."
    accessKey: String!
    "IAM user secret key."
    secretKey: String!
}

"Configuration for creating AWS instances."
input AwsVmConfig {
    "AWS marketplace product ID."
    cdmProduct: String = ""
    "Rubrik CDM version to determine image."
    cdmVersion: String = ""
    "ID of the virtual machine image to deploy."
    imageId: String = ""
    "Instance profile to attach to image."
    instanceProfileName: String = ""
    "Node disk size in GB."
    nodeSizeGb: Int = 0
    "List of security groups to assign to instances."
    securityGroups: [String!]
    "AWS subnet in which instance is created."
    subnet: String = ""
    "Tags to attach to created resources."
    tags: String = ""
    "Create dense or standard nodes."
    vmType: VmType
}

input AwsVmNicSpecInputType {
    awsSecurityGroupId: String = ""
    awsSubnetId: String = ""
    ipv4Address: String = ""
    key: Int = 0
    securityGroupId: String = ""
    subnetId: String = ""
}

input AwsVmRecoverySpecInputType {
    availabilityZone: String = ""
    dedicatedHostId: String = ""
    hostAffinity: String = ""
    instanceTypeId: Int! = 0
    instanceTypeName: String = ""
    keyName: String = ""
    nics: [AwsVmNicSpecInputType!] = []
    placementGroup: String = ""
    tenancy: AwsInstanceTenancy = DEDICATED
    userData: String = ""
    version: Long = 0
    volumes: [AwsVmVolumeSpecInputType!] = []
}

input AwsVmVolumeSpecInputType {
    iops: Int = 0
    "key value defined in VMWare VM"
    key: Int = 0
    sizeGbs: Int = 0
    volumeTypeId: Int = 0
}

"Input for retrieving ARM templates for custom roles."
input AzureArmTemplatesByFeatureInput {
    "Azure cloud type."
    cloudType: AzureCloudType!
    "Domain name of the customer's Azure Tenant."
    customerTenantDomainName: String!
    "Features to be enabled for the Azure Cloud Account."
    features: [CloudAccountFeature!]!
    "Azure cloud account operation type."
    operationType: CloudAccountOperation!
}

"CDM versions for Azure account."
input AzureCdmVersionReq {
    "Customer Azure cloud account ID."
    cloudAccountId: String = ""
    "Azure region/location name."
    location: String = ""
}

"Input required to update the Azure subscription."
input AzureCloudAccountSubscriptionInput {
    "Rubrik ID of the Azure subscription to be updated."
    id: String = ""
    "Name or subscription alias to identify the Azure subscription to be updated."
    name: String = ""
}

"Cloud compute settings input for the Azure archival target."
input AzureCloudComputeSettingsInput {
    "Client ID of the Application."
    appId: String = ""
    "Client secret key of the Application."
    appSecretKey: String = ""
    "Compute proxy settings of the Azure target."
    computeProxySettings: ProxySettingsInput
    "Storage container name of the Azure target."
    generalPurposeStorageContainer: String = ""
    "Storage account name of the Azure target."
    generalPurposeStorageName: String = ""
    "Name of the Azure region."
    region: AzureRegion = UNKNOWN_AZURE_REGION
    "Resource Group of the Azure target."
    resourceGroup: String = ""
    "Security Group ID of the Azure target."
    securityGroupId: String = ""
    "Subnet ID of the Azure target."
    subnetId: String = ""
    "Virtual Network ID of the Azure target."
    virtualNetworkId: String = ""
}

"Information about the customer-managed key and key vault for a region."
input AzureCmkInput {
    "Name of the customer-managed key."
    keyName: String = ""
    "Name of the key vault."
    keyVaultName: String = ""
    "Region of the key vault."
    region: AzureRegion = UNKNOWN_AZURE_REGION
}

"Input for getting Encryption Keys in an Azure Key Vault."
input AzureEncryptionKeysInput {
    "The Rubrik ID of the cloud account."
    cloudAccountId: UUID!
    "Name of the Key Vault for which encryption keys are to be retrieved."
    keyVaultName: String!
    "Name of Azure Resource Group of the Key Vault."
    resourceGroupName: String!
}

"ES storage for Azure account."
input AzureEsConfigInput {
    "Storage container name in Azure."
    containerName: String = ""
    "Enable support for immutable filesystem in SDFS."
    enableImmutability: Boolean = false
    "Storage resource group in Azure."
    resourceGroup: String = ""
    "Should create a new container or not?"
    shouldCreateContainer: Boolean = false
    "Storage name in Azure."
    storageAccount: String = ""
    "Secret key for container."
    storageSecret: String = ""
}

"Azure exocompute configuration to add."
input AzureExocomputeAddConfigInputType {
    "Specifies if this configuration is managed by Rubrik."
    isRscManaged: Boolean!
    "Native ID of the subnet where the Exocompute pods should be launched."
    podSubnetNativeId: String
    "The region for which the configuration is specified."
    region: AzureCloudAccountRegion!
    "Subnet native ID where exocompute cluster should be launched."
    subnetNativeId: String!
}

"Input for getting Azure resource groups if they exist."
input AzureGetResourceGroupsInfoIfExistInput {
    "Resource groups to get."
    resourceGroupInputs: [AzureNativeResourceGroupInfoInput!]!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input for setting Azure Immutability."
input AzureImmutabilitySettings {
    "Immutability lock duration for the Azure location, in days."
    lockDurationDays: Int = 0
}

"Input for getting Azure Key Vaults in a region."
input AzureKeyVaultsInput {
    "The Rubrik ID of the cloud account."
    cloudAccountId: UUID!
    "Region for which Key Vaults are to be retrieved."
    region: AzureRegion!
    "The Principal ID of the user assigned managed identity."
    userAssignedManagedIdentityPrincipalId: UUID
}

"Filter to return Azure disks which are attached to one of the virtual machines in the given list of virtual machine IDs."
input AzureNativeAttachedVmFilter {
    "List of virtual machine IDs."
    virtualMachineIds: [String!]!
}

"Filters for listing Azure resource groups."
input AzureNativeCommonResourceGroupFilters {
    "Filter by effective SLA Domain."
    effectiveSlaFilter: AzureNativeRgSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by subscription."
    subscriptionFilter: AzureNativeCommonRgSubscriptionFilter
}

"Filters Azure resource groups that belong to the subscriptions identified by the list of Rubrik subscription IDs provided."
input AzureNativeCommonRgSubscriptionFilter {
    "List of Rubrik subscription IDs."
    subscriptionIds: [String!]!
}

"Filter to decide whether to get disks with a configured exocompute."
input AzureNativeDiskExocomputeConnectedFilter {
    "Specifies whether to retrieve only those workloads whose regions have Exocompute configured."
    isConnected: Boolean!
}

"Filter to return Azure disks which have file indexing enabled."
input AzureNativeDiskFileIndexingFilter {
    "The list of status values to filter for."
    statuses: [AzureNativeFileIndexingStatus!]!
}

"Filters for list of Azure disks."
input AzureNativeDiskFilters {
    "Filter by attached Azure Virtual Machine."
    attachedVmFilter: AzureNativeAttachedVmFilter
    "Filter by disk type."
    diskTypeFilter: AzureNativeDiskTypeFilter
    "Filter by effective SLA Domain of disks."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by Exocompute connection status in the disk region."
    exocomputeConnectedFilter: AzureNativeDiskExocomputeConnectedFilter
    "Filter disks where file indexing is enabled."
    fileIndexingFilter: AzureNativeDiskFileIndexingFilter
    "Filter by disk name."
    nameSubstringFilter: NameSubstringFilter
    "Filter by disk region."
    regionFilter: AzureNativeRegionFilter
    "Filter by disk relic status."
    relicFilter: RelicFilter
    "Filter by disk resource group name."
    resourceGroupFilter: AzureNativeDiskResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureNativeDiskSubscriptionFilter
    "Filter by disk tags."
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure disks which have resource group name in the given list of resource group names."
input AzureNativeDiskResourceGroupFilter {
    "Filter by list of resource group names."
    resourceGroupNames: [String!]!
}

"Filter to return Azure disks which have rubrik subscription ID in the given list of rubrik subscription IDs."
input AzureNativeDiskSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Filter to return Azure virtual machine which have VM size in the given list of VM sizes."
input AzureNativeDiskTypeFilter {
    "List of disk types."
    diskTypes: [String!]!
}

"Filter to return Azure virtual machine which have region in the given list of regions."
input AzureNativeRegionFilter {
    "List of regions to filter by."
    regions: [AzureNativeRegion!]!
}

"Input for getting Azure resource group if it exists."
input AzureNativeResourceGroupInfoInput {
    "The name of the resource group."
    resourceGroupName: String!
    "The native ID of the Azure subscription."
    subscriptionNativeId: UUID!
}

"Returns Azure resource groups containing objects that are protected by the SLA domains identified by the specified SLA IDs."
input AzureNativeRgSlaFilter {
    "List of SLA Domain IDs."
    effectiveSlaIds: [String!]!
}

"Filters for list of Azure subscriptions."
input AzureNativeSubscriptionFilters {
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by substring of subscription name."
    nameSubstringFilter: NameSubstringFilter
}

"Filter to return Azure objects which have at least one tag in the given list of tags."
input AzureNativeTagFilter {
    "Filter by tag."
    tagFilterParams: [TagFilterParams!]!
}

"Filters for list of Azure virtual machines."
input AzureNativeVirtualMachineFilters {
    "Filter by the protection status of the App."
    appProtectionStatusFilter: CloudNativeInstaceAppProtectionFilter
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by configured Exocompute."
    exocomputeConnectedFilter: AzureNativeVmExocomputeConnectedFilter
    "Filter by file indexing status."
    fileIndexingFilter: AzureNativeVmFileIndexingFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by RBS connection status."
    rbsStatusFilter: AzureVmCcOrCnpRbsConnectionStatusFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by relics."
    relicFilter: RelicFilter
    "Filter by resource group."
    resourceGroupFilter: AzureNativeVmResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureNativeVmSubscriptionFilter
    "Filter by tag."
    tagFilter: AzureNativeTagFilter
    "Filter by virtual machine sizes."
    vmSizeFilter: AzureNativeVmSizeFilter
    "Filter by VNet."
    vnetFilter: AzureNativeVnetFilter
}

"Filter to decide whether to get VMs with a configured exocompute."
input AzureNativeVmExocomputeConnectedFilter {
    "Specifies whether to get only those workloads whose regions have Exocompute configured."
    isConnected: Boolean!
}

"Filter to return Azure VMs which have file indexing enabled."
input AzureNativeVmFileIndexingFilter {
    "The list of status values to filter for."
    statuses: [AzureNativeFileIndexingStatus!]!
}

"Filter by resource group name."
input AzureNativeVmResourceGroupFilter {
    "List of resource group names."
    resourceGroupNames: [String!]!
}

"Filter by virtual machine size."
input AzureNativeVmSizeFilter {
    "List of virtual machine sizes."
    vmSizes: [String!]!
}

"Filter by subscription ID."
input AzureNativeVmSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Filter by VNet name."
input AzureNativeVnetFilter {
    "List of names of VNet."
    vnetNames: [String!]!
}

"NsgRequest for Azure account."
input AzureNsgRequest {
    "Customer Azure cloud account ID."
    cloudAccountId: String = ""
    "NSG resource group."
    resourceGroup: String = ""
}

"Exocompute configuration."
input AzureO365ExocomputeConfig {
    existingComputeConfig: ExistingComputeConfig
    existingGroupConfig: GroupConfig
    existingStorageAccountConfig: ExistingStorageAccountConfig
    newComputeConfig: NewComputeConfig
    newGroupConfig: GroupConfig
    newStorageAccountConfig: NewStorageAccountConfig
    regionName: String!
}

"Configuration for the completion of an Azure OAuth consent flow."
input AzureOauthConsentCompleteInput {
    "ID of the Azure app."
    azureAppId: String
    "Secret for the Azure app."
    azureAppSecret: String
    "Cloud type for Azure."
    azureCloudType: O365AzureCloudType!
    "Authorization code for the consent flow."
    code: String!
    "Redirect URL for the consent flow."
    redirectUrl: String!
    "CSRF token for the setup flow."
    stateToken: String!
    "ID of the Microsoft 365 tenant."
    tenantId: String!
}

"Input to configure the SLA Domain for Azure SQL Database DB."
input AzureSqlDatabaseDbConfigInput {
    "Specifies the number of days for which the Azure SQL Database DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int = 0
}

"Input for exporting Long Term Retention backup of an Azure SQL Database."
input AzureSqlDatabaseDbLtrExport {
    "Specifies the redundancy of the backup of the destination database."
    dbBackupRedundancy: AzureSqlBackupStorageRedundancyType
    "Region in which database is being exported."
    destinationRegionName: String!
    "Resource Group in which database is being exported."
    destinationResourceGroupName: String!
    "Database Server in which database is being exported."
    destinationServerName: String!
    "Rubrik ID of the snapshot from which database is being exported."
    sourceSnapshotRubrikId: UUID!
}

"Input for exporting Point-in-Time backup of an Azure SQL Database."
input AzureSqlDatabaseDbPitExport {
    "Specifies the redundancy of the backup of the destination database."
    dbBackupRedundancy: AzureSqlBackupStorageRedundancyType
    "Timestamp of point in time restore."
    restorePointInTime: DateTime!
}

"Filters for list of Azure SQL Databases."
input AzureSqlDatabaseFilters {
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by relics."
    relicFilter: RelicFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlDatabaseResourceGroupFilter
    "Filter by server."
    serverFilter: CloudNativeDatabaseServerFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlDatabaseSubscriptionFilter
    "Filter by tag."
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure SQL Databases which have resource group name in the given list of resource group names."
input AzureSqlDatabaseResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filters for list of Azure SQL Database Servers."
input AzureSqlDatabaseServerFilters {
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlDatabaseServerResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlDatabaseServerSubscriptionFilter
}

"Filter to return Azure SQL Database Servers which have resource group name in the given list of resource group names."
input AzureSqlDatabaseServerResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filter to return Azure SQL Database Servers which have resource group name in the given list of resource group names."
input AzureSqlDatabaseServerSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Filter to return Azure SQL Databases with subscription ID in the given list of Rubrik subscription IDs."
input AzureSqlDatabaseSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Filters for list of Azure SQL Managed Instance Databases."
input AzureSqlManagedInstanceDatabaseFilters {
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by relic."
    relicFilter: RelicFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlManagedInstanceDatabaseResourceGroupFilter
    "Filter by server."
    serverFilter: CloudNativeDatabaseServerFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlManagedInstanceDatabaseSubscriptionFilter
}

"Filter to return Azure SQL Managed Instance Databases which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceDatabaseResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filter to return Azure SQL Managed Instance Databases which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceDatabaseSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Input to configure the SLA Domain for Azure SQL Managed Instance DB."
input AzureSqlManagedInstanceDbConfigInput {
    "Specifies the number of days for which the Azure SQL Managed Instance DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int = 0
}

"Input for exporting Long Term Retention backup of Azure SQL Managed Instance database."
input AzureSqlManagedInstanceDbLtrExport {
    "Region to which database is being exported."
    destinationRegionName: String!
    "Rubrik ID of the snapshot from which database is being exported."
    sourceSnapshotRubrikId: UUID!
}

"Input for exporting Point-in-Time backup of an Azure SQL Managed Instance database."
input AzureSqlManagedInstanceDbPitExport {
    "Timestamp of point in time restore."
    restorePointInTime: DateTime!
}

"Filters for list of Azure SQL Managed Instance Servers."
input AzureSqlManagedInstanceServerFilters {
    "Filter by effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlManagedInstanceServerResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlManagedInstanceServerSubscriptionFilter
    "Filter by tag."
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure SQL Managed Instance Database Servers which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceServerResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filter to return Azure SQL Managed Instance Database Servers which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceServerSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Input for exporting from Rubrik managed persistent backup."
input AzureSqlPersistentBackupExportInput {
    "Mechanism for SQL Server authentication."
    authMechanism: SqlAuthenticationMechanism
    "Specifies the redundancy of the backup of the destination database."
    dbBackupRedundancy: AzureSqlBackupStorageRedundancyType
    "Login credentials of the server where the new database needs to be created."
    destinationServerCredentials: LoginCredentials
    "Session ID for the OAuth session. Specify this when using AAD authentication mechanism."
    sessionId: String
    "Rubrik ID of the snapshot from which database is being exported."
    sourceSnapshotRubrikId: UUID!
}

"AzureStorageAccountsReq input for Azure account."
input AzureStorageAccountsReq {
    "Cloud account ID."
    cloudAccountId: String = ""
    "Resource group in Azure."
    resourceGroup: String = ""
}

"SubnetRequest for Azure account."
input AzureSubnetReq {
    "Customer Azure cloud account ID."
    cloudAccountId: String = ""
    "VNet resource group."
    resourceGroup: String = ""
    "Azure VNet name."
    vnetName: String = ""
}

"Input required to add the Azure subscription."
input AzureSubscriptionInput {
    "Name or subscription alias to identify the Azure subscription."
    name: String!
    "The native subscription ID of the Azure subscription."
    nativeId: String!
}

"Input to filter Azure Virtual Machines based on RBS connection status."
input AzureVmCcOrCnpRbsConnectionStatusFilter {
    "Connection status of the Rubrik Backup Service (RBS) installed on the instance."
    status: CloudInstanceRbsConnectionStatus!
}

"Azure Virtual Machine configuration parameters."
input AzureVmConfig {
    "Name of CDM product."
    cdmProduct: String = ""
    "Cloud image CDM version."
    cdmVersion: String = ""
    "Azure instance type to be used for nodes."
    instanceType: AzureInstanceType
    "Virtual Machine location or region."
    location: String = ""
    "Network resource group."
    networkResourceGroup: String = ""
    "Network security group."
    networkSecurityGroup: String = ""
    "Resource group for network security group."
    networkSecurityResourceGroup: String = ""
    "Node total attached disk capacity in GB."
    nodeSizeGb: Int = 0
    "Virtual Machine resource group."
    resourceGroup: String = ""
    "Name of the Virtual Machine subnet."
    subnet: String = ""
    "Tags attached to the Virtual Machine."
    tags: String = ""
    "Name of the Virtual Machine image to deploy."
    vmImage: String = ""
    "Standard or dense node."
    vmType: VmType
    "Name of the Virtual Machine VNet."
    vnet: String = ""
    "VNet resource group."
    vnetResourceGroup: String = ""
}

"VNetRequest for Azure account."
input AzureVnetReq {
    "Customer Azure cloud account ID."
    cloudAccountId: String = ""
    "VNet resource group."
    resourceGroup: String = ""
}

"Configuration for O365 OneDrive backup."
input BackupO365OnedriveInput {
    "Polaris IDs of the OneDrives to backup."
    snappableUuids: [UUID!]!
}

"Configuration for O365 SharePoint List backup."
input BackupO365SharePointListInput {
    "Polaris ID of O365 list object."
    snappableUuid: UUID!
}

"Configuration for O365 SharePoint Site backup."
input BackupO365SharePointSiteInput {
    "Workload ID of SharePoint site object."
    siteFid: UUID!
}

"Configuration for O365 Sharepoint Drive backup."
input BackupO365SharepointDriveInput {
    "Polaris IDs of the sharepoint drives to backup."
    snappableUuids: [UUID!]!
}

"Configuration for O365 Team backup."
input BackupO365TeamInput {
    "Polaris IDs of the teams to backup."
    snappableUuids: [UUID!]!
}

input BackupObject {
    eventSeriesId: String = ""
    monitoringId: String = ""
    objectFid: String = ""
}

input BackupRunConfig {
    runNow: Boolean = false
}

"Specifies backup window parameters."
input BackupWindowInput {
    "Duration of backup window in hours."
    durationInHours: Int = 0
    "Start time attributes of the backup window."
    startTimeAttributes: StartTimeAttributesInput
}

"Supported in v5.0+"
input BaseGuestCredentialInput {
    """

    Required. Supported in v5.0+
    Password for the account used to login to the VM guest OS.
    """
    password: String!
    """

    Required. Supported in v5.0+
    Username for the account used to login to the VM guest OS. To include a domain, use the format <domain>\<username>.
    """
    username: String!
}

"Base Office 365 selector with recovery specification."
input BaseO365SelectorWithRecoverySpec {
    "Name of the selector."
    name: String!
    "Recovery specifications."
    recoverySpec: SelectorRecoverySpec!
    "Office 365 workload type."
    snappableType: WorkloadType!
}

input BaseOnDemandSnapshotConfig {
    slaFid: String = ""
}

"Supported in v5.0+"
input BaseOnDemandSnapshotConfigInput {
    "Supported in v5.0+"
    slaId: String
}

"Basic snapshot schedule."
input BasicSnapshotScheduleInput {
    "Frequency of snapshot schedule."
    frequency: Int = 0
    "Retention of snapshot schedule."
    retention: Int = 0
    "Unit of retention in snapshot schedule."
    retentionUnit: RetentionUnit = MINUTES
}

"Input for exporting a batch of Hyper-V virtual machines."
input BatchExportHypervVmInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the exported virtual machine snapshot."
    config: HypervBatchExportSnapshotJobConfigInput!
}

"Input to export a batch Nutanix virtual machines."
input BatchExportNutanixVmInput {
    "Required. Configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the exported virtual machine snapshot."
    config: NutanixBatchExportSnapshotJobConfigInput!
}

"Supported in v6.0+"
input BatchExportSnapshotJobConfigInput {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to export.
    """
    snapshots: [ExportSnapshotJobConfigForBatchInput!]!
}

"Supported in v6.0+"
input BatchInPlaceRecoveryJobConfigInput {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to use for an in-place recovery.
    """
    snapshots: [InPlaceRecoveryJobConfigForBatchInput!]!
}

"Input for batch recovery of Hyper-V virtual machines."
input BatchInstantRecoverHypervVmInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for instant recovery."
    config: HypervBatchInstantRecoverSnapshotJobConfigInput!
}

"Supported in v6.0+"
input BatchInstantRecoveryJobConfigInput {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to mount for Instant Recovery.
    """
    snapshots: [InstantRecoveryJobConfigForBatchInput!]!
}

"Input for initiating Live Mount for a batch of Hyper-V virtual machines."
input BatchMountHypervVmInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the mounted virtual machine snapshot."
    config: HypervBatchMountSnapshotJobConfigInput!
}

"Input to mount a batch of Nutanix virtual machines."
input BatchMountNutanixVmInput {
    "Required. Configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the mounted virtual machine snapshot."
    config: NutanixBatchMountSnapshotJobConfigInput!
}

"Supported in v5.0+"
input BatchMountSnapshotJobConfigInput {
    """

    Required. Supported in v5.0+
    v5.0: Array of virtual machine IDs with snapshots to be live mounted.
    v5.1-v5.3: Array of vm_ids to live mount a snapshot from
    v6.0+: Array of objects containing information about snapshots to mount.
    """
    snapshots: [MountSnapshotJobConfigForBatchV1Input!]!
}

"Supported in v6.0+"
input BatchMountSnapshotJobConfigV2Input {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to mount.
    """
    snapshots: [MountSnapshotJobConfigForBatchV2Input!]!
}

"Request to batch quarantine list of snapshots."
input BatchQuarantineSnapshotInput {
    "Quarantine spec needed for the operation."
    quarantineSpecs: [QuarantineSpecInput!]!
}

"Request to batch release snapshots from quarantine."
input BatchReleaseFromQuarantineSnapshotInput {
    "Quarantine spec needed for the operation."
    quarantineSpecs: [QuarantineSpecInput!]!
}

"Supported in v5.3+"
input BatchVmwareVmRecoverableRangesRequestInput {
    """

    Supported in v5.3+
    Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
    """
    afterTime: DateTime
    """

    Supported in v5.3+
    Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
    """
    beforeTime: DateTime
    """

    Required. Supported in v5.3+
    The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.
    """
    vmIds: [String!]!
}

"Input for invoking the API endpoint to begin a Managed Volume snapshot."
input BeginManagedVolumeSnapshotInput {
    "Details about the reference to be added to the snapshot and the type of request."
    config: BeginSnapshotManagedVolumeRequestInput
    "Required. Managed Volume ID."
    id: String!
    "A string representing the owner of a snapshot. This owner ID must be used when adding a reference to this snapshot."
    ownerId: String
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Request for begin Managed Volume snapshot.
"""
input BeginSnapshotManagedVolumeRequestInput {
    """

    Supported in v7.0+
    Specifies whether the current request is synchronous or asynchronous. By default the value of isAsync will be true. In other words, when a value is not specified, the request is asynchronous.
    """
    isAsync: Boolean
    managedVolumeSnapshotReferenceWrapper: ManagedVolumeSnapshotReferenceWrapperInput
}

"Bidirectional replication specification."
input BidirectionalReplicationSpecInput {
    "Replication specification 1."
    replicationSpec1: UnidirectionalReplicationSpecInput
    "Replication specification 2."
    replicationSpec2: UnidirectionalReplicationSpecInput
}

input BlueprintFailoverJobConfig {
    "The ID of the Blueprint to be failed over."
    blueprintId: UUID!
    childSnappableFailoverInfos: [SnappableFailoverInfoType!]
    "The type of the data transfer, EXPORT, INPLACE, and HYDRATION."
    dataTransferType: DataTransferType
    "Flag to enable recovery using Rubrik backup agent."
    enableRecoveryWithRba: Boolean
    "The failure action of failover, PAUSE or CLEANUP."
    failoverFailureAction: String
    "Errors that should be ignored during failover."
    failoverIgnorableErrors: [BlueprintFailoverIgnorableError!]
    "The operation of the failover, Start or Resume."
    failoverOperation: String
    "The type of the failover job, LOCALRECOVERY, FAILOVER or TEST_FAILOVER."
    failoverType: String!
    "Flag to enable zero RPO."
    isZeroRpo: Boolean
    "The ID of recovery plan if it belongs to a recovery plan."
    recoveryPlanId: UUID
    "The type of the target location, CDM, AZURE, AWS or GCP."
    targetLocationType: LocationType
    "The UUID of the target location."
    targetLocationUuid: UUID
    "Timeout in minutes for failover job, if it is not given, then there will be no timeout."
    timeoutInMinutes: Int
    "Specifies whether the recovery spec is updated as part of failover (after production failover) or not."
    updateRecoverySpecPostFailover: Boolean
}

"Blueprint failover related properties."
input BlueprintFailoverPropertiesInput {
    "Data transfer type: EXPORT, INPLACE, HYDRATION."
    dataTransferType: DataTransferType = EMPTY_VALUE
    "Type of plan: Prod, Test."
    planType: PlanName = PROD
    "Failover target location information."
    targetLocation: LocationInfo
}

input BlueprintFailoverReportGeneratorJobInfo {
    "The IDs for the failover records in the report."
    failoverIds: [String!]!
    "Allows you to use the new report format."
    isNewReportEnabled: Boolean!
}

"Blueprint Recovery Plan job configuration."
input BlueprintRecoveryPlanJobConfig {
    "The ID of the Blueprint to be failed over."
    blueprintId: String = ""
    "The type of the data transfer, EXPORT, INPLACE, and HYDRATION."
    dataTransferType: DataTransferType = EMPTY_VALUE
    "Flag to enable recovery using Rubrik backup agent."
    enableRecoveryWithRba: Boolean = false
    "The type of the failover job, LOCAL_RECOVERY, FAILOVER or TEST_FAILOVER."
    failoverType: BlueprintFailoverType = UNKNOWN_TYPE
    "Sequence of blueprint failover ignorable errors enum."
    ignorableErrors: [BlueprintFailoverIgnorableErrorType!] = []
    "Flag to pause blueprint on error."
    shouldBlueprintPauseOnError: Boolean = false
    "Flag to enable zero RPO."
    shouldEnableZeroRpoRecovery: Boolean = false
    "Snappable failover information."
    snappableFailoverInfos: [ChildSnappableFailoverInfo!] = []
    "The information of the target location."
    targetLocationInfo: RecoveryPlanLocationInfoInput
}

input BrowseDirectoryFiltersInput {
    analyzerGroupIds: [String!] = []
    whitelistEnabled: Boolean = false
}

"Input for browsing MSSQL database snapshots."
input BrowseMssqlDatabaseSnapshotInput {
    "Required. Configuration for the browse request."
    config: MssqlBackupSelectionInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

"Input for browsing Nutanix snapshots."
input BrowseNutanixSnapshotInput {
    "Required. ID of snapshot."
    id: String!
    "Maximum number of entries in the response."
    limit: Int
    "Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries."
    offset: Int
    "Required. The absolute path of the starting point for the directory listing."
    path: String!
}

"List of blueprint ids."
input BulkCancelFailoversInput {
    "Blueprint ids."
    fids: [String!]!
}

"Input for getting web certificate and IPMI information for multiple clusters."
input BulkClusterWebCertAndIpmiInput {
    "List of cluster UUIDs."
    clusterUuids: [UUID!]!
}

"Input for creating multiple fileset templates."
input BulkCreateFilesetTemplatesInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Provide an array containing a separate object for each fileset template definition."
    definitions: [FilesetTemplateCreateInput!]!
}

"Input for creating multiple filesets."
input BulkCreateFilesetsInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. For each fileset, specify a template id along with either host id or share id. If a share id is provided, the host id will be inferred from the host share."
    definitions: [FilesetCreateInput!]!
}

"Supported in v7.0+"
input BulkCreateNasFilesetInput {
    """

    Required. Supported in v7.0+
    Fileset Template object.
    """
    filesetTemplate: FilesetTemplateCreateInput!
    "Supported in v7.0+"
    isHardlinkSupportEnabled: Boolean
    "Supported in v7.0+"
    isPassthrough: Boolean
    """

    Required. Supported in v7.0+
    An array of NAS share IDs the primary fileset is created for.
    """
    nasShareIds: [String!]!
}

"Input for creating NAS filesets."
input BulkCreateNasFilesetsInput {
    "Required. Create a primary fileset and a fileset template for each NAS share, display the NAS shares if they are hidden, and return a list of fileset detail objects for all the primary filesets."
    bulkRequest: BulkCreateNasFilesetInput!
}

"Input for creating multiple on-demand MSSQL database backups."
input BulkCreateOnDemandMssqlBackupInput {
    "Required. Configuration for the on-demand backups."
    config: MssqlBatchBackupJobConfigInput!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for V1BulkDeleteFailoverClusterApp."
input BulkDeleteFailoverClusterAppInput {
    "Required. The ID of each failover cluster application to delete."
    ids: [String!]!
    "Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'."
    preserveSnapshots: Boolean
}

"Input for V1BulkDeleteFailoverCluster."
input BulkDeleteFailoverClusterInput {
    "Required. The ID of each failover cluster to delete."
    ids: [String!]!
    "Specifies whether to preserve the fileset snapshots that belong to a failover cluster. When this value is 'true', the snapshots are preserved. The default value is 'true'."
    preserveSnapshots: Boolean
}

"Input for deleting multiple filesets."
input BulkDeleteFilesetInput {
    "Required. Provide a comma-separated list of fileset IDs."
    ids: [String!]!
    "Flag to indicate whether to convert snapshots of all deleted filesets to relics or to delete them. Applies to all filesets. Default is true."
    preserveSnapshots: Boolean
}

"Input for deleting multiple fileset templates."
input BulkDeleteFilesetTemplateInput {
    "Required. Provide an array with the ID of each fileset template to remove."
    ids: [String!]!
    "Flag to indicate whether to convert snapshots of filesets of the deleted templates to relics or to delete them. Applies to all templates being deleted. Default is true."
    preserveSnapshots: Boolean
}

"Input for deleting multiple registered hosts."
input BulkDeleteHostInput {
    "Required. Provide the ID of each host to deregister."
    ids: [String!]!
}

"Input for deleting NoSQL Protection sources in bulk."
input BulkDeleteMosaicSourcesInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. List of names of sources to be deleted."
    sourceData: BulkDeleteSourceRequestInput!
    "Type of sources to be deleted."
    sourceType: V2BulkDeleteMosaicSourcesRequestSourceType
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to trigger delete of multiple registered NAS systems.
"""
input BulkDeleteNasSystemRequestInput {
    """

    Required. Supported in v7.0+
    NAS system IDs.
    """
    ids: [String!]!
}

"Input to initiate deletion of multiple registered NAS systems."
input BulkDeleteNasSystemsInput {
    "Required. NAS system IDs to delete."
    bulkDeleteNasSystemRequest: BulkDeleteNasSystemRequestInput!
}

"""

Supported in m3.2.0-m4.2.0
Object for sources added on mosaic.
"""
input BulkDeleteSourceRequestInput {
    """

    Supported in m3.2.0-m4.2.0
    Specifies whether to run the request asynchronously.
    """
    async: Boolean
    """

    Required. Supported in m3.2.0-m4.2.0
    List of source names.
    """
    sourceNames: [String!]!
}

"Supported in v5.3+"
input BulkOnDemandSnapshotJobConfigInput {
    """

    Supported in v5.3+
    The ID of the SLA Domain to assign to the virtual machines.
    """
    slaId: String
    """

    Required. Supported in v5.3+
    The IDs of the virtual machines for which to take on-demand snapshots.
    """
    vms: [String!]!
}

"Bulk recovery definition."
input BulkRecoveryDefinition {
    "Specifies Active Directory group selector and recovery specifications."
    adGroupSelectorWithRecoverySpec: ADGroupSelectorWithRecoverySpec
    "Failure action."
    failureAction: FailureActionType!
    "Bulk recovery name."
    name: String!
    "Recovery domain."
    recoveryDomain: RecoveryDomainType!
    "Recovery mode."
    recoveryMode: RecoveryModeType!
}

"Input for refreshing multiple hosts with a single request."
input BulkRefreshHostsInput {
    "ID of each host to refresh."
    ids: [String!]!
    """

    Specifies whether to run the job to refresh hosts
    asynchronously.
    """
    shouldRunAsynchronously: Boolean! = false
}

"Input for registering multiple hosts."
input BulkRegisterHostInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Array containing a registration definition for each host."
    hosts: [HostRegisterInput!]!
}

input BulkUpdateExchangeDagInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Properties to update for each DAG."
    dagUpdateProperties: [ExchangeDagUpdateConfigInput!]!
}

"Input for updating multiple fileset templates."
input BulkUpdateFilesetTemplateInput {
    "Required. Provide an array containing a separate object for each fileset template being modified."
    definitions: [FilesetTemplatePatchInput!]!
}

"Input for updating multiple host certificates."
input BulkUpdateHostInput {
    "Required. Properties to update for each host."
    hostUpdateProperties: [HostUpdateIdInput!]!
}

"Input for BulkUpdateMssqlDbs."
input BulkUpdateMssqlDbsInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Properties to update for each database."
    dbsUpdateProperties: [MssqlDbUpdateIdInput!]!
}

input BulkUpdateOracleDatabasesInput {
    "Required. Properties to use for the update of Oracle Database objects."
    bulkUpdateProperties: OracleBulkUpdateInput!
}

input BulkUpdateOracleHostsInput {
    "Required. Properties to use for the update of Oracle Host objects."
    bulkUpdateProperties: OracleBulkUpdateInput!
}

input BulkUpdateOracleRacsInput {
    "Required. Properties to use for the update of Oracle RAC objects."
    bulkUpdateProperties: OracleBulkUpdateInput!
}

"Input to update the SnapMirror Cloud workloads."
input BulkUpdateSnapMirrorCloudInput {
    """

    Required. v7.0-v8.0: For each SnapMirror Cloud protected object to be updated, specify the properties to update.
    v9.0: For each SnapMirror Cloud workload to be updated, specify the properties to update.
    """
    updateDefinitions: [SnapMirrorCloudUpdateInput!]!
}

"Email address input for organizer and/or attendee."
input CalendarEmailAddressFilter {
    emailAddress: String = ""
    filterType: CalendarEmailAddressFilterType = ORGANIZER
}

"Represents the Calendar group to be restored."
input CalendarGroupInfo {
    "ID of the calendar group to be restored."
    calendarGroupId: String!
    "ID of the snapshot from which to restore."
    snapshotId: UUID!
}

"Represents the Calendar to be restored."
input CalendarInfo {
    "ID of the calendar to be restored."
    calendarId: String!
    "ID of the snapshot from which to restore."
    snapshotId: UUID!
}

"Calendar recurrence object type."
input CalendarRecurrenceFilter {
    recurrenceType: CalendarRecurrenceType = SINGLE
}

"Represents the calendar contents to be restored."
input CalendarRestoreConfig {
    "Calendar Group(s) to restore in this job."
    calendarGroupsToRestore: [CalendarGroupInfo!]!
    "Calendar(s) to restore in this job."
    calendarsToRestore: [CalendarInfo!]!
    "Event(s) to restore in this job."
    eventsToRestore: [EventInfo!]!
}

"Parameters for calendar event search."
input CalendarSearchFilter {
    emailAddresses: [CalendarEmailAddressFilter!] = []
    recurrenceFilter: CalendarRecurrenceFilter
    searchKeywordFilter: CalendarSearchKeywordFilter
    searchObjectFilter: CalendarSearchObjectFilter
    timerange: TimeRangeFilter
}

"Calendar search keyword and type."
input CalendarSearchKeywordFilter {
    keywordType: CalendarSearchKeywordType = NAME
    searchKeyword: String = ""
}

"Calendar search object type."
input CalendarSearchObjectFilter {
    searchObjectType: O365CalendarSearchObjectType = CALENDAR
}

"Input for canceling an activity series."
input CancelActivitySeriesInput {
    "The activity series ID."
    activitySeriesId: UUID!
    "The cluster UUID."
    clusterUuid: UUID!
}

"Request to cancel a threat hunt."
input CancelThreatHuntInput {
    "ID of threat hunt to cancel."
    huntId: String = ""
}

"Cascading archiving specification."
input CascadingArchivalSpecInput {
    "CDM archival location on the replication target the snapshot will be uploaded to."
    archivalLocationId: String = ""
    "Threshold after which the snapshot will be archived."
    archivalThreshold: SlaDurationInput
    "Archival tiering specification input."
    archivalTieringSpecInput: ArchivalTieringSpecInput
    "Frequencies that are associated with this cascaded archival location."
    frequency: [RetentionUnit!] = []
}

"Supported in v6.0+"
input CdmIndicatorOfCompromiseInput {
    "Required. Supported in v6.0+"
    iocType: IndicatorOfCompromiseType!
    """

    Required. Supported in v6.0+
    Type specific payload.
    """
    iocValue: String!
}

"CDM snapshot filter."
input CdmSnapshotFilter {
    "The field to filter the snapshot list on."
    field: CdmSnapshotFilterField = EMPTY
    "Texts used to support the field being filtered on."
    texts: [String!] = []
}

input CdmSnapshotFilterInput {
    clusterUuid: [UUID!]
    isOnDemandSnapshot: Boolean
    snappableId: [String!]
    snapshotId: [UUID!]
    timeRange: TimeRangeInput
}

"Filters for the cluster list."
input CdmUpgradeInfoFilterInput {
    "Location of cluster."
    clusterLocation: [String!]
    connectionState: [ClusterStatus!]
    "Cluster software version greater than or equal to."
    downloadedVersion: [String!]
    "Cluster UUIDs."
    id: [UUID!]
    installedVersion: [String!]
    "Cluster software version greater than or equal to."
    minSoftwareVersion: String
    "Cluster names."
    name: [String!]
    "Prechecks status of cluster."
    prechecksStatus: [PrechecksStatusTypeEnum!]
    "Product type of Rubrik cluster."
    productType: [ClusterProductEnum!]
    "Cluster registration time greater than."
    registrationTime_gt: DateTime
    "Cluster registration time less than."
    registrationTime_lt: DateTime
    "Cluster types."
    type: [ClusterTypeEnum!]
    "Cluster upgrade job status."
    upgradeJobStatus: [ClusterJobStatusTypeEnum!]
    upgradeScheduled: Boolean
    versionStatus: [VersionStatus!]
}

"Cdp performance dashboard filter."
input CdpPerfDashboardFilterParam {
    "Filter for specific CDP IO filter status."
    cdpIoFilterStatus: [IoFilterStatus!] = []
    "CDP performance dashboard filter field."
    filterField: CdpPerfDashboardFilterField = UNKNOWN
    "Filter for specific CDP local status."
    localStatus: [CdpLocalStatus!] = []
    "Filter for specific CDP local status."
    replicationStatus: [CdpReplicationStatus!] = []
    "Filter for specific SLA domain ID."
    slaDomainIds: [String!] = []
    "Filter for specific source cluster."
    sourceClusterUuids: [String!] = []
    "Filter for specific CDP virtual machine name."
    vmName: String = ""
}

"CDP performance dashboard sorting parameters."
input CdpPerfDashboardSortParam {
    "Sorts by order."
    sortOrder: SortOrder = ASC
    "Sort type."
    type: CdpPerfDashboardSortType = UNKNOWN
}

"The cluster on which to add the certificate."
input CertificateClusterInput {
    "The cluster on which to add the certificate."
    clusterUuid: UUID!
    "Specifies whether to add the certificate to the cluster trust store. Any certificate signed by the issuer of the certificate will be trusted by the cluster."
    isTrusted: Boolean!
}

"Supported in v5.1+"
input CertificateImportRequestInput {
    """

    Supported in v5.1+
    ID of the certificate signing request (CSR) associated with the imported certificate.
    """
    csrId: String
    """

    Supported in v5.1+
    User-friendly description for the certificate.
    """
    description: String
    """

    Supported in v7.0+
    A Boolean value specifying whether the certificate should be added to the trust store. When the value is 'true' the certificate is added to the trust store. when the value is 'false', the certificate is not added to trust store.
    """
    isTrusted: Boolean
    """

    Required. Supported in v5.1+
    Display name for the certificate.
    """
    name: String!
    """

    Required. Supported in v5.1+
    The certificates, and optionally private key to be imported, in PEM format.
    """
    pemFile: String!
    """

    Supported in v5.2+
    The private key, in PEM format, to be imported. If a private key is provided using this field instead of the pemFile field, the import fails if the private key is not successfully parsed.
    """
    privateKey: String
}

input ChangePasswordInput {
    "Email of user performing reset."
    email: String = ""
    "New password for user."
    password: String = ""
}

"Input for updating Volume filter driver on host."
input ChangeVfdOnHostInput {
    "Required. Host volume filter driver install definition."
    config: HostVfdInstallRequestInput!
}

input ChildRecoverySpecCreateReqInputType {
    recoveryPoint: Long
    recoverySpec: ChildRecoverySpecInputType!
    slaId: String
    snappableId: String!
}

input ChildRecoverySpecInputType {
    awsSpec: AwsVmRecoverySpecInputType
    vSphereSpec: VSphereVMRecoverySpecInputType
}

"Child snappable failover information."
input ChildSnappableFailoverInfo {
    "Point in time data, which we will be using to recover the snappable."
    recoveryPoint: Long = 0
    "Snappable ID."
    snappableId: String = ""
}

"List of snappable IDs and recovery points."
input ChildSnappableFailoverInfoInput {
    "Point in time to which to recover the VM."
    recoveryPoint: Long = 0
    "Snappable ID of the blueprint child."
    snappableId: String = ""
}

input ClassificationBannerSettingsInputType {
    account: String = ""
    bannerColor: BannerColor = NONE
    bannerText: String = ""
}

input ClassificationLoginSettingsInputType {
    account: String = ""
    loginText: String = ""
}

input CleanupFailoverJobInfo {
    blueprintId: UUID!
    comments: String
}

input CleanupIsolatedRecoveryJobInfo {
    blueprintId: UUID!
    comments: String
    failoverId: UUID!
}

"Input required to clear the credentials used for performing backups."
input ClearCloudNativeSqlServerBackupCredentialsInput {
    "Rubrik IDs of the objects. Some examples of objects are: Azure Subscriptions, Resource Groups."
    objectIds: [UUID!]!
    "The object type for which the credentials should be cleared."
    workloadType: WorkloadLevelHierarchy!
}

"Filter for cloud account query request."
input CloudAccountFilterInput {
    "Field from which query should be filtered."
    field: CloudAccountFilterFieldEnum = NAME
    "Value of the field."
    text: String = ""
}

"Details of the cloud download location."
input CloudDownloadLocationDetailsInput {
    "Specifies whether the download location needs to be created. When the value is true, the location will be created. When the value is false, the location already exists."
    createDownloadLocation: Boolean!
    "Location where the files will be downloaded."
    downloadLocation: String!
    "List of key-value pairs for tags."
    tags: [TagType!]
}

"Supported in v5.0+"
input CloudInstantiationSpecInput {
    """

    Required. Supported in v5.0+
    Specifies the number of seconds to retain an image file that is generated for a snappable. Setting this to -1 disables cloud instantiation for the snappable.
    """
    imageRetentionInSeconds: Long!
}

"Input required to check Rubrik Backup Agent (RBA) connectivity for the VMs."
input CloudNativeCheckRbaConnectivityInput {
    "List of virtual machine Rubrik IDs."
    workloadIds: [UUID!]!
}

"Filter databases for a given list of servers."
input CloudNativeDatabaseServerFilter {
    "Name of database servers."
    serverNames: [String!]!
}

"Input required to download indexed cloud-native snapshot files."
input CloudNativeDownloadFilesInput {
    "Type of download (download to cloud or virtual machine) intended."
    downloadType: FileDownloadType!
    "Rubrik ID of the account from which exocompute is launched during recovery. This is only applicable when the snapshot type is archived."
    exocomputeCloudNativeAccountId: UUID
    "Cloud account region where Rubrik Exocompute is launched during recovery. This is only applicable when the snapshot type is archived."
    exocomputeRegion: String
    "File/Directory(s) to download."
    filePaths: [String!]!
    "Details of the recovery location."
    fileRecoveryLocationDetails: FileRecoveryLocationDetailsInput!
    "Snapshot ID."
    snapshotId: UUID!
    "Use a snapshot type of source, replicated or archived for recovery."
    snapshotType: SnapshotType
}

"Feature for which required permissions have to be checked."
input CloudNativeFeatureForPermissionsCheck {
    "AWS feature."
    awsFeature: AwsFeatureForPermissionCheck
    "Azure feature."
    azureFeature: AzureFeatureForPermissionCheck
}

"DataType representing filters on cloud native tag or label rules."
input CloudNativeFilter {
    "Field to filter on."
    field: CloudNativeTagRuleFilterFields = SLA_DOMAIN
    "Text to filter on, corresponding to the field."
    texts: [String!] = []
}

"DataType representing cloud native ids."
input CloudNativeIds {
    "List of AWS native account IDs."
    awsNativeAccountIds: [String!]
    "List of Azure native subscriptions IDs."
    azureNativeSubscriptionIds: [String!]
    "List of GCP native project IDs."
    gcpNativeProjectIds: [String!]
}

"Filter cloud instances based on whether they have been added as hosts to a Rubrik Cluster."
input CloudNativeInstaceAppProtectionFilter {
    "Boolean value to filter cloud instances added as hosts to a Rubrik Cluster."
    isProtectionSetup: Boolean!
}

"ClusterConfig for new CDM cloud cluster."
input ClusterConfigInput {
    "Cloud account ID."
    adminPassword: String = ""
    "AWS S3 bucket details."
    awsEsConfig: AwsEsConfigInput
    "Azure storage container details."
    azureEsConfig: AzureEsConfigInput
    "Cloud account ID."
    clusterName: String = ""
    "Array of DNS server names."
    dnsNameServers: [String!]
    "Array of DNS search domains for CDM clusters."
    dnsSearchDomains: [String!]
    "Array of NTP servers."
    ntpServers: [String!]
    "Cloud account ID."
    numNodes: Int = 0
    "Cloud account ID."
    userEmail: String = ""
}

"Filters for the list of Rubrik cluster disks."
input ClusterDiskFilterInput {
    "The Rubrik cluster node ID."
    nodeId: String
    "The status of the Rubrik cluster disk."
    status: ClusterDiskStatus
    "The type of the Rubrik cluster disk."
    type: ClusterDiskType
}

"Filters for the cluster list."
input ClusterFilterInput {
    "Location of the Rubrik cluster."
    clusterLocation: [String!]
    "Exclude clusters that do not have any nodes connected."
    excludeEmptyCluster: Boolean
    "Cluster UUIDs."
    id: [UUID!]
    "Returns clusters running software version equal to or greater than the specified version."
    minSoftwareVersion: String
    "Cluster names."
    name: [String!]
    "Object types of snappables protected by the cluster."
    objectType: [ObjectTypeEnum!]
    "Filter for clusters belonging to the specified organizations."
    orgId: [UUID!]
    "The licensed product type."
    product: Product
    "Product type specific filters for the clusters."
    productFilters: [ClusterFilterPerProductInput!]
    "Type of Rubrik cluster."
    productType: [ClusterProductEnum!]
    "The mode in which the cluster is registered."
    registeredMode: [ClusterRegistrationMode!]
    "Cluster registration time greater than."
    registrationTime_gt: DateTime
    "Cluster registration time less than."
    registrationTime_lt: DateTime
    "Cluster types."
    type: [ClusterTypeEnum!]
}

"Input to filter clusters by parameters specific to product types."
input ClusterFilterPerProductInput {
    "Returns clusters running software version equal to or greater than the specified version."
    minSoftwareVersion: String
    "Type of Rubrik cluster."
    productType: ClusterProductEnum!
}

"Cluster geolocation input."
input ClusterGeolocationInput {
    "Address information for mapping the location of the Rubrik cluster."
    address: String!
}

input ClusterInfCidrsInput {
    clusterId: String = ""
    clusterName: String = ""
    interfaceCidr: [InterfaceCidrInput!] = []
}

"GeoLocation of the cluster."
input ClusterLocationEdit {
    address: String!
    latitude: Float!
    longitude: Float!
}

"Filters for the list of Rubrik cluster node."
input ClusterNodeFilterInput {
    "The Rubrik cluster node ID."
    nodeId: String
    "The status of the Rubrik cluster node."
    status: ClusterNodeStatus
}

"Cluster timezone input."
input ClusterTimezoneInput {
    timezone: ClusterTimezoneType!
}

"Cluster update input."
input ClusterUpdateInput {
    """

    Version of the EULA accepted by admin. By modifying this attribute you
    agree to the specific version of the EULA.
    """
    acceptedEulaVersion: String
    "New geolocation for a Rubrik cluster."
    geolocation: ClusterGeolocationInput
    "New name for a Rubrik cluster."
    name: String
    "New time zone for a Rubrik cluster."
    timezone: ClusterTimezoneInput
}

"Contains the cluster UUID and Oracle database ID."
input ClusterUuidWithDbIdInput {
    "Required. Specifies UUID used to identify the cluster that the request goes to."
    clusterUuid: UUID!
    "ID of the Oracle database."
    dbId: String!
}

"Supported in v6.0+"
input ClusterVisibilityConfigInput {
    """

    Required. Supported in v6.0+
    Names of the host groups being protected.
    """
    hostGroupFilter: [String!]!
    """

    Required. Supported in v6.0+
    VMware managed object ID of the compute cluster. This is not the ID managed by Rubrik.
    """
    id: String!
    """

    Supported in v6.0+
    A Boolean that specifies whether the compute cluster is a VMware Metro Storage Cluster.
    """
    isVmwareMetroStorageCluster: Boolean
}

input ClusterWebSignedCertificateInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

"Filter cluster data."
input CommonClusterFilterInput {
    id: [UUID!]
    type: [ClusterTypeEnum!]
}

input CommonNotificationSettingInputType {
    hostname: String = ""
    networkType: NetworkProtocolTypeEnum = UDP
    port: Int = 0
    securityType: SMTPSecurityTypeEnum = NONE
    trustedCerts: String = ""
}

"Input for completing authentication of the Azure Cloud Accounts."
input CompleteAzureCloudAccountOauthInput {
    "Client ID of the application. The appID is empty if the tenant uses a Rubrik app or a custom app."
    appId: String
    "Client secret key of the application. The appSecretKey is empty if the tenant uses a Rubrik app or a custom app."
    appSecretKey: String
    "Authorization code received after the OAuth consent flow. For more information, see https://auth0.com/docs/flows/authorization-code-flow."
    authorizationCode: String!
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudType = AZUREPUBLICCLOUD
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeature!]!
    "Ensures that only basic OAuth is performed. The session will be stored in Rubrik, however, no additional information (such as list of subscriptions) is returned."
    performBasicOauth: Boolean = false
    "Redirect URL used in the OAuth flow."
    redirectUrl: String!
    "The resource that requires OAuth access."
    resource: AzureOauthResource = AZURE_RESOURCE_MANAGER
    "Session ID of the current OAuth session."
    sessionId: String!
    "Specifies whether to skip permission checks of Azure subscriptions required for addition."
    shouldSkipPermissionChecks: Boolean!
    "Domain name of the Azure Tenant."
    tenantDomainName: String!
}

"Filters to list configuration backups."
input ConfigBackupFilterInput {
    "Backup location of the backup file."
    backupLocationType: UploadLocationType
    "Connection state of the source cluster."
    connectionStates: [ClusterStatus!] = []
    "List the latest backup files that are available for source cluster."
    latest: Boolean = false
    "Software version of the source cluster at the time of backup."
    softwareVersions: [String!] = []
    "Source cluster UUIDs."
    sourceClusterUuids: [UUID!] = []
}

input ConfigGroupByInput {
    "Aggregations for single-level groupBy. This does not affect double-level groupBys."
    aggregations: [String!]!
    "Report-level groupBy selection."
    groupById: String!
}

"Information about CA certificate. Provide uuid of the certificate on the cluster to use an existing certificate. Otherwise, provide the certificate details to create a new certificate on the cluster."
input ConfigProtectionCaCert {
    "CA certificate provider type."
    caProvider: CaCertProviderType!
    "Content of the CA certificate."
    certificate: String
    "Description of the CA certificate."
    description: String
    "Name of the CA certificate."
    name: String
    "ID of the CA certificate."
    uuid: UUID
}

"Filters for the configuration protection."
input ConfigProtectionInfoFilterInput {
    "Geolocation address of a Rubrik cluster."
    clusterLocation: [String!]
    "Status of configuration protection for a cluster."
    configProtectionStatus: [ConfigProtectionStatus!]
    "Connection state of a Rubrik cluster."
    connectionState: [ClusterStatus!]
    "Cluster UUIDs."
    id: [UUID!]
    "The version of CDM running on the cluster must be greater than or equal to the version specified by this field."
    minSoftwareVersion: String
    "Cluster names."
    name: [String!]
    "Product type of a Rubrik cluster."
    productType: [ClusterProductEnum!]
    "Cluster types."
    type: [ClusterTypeEnum!]
}

"Input for configuring SAP HANA database for restore."
input ConfigureSapHanaRestoreInput {
    "Required. ID of the target SAP HANA database to be configured."
    id: String!
    "Required. The object containing configuration related metadata for the source SAP HANA database."
    sourceConfig: SapHanaRestoreSourceConfigInput!
}

"The contact folder to be restored."
input ContactFolderInfo {
    "ID of the contact folder to be restored."
    contactFolderId: String!
    "ID of the snapshot from which to restore."
    snapshotId: UUID!
    "Num of the snapshot from which to restore."
    snapshotNum: Int!
}

"The contact to be restored."
input ContactInfo {
    "ID of the contact to be restored."
    contactId: String!
    "ID of the snapshot from which to restore."
    snapshotId: UUID!
    "Number of the snapshot from which to restore."
    snapshotNum: Int!
}

"The contacts to be restored."
input ContactsRestoreConfig {
    "Contact folder(s) to restore in this job."
    contactFoldersToRestore: [ContactFolderInfo!]!
    "Contact(s) to restore in this job."
    contactsToRestore: [ContactInfo!]!
}

"Parameters for contacts search."
input ContactsSearchFilter {
    "Filters on keywords appearing in the contact name, company name, emails or addresses."
    searchKeywordFilter: ContactsSearchKeywordFilter
    "Filters on object type (contact, folder, or all)."
    searchObjectFilter: ContactsSearchObjectFilter
}

"Contacts search keyword."
input ContactsSearchKeywordFilter {
    "Filters on a search keyword."
    searchKeyword: String = ""
}

"Contacts search object type."
input ContactsSearchObjectFilter {
    "Filters on object type (contact, folder, or all)."
    searchObjectType: O365ContactsSearchObjectType = CONTACT
}

"Filters for the list of SLA Domains."
input ContextFilterInputField {
    "The SLA Domain field."
    field: String!
    "The text of the SLA Domain field."
    text: String!
}

"Represents the conversation contents to be restored."
input ConversationsRestoreConfig {
    ChannelInfoForFullRestore: TeamsConvChannelInfo
    ChannelsToRestore: [TeamsConvChannelInfo!]!
    O365AppID: String!
    RefreshTokenEncrypted: String!
    SearchFilter: TeamsConversationsSearchFilterJson
    ShouldRestoreFileAttachments: Boolean!
}

"Input for creating an AWS target mapping."
input CreateAutomaticAwsTargetMappingInput {
    "Field for creating AWS compute settings ID."
    awsComputeSettingsId: String
    "Field for specifying AWS bucket name."
    bucketPrefix: String!
    "Field for specifying cloud account ID."
    cloudAccountId: UUID!
    "Field for specifying list cluster UUID of the target."
    clusterUuidList: [String!]
    "Field for specifying whether consolidation is enabled or not."
    isConsolidationEnabled: Boolean!
    "Field for specifying KMS master key for encryption."
    kmsMasterKeyId: String
    "Field for specifying name of the target mapping."
    name: String!
    "Field for creating proxy settings."
    proxySettings: ProxySettingsInput
    "Field for specifying region of the target."
    region: AwsRegion!
    "Field for specifying RSA key for encryption."
    rsaKey: String
    "Field for specifying storage class of the target."
    storageClass: AwsStorageClass!
}

"Input for create an Azure target mapping."
input CreateAutomaticAzureTargetMappingInput {
    "Access key of the Azure target."
    accessKey: String!
    "Cloud Account Id of the target subscription."
    cloudAccountId: UUID!
    "Field for specifying list cluster UUID of the target."
    clusterUuidList: [String!]
    "Compute settings of the Azure target."
    computeSettings: AzureCloudComputeSettingsInput
    "Prefix of the container inside storage account. "
    containerNamePrefix: String!
    "Instance type of the Azure target."
    instanceType: InstanceTypeEnum!
    "Field for specifying whether consolidation is enabled or not."
    isConsolidationEnabled: Boolean!
    "Field for specifying name of the target mapping."
    name: String!
    "Field for creating proxy settings."
    proxySettings: ProxySettingsInput
    "Field for specifying RSA key for encryption."
    rsaKey: String!
    "Name or prefix of the storage account."
    storageAccountName: String!
}

"Input for creating RCS locations."
input CreateAutomaticRcsTargetMappingInput {
    "List of Rubrik cluster UUIDs."
    clusterUuidList: [String!]
    "IP mapping for each Rubrik cluster."
    ipMapping: [IpMappingInput!]
    "Immutability lock period in days."
    lockDurationDays: Long!
    "Name of the RCS location."
    name: String!
    "Region for the RCS location."
    region: RcsRegionEnumType!
    "RSA key for the RCS location."
    rsaKey: String
    "Tier for the RCS location."
    tier: RcsTierEnumType!
}

"Input for creating an AWS account."
input CreateAwsAccountInput {
    "Access key of the AWS account."
    accessKey: String!
    "Description of the AWS account."
    description: String
    "Name of the AWS account."
    name: String!
    "Secret key of the AWS account."
    secretKey: String!
}

"CreateAwsClusterInput for Aws account."
input CreateAwsClusterInput {
    "Cloud account ID of the AWS account."
    cloudAccountId: String = ""
    "Cluster configuration to initialize cluster."
    clusterConfig: ClusterConfigInput
    "Disable API termination on AWS instances."
    disableApiTermination: Boolean = false
    "Create disk based or CCES."
    isEsType: Boolean = false
    "Flag to keep the cluster on failure."
    keepClusterOnFailure: Boolean = false
    "Aws region."
    region: String = ""
    "Virtual Machine configuration to create nodes."
    vmConfig: AwsVmConfig
}

"Cloud compute settings input for the AWS archival target."
input CreateAwsComputeSettingInput {
    "Cloud account ID of the AWS target."
    cloudAccountId: String = ""
    "List of cluster interface CIDR."
    clusterInterfaceCidrs: [ClusterInfCidrsInput!] = []
    "Specify if the security group is Rubrik SaaS Managed."
    isSecurityGroupPolarisManaged: Boolean = false
    "Name of the AWS cloud compute setting."
    name: String = ""
    "AWS target region."
    region: AwsRegion = UNKNOWN_AWS_REGION
    "Security Group ID of the AWS target."
    securityGroupId: String = ""
    "Subnet ID of the AWS target."
    subnetId: String = ""
    "VPC ID of the AWS target."
    vpcId: String = ""
}

"Input to create AWS exocompute configurations."
input CreateAwsExocomputeConfigsInput {
    "Rubrik ID for cloud account."
    cloudAccountId: UUID!
    "List of exocompute configurations for the cloud account."
    configs: [AwsExocomputeConfigInput!]!
    "Specifies whether to start Exocompute health check."
    triggerHealthCheck: Boolean = false
}

"Input for creating an AWS Reader Target."
input CreateAwsReaderTargetInput {
    "Field for creating AWS compute settings ID."
    awsComputeSettingsId: String
    "Field for specifying retrieval tier for this target."
    awsRetrievalTier: AwsRetrievalTier
    "Field for specifying AWS bucket name."
    bucketName: String!
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean! = false
    "Field for specifying cloud account ID."
    cloudAccountId: UUID!
    "Field for specifying cloud compute Settings."
    cloudComputeSettings: AwsCloudComputeSettingsInput
    "Field for specifying cluster UUID of the target."
    clusterUuid: String!
    "Compute proxy settings for AWS reader target."
    computeProxySettings: ProxySettingsInput
    "Field for specifying a password for encrypting the AWS location contents."
    encryptionPassword: String
    "Field for specifying whether consolidation is enabled or not."
    isConsolidationEnabled: Boolean!
    "Optional field for specifying the KMS server endpoint when using KMS-based encryption, for example a VPC endpoint. When not specified, the default, region-based KMS server endpoint is used."
    kmsEndpoint: String
    "Field for specifying KMS master key for encryption."
    kmsMasterKeyId: String
    "Field for specifying name of the target."
    name: String!
    "Field for creating proxy settings."
    proxySettings: ProxySettingsInput
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
    "Field for specifying region of the target."
    region: AwsRegion!
    "Field for specifying RSA key for encryption."
    rsaKey: String
    "Optional field for specifying an AWS S3 endpoint, for example a VPC endpoint. When not specified, the default, region-based S3 endpoint is used."
    s3Endpoint: String
    "Field for specifying storage class of the target."
    storageClass: AwsStorageClass!
}

"Input for creating ab AWS archival target."
input CreateAwsTargetInput {
    "Compute settings ID of the AWS archival target."
    awsComputeSettingsId: String
    "Retrieval tier of the AWS archival target."
    awsRetrievalTier: AwsRetrievalTier
    "Bucket name of the AWS archival target."
    bucketName: String!
    "Specifies whether the proxy settings should be bypassed for creating this AWS archival target."
    bypassProxy: Boolean! = false
    "Cloud account ID of the AWS archival target."
    cloudAccountId: UUID!
    "Cloud compute settings of the AWS archival target."
    cloudComputeSettings: AwsCloudComputeSettingsInput
    "Cluster UUID to which the AWS archival target is associated."
    clusterUuid: String!
    "Compute Proxy settings of the AWS archival target."
    computeProxySettings: ProxySettingsInput
    "Encryption password for the AWS archival target."
    encryptionPassword: String
    "AWS immutability settings."
    immutabilitySettings: AwsImmutabilitySettings
    "Flag to determine if consolidation is enabled in this AWS archival target."
    isConsolidationEnabled: Boolean!
    "Optional field for specifying the KMS server endpoint when using KMS-based encryption, for example a VPC endpoint. When not specified, the default, region-based KMS server endpoint is used."
    kmsEndpoint: String
    "KMS master key ID to be used for encryption."
    kmsMasterKeyId: String
    "Name of the AWS archival target."
    name: String!
    "Proxy settings of the AWS archival target."
    proxySettings: ProxySettingsInput
    "Region of the AWS archival target."
    region: AwsRegion!
    "RSA key to be used for encryption."
    rsaKey: String
    "Optional field for specifying an AWS S3 endpoint, for example a VPC endpoint. When not specified, the default, region-based S3 endpoint is used."
    s3Endpoint: String
    "Storage class of the AWS archival target."
    storageClass: AwsStorageClass!
}

"Input for creating an Azure account."
input CreateAzureAccountInput {
    "Description of the Azure account."
    description: String
    "Name of the Azure account."
    name: String!
    "Subscription ID of the Azure account."
    subscriptionId: String!
}

"CreateAzureClusterInput for Azure account."
input CreateAzureClusterInput {
    "Customer Azure cloud account ID."
    cloudAccountId: String = ""
    "Input cluster configuration."
    clusterConfig: ClusterConfigInput
    "If cluster is CC-ES."
    isEsType: Boolean = false
    "Flag to keep the cluster on failure."
    keepClusterOnFailure: Boolean = false
    "Virtual Machine input configuration."
    vmConfig: AzureVmConfig
}

"Input for creating an Azure Reader Target."
input CreateAzureReaderTargetInput {
    "Field for specifying access key of the target."
    accessKey: String!
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean! = false
    "Field for specifying cloud account ID."
    cloudAccountId: UUID!
    "Field for specifying cluster UUID of the target."
    clusterUuid: UUID!
    "Field for Azure compute settings."
    computeSettings: AzureCloudComputeSettingsInput
    "Field for specifying container name of the target."
    containerName: String!
    "Field for specifying immutability settings of Azure target."
    immutabilitySettings: AzureImmutabilitySettings
    "Field for specifying instance type of Azure target."
    instanceType: InstanceTypeEnum!
    "Field for specifying whether consolidation is enabled or not."
    isConsolidationEnabled: Boolean!
    "Field for specifying name of the target."
    name: String!
    "Field for specifying compute settings."
    proxySettings: ProxySettingsInput
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
    "Retrieval tier to use for retrieving data from archive storage."
    retrievalTier: AzureRetrievalTier
    "Field for specifying RSA key for encryption."
    rsaKey: String!
    "Field for specifying storage account name."
    storageAccountName: String!
}

"Input for creating an Azure archival target."
input CreateAzureTargetInput {
    "Access key of the Azure archival target."
    accessKey: String!
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean! = false
    "Cloud account ID of the Azure archival target."
    cloudAccountId: UUID!
    "Cluster UUID of the Azure archival target."
    clusterUuid: UUID!
    "Compute settings of the Azure archival target."
    computeSettings: AzureCloudComputeSettingsInput
    "Container name of the Azure archival target."
    containerName: String!
    "Immutability settings of the Azure archival target."
    immutabilitySettings: AzureImmutabilitySettings
    "Instance type of the Azure archival target."
    instanceType: InstanceTypeEnum!
    "Flag to determine if consolidation is enabled."
    isConsolidationEnabled: Boolean!
    "Name of the Azure archival target."
    name: String!
    "Proxy settings of the Azure archival target."
    proxySettings: ProxySettingsInput
    "Retrieval tier to use for retrieving data from archive storage."
    retrievalTier: AzureRetrievalTier
    "RSA key of the Azure archival target for encryption."
    rsaKey: String!
    "Storage account name of the Azure archival target."
    storageAccountName: String!
}

"Input to create a storage setting for AWS."
input CreateCloudNativeAwsStorageSettingInput {
    bucketPrefix: String!
    bucketTags: TagsInput
    cloudAccountId: UUID!
    cloudNativeLocTemplateType: CloudNativeLocTemplateType!
    kmsMasterKeyId: String
    name: String!
    region: AwsRegion
    storageClass: AwsStorageClass!
}

"Input for create storage settings for an account."
input CreateCloudNativeAzureStorageSettingInput {
    "Cloud Account Id of the target subscription."
    cloudAccountId: UUID!
    "Template type of the storage settings. Must be either SOURCE_REGION or SPECIFIC_REGION."
    cloudNativeLocTemplateType: CloudNativeLocTemplateType!
    "Information about the customer-managed key and key vault."
    cmkInfo: [AzureCmkInput!]
    "Name of the container inside storage account. This field must be between 3 to 64 characters in length and must start with a letter or number, and can contain only lowercase letters, numbers, and the dash (-) characters."
    containerName: String!
    "Name of the storage setting."
    name: String!
    "Redundancy type for the Storage Account. Some examples are: LRS, ZRS, GRS etc. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy."
    redundancy: AzureRedundancy!
    "Name or prefix of the storage account. This field can not be empty string and must contain only lowercase letters and numbers. For 'SOURCE_REGION' Template Type, this field must be less than 16 characters. Random UID of eight characters is appended to the prefix to create the actual storage accounts. For 'SPECIFIC_REGION' Template Type, this field must be less than 24 characters."
    storageAccountName: String!
    "Region for the Storage Account. For 'SOURCE_REGION' Template Type, this field will be 'UNKNOWN_AZURE_REGION'. For 'SPECIFIC_REGION' Template Type, this field must be a azure region supporting GPV2, More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#redundancy-in-the-primary-region."
    storageAccountRegion: AzureRegion
    "Tags of the storage account."
    storageAccountTags: TagsInput
    "Storage Tier for the Storage Account. Only Cool, Hot storage tier are supported for now. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers."
    storageTier: AzureStorageTier!
    "Azure native subscription id."
    subscriptionNativeId: String!
}

"Input required to create a cloud-native label rule."
input CreateCloudNativeLabelRuleInput {
    "Specifies whether this label rule apply to all cloud accounts."
    applyToAllCloudAccounts: Boolean
    "Cloud native accounts on which label rule will be applied."
    cloudNativeAccountIds: CloudNativeIds
    "Label key-value pair for label rule."
    label: LabelType!
    "Name of the label rule."
    labelRuleName: String!
    "Type of managed object on which label rule will be applied."
    objectType: CloudNativeLabelObjectType!
    "Corresponds to the assignment type for the SLA."
    slaAssignType: TagRuleSlaAssignType!
    "Corresponds to optional global SLA Rubrik ID."
    slaId: UUID
}

"Input for creating Rubrik Cloud Vault Azure storage settings."
input CreateCloudNativeRcvAzureStorageSettingInput {
    "Template type of the storage settings - SOURCE_REGION or SPECIFIC_REGION."
    cloudNativeLocTemplateType: CloudNativeLocTemplateType!
    "Name of the storage setting."
    name: String!
    "Rubrik Cloud Vault location region. For source region template type, this field will be 'UNKNOWN_AZURE_REGION'. For specific region template type, this field must be an Azure region supported for RCV in COOL tier."
    region: AzureRegion!
}

"Input required to create a cloud-native tag rule."
input CreateCloudNativeTagRuleInput {
    "Specifies whether this tag rule apply to all cloud accounts."
    applyToAllCloudAccounts: Boolean
    "Cloud native accounts on which tag rule will be applied."
    cloudNativeAccountIds: CloudNativeIds
    "Type of managed object on which tag rule will be applied."
    objectType: CloudNativeTagObjectType!
    "Corresponds to the assignment type for the SLA."
    slaAssignType: TagRuleSlaAssignType!
    "Corresponds to optional global SLA Rubrik ID."
    slaId: UUID
    "Tag key-value pair for tag rule."
    tag: TagType!
    "Name of the tag rule."
    tagRuleName: String!
}

"Configuration to setup config protection for the cluster."
input CreateConfigProtectionSetupInput {
    "Details of the CA certificate."
    caCertificate: ConfigProtectionCaCert
    "UUID of the cluster."
    clusterUuid: UUID!
    "Password for the backup encryption."
    encryptionPassword: String!
    "UUID of the replication target."
    replicationTargetUuid: UUID
    "Upload location type."
    uploadLocationType: UploadLocationType!
}

input CreateCustomAnalyzerInput {
    analyzerType: AnalyzerTypeEnum = UNDEFINED
    dictionary: [String!] = []
    dictionaryCsv: String = ""
    id: String = ""
    name: String = ""
    regex: String = ""
}

"Input for creating a custom report."
input CreateCustomReportInput {
    "Chart configs for the report."
    charts: [ReportChartCreate!]
    "Filters for the report data."
    filters: CustomReportFiltersConfig!
    focus: ReportFocusEnum!
    "Specifies whether the report should be hidden from the gallery view."
    isHidden: Boolean = false
    "Specifies whether the report is auto-generated and not editable."
    isReadOnly: Boolean = false
    "Name of the report."
    name: String!
    "Table configs for the report."
    tables: [ReportTableCreate!]
}

input CreateDownloadSnapshotForVolumeGroupInput {
    "Required. ID of snapshot."
    id: String!
}

input CreateExchangeSnapshotMountInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Configuration for the mount request."
    config: ExchangeMountSnapshotConfigInput!
    "Required. ID of the snapshot."
    id: String!
}

"Input for exporting an Oracle database excluding advanced options."
input CreateExportOracleDbInput {
    "Required. Configuration parameters for a job to export an Oracle database from a specified snapshot or timestamp."
    config: ExportOracleDbConfigInput!
    "Required. ID of the database to be exported."
    id: String!
}

"Input for V1CreateFailoverClusterApp."
input CreateFailoverClusterAppInput {
    "Required. Create configuration parameters for a failover cluster app."
    config: FailoverClusterAppConfigInput!
}

"Input for V1CreateFailoverCluster."
input CreateFailoverClusterInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Create configuration parameters for a failover cluster."
    config: FailoverClusterConfigInput!
}

"Creates a fileset job to take a backup."
input CreateFilesetSnapshotInput {
    "Configuration for the on-demand backup."
    config: BaseOnDemandSnapshotConfigInput
    "Required. ID of the Fileset."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for GCP Reader Target."
input CreateGcpReaderTargetInput {
    "Field for creating proxy settings."
    archivalProxySettings: ProxySettingsInput
    "Field for specifying GCP bucket name."
    bucket: String!
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean! = false
    "Field for specifying cluster UUID of the target."
    clusterUuid: UUID!
    "Field for specifying encryption password."
    encryptionPassword: String!
    "Field for specifying name of the target."
    name: String!
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
    "Field for specifying region of the target."
    region: GcpRegion!
    "Field for specifying service account JSON key."
    serviceAccountJsonKey: String!
    "Field for specifying storage class of the target."
    storageClass: GcpStorageClass!
}

"Input for creating a GCP archival target."
input CreateGcpTargetInput {
    "Proxy settings of the GCP archival target."
    archivalProxySettings: ProxySettingsInput
    "Bucket of the GCP archival target."
    bucket: String!
    "Specifies whether the proxy settings should be bypassed for creating this archival target location."
    bypassProxy: Boolean! = false
    "Cluster UUID of the GCP archival target."
    clusterUuid: UUID!
    "Encryption password for the GCP archival target."
    encryptionPassword: String!
    "Name of the GCP archival target."
    name: String!
    "Region of the GCP archival target."
    region: GcpRegion!
    "Service account JSON key for the GCP archival target."
    serviceAccountJsonKey: String!
    "Storage class of the GCP archival target."
    storageClass: GcpStorageClass!
}

"Input for creating a new Glacier reader target."
input CreateGlacierReaderTargetInput {
    "Cloud account ID."
    cloudAccountId: UUID!
    "Cluster UUID of the target."
    clusterUuid: String!
    "Field for specifying a password for encrypting the Glacier location contents."
    encryptionPassword: String
    "Name of the target."
    name: String!
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
    "Region of the target."
    region: AwsRegion!
    "Retrieval tier for this target."
    retrievalTier: AwsRetrievalTier
    "Amazon Glacier vault name."
    vaultName: String!
}

"Input to create SLA Domain."
input CreateGlobalSlaInput {
    "List of archival specifications for SLA Domain."
    archivalSpecs: [ArchivalSpecInput!] = []
    "Backup Window specifications for SLA Domain."
    backupWindows: [BackupWindowInput!] = []
    "Description of the SLA Domain."
    description: String = ""
    "Backup Window specifications of first full backup for SLA Domain."
    firstFullBackupWindows: [BackupWindowInput!] = []
    "Specifies if the SLA Domain to be created must be Retention Locked or not."
    isRetentionLockedSla: Boolean = false
    "Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires."
    localRetentionLimit: SlaDurationInput
    "Log configuration of the SLA Domain."
    logConfig: LogConfig
    "Name of the SLA Domain."
    name: String = ""
    "Object-specific configuration of the SLA Domain."
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    "Object types of the SLA Domain."
    objectTypes: [SlaObjectType!] = []
    "Replication specification of the SLA Domain."
    replicationSpecInput: ReplicationSpecInput
    "Replication specificationsof the SLA Domain."
    replicationSpecsV2: [ReplicationSpecV2Input!] = []
    "Snapshot schedule of the SLA Domain."
    snapshotSchedule: GlobalSnapshotScheduleInput
}

input CreateGuestCredentialInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Object for guest OS credential definition."
    definition: GuestCredentialDefinitionInput!
}

"Input for initiating Live Mount for a Hyper-V virtual machine."
input CreateHypervVirtualMachineSnapshotMountInput {
    "Configuration for the mount request."
    config: HypervMountSnapshotJobConfigInput
    "Required. ID of Snapshot."
    id: String!
}

"A Set of fields needed to create Rubrik Kubernetes manifest."
input CreateK8sAgentManifestInput {
    "UUID of the Kubernetes cluster."
    clusterId: UUID!
    "Timeout for the SignedURL of Rubrik Kubernetes manifest in minutes."
    timeoutMinutes: Int!
}

"Configuration of the Kubernetes cluster to onboard."
input CreateK8sClusterInput {
    "The ID of the CDM cluster for ON_PREM Kubernetes clusters."
    cdmClusterId: UUID
    "List of host IPs/hostnames of the Kubernetes nodes."
    hostList: [String!]!
    "Name of the Kubernetes cluster."
    name: String!
    "Port on the Kubernetes node for the Kubernetes Ingress Controller."
    port: Int!
    "The proxy URL for the Kubernetes agent."
    proxyUrl: String
    "Ports in the NodePort service range of the Kubernetes cluster."
    rbsPortRanges: [PortRange!]!
    "KuprClusterType of the Kubernetes cluster."
    type: K8sClusterProtoType!
    "NodePort ranges dedicated for export operations."
    userDrivenPortRanges: [PortRange!]
}

"Configuration of the Kubernetes namespaces to be backed-up."
input CreateK8sNamespaceSnapshotsInput {
    "List of namespace IDs and corresponding SLA Domains."
    snapshotInput: [K8sNamespaceSnapshot!]!
}

"Contains information about the snapshots to be placed on legal hold andconfiguration of the legal hold on which they have to be placed."
input CreateLegalHoldInput {
    "Configuration of the required legal hold."
    holdConfig: HoldConfig
    "List of snapshot IDs."
    snapshotIds: [String!] = []
    "Optional user note."
    userNote: String = ""
}

"Input for creating manual target mapping."
input CreateManualTargetMappingInput {
    "Field for specifying target and Rubrik cluster mapping."
    archivalLocationClusterMappings: [TargetToClusterMapping!] = []
    "Field for specifying name of the target mapping."
    name: String = ""
    "Field for specifying target type of the target mapping."
    type: TargetType = AWS
}

"Input for creating an MSSQL Live Mount."
input CreateMssqlLiveMountInput {
    "Required. Configuration for the Live Mount."
    config: MountMssqlDbConfigInput!
    "Required. ID of the SQL Server database."
    id: String!
}

"Input for creating an MSSQL Log Shipping configuration."
input CreateMssqlLogShippingConfigurationInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An object that contains the values of a log shipping configuration."
    config: MssqlLogShippingCreateConfigV2Input!
    "Required. ID of the primary database object."
    id: String!
}

"Supported in v5.0+"
input CreateNewVappParamsInput {
    """

    Required. Supported in v5.0+
    Name of the specified vApp within vCloud.
    """
    name: String!
    """

    Required. Supported in v5.0+
    ID assigned to the Organization VDC object that will contain the newly created vApp object.
    """
    orgVdcId: String!
}

"Input for creating a NFS Reader Target."
input CreateNfsReaderTargetInput {
    "Field for specifying cluster UUID of the target."
    clusterUuid: UUID!
    "Field for specifying destination folder of the NFS."
    destinationFolder: String!
    "Field for specifying the encryption password."
    encryptionPassword: String
    "Field for specifying the exported directory at the host of the NFS location."
    exportDir: String!
    "Field for specifying file lock period, in seconds."
    fileLockPeriodInSeconds: Int!
    "Field for specifying the host of the NFS location."
    host: String!
    "Field for whether consolidation should be enabled or not for this target."
    isConsolidationEnabled: Boolean!
    "Field for specifying name of the target."
    name: String!
    "Field for specifying the authentication type of NFS."
    nfsAuthType: AuthTypeEnum!
    "Field for specifying the version of NFS."
    nfsVersion: Int
    "Field for specifying other NFS options."
    otherNfsOptions: String
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
}

"Input to create the NFS archival location."
input CreateNfsTargetInput {
    "Cluster UUID of the NFS archival location."
    clusterUuid: UUID!
    "Destination folder of the NFS archival location."
    destinationFolder: String!
    "Encryption password for the NFS archival location."
    encryptionPassword: String
    "Export directory of the NFS archival location."
    exportDir: String!
    "File lock period in seconds of the NFS archival location."
    fileLockPeriodInSeconds: Int!
    "Host IP address of the NFS archival location."
    host: String!
    "Flag to determine if consolidation is enabled in the NFS archival location."
    isConsolidationEnabled: Boolean!
    "Name of the NFS archival location."
    name: String!
    "Authentication type of the NFS archival location."
    nfsAuthType: AuthTypeEnum!
    "Version of the NFS archival location."
    nfsVersion: Int
    "Other options of the NFS archival location."
    otherNfsOptions: String
}

"Input for creating a Nutanix cluster."
input CreateNutanixClusterInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. IP address, natural ID of added cluster (since Prism central can manage multiple clusters), and credentials for Prism."
    nutanixClusterConfig: NutanixClusterConfigInput!
}

"Configuration for O365 Azure AD App creation flow completion."
input CreateO365AppCompleteInput {
    "ID of the created app."
    appClientId: String!
    "CSRF token for the setup flow."
    stateToken: String!
    "ID of the MSFT tenant for which the app was created."
    tenantId: String!
}

"Configuration for O365 Azure AD App creation kickoff."
input CreateO365AppKickoffInput {
    "Type of app to create."
    appType: String!
    "UUID of the org."
    orgId: UUID!
}

"Input for creating an on-demand Db2 backup."
input CreateOnDemandDb2BackupInput {
    "Configuration for the on demand backup."
    config: BaseOnDemandSnapshotConfigInput
    "Required. ID assigned to a Db2 database object."
    id: String!
}

input CreateOnDemandExchangeDatabaseBackupInput {
    "Required. Configuration for the on-demand backup."
    config: ExchangeBackupJobConfigInput!
    "Required. ID of the Microsoft Exchange database."
    id: String!
}

input CreateOnDemandMssqlBackupInput {
    "Required. Configuration for the on-demand backup."
    config: MssqlBackupJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for creating an on-demand Nutanix backup."
input CreateOnDemandNutanixBackupInput {
    "Configuration for the on-demand backup."
    config: BaseOnDemandSnapshotConfigInput
    """

    Required. v5.0-v5.3: ID of the VM
    v6.0-v8.0: ID of the VM.
    v9.0: ID of the virtual machine.
    """
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for creating an on-demand SAP HANA backup."
input CreateOnDemandSapHanaBackupInput {
    "Configuration for the on demand backup."
    config: BaseOnDemandSnapshotConfigInput
    "Required. ID assigned to a SAP HANA database object."
    id: String!
}

input CreateOnDemandVolumeGroupBackupInput {
    "Configuration for the on-demand backup. Configuration values are `volumeIdsIncludedInSnapshot`, which specifies the unique ID of each volume that is part of this snapshot of the Volume Group, and `slaID`, the ID of the SLA Domain for the snapshot."
    config: VolumeGroupOnDemandSnapshotConfigInput
    "Required. The ID of the Volume Group."
    id: String!
}

"Input for mounting an Oracle database excluding advanced options."
input CreateOracleMountInput {
    "Required. Configuration parameters for a job to Live Mount an Oracle database snapshot."
    config: MountOracleDbConfigInput!
    "Required. ID of the Oracle database."
    id: String!
}

input CreateOraclePdbRestoreInput {
    "Required. Configuration parameters for a job to restore PDBs on an Oracle database from a specified snapshot or timestamp."
    config: OraclePdbRestoreConfigInput!
    "Required. ID of the database on which PDBs are to be restored."
    id: String!
}

"Details for creating a new organization."
input CreateOrgInput {
    "Allowed clusters for the organization."
    allowedClusters: [String!]!
    "Use the SSO/LDAP configuration of the global organization or set the configuration specific to this organization."
    authDomainConfig: TenantAuthDomainConfig!
    "Description for organization."
    description: String!
    "Existing SSO groups to be authorized for this tenant organization."
    existingSsoGroups: [ExistingSsoGroupInput!]
    "Existing users to add to the tenant organization."
    existingUsers: [ExistingUserInput!]
    "Full name of the tenant organization."
    fullName: String!
    "Force organization to use envoy to connect their hosts."
    isEnvoyRequired: Boolean!
    "Unique name ID of the organization."
    name: String!
    "New SSO groups to be authorized for this tenant organization."
    newSsoGroups: [NewSsoGroupInput!]
    "Permissions to be given to the org admin role."
    permissions: [PermissionInput!]!
    "Self-service permissions to be assigned to the organization."
    selfServicePermissions: [SelfServicePermissionInput!]!
    "Enforce MFA for all users in the organization."
    shouldEnforceMfaForAll: Boolean!
    "Invitations to invite new users to the tenant organization."
    userInvites: [UserInviteInput!]
}

"Parameters for creating a report with configurations."
input CreatePolarisReportInput {
    "Selected charts of the report."
    charts: [ChartViewType!]!
    "The filter used for sorting in the report."
    filters: [ReportFilterInput!]!
    "Report name."
    name: String!
    "Type of report."
    reportViewType: PolarisReportViewType!
    "The selected order of sorting in the report."
    sortBy: String!
    "The selected sortOrder in the report."
    sortOrder: SortOrder
    "The selected table of the report."
    table: TableViewType!
}

input CreatePolicyInput {
    analyzerIds: [String!] = []
    colorEnum: ClassificationPolicyColor = UNKNOWN
    description: String = ""
    id: String = ""
    mode: ClassificationPolicyMode = DISCOVERY
    name: String = ""
    updateAnalyzerIds: Boolean = false
    updateDescription: Boolean = false
    updateMode: Boolean = false
    updateName: Boolean = false
}

"Input for creating a RCS Reader Target."
input CreateRcsReaderTargetInput {
    "Field for specifying cluster UUID of the target."
    clusterUuid: UUID!
    "Field for specifying the name of original reader location to which to connect as Reader."
    rcsArchivalLocationName: String!
    "Field for specifying the name of reader location for RCS."
    readerLocationName: String!
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
}

"Input to create RCS location."
input CreateRcsTargetInput {
    "Rubrik cluster UUID."
    clusterUuid: UUID!
    "Instance type of the RCS location."
    instanceType: InstanceTypeEnum!
    "Immutability lock period, in days."
    lockDurationDays: Long!
    "Name of the RCS location."
    name: String!
    "Region for the RCS location."
    region: RcsRegionEnumType!
    "RSA key for the RCS location."
    rsaKey: String!
    "Space usage threshold of RCS location above which alert will be raised."
    spaceUsageAlertThreshold: Int!
    "Tier for the RCS location."
    tier: RcsTierEnumType!
}

"Input for creating Rubrik Cloud Vault locations."
input CreateRcvLocationsFromTemplateInput {
    "List of Rubrik cluster UUIDs."
    clusterUuidList: [String!]
    "IP mapping for each Rubrik cluster."
    ipMapping: [IpMappingInput!]
    "Immutability lock period in days."
    lockDurationDays: Long!
    "Name of the RCV location."
    name: String!
    "Region for the RCV location."
    region: RcsRegionEnumType!
    "RSA key for the RCV location."
    rsaKey: String
    "Tier for the RCV location."
    tier: RcsTierEnumType!
}

"Input for adding private endpoint support to an RCV location."
input CreateRcvPrivateEndpointApprovalRequestInput {
    "Field for specifying location identifier of the target."
    locationId: UUID!
    "Field for specifying the Azure resource identifier for an RCV private endpoint."
    privateEndpointId: String!
}

"Create Recovery Plan configuration."
input CreateRecoveryPlanInput {
    "Recovery Plan configuration."
    config: RecoveryPlanConfigInput
    "Recovery Plan description."
    description: String
    "Recovery Plan name."
    name: String!
}

"Request to create a replication pair between two Rubrik clusters."
input CreateReplicationPairInput {
    "NAT or Private replication setup type."
    setupType: ReplicationSetupType!
    "Source Rubrik cluster UUID."
    sourceClusterUuid: UUID!
    "Gateway information of the source cluster when using the NAT setup type."
    sourceGateway: ReplicationGatewayInfo
    "Target Rubrik cluster UUID."
    targetClusterUuid: UUID!
    "Gateway information of the target cluster when using the NAT setup type."
    targetGateway: ReplicationGatewayInfo
}

"Input for creating a S3Compatible Reader Target."
input CreateS3CompatibleReaderTargetInput {
    "Field for specifying access key of the target."
    accessKey: String!
    "Field for specifying the bucket prefix of the S3Compatible target."
    bucketPrefix: String!
    "Field for specifying cluster UUID of the target."
    clusterUuid: UUID!
    "Field for specifying encryption key."
    encryptionKeyInDer: String!
    "Field for specifying the endpoint of the target."
    endpoint: String!
    "Field for whether consolidation should be enabled or not for this target."
    isConsolidationEnabled: Boolean!
    "Field for specifying name of the target."
    name: String!
    "Field for specifying number of buckets."
    numberOfBuckets: Int!
    "Field for specifying the metadata to be retrieved from a target."
    readerRetrievalMethod: ReaderRetrievalMethod!
    "Field for specifying the secret key of the target."
    secretKey: String!
    "Subtype of an S3-compatible target."
    subType: S3CompatibleSubType
    "Field for specifying whether to use system proxy or not."
    useSystemProxy: Boolean!
}

"Input to create S3-compatible target."
input CreateS3CompatibleTargetInput {
    "Access key of the S3-compatible target."
    accessKey: String!
    "Bucket prefix of the S3-compatible target."
    bucketPrefix: String!
    "Cluster UUID of the S3-compatible target."
    clusterUuid: UUID!
    "RSA key of the S3-compatible target for encryption."
    encryptionKeyInDer: String!
    "Endpoint of the S3-compatible target."
    endpoint: String!
    "Specifies whether consolidation is enabled for the S3-compatible target."
    isConsolidationEnabled: Boolean!
    "Name of the S3-compatible target."
    name: String!
    "Number of buckets of the S3-compatible target."
    numberOfBuckets: Int!
    "Secret key of the S3-compatible target."
    secretKey: String!
    "Subtype of an S3-compatible target."
    subType: S3CompatibleSubType
    "Specifies whether system proxy will be used or not."
    useSystemProxy: Boolean!
}

"Input for refreshing a SAP HANA system."
input CreateSapHanaSystemRefreshInput {
    "Required. The ID of the SAP HANA system."
    id: String!
}

input CreateScheduledReportInput {
    "List of attachment types for report emails."
    attachmentTypes: [ReportAttachmentType!]
    "Time of the day for daily report delivery."
    dailyTime: LocalTime
    "Date of the month for monthly report delivery."
    monthlyDate: Int
    "Time of the day for monthly report delivery on the configured monthly date."
    monthlyTime: LocalTime
    "List of email addresses of non-Rubrik user recipients of the scheduled report."
    nonRubrikRecipientEmails: [String!]!
    "ID of the report for which a schedule needs to be created."
    reportId: Int!
    "List of Rubrik user IDs that are the intended recipients of the scheduled report."
    rubrikRecipientUserIds: [String!]!
    "Title of the report."
    title: String!
    updateCreator: Boolean
    "List of weekdays for weekly schedule of reports."
    weeklyDays: [WeekDay!]
    "Time of the day for weekly report delivery on the configured weekdays."
    weeklyTime: LocalTime
}

"Input parameters for creating service accounts."
input CreateServiceAccountInput {
    "Optional description of the service account."
    description: String
    "Name of the service account."
    name: String!
    "List of role IDs to assign to the service account."
    roleIds: [String!]!
}

"Input for creating a SnapMirror Cloud workload."
input CreateSnapMirrorCloudInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Specify a NetApp volume ID."
    definition: SnapMirrorCloudCreateInput!
}

"Input to create a SnapMirror Cloud relationship."
input CreateSnapMirrorCloudRelationshipInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    """

    Required. v7.0-v8.0: ID of SnapMirror Cloud protected object.
    v9.0: ID of SnapMirror Cloud workload.
    """
    definition: RelationshipCreateInput!
}

"Input to restore files from SnapMirror Cloud snapshot."
input CreateSnapMirrorCloudRestoreJobInput {
    "Required. The ID of the snapshot from which to restore."
    id: String!
    "Required. Configuration for the job to restore files or the volume from a SnapMirrorCloud backup."
    jobConfig: SnapMirrorCloudRestoreParametersInput!
}

"Input to start an on-demand backup of SnapMirror Cloud workload."
input CreateSnapMirrorCloudSnapshotInput {
    "Configuration for the on-demand backup."
    config: BaseOnDemandSnapshotConfigInput
    """

    Required. v7.0-v8.0: ID of the SnapMirror Cloud protected object.
    v9.0: ID of the SnapMirror Cloud workload.
    """
    id: String!
}

"Inputs for creating a support case."
input CreateSupportCaseInput {
    "Case type in the Rubrik Support portal."
    caseType: String!
    "Cluster UUID for the support case."
    clusterId: UUID
    "Contact method for the support case."
    contactMethod: String!
    "Description of the support case."
    description: String!
    "Email used as username in the Rubrik Support portal."
    email: String!
    "Priority of the support case."
    priority: String!
    "Subject of the support case."
    subject: String!
}

input CreateUserWithPasswordInput {
    "Email for new user."
    email: String = ""
    "Password for new user."
    password: String = ""
    "Role IDs to add to new user."
    roleIds: [String!] = []
}

"Export vApp snapshot to target or new vApp."
input CreateVappExportInput {
    "Required. Configuration to export the specified vApp snapshot."
    config: VappExportSnapshotJobConfigInput!
    "Required. ID assigned to the vApp snapshot object."
    snapshotId: String!
}

"Instantly recover a vApp snapshot."
input CreateVappInstantRecoveryInput {
    "Required. Configuration to export the specified vApp snapshot."
    config: VappInstantRecoveryJobConfigInput!
    "Required. ID assigned to the vApp snapshot object."
    snapshotId: String!
}

"Supported in v5.0+"
input CreateVappNetworkParamsInput {
    """

    Supported in v5.0+
    v5.0-v5.3: Name to assign within vCloud to the vApp network that is referenced by the specified new vApp network object. The Rubrik REST API server uses this value, when present, to rename the vApp network within vCloud. When this value is empty the vApp network uses the existing name.
    v6.0+: Name to assign to the vApp network that is referenced by the specified new vApp network object. If a name is specified, the Rubrik REST API server uses the name to rename the vApp network within the vCloud. If the value is empty, the vApp network is not renamed.
    """
    newName: String
    vappNetworkSummary: VappNetworkSummaryInput
}

"Create A vApp on demand snapshot."
input CreateVappSnapshotInput {
    "Required. Configuration for the request to create vApp snapshot."
    config: BaseOnDemandSnapshotConfigInput!
    "ID assigned to a vApp."
    id: String!
}

"Create vApp snapshots."
input CreateVappSnapshotsInput {
    "Required. List of vapps to take snapshots."
    inputs: [CreateVappSnapshotInput!]!
}

"Instantly recover vApp snapshots in bulk."
input CreateVappsInstantRecoveryInput {
    "Required. Configuration to instantly recover specified vApp snapshots."
    inputs: [CreateVappInstantRecoveryInput!]!
}

input CreateVsphereAdvancedTagInput {
    "Required. Filter name and conditional logic for vSphere tags."
    filterInfo: FilterInfoInput!
    "Required. ID of the vCenter Server."
    id: String!
}

"Input to add vSphere vCenter."
input CreateVsphereVcenterInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The IP address and account credentials of the vCenter Server that is being added."
    vcenterDetail: VcenterConfigV2Input!
}

"Webhook configuration to add to an account."
input CreateWebhookInput {
    "The authentication type and token to authenticate the endpoint."
    authInfo: AuthInfoInput
    "A description of the webhook to be created."
    description: String
    "The name of the webhook to be created."
    name: String!
    "The application that will receive the webhook."
    providerType: ProviderType!
    "The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint."
    serverCertificate: String
    "A list of event and audit severities to which the webhook is subscribed."
    subscriptionSeverity: SubscriptionSeverityInput!
    "A list of event and audit types to which the webhook is subscribed."
    subscriptionType: SubscriptionTypeInput!
    "The URL endpoint to the receiving application."
    url: URL!
}

"The custom authentication header key and value to authenticate the endpoint."
input CustomHeader {
    "The custom authentication header's key."
    headerKey: String!
    "The custom authentication header's value."
    headerValue: String!
}

input CustomReportCreate {
    "Chart configs for the report."
    charts: [ReportChartCreate!]
    "Filters for the report data."
    filters: CustomReportFiltersConfig!
    focus: ReportFocusEnum!
    "Specifies whether the report should be hidden from the gallery view."
    isHidden: Boolean = false
    "Specifies whether the report is auto-generated and not editable."
    isReadOnly: Boolean = false
    "Name of the report."
    name: String!
    "Table configs for the report."
    tables: [ReportTableCreate!]
}

"Filter custom reports data."
input CustomReportFilterInput {
    creationTime_gt: DateTime
    creationTime_lt: DateTime
    focus: ReportFocusEnum
    isHidden: Boolean
    isReadOnly: Boolean
    searchTerm: String
}

input CustomReportFiltersConfig {
    activityObjectType: [ActivityObjectTypeEnum!]
    "List of cluster ID to filter on."
    clusterId: [UUID!]
    clusterLocation: [String!]
    "List of cluster types to filter on."
    clusterType: [ClusterTypeEnum!]
    complianceStatus: [ComplianceStatusEnum!]
    "List of workload types to exclude. This should NOT be specified along with objectType."
    excludedObjectTypes: [ObjectTypeEnum!]
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    "Whether the snapshot is anomalous or not."
    isAnomaly: Boolean
    "List of activity types to filter on."
    lastActivityStatus: [ActivityStatusEnum!]
    "List of activity types to filter on."
    lastActivityType: [ActivityTypeEnum!]
    "List of managed ids to filter data on."
    managedId: [String!]
    "List of snappable types to filter on."
    objectType: [ObjectTypeEnum!]
    "List of organization IDs to filter on."
    orgId: [String!]
    "List of policy IDs to filter on."
    policyId: [String!]
    protectionStatus: [ProtectionStatusEnum!]
    replicationSource: [String!]
    searchTerm: String
    "List of sla domain ids to filter on."
    slaDomainId: [String!]
    slaTimeRange: SlaComplianceTimeRange
    sonarObjectTypes: [HierarchyObjectTypeEnum!]
    source: [String!]
    targetSite: [String!]
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    "Start and end time range to filter data on."
    timeRange: GenericTimeRangeInput
    "List of object types to filter on for Audits."
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    "List of user audit status to filter on."
    userAuditStatus: [UserAuditStatusEnum!]
    "List of user audit types to filter on."
    userAuditType: [UserAuditTypeEnum!]
}

"Filter parameters for cyber recovery objects."
input CyberRecoveryObjectsFilterParams {
    "Filter by cluster UUIDs."
    clusterUuids: [String!] = []
    "Filter by name."
    name: String
    "Filter by object types."
    objectTypes: [ManagedObjectType!] = []
    "Filter by recovery plan names."
    recoveryPlanNames: [String!] = []
    "Filter by retention SLA Domain IDs."
    retentionSlaDomainIds: [String!] = []
    "Filter by status."
    statuses: [WorkloadLastFailoverStatus!] = []
}

"Sorting parameters for cyber recovery objects."
input CyberRecoveryObjectsSortParams {
    "Sorts by order."
    sortOrder: SortOrder = ASC
    "Sort type."
    type: WorkloadDetailsSortType = NAME
}

"Daily snapshot schedule."
input DailySnapshotScheduleInput {
    "Basic daily snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
}

"Day of the week."
input DayOfWeekOptInput {
    "Day."
    day: DayOfWeek = MONDAY
}

"Input to configure the SLA Domain for Db2 database."
input Db2ConfigInput {
    "Frequency value for differential backup of Db2 databases."
    differentialFrequency: SlaDurationInput
    "Frequency value for incremental backup of Db2 databases."
    incrementalFrequency: SlaDurationInput
    "Specifies the duration for which the Db2 database logs will be retained."
    logRetention: SlaDurationInput
}

"Supported in v8.0+"
input Db2DownloadRecoverableRangeRequestInput {
    """

    Required. Supported in v8.0+
    Point in time for which the snapshots should be downloaded for recovery. The date-time string must be in the ISO8601 format. For example, "2016-01-01T01:23:45.678". The timezone is same as the timezone of the Rubrik cluster.
    """
    pointInTime: DateTime
    """

    Required. Supported in v8.0+
    ID of the location preferred for downloading the base full and log snapshots required for point in time recovery. The snapshots not available at the preferred location will be downloaded from the location where they are available.
    """
    preferredLocationId: String!
}

"Supported in v7.0+"
input Db2InstancePatchRequestConfigInput {
    """

    Supported in v7.0+
    List of hosts that are a part of this Db2 instance.
    """
    hostIds: [String!] = []
    "Instance name of the Db2 instance."
    instanceName: String
    """

    Supported in v7.0+
    Password of the Db2 instance.
    """
    password: String
    """

    Supported in v7.0+
    Username of the Db2 instance.
    """
    username: String
}

"Supported in v7.0+"
input Db2InstanceRequestConfigInput {
    """

    Required. Supported in v7.0+
    List of hosts that are a part of this Db2 instance.
    """
    hostIds: [String!]!
    """

    Required. Supported in v7.0+
    Instance name of the Db2 instance.
    """
    instanceName: String!
    """

    Required. Supported in v7.0+
    Password of the Db2 instance.
    """
    password: String!
    """

    Required. Supported in v7.0+
    Username of the Db2 instance.
    """
    username: String!
}

"Filter Db2 log snapshots."
input Db2LogSnapshotFilterInput {
    "The cluster uuid for which log snapshots are filtered."
    clusterUuid: [UUID!]
    "Start time for the log snapshots connection."
    fromTime: DateTime
    "Filter by the archival status of log snapshots. By default, archived snapshots are excluded."
    isArchived: Boolean
    "End time for the log snapshots connection."
    toTime: DateTime
    "The workload ID for which log snapshots are filtered."
    workloadId: [String!]
}

"Filter Db2 recoverable ranges."
input Db2RecoverableRangeFilterInput {
    "The cluster uuid for which db2 recoverable ranges are filtered."
    clusterUuid: [UUID!]
    "The db2 database ID for which db2 recoverable ranges are filtered."
    databaseId: [String!]
    "Start time for db2 recoverable range."
    fromTime: DateTime
    "Filter by archival status of the Db2 recoverable range. By default archived recoverable ranges are excluded."
    isArchived: Boolean
    "End time for the db2 recoverable range."
    toTime: DateTime
}

"Configuration for the deletion of Azure AD Groups."
input DeleteAdGroupsFromHierarchyInput {
    "The IDs of the groups to delete."
    groupIds: [UUID!]!
    "UUID of the org."
    orgId: UUID!
}

input DeleteAllOracleDatabaseSnapshotsInput {
    "Required. ID assigned to an Oracle database object."
    id: String!
}

"Input to delete all snapshots for a SnapMirror Cloud workload."
input DeleteAllSnapMirrorCloudSnapshotsInput {
    "Required. The ID of the unprotected SnapMirror Cloud object."
    id: String!
}

"Input to remove AWS cloud account without altering permissions in the cloud account."
input DeleteAwsCloudAccountWithoutCftInput {
    "Rubrik ID of cloud account to be deleted."
    awsCloudAccountId: String!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeature!
}

"DeleteAwsClusterInput for Aws account."
input DeleteAwsClusterInput {
    "Name of the s3 bucket for CC-ES."
    bucketName: String = ""
    "Cloud account ID of the AWS account."
    cloudAccountId: String = ""
    "Name of Aws cluster."
    clusterName: String = ""
    "Uuid of the cluster."
    clusterUuid: String = ""
    "True if the cluster is CC-ES, and false for disk based."
    isEsType: Boolean = false
    "True if the container was created as part of the cluster, and needs to be deleted as well."
    isNewContainer: Boolean = false
    "Number of nodes in the existing cluster."
    numNodes: Int = 0
    "Region name of the aws account."
    region: String = ""
}

"Input for deleting AWS compute setting."
input DeleteAwsComputeSettingInput {
    "Field for specifying ID of the AWS compute setting."
    id: String = ""
}

"Input to delete AWS exocompute configurations."
input DeleteAwsExocomputeConfigsInput {
    "IDs of exocompute configurations to be deleted."
    configIdsToBeDeleted: [UUID!]!
}

"Input to delete IAM user-based AWS cloud account."
input DeleteAwsIamUserBasedCloudAccountInput {
    "Rubrik ID of cloud account to be deleted."
    awsCloudAccountId: String!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeature!
}

"Input for deleting Exocompute configurations for an Azure Cloud Account."
input DeleteAzureCloudAccountExocomputeConfigurationsInput {
    "Rubrik IDs of the cloud accounts to be deleted."
    cloudAccountIds: [UUID!]!
}

"Input for deleting an Azure Cloud Account."
input DeleteAzureCloudAccountInput {
    "Rubrik IDs of the subscriptions to be deleted."
    azureSubscriptionRubrikIds: [UUID!]!
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeature!]!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input for deleting an Azure Cloud Account without OAuth."
input DeleteAzureCloudAccountWithoutOauthInput {
    "Rubrik IDs of the subscriptions to be deleted."
    azureSubscriptionRubrikIds: [UUID!]!
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeature!]!
}

"DeleteAzureClusterInput for Azure account."
input DeleteAzureClusterInput {
    "Cloud account ID."
    cloudAccountId: String = ""
    "Name of Azure cluster."
    clusterName: String = ""
    "UUID of CDM cluster."
    clusterUuid: String = ""
    "Storage container in Azure."
    containerName: String = ""
    "If cluster is ES or disk based."
    isEsType: Boolean = false
    "Is it an existing customer container or a new container created by ccprovision?"
    isNewContainer: Boolean = false
    "Azure network resource group name."
    networkResourceGroup: String = ""
    "Number of nodes in the existing cluster."
    numNodes: Int = 0
    "Azure resource group name."
    resourceGroupName: String = ""
    "Storage account in Azure."
    storageAccount: String = ""
    "Storage resource group in Azure."
    storageResourceGroup: String = ""
}

"List of blueprint ids."
input DeleteBlueprintsInput {
    "Blueprint ids."
    fids: [UUID!]!
}

"Input required to delete a label rule."
input DeleteCloudNativeLabelRuleInput {
    "Label rule ID."
    ruleId: UUID!
}

"Input required to delete a tag rule."
input DeleteCloudNativeTagRuleInput {
    "Tag rule ID."
    ruleId: UUID!
}

"Input required for deleting a certificate signing request (CSR)."
input DeleteCsrInput {
    "IDs of the CSRs to delete."
    csrIds: [Long!]!
}

"Input for deleting a custom report."
input DeleteCustomReportInput {
    "ID of the custom report to be deleted."
    id: Int!
}

"Input for deleting a Db2 database."
input DeleteDb2DatabaseInput {
    "Required. ID of the Db2 database."
    id: String!
}

"Input for deleting a DB2 instance."
input DeleteDb2InstanceInput {
    "Required. ID of the Db2 instance."
    id: String!
}

"Input for deleting an event digest."
input DeleteEventDigestInput {
    "User IDs of recipients whose event digests must be deleted."
    recipientUserIds: [String!]!
}

input DeleteExchangeSnapshotMountInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the mount to remove."
    id: String!
}

"Input for V1BulkDeleteFailoverClusterApp."
input DeleteFailoverClusterAppInput {
    "Required. ID of the failover cluster app."
    id: String!
    "Specifies whether to preserve the fileset snapshots that belong to a failover cluster application. When this value is 'true', the snapshots are preserved. The default value is 'true'."
    preserveSnapshots: Boolean
}

"Input for V1BulkDeleteFailoverCluster."
input DeleteFailoverClusterInput {
    "Required. ID of the failover cluster."
    id: String!
    "Specifies whether to preserve the fileset snapshots that belong to a failover cluster. When this value is 'true', the snapshots are preserved. The default value is 'true'."
    preserveSnapshots: Boolean
}

"Input for deleting fileset snapshots."
input DeleteFilesetSnapshotsInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the fileset."
    id: String!
}

"Input to delete a global certificate."
input DeleteGlobalCertificateInput {
    "The ID of the global certificate (either the RSC ID or the Rubrik CDM certificate ID)."
    certificateId: String!
}

input DeleteGuestCredentialByIdInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the guest OS credential to remove."
    id: String!
}

"Input for deleting a Hyper-V virtual machine snapshot."
input DeleteHypervVirtualMachineSnapshotInput {
    "Required. ID of snapshot."
    id: String!
    "Required. Snapshot location to delete. Use **_local_** to delete all local snapshots and **_all_** to delete the snapshot in all locations."
    location: InternalDeleteHypervVirtualMachineSnapshotRequestLocation!
}

"Input for deleting a Live Mount of a Hyper-V virtual machine."
input DeleteHypervVirtualMachineSnapshotMountInput {
    "Force unmount to deal with situations where host has been moved."
    force: Boolean
    "Required. ID of the mount to remove."
    id: String!
}

"Input for deleting MSSQL Log Shipping."
input DeleteLogShippingInput {
    "Boolean value that determines whether to attempt to delete the secondary database associated with the specified log shipping configuration. The default value is false. When set to false, no attempt is made to delete the secondary database. When set to true, starts an asynchronous job to delete the secondary database."
    deleteSecondaryDatabase: Boolean
    "Required. ID of a log shipping configuration object."
    id: String!
}

"Input for deleting a Managed Volume."
input DeleteManagedVolumeInput {
    "Required. ID of Managed Volume."
    id: String!
    "Flag to indicate whether to convert snapshots of this Managed Volume to relics or to delete them.  Default is true."
    preserveSnapshots: Boolean
}

"Input for deleting a Managed Volume snapshot export."
input DeleteManagedVolumeSnapshotExportInput {
    "Required. ID of the exported snapshot."
    id: String!
}

"Input for deleting a MongoDB source."
input DeleteMongoSourceInput {
    "Required. ID of the MongoDB source to be deleted."
    id: String!
}

"Input for deleting a NoSQL protection source."
input DeleteMosaicSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Name of the NoSQL source to be deleted."
    sourceName: String!
    "Type of the NoSQL source to be deleted."
    sourceType: V2DeleteMosaicSourceRequestSourceType
}

"Input for deleting a NoSQL protection store."
input DeleteMosaicStoreInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Name of the Mosaic store to be deleted."
    storeName: String!
}

input DeleteMssqlDbSnapshotsInput {
    "Required. ID of the Microsoft SQL database."
    id: String!
}

"Input for deleting an MSSQL Live Mount."
input DeleteMssqlLiveMountInput {
    "Remove all data within the Rubrik cluster related to the Live Mount, even if the SQL Server database cannot be contacted. Default value is false."
    force: Boolean
    "Required. ID of the Live Mount to delete."
    id: String!
}

"Input for deleting a registered NAS system."
input DeleteNasSystemInput {
    "Required. ID of the NAS system to delete."
    id: String!
}

"Input for deleting a Nutanix cluster."
input DeleteNutanixClusterInput {
    "Required. ID of the Nutanix cluster to remove."
    id: String!
}

"Input for deleting a Nutanix mount."
input DeleteNutanixMountV1Input {
    "Required. ID of the Live Mount."
    id: String!
}

"Input for deleting a Nutanix snapshot."
input DeleteNutanixSnapshotInput {
    "Required. ID of snapshot."
    id: String!
    "Required. Snapshot location to delete. Use **_local_** to delete all local snapshots and **_all_** to delete the snapshot in all locations."
    location: InternalDeleteNutanixSnapshotRequestLocation!
}

"Input for deleting multiple Nutanix snapshots."
input DeleteNutanixSnapshotsInput {
    "Required. Virtual machine ID."
    id: String!
}

input DeleteOracleMountInput {
    "Force unmount to remove metadata for the Live Mount of an Oracle database snapshot, even when the database cannot be contacted. Default value is 'false'."
    force: Boolean
    "Required. ID assigned to a Live Mount of an Oracle database snapshot."
    id: String!
}

"Delete organization."
input DeleteOrgInput {
    "Id of the organization to delete."
    organizationId: String!
}

"Request to delete an existing replication pairing between two Rubrik clusters. When the replication pairing is deleted, the source Rubrik cluster will no longer replicate data to the target Rubrik cluster."
input DeleteReplicationPairInput {
    "Source Rubrik cluster UUID."
    sourceClusterUuid: UUID!
    "Target Rubrik cluster UUID."
    targetClusterUuid: UUID!
}

"Input for deleting a SAP HANA snapshot."
input DeleteSapHanaDbSnapshotInput {
    "Required. ID assigned to a SAP HANA database full snapshot."
    id: String!
}

"Input for deleting a SAP HANA system."
input DeleteSapHanaSystemInput {
    "Required. The ID of the SAP HANA system."
    id: String!
}

"Input for deleting a scheduled report."
input DeleteScheduledReportInput {
    "ID of the scheduled report to be deleted."
    id: Int!
}

"Input parameters for deleting service accounts."
input DeleteServiceAccountsFromAccountInput {
    "IDs of service accounts to be deleted."
    ids: [String!]!
}

input DeleteSmbDomainInput {
    "Required. SMB domain name."
    domainName: String!
}

"Input for deleting NetApp SnapMirror Cloud workload."
input DeleteSnapMirrorCloudInput {
    """

    Required. v7.0-v8.0: Provide the ID of a SnapMirror Cloud protected object to delete.
    v9.0: Provide the ID of a SnapMirror Cloud workload to delete.
    """
    id: String!
    """

    v7.0-v8.0: Flag to indicate whether to preserve snapshots of the SnapMirror Cloud protected object or delete them. The default is to preserve the snapshots.
    v9.0: Flag to indicate whether to preserve snapshots of the SnapMirror Cloud workload or delete them. The default is to preserve the snapshots.
    """
    preserveSnapshots: Boolean
}

"Input for deleting NetApp SnapMirror Cloud relationship."
input DeleteSnapMirrorCloudRelationshipInput {
    "Required. Managed ID of the SnapMirrorCloud."
    id: String!
}

"Input to delete specified snapshot for a SnapMirror Cloud workload."
input DeleteSnapMirrorCloudSnapshotInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The ID of the snapshot."
    id: String!
}

"Delete Storage arrays."
input DeleteStorageArraysInput {
    "Required. List of Storage arrays to delete."
    inputs: [StorageArrayInput!]!
}

input DeleteSyslogExportRuleInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The ID of the syslog export rule."
    id: String!
}

"Input for deleting an archival location."
input DeleteTargetInput {
    "ID of the archival location."
    id: String = ""
}

"Request to delete mapping of target."
input DeleteTargetMappingInput {
    "ID of the target to which the archival location is mapped."
    id: String = ""
}

"Input required for resetting TOTP for multiple users."
input DeleteTotpConfigsInput {
    "Users for whom TOTP is reset."
    userIds: [String!] = []
}

"Delete a vApp snapshot."
input DeleteVappSnapshotInput {
    "Required. Delete a vApp snapshot."
    id: String!
    "Required. Delete a vApp snapshot."
    location: DeleteVappSnapshotRequestLocation!
}

"Delete vApp Snapshots."
input DeleteVappSnapshotsInput {
    "Required. List of vApp snapshots to delete."
    inputs: [DeleteVappSnapshotInput!]!
}

"Delete vCD instances in Rubrik clusters."
input DeleteVcdInstancesInput {
    "Required. List of vCD instances to delete."
    inputs: [VcdInstanceInput!]!
}

"Input to delete volume group mount."
input DeleteVolumeGroupMountInput {
    "Required. ID of the mount to remove."
    id: String!
}

input DeleteVsphereAdvancedTagInput {
    "Required. ID of the multi-tag filter."
    filterId: String!
    "Required. ID of the vCenter Server."
    id: String!
}

"Input for deleting vSphere live mount."
input DeleteVsphereLiveMountInput {
    "Force unmount to remove metadata when the datastore of the Live Mount virtual machine was moved off of the Rubrik cluster."
    force: Boolean
    "Required. ID of a Live Mount."
    id: String!
}

"The webhook to delete from the account."
input DeleteWebhookInput {
    "The ID of the webhook to be deleted."
    id: Int!
}

"An object providing the parameters for the recovery of a snapshot and a next snapshot delta."
input DeltaRecoveryInput {
    "The delta type options which the files will be filtered on."
    deltaTypeFilter: [DeltaType!]!
    "The fid of the next snapshot to perform the delta on."
    nextSnapshotFid: UUID!
}

"Supported in v5.3+"
input DisablePerLocationPauseInput {
    """

    Required. Supported in v5.3+
    Specifies whether to replicate snapshots taken during and before replication pause. When this value is 'true,' snapshots taken during and before the replication pause are not replicated. In all other cases, snapshots taken before and during the replication pause are replicated.
    """
    shouldSkipOldSnapshots: Boolean!
    """

    Required. Supported in v5.3+
    Replication from specified Rubrik clusters are resumed. Specified Rubrik clusters must be paused replication sources of local Rubrik cluster.
    """
    sourceClusterUuids: [String!]!
}

"Input for disabling replication per location pause."
input DisableReplicationPauseInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. A configuration value that specifies which source clusters resume replication. Snapshots taken before or during the replication pause can be skipped."
    disablePerLocationPause: DisablePerLocationPauseInput!
}

"Input for disabling a Rubrik Support representative's access to the customer account."
input DisableSupportUserAccessInput {
    "Support user access ID."
    id: Int = 0
    "User ID of the customer on whose behalf the Rubrik Support representative is accessing the customer account."
    impersonatedUserId: String = ""
}

"Input for disabling archival location."
input DisableTargetInput {
    "ID of the archival location."
    id: String = ""
}

"Input for discovering a Db2 instance."
input DiscoverDb2InstanceInput {
    "Required. ID of the Db2 instance."
    id: String!
}

"Input for discovering a MongoDB source."
input DiscoverMongoSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the MongoDB source."
    id: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to start auto discover jobs on multiple NAS systems.
"""
input DiscoverNasSystemRequestInput {
    """

    Required. Supported in v7.0+
    IDs of NAS systems.
    """
    ids: [String!]!
}

"Input specifying whether a disk should be excluded from the snapshot."
input DiskIdToIsExcluded {
    "ID of the disk."
    diskId: UUID!
    "Whether this disk is excluded from the snapshot."
    isExcluded: Boolean!
}

"Contains information about the snapshots to be removed from legal hold."
input DissolveLegalHoldInput {
    "List of snapshot IDs."
    snapshotIds: [String!] = []
    "Optional user note."
    userNote: String = ""
}

"Filters for cdm upgrades page for pdf generation."
input DownloadCdmUpgradesPdfFiltersInput {
    "List of cluster locations."
    clusterLocations: [String!] = []
    "List of cluster names."
    clusterNames: [String!] = []
    "List of cluster types."
    clusterTypes: [String!] = []
    "List of cluster ID."
    clusterUuids: [String!] = []
    "List of downloaded versions."
    downloadedVersions: [String!] = []
    "List of installed versions."
    installedVersions: [String!] = []
    "Cluster precheck status."
    prechecksStatus: [String!] = []
    "Cluster upgrade job status."
    upgradeJobStatus: [String!] = []
    "Cluster version status."
    versionStatus: [String!] = []
}

"Input for downloading a Db2 snapshot from an archival location."
input DownloadDb2SnapshotInput {
    "Required. ID of the location from where the Db2 database snapshot will be downloaded."
    locationId: String!
    "Required. ID of the Db2 database snapshot."
    snapshotId: String!
}

"Download Db2 snapshots from archival location to the local Rubrik cluster for point-in-time (PIT) recovery."
input DownloadDb2SnapshotsForPointInTimeRecoveryInput {
    "Required. Object containing information required for downloading snapshots for a point in time recovery. The object includes the point in time and the ID of the archival location for the snapshots to be downloaded."
    downloadConfig: Db2DownloadRecoverableRangeRequestInput!
    "Required. ID of the Db2 database."
    id: String!
}

input DownloadExchangeSnapshotInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the location from where the Microsoft Exchange database will be downloaded."
    locationId: String!
    "Required. ID of the Microsoft Exchange database snapshot."
    snapshotId: String!
}

"Input for downloading files from Nutanix snapshots."
input DownloadFilesNutanixSnapshotInput {
    "Configuration information for a job to download files and folders from a Nutanix virtual machine snapshot."
    config: NutanixDownloadFilesJobConfigInput!
    "Required. ID assigned to a Nutanix virtual machine backup object."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for downloading the fileset snapshot from a location."
input DownloadFilesetSnapshotFromLocationInput {
    "Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded."
    downloadConfig: FilesetDownloadRequestInput
    "Required. ID of the replication location."
    locationId: String!
    "Required. ID of the snapshot to be downloaded."
    snapshotId: String!
}

"Download fileset snapshot."
input DownloadFilesetSnapshotInput {
    "Required. ID of snapshot."
    id: String!
}

"Input location to download the Hyper-V snapshot from."
input DownloadHypervSnapshotFromLocationInput {
    "Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded."
    downloadConfig: HypervVirtualMachineSnapshotDownloadConfigInput!
    "Required. ID of the replication location."
    locationId: String!
    "Required. ID of the snapshot to be downloaded."
    snapshotId: String!
}

"Input for downloading Hyper-V snapshot files."
input DownloadHypervVirtualMachineSnapshotFilesInput {
    "Configuration information for a job to download files and folders from a Hyper-V virtual machine backup."
    config: HypervDownloadFilesJobConfigInput!
    "ID assigned to a Hyper-V virtual machine backup object."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for downloading a Hyper-V virtual machine snapshot."
input DownloadHypervVirtualMachineSnapshotInput {
    "Required. ID of snapshot."
    id: String!
}

"Input for downloading Managed Volume files."
input DownloadManagedVolumeFilesInput {
    "Required. Configuration information for a job to download files and folders from a managed volume backup."
    config: ManagedVolumeDownloadFilesJobConfigInput!
    "Required. ID assigned to a managed volume backup object."
    id: String!
}

"Supported in v5.2+"
input DownloadMssqlBackupFilesByIdJobConfigInput {
    """

    Required. Supported in v5.2+
    A list of snapshots and logs to download.
    """
    items: [String!]!
    """

    Supported in v5.2+
    v5.2: Optional. A Boolean that specifies whether the download is in response to a Legal Hold.
    v5.3+: Optional. A Boolean that specifies if the download is in response to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
}

"Input for downloading MSSQL database backup files."
input DownloadMssqlDatabaseBackupFilesInput {
    "Required. Configuration for a download files by id job."
    config: DownloadMssqlBackupFilesByIdJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for downloading MSSQL database files from an archival location."
input DownloadMssqlDatabaseFilesFromArchivalLocationInput {
    "Required. Configuration for the archive download request."
    config: MssqlDownloadFromArchiveConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

"Input for downloading Nutanix snapshot."
input DownloadNutanixSnapshotInput {
    "Required. ID of snapshot."
    id: String!
}

"Input for downloading a Nutanix snapshot from a replication target."
input DownloadNutanixVmFromLocationInput {
    "Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded."
    downloadConfig: NutanixVmDownloadRequestInput
    "Required. ID of the replication location."
    locationId: String!
    "Required. ID of the snapshot to be downloaded."
    snapshotId: String!
}

input DownloadObjectFilesCsvInput {
    "The day, (YYYY-MM-DD), from which to collect user activity."
    day: String!
    "The filters to apply on the list of activities."
    filters: ListObjectFilesFiltersInput!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadObjectsListCsvInput {
    "The day (YYYY-MM-DD) to get the latest snapshots of."
    day: String!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadOracleDatabaseSnapshotInput {
    "Required. ID assigned to an Oracle database snapshot."
    snapshotId: String!
}

"Input for asynchronously downloading a report in CSV format."
input DownloadReportCsvAsyncInput {
    config: CustomReportCreate
    "ID of the report to download."
    id: Int!
}

"Input for asynchronously downloading a report in PDF format."
input DownloadReportPdfAsyncInput {
    config: CustomReportCreate
    "ID of the report to download."
    id: Int!
}

input DownloadResultsCsvFiltersInput {
    analyzerGroupIds: [String!] = []
    browseDirectorySnappablePath: SnappablePathInput
    fileType: FileCountType!
    listFileResultsSearchText: String = ""
    listFileResultsSnappablePaths: [SnappablePathInput!] = []
    listFileResultsSnappableTypes: [String!] = []
    whitelistEnabled: Boolean = false
}

"Input for downloading SAP HANA snapshot from an archival location."
input DownloadSapHanaSnapshotInput {
    "Required. ID of the location from where the SAP HANA database snapshot will be downloaded."
    locationId: String!
    "Required. ID of the SAP HANA database snapshot."
    snapshotId: String!
}

"Input for download SAP HANA snapshots from an archival location for point-in-time (PIT) recovery."
input DownloadSapHanaSnapshotsForPointInTimeRecoveryInput {
    "Required. Object containing information required for downloading snapshots for a point in time recovery. The object includes the point in time and the ID of the archival location for the snapshots to be downloaded."
    downloadConfig: SapHanaDownloadRecoverableRangeRequestInput!
    "Required. ID of the SAP HANA database."
    id: String!
}

"Request to download threat hunt result as CSV."
input DownloadThreatHuntCsvInput {
    "Threat hunt ID."
    huntId: UUID!
}

input DownloadUserActivityCsvInput {
    "The day, (YYYY-MM-DD), from which to collect user activity."
    day: String!
    "The filters to apply on the list of activities."
    filters: ListObjectFilesFiltersInput!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadUserFileActivityCsvInput {
    "The path to get all activity from."
    nativePath: String!
    "The path's corresponding snapshot."
    snapshot: ResourceInput!
    "The day (YYYY-MM-DD) from which to collect all activity after."
    startDay: String!
    "The user's IANA timezone."
    timezone: String!
    "The user to fetch activity for."
    userId: String!
}

"Input for downloading volume group snapshot files."
input DownloadVolumeGroupSnapshotFilesInput {
    "Configuration information for a job to download files and folders from a volume group backup."
    config: VolumeGroupDownloadFilesJobConfigInput!
    "Filter for delta type."
    deltaTypeFilter: [DeltaType!]
    "Required. ID of Snapshot."
    id: String!
    "The FID of the next fileset snapshot."
    nextSnapshotFid: UUID
}

input DownloadVolumeGroupSnapshotFromLocationInput {
    "Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded."
    downloadConfig: VolumeGroupSnapshotDownloadConfigInput
    "Required. ID of the replication location."
    locationId: String!
    "Required. ID of the snapshot to be downloaded."
    snapshotId: String!
}

"Represents the OneDrive contents to be restored."
input DriveRestoreConfig {
    filesToRestore: [FileInfo!]!
    foldersToRestore: [FolderInfo!]!
    restoreFolderPath: String!
}

"Filter to return objects with an effective SLA Domain ID that matches one of the specified SLA Domain IDs."
input EffectiveSlaFilter {
    "Effective SLA Domain IDs to filter for."
    effectiveSlaIds: [String!]!
}

"Email address and to/from/both."
input EmailAddressFilter {
    emailAddress: String = ""
    emailAddressType: EmailAddressFilterType = TO
}

"Enable/disable auto fmd upload on given cluster."
input EnableAutomaticFmdUploadInput {
    "The uuid of the cluster."
    clusterId: UUID!
    "To enable or disable auto fmd upload."
    enabled: Boolean!
}

"Input required to enable application consistent snapshots."
input EnableDisableAppConsistencyInput {
    "Specifies whether to enable app consistency on VMs."
    enable: Boolean!
    "Object type for enabling app consistent protection."
    objectType: CloudNativeVmAppConsistentObjectType!
    "List of virtual machine Rubrik IDs."
    workloadIds: [UUID!]!
}

"Configuration for enabling Sharepoint."
input EnableO365SharePointInput {
    "Exocompute Cluster ID."
    exocomputeClusterId: String!
}

"Supported in v5.3+"
input EnablePerLocationPauseInput {
    """

    Required. Supported in v5.3+
    v5.3-v8.0: Specifies whether replication jobs are canceled immediately. When this value is 'true,' replication jobs will be canceled immediately. In all other cases, current running replication jobs will be allowed to finish before pausing.

    v9.0: Specifies whether replication jobs are canceled immediately. When this value is 'true', replication jobs will be canceled immediately.
    """
    shouldCancelImmediately: Boolean!
    "Specifies whether replication jobs are paused immediately while pulling data from the source cluster. When this value is 'true', replication jobs will be paused immediately without losing their progress. Either 'shouldCancelImmediately' or 'shouldPauseImmediately' must be 'true', but not both at the same time. When both are 'false', current running replication jobs will be allowed to finish before pausing."
    shouldPauseImmediately: Boolean
    """

    Required. Supported in v5.3+
    Replication from specified Rubrik clusters are paused. Specified Rubrik clusters must be active replication sources of local Rubrik cluster.
    """
    sourceClusterUuids: [String!]!
}

"Input for replication per location pause."
input EnablePerLocationPauseInputVariable {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    """

    Required. v5.3-v8.0: A configuration value that specifies which source clusters pause replication. Replication jobs can be canceled immediately or be allowed to finish.

    v9.0: A configuration value that specifies which source clusters pause replication. Replication jobs can be canceled immediately, paused immediately or be allowed to finish.
    """
    enablePerLocationPause: EnablePerLocationPauseInput!
}

"Input for enabling a Rubrik Support representative's access to the customer account."
input EnableSupportUserAccessInput {
    "Duration of support user access, in hours."
    durationInHours: Int = 0
    "User ID of the customer on whose behalf the Rubrik Support representative is accessing the customer account."
    impersonatedUserId: String = ""
    "Ticket associated with the support user access request."
    ticketNumber: String = ""
}

"Input for enabling archival location."
input EnableTargetInput {
    "Id of the archival location to be enabled."
    id: String = ""
}

"Input for invoking the API endpoint to end a Managed Volume snapshot."
input EndManagedVolumeSnapshotInput {
    "Specifies an interval in seconds. The snapshot will not end before the specified interval elapses. When this value is defined, the end snapshot operation happens asynchronously after the API call returns."
    endSnapshotDelayInSeconds: Int
    "Required. ID of Managed Volume."
    id: String!
    "A string representing the owner of a snapshot. The end snapshot request fails when the owner of the in-flight snapshot is different from the one specified in the request."
    ownerId: String
    "Snapshot parameters. By default, all Managed Volume snapshots follow the SLA Domain assigned to the Managed Volume. To assign a different SLA Domain to this snapshot, specify the ID of the overriding SLA Domain here. Assigning an overriding SLA Domain turns this snapshot into an on-demand snapshot."
    params: EndSnapshotManagedVolumeRequestInput
}

"Supported in v7.0+"
input EndSnapshotManagedVolumeRequestInput {
    """

    Supported in v7.0+
    Specifies whether the current request is synchronous or asynchronous. By default the value of isAsync is true. In other words, when a value is not specified, the request is asynchronous.
    """
    isAsync: Boolean
    """

    Supported in v7.0+
    Overridden SLA Domain Id for Managed Volume snapshot.
    """
    retentionConfig: BaseOnDemandSnapshotConfigInput
}

"Event digest configuration to specify events criteria."
input EventDigestConfig {
    "Activity severities to include in event digest."
    activitySeverity: [ActivitySeverityEnum!]
    "Activity statuses to include in event digest."
    activityStatus: [ActivityStatusEnum!]
    "Activity types to include in event digest. Valid types are Storage, Tpr, Classification, LegalHold, HypervScvmm, Hdfs, RadarAnalysis, VolumeGroup, LockSnapshot, Instantiate, HypervServer, ISOLATED_RECOVERY, Configuration, Upgrade, CloudNativeVm, StorageArray, Connection, Conversion, AuthDomain, UnknownEventType, CloudNativeVirtualMachine, Discovery, Replication, Maintenance, Support, Fileset, LocalRecovery, System, Failover, OWNERSHIP, StormResource, Diagnostic, Vcd, Anomaly, Archive, CloudNativeSource, HostEvent, AwsEvent, ResourceOperations, Backup, Sync, Hardware, TestFailover, Recovery, Download, EmbeddedEvent, NutanixCluster, VCenter, Index, ThreatHunt, and OTHER_FILTER_ITEM."
    activityType: [String!]
    "Clusters to include in event digest."
    clusters: [String!]
    "Object type to include in event digest."
    objectType: [ActivityObjectTypeEnum!]
}

"Represents the Calendar event to be restored."
input EventInfo {
    "ID of the event to be restored."
    eventId: String!
    "ID of the snapshot from which to restore."
    snapshotId: UUID!
}

"Supported in v8.0+"
input ExchangeBackupJobConfigInput {
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v8.0+
    Specifies whether to take a full snapshot. When true, a full snapshot is taken. When false, an incremental snapshot is taken.
    """
    forceFullSnapshot: Boolean
}

"Supported in v8.0+"
input ExchangeDagUpdateConfigInput {
    """

    Required. Supported in v8.0+
    ID of the Exchange DAG.
    """
    id: String!
    "Required. Supported in v8.0+"
    updateProperties: ExchangeDagUpdateInput!
}

"Supported in v8.0+"
input ExchangeDagUpdateInput {
    "Required. Supported in v8.0+"
    backupPreference: ExchangeBackupPreference!
}

"Filter exchange live mount results."
input ExchangeLiveMountFilterInput {
    "Type of filter."
    field: ExchangeLiveMountFilterField = UNSPECIFIED
    "Values for the filter type."
    texts: [String!] = []
}

"Sort exchange live mounts results."
input ExchangeLiveMountSortByInput {
    "Field for exchange live mounts sort by."
    field: ExchangeLiveMountSortByField = UNSPECIFIED
    "Sort order for exchange live mounts sort by."
    sortOrder: SortOrder = ASC
}

"Supported in v8.0+"
input ExchangeMountSnapshotConfigInput {
    """

    Supported in v8.0+
    Domain name of the users that are authenticated to access the SMB share.
    """
    smbDomainName: String
    """

    Supported in v8.0+
    IP address of the hosts that are authenticated to access the SMB share.
    """
    smbValidIps: [String!] = []
    """

    Supported in v8.0+
    Usernames of the users authenticated to access the SMB share.
    """
    smbValidUsers: [String!] = []
}

"Input to mark volumes to be excluded for EC2 snapshot."
input ExcludeAwsNativeEbsVolumesFromSnapshotInput {
    "Rubrik ID of EC2 instance."
    awsNativeEc2InstanceId: UUID!
    "List of maps of Rubrik IDs to excluded status of volumes."
    volumeIdExclusions: [VolumeIdExclusion!]!
}

"Inputs to trigger Exclusion of Azure Native Managed Disk From Snapshot."
input ExcludeAzureNativeManagedDisksFromSnapshotInput {
    "A list that specifies which disks are excluded from snapshots of the virtual machine."
    managedDiskExclusions: [ManagedDiskExclusion!]!
    "Rubrik ID of the virtual machine (VM)."
    virtualMachineRubrikId: UUID!
}

"Configuration for the exclusion of SharePoint objects from protection."
input ExcludeSharepointObjectsFromProtectionInput {
    "Configurations for the exclusions for each SharePoint site collection."
    exclusions: [O365FullSpSiteExclusions!]!
    "ID of the org."
    orgId: String!
}

"Existing compute configuration."
input ExistingComputeConfig {
    subnetId: String = ""
    vnetId: String = ""
}

"Details of an existing SSO Group."
input ExistingSsoGroupInput {
    "Id of the SSO group."
    id: String!
    "Specifies whether the SSO group is an org admin or not."
    isOrgAdmin: Boolean!
}

"Existing storage account configuration."
input ExistingStorageAccountConfig {
    id: String = ""
}

"Details of the existing user."
input ExistingUserInput {
    "Id of the user."
    id: String!
    "Specifies whether the user should be an org admin or not."
    isOrgAdmin: Boolean!
}

"Specifies the input for expiring downloaded Db2 snapshots."
input ExpireDownloadedDb2SnapshotsInput {
    "Specifies the time to expire only the snapshots that were taken after the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Specifies the time to expire only the snapshots that were taken before the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Db2 database."
    id: String!
    "Specifies whether to expire only the log snapshots or the data snapshots as well. If not configured, both data and log snapshots will be expired."
    shouldExpireLogsOnly: Boolean
}

"Input for expiring downloaded SAP HANA snapshots."
input ExpireDownloadedSapHanaSnapshotsInput {
    "Specifies the time to expire only the snapshots that were taken after the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Specifies the time to expire only the snapshots that were taken before the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the SAP HANA database."
    id: String!
    "Specifies whether to expire only the log snapshots or the data snapshots as well. If not configured, both data and log snapshots will be expired."
    shouldExpireLogsOnly: Boolean
}

"Required. Input for exporting a Hyper-V virtual machine."
input ExportHypervVirtualMachineInput {
    "Required. Configuration for the export request."
    config: HypervExportSnapshotJobConfigInput!
    "Required. ID of snapshot."
    id: String!
}

"Configuration of the Kubernetes namespace snapshot to be exported and the target details."
input ExportK8sNamespaceInput {
    "Filter resources based on labels."
    labelSelector: LabelSelector
    "The UUID of the Kubernetes namespace snapshot to be exported."
    snapshotUuid: UUID!
    "The UUID of the target cluster to export the namespace snapshot to."
    targetClusterUuid: UUID!
    "The name of the target namespace to export the namespace snapshot to."
    targetNamespaceName: String!
}

"Input for the mutation to export a Managed Volume snapshot."
input ExportManagedVolumeSnapshotInput {
    "Snapshot ID."
    id: UUID!
    "Export parameters."
    params: ManagedVolumeExportRequestInput
}

"Input for exporting an MSSQL database."
input ExportMssqlDatabaseInput {
    "Required. Configuration for the export."
    config: ExportMssqlDbJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

"Supported in v5.0+"
input ExportMssqlDbJobConfigInput {
    """

    Supported in v5.0+
    A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.
    """
    allowOverwrite: Boolean
    """

    Supported in v5.0+
    A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
    """
    finishRecovery: Boolean
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to copy data to the target system.
    """
    maxDataStreams: Int
    "Required. Supported in v5.0+"
    recoveryPoint: MssqlRecoveryPointInput!
    """

    Supported in v5.0+
    The target path to store all data files.
    """
    targetDataFilePath: String
    """

    Required. Supported in v5.0+
    Name of the new database.
    """
    targetDatabaseName: String!
    """

    Supported in v5.0+
    One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.
    """
    targetFilePaths: [MssqlDbFileExportPathInput!] = []
    """

    Required. Supported in v5.0+
    ID of the Microsoft SQL instance for the new database.
    """
    targetInstanceId: String!
    """

    Supported in v5.0+
    The target path to store all log files.
    """
    targetLogFilePath: String
}

"Input for exporting a Nutanix snapshot."
input ExportNutanixSnapshotInput {
    "Required. Configuration for the export request."
    config: NutanixVmExportSnapshotJobConfigInput!
    "Required. ID of snapshot."
    id: String!
}

"Configuration for O365 mailbox export."
input ExportO365MailboxInput {
    "Configuration for restore job."
    exportConfigs: [RestoreObjectConfig!]!
    "Polaris ID of the source mailbox."
    fromMailboxUuid: UUID!
    "Polaris ID of O365 subscription."
    orgUuid: UUID
    "Polaris ID of restoring snapshot."
    snapshotUuid: UUID
    "Polaris ID of the destination mailbox."
    toMailboxUuid: UUID!
}

"Input for ExportOracleDatabase."
input ExportOracleDatabaseInput {
    "Advanced Recovery Configuration map for the Oracle database export."
    advancedRecoveryConfigMap: [AdvancedRecoveryConfigMap!]
    "Request parameters for the Oracle database export."
    request: CreateExportOracleDbInput!
}

"Supported in v5.0+"
input ExportOracleDbConfigInput {
    """

    Supported in v5.2+
    v5.2-v5.3: Configuration file for advanced Oracle recovery in base64 encoded format.
    v6.0+: The configuration file for Oracle advanced recovery in base64 encoded format. This field cannot be specified if `advancedRecoveryConfigMap` is specified.
    """
    advancedRecoveryConfigBase64: String
    """

    Supported in v5.2+
    The full path for the directory containing the archive log files on the Oracle host.
    """
    archiveLogPath: String
    """

    Supported in v5.3+
    The new value of the db_name parameter for a clone operation. This is used to specify the new name during rman duplicate.
    """
    cloneDbName: String
    """

    Supported in v5.3+
    The full path of the pfile on the target Oracle Host or RAC to use for the database recovery.
    """
    customPfilePath: String
    """

    Supported in v6.0+
    Number of channels used during clone or same-host recovery.
    """
    numChannels: Int
    """

    Supported in v8.0+
    List of PDB names to be cloned in the target database.
    """
    pdbsToClone: [String!] = []
    """

    Supported in v6.0+
    Path to the post-script to run after the recovery task.
    """
    postScriptPath: String
    """

    Supported in v6.0+
    Path to the pre-script to run before the recovery task.
    """
    preScriptPath: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Snapshot ID or timestamp for which the export is done.
    v5.3+: Snapshot ID or timestamp for which the clone is done.
    """
    recoveryPoint: OracleRecoveryPointInput!
    """

    Supported in v5.0+
    The full path for the directory on the target host to use to store the restored database files.
    """
    restoreFilesPath: String
    "Specifies whether the database files are copied to the target host without recreating the database."
    shouldRestoreFilesOnly: Boolean
    "Indicates whether to skip dropping the database in undo task if the database was partially recovered."
    shouldSkipDropDbInUndo: Boolean
    """

    Supported in v6.0+
    Boolean value that determines whether to stop the recovery task if the pre-script exits with a non-zero value. Set to True to stop the recovery task on pre-script failure. The default setting is False, which allows the task to continue.
    """
    shouldStopRecoveryOnPreScriptFailure: Boolean
    """

    Supported in v5.0+
    The full path for the directory on the target host where the NFS share will be mounted.
    """
    targetMountPath: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2: ID of the Oracle Host or Oracle RAC object that is the target for the export of the specified database snapshot. The referenced Oracle host or RAC must have the Rubrik Backup Service installed and connected. Standalone source databases can be exported to OracleHost and clustered source databases can be exported to OracleRac only.
    v5.3+: ID of the Oracle Host or Oracle RAC object that is the target for the clone of the specified database snapshot. The referenced Oracle host or RAC must have the Rubrik Backup Service installed and connected. Standalone source databases can be cloned to OracleHost and clustered source databases can be cloned to OracleRac only.
    """
    targetOracleHostOrRacId: String!
}

"Supported in v5.0+"
input ExportOracleTablespaceConfigInput {
    """

    Required. Supported in v5.0+
    The full path to the directory on the source host where the auxiliary database files will be created.
    """
    auxiliaryDestinationPath: String!
    """

    Supported in v5.2+
    Expose all logs that were backed up between the selected recovery point and the latest log backup.
    """
    exposeAllLogs: Boolean
    """

    Required. Supported in v5.0+
    Snapshot ID or timestamp for which the export is done.
    """
    recoveryPoint: OracleRecoveryPointInput!
    """

    Required. Supported in v5.0+
    Name of the tablespace to be exported from the existing database snapshot.
    """
    tablespaceName: String!
}

input ExportOracleTablespaceInput {
    "Required. Configuration parameters for a job to export an Oracle tablespace from a specified snapshot or timestamp."
    config: ExportOracleTablespaceConfigInput!
    "Required. ID of the database containing the tablespace to export."
    id: String!
}

"Supported in v5.0+"
input ExportPathPairInput {
    """

    Required. Supported in v5.0+
    v5.0-v7.0: Destination path of export files.
    v8.0+: Destination path where files will be exported.
    """
    dstPath: String!
    """

    Required. Supported in v5.0+
    v5.0-v7.0: Original file path.
    v8.0+: Path of the original file to be exported.
    """
    srcPath: String!
}

"Input for the mutation to export an SLA Managed Volume snapshot."
input ExportSlaManagedVolumeSnapshotInput {
    "Snapshot ID."
    id: UUID!
    "Export parameters."
    params: ManagedVolumeSlaExportRequestInput
}

"Supported in v6.0+"
input ExportSnapshotJobConfigForBatchInput {
    """

    Required. Supported in v6.0+
    Configuration for snapshot export.
    """
    config: ExportSnapshotJobConfigV2Input!
    """

    Supported in v6.0+
    Exports the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Exports the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    The ID of the snapshot to export. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine whose snapshot needs to be exported.
    """
    vmId: String!
    """

    Supported in v6.0+
    Prefix to be added to the name of the exported virtual machine.
    """
    vmNamePrefix: String
}

"Supported in v5.1+"
input ExportSnapshotJobConfigV2Input {
    """

    Supported in v5.2+
    ID of the cluster to export the new virtual machine to. virtual machine.
    """
    clusterId: String
    """

    Required. Supported in v5.1+
    ID of the datastore to assign to the exported virtual machine.
    """
    datastoreId: String!
    """

    Supported in v5.1+
    ID of the ESXi host to export the new virtual machine to.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v5.2+
    ID of the resource pool to export the new virtual machine to.
    """
    resourcePoolId: String
    """

    Supported in v5.1+
    The job recovers any tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v7.0+
    Boolean value that determines whether Export uses a HotAdd mode to transport virtual disk data. When this value is `true`, Export uses HotAdd mode to transport virtual disk data. When this value is `false`, Export uses NBDSSL to transport virtual disk data. The default value is `false`.
    """
    shouldUseHotAddProxy: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. When this value is 'true', the registration is removed from the vCenter Server. When this value is 'false', the registration is kept on the vCenter Server. The default is 'false'.
    """
    unregisterVm: Boolean
    """

    Supported in v6.0+
    The network binding for vNIC of the virtual machine.
    """
    vNicBindings: [VmwareVnicBindingInfoV2Input!] = []
}

"Supported in Rubrik CDM version 9.0 and later."
input ExportSnapshotJobConfigV3Input {
    "ID of the cluster to export the new virtual machine to."
    clusterId: String
    "List of disk device keys to storage ID mappings. If the list is not defined, the export virtual machine is created at the storageLocationId. If the list is defined, the storageLocationId specifies where the vmx file is created. When this mapping is provided, each virtual disk in the snapshot must be mapped to a valid storage location, either a datastore or a datastore cluster. An incomplete or invalid mapping will result in the failure of the export operation."
    diskDeviceKeyToStorageId: [VmwareStorageIdWithDeviceKeyV2Input!] = []
    "ID of the ESXi host to export the new virtual machine to."
    hostId: String
    "Common fields for recovery operations."
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    "Target snapshot ID or a point in time for recovery."
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    "ID of the resource pool to export the new virtual machine to."
    resourcePoolId: String
    "The job recovers any tags that were assigned to the virtual machine."
    shouldRecoverTags: Boolean
    "Specifies whether the export uses a HotAdd mode to transport virtual disk data. When this value is `true`, the export uses HotAdd mode to transport virtual disk data. When this value is `false`, the export uses NBDSSL to transport virtual disk data. The default value is `false`."
    shouldUseHotAddProxy: Boolean
    "ID of the datastore or datastore cluster to assign to the exported virtual machine."
    storageLocationId: String
    "Specifies whether the new virtual machine created from a snapshot is registered with the vCenter Server. When this value is `true`, the registration is removed from the vCenter Server. When this value is `false`, the registration is kept on the vCenter Server. The default value is `false`."
    unregisterVm: Boolean
    "The network binding for the vNIC of the virtual machine."
    vNicBindings: [VmwareVnicBindingInfoV2Input!] = []
}

"Supported in v5.0+"
input ExportSnapshotToStandaloneHostRequestInput {
    """

    Required. Supported in v5.0+
    Name of the datastore to assign to the exported. virtual machine.
    """
    datastoreName: String!
    """

    Required. Supported in v5.0+
    The IP address of the standalone ESXi host.
    """
    hostIpAddress: String!
    """

    Required. Supported in v5.0+
    The admin password of standalone ESXi host.
    """
    hostPassword: String!
    """

    Required. Supported in v5.0+
    The admin username of standalone ESXi host.
    """
    hostUsername: String!
    mountExportSnapshotJobCommonOptions: MountExportSnapshotJobCommonOptionsInput
}

"Supported in v5.2+"
input FailoverClusterAppConfigInput {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Required. Supported in v5.2+
    The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
    """
    failoverClusterAppSource: FailoverClusterAppSourceInput!
    """

    Required. Supported in v5.2+
    Cluster ID of the failover cluster app.
    """
    failoverClusterId: String!
    """

    Required. Supported in v5.2+
    Cluster type of the failover cluster app.
    """
    failoverClusterType: FailoverClusterType!
    """

    Required. Supported in v5.2+
    Name of the failover cluster app.
    """
    name: String!
}

"Supported in v5.2+"
input FailoverClusterAppSourceInput {
    """

    Supported in v5.2+
    Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
    """
    nodeOrders: [FailoverClusterNodeOrderInput!] = []
    "Virtual IP addresses of the failover cluster."
    vips: [String!] = []
    """

    Supported in v5.3+
    Virtual IP addresses of the failover cluster.
    """
    virtualIps: [String!] = []
}

"Supported in v5.2+"
input FailoverClusterConfigInput {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Required. Supported in v5.2+
    Managed ID's of Hosts of the failover cluster.
    """
    hostIds: [String!]!
    """

    Required. Supported in v5.2+
    Name of the failover cluster.
    """
    name: String!
}

"Supported in v5.2+"
input FailoverClusterNodeOrderInput {
    """

    Required. Supported in v5.2+
    ID of the failover cluster node.
    """
    nodeId: String!
    """

    Supported in v5.3+
    The name of the failover cluster node.
    """
    nodeName: String
    """

    Required. Supported in v5.2+
    An integer that specifies the place occupied by this node in the failover cluster app backup order.
    """
    order: Int!
}

"Filter appflows failover jobs"
input FailoverFilterInput {
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    source: [String!]
    targetSite: [String!]
    timeGt: DateTime
    timeLt: DateTime
}

"Input to check feature support for CDM version."
input FeatureCdmVersionInput {
    "Required. Cluster to check for feature."
    clusterUuid: UUID!
    "Required. Feature type to check."
    featureType: CdmFeatureFlagType!
}

"A contextual value affecting the evaluation of a feature flag."
input FeatureFlagContextField {
    "Key corresponding to this field."
    key: String!
    "The value of this field. Can be any GraphQL scalar."
    value: AnyScalar!
}

"Input to minimum CDM version supporting all given features."
input FeatureListMinimumCdmVersionInputType {
    "Required. Feature type to check."
    featureTypes: [CdmFeatureFlagType!]!
}

input FederatedLoginStatusInput {
    "Enable or Disable federated login."
    enabled: Boolean!
    "Enable or Disable federated login inventory card."
    inventoryCardEnabled: Boolean!
}

"Sorts to apply when listing a file's user activities."
input FileActivitiesSort {
    "The field to sort on."
    sortBy: FileActivitiesSortBy = USER_NAME
    "The direction to sort on."
    sortOrder: SortOrder = ASC
}

"Configuration which describes file details."
input FileDetailsInput {
    "Name of the file."
    fileName: String!
}

"Represents the OneDrive file to be restored."
input FileInfo {
    channelInfo: TeamsChannelInfo
    fileId: String!
    fileName: String!
    fileSnapshotsToRestore: [FileSnapshotInfo!]!
}

"Input for details regarding download location. The two fields are mutually exclusive. Only one of them should be specified at a time."
input FileRecoveryLocationDetailsInput {
    "Populate this field with details of the download location for downloading to cloud."
    cloudDownloadLocationDetails: CloudDownloadLocationDetailsInput
    "Populate this field with details of the download location for downloading to a virtual machine."
    vmDownloadLocationDetails: VmDownloadLocationDetailsInput
}

input FileResultSortInput {
    analyzerGroupId: String = ""
    sortBy: FileResultSortBy = HITS
    sortOrder: SortOrder = ASC
}

"Represents the OneDrive file snapshot to be restored."
input FileSnapshotInfo {
    fileSize: Long!
    snapshotId: UUID!
    snapshotNum: Int!
}

"Supported in v5.0+"
input FilesetArraySpecInput {
    """

    Supported in v5.0+
    ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
    """
    proxyHostId: String
}

"Supported in v5.0+"
input FilesetCreateInput {
    "Supported in v5.0+"
    arraySpec: FilesetArraySpecInput
    """

    Supported in v5.1+
    A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
    """
    enableHardlinkSupport: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
    """
    enableSymlinkResolution: Boolean
    """

    Supported in v5.2+
    ID of the failover cluster app.
    """
    failoverClusterAppId: String
    "Supported in v5.0+"
    hostId: String
    "Specifies whether the fileset is managed by Rubrik Security Cloud."
    isManagedByPolaris: Boolean
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
    v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
    """
    isPassthrough: Boolean
    "Specifies whether the fileset is created in Rubrik Security Cloud and is based on the new NAS model."
    isPolarisNasModel: Boolean
    "Supported in v5.0+"
    shareId: String
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
    "Required. Supported in v5.0+"
    templateId: String!
}

"Supported in v5.0+"
input FilesetDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
    """
    sourceDirs: [String!]!
}

"Supported in v7.0+"
input FilesetDownloadRequestInput {
    """

    Supported in v7.0+
    ID of the SLA Domain to manage retention of the downloaded snapshot.
    """
    slaId: String
}

"Input for Fileset Download Snapshot files."
input FilesetDownloadSnapshotFilesInput {
    "Configuration information for a job to download files and folders from a fileset backup."
    config: FilesetDownloadFilesJobConfigInput!
    "Filter for delta type."
    deltaTypeFilter: [DeltaType!]
    "ID assigned to a fileset snapshot object."
    id: String!
    "The fid of the next fileset snapshot."
    nextSnapshotFid: UUID
    "Optional User note."
    userNote: String
}

"Supported in v5.0+"
input FilesetExportFilesJobConfigInput {
    """

    Required. Supported in v5.0+
    Pairs of source path and destination path.
    """
    exportPathPairs: [FilesetExportPathPairInput!]!
    """

    Required. Supported in v5.0+
    Host ID.
    """
    hostId: String!
    """

    Supported in v5.0+
    Optional Boolean value that determines whether or not to ignore errors during an export. By default, this value is set to False. Set this value to True to ignore errors.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    Network share ID.
    """
    shareId: String
}

"Supported in v5.0+"
input FilesetExportPathPairInput {
    "Pair of source path and destination path."
    exportPathPair: ExportPathPairInput
}

"Input for Fileset export snapshot files."
input FilesetExportSnapshotFilesInput {
    "The configuration of a job that exports one or more files or folders from a fileset backup."
    config: FilesetExportFilesJobConfigInput!
    "Filter for delta type."
    deltaTypeFilter: [DeltaType!]
    "Corresponds to snapshot forever UUID in Rubrik tables."
    id: String!
    "The fid of the next fileset snapshot."
    nextSnapshotFid: UUID
    "OS Type of the Fileset Host."
    osType: GuestOsType!
    "Share type of fileset."
    shareType: ShareTypeEnum! = NoShareType
}

"Supported in v5.0+"
input FilesetOptionsInput {
    """

    Supported in v5.0+
    Include or exclude hidden folders inside locally-mounted remote file systems from backups.
    """
    allowBackupHiddenFoldersInNetworkMounts: Boolean
    """

    Supported in v5.0+
    Include or exclude locally-mounted remote file systems from backups.
    """
    allowBackupNetworkMounts: Boolean
    """

    Supported in v5.0+
    Use VSS during Windows backups.
    """
    useWindowsVss: Boolean
}

"Input for Fileset recover files."
input FilesetRecoverFilesInput {
    "Configuration for job to restore one or more files or folders from a fileset backup."
    config: FilesetRestoreFilesJobConfigInput!
    "Filter for delta type."
    deltaTypeFilter: [DeltaType!]
    "The fid of the next fileset snapshot."
    nextSnapshotFid: UUID
    "OS Type of the Fileset Host."
    osType: GuestOsType!
    "List of restore path pairs."
    restorePathPairList: [OldRestorePathPairInput!]!
    "Share type of fileset."
    shareType: ShareTypeEnum! = NoShareType
    "Corresponds to snapshot forever UUID in Rubrik tables."
    snapshotFid: UUID!
}

"Supported in v5.0+"
input FilesetRestoreFilesJobConfigInput {
    """

    Supported in v5.0+
    Optional field to determine if we should ignore single error during restore. Default value is false.
    """
    ignoreErrors: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Absolute file path and restore path if not restored back to itself
    v6.0+: Absolute file path.. and restore path if not restored back to itself.
    """
    restoreConfig: [FilesetRestorePathPairInput!]!
}

"Supported in v5.0+"
input FilesetRestorePathPairInput {
    "Absolute file path and restore path when not restored back to itself."
    restorePathPair: RestorePathPairInput
}

"Supported in v5.0+"
input FilesetTemplateCreateInput {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    "Supported in v5.0+"
    exceptions: [String!] = []
    "Supported in v5.0+"
    excludes: [String!] = []
    "Fileset options."
    filesetOptions: FilesetOptionsInput
    "Required. Supported in v5.0+"
    includes: [String!]!
    """

    Supported in v5.0+
    Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
    """
    isArrayEnabled: Boolean
    """

    Supported in v7.0+
    Specifies whether this is created by a Kupr Host.
    """
    isCreatedByKupr: Boolean
    "Specifies whether the template was created for Rubrik Security Cloud NAS."
    isCreatedByPolarisNas: Boolean
    "Required. Supported in v5.0+"
    name: String!
    """

    Supported in v5.0+
    Operating system type of filesets created by template.
    """
    operatingSystemType: FilesetTemplateCreateOperatingSystemType
    """

    Supported in v5.0+
    Script to run after backup of this fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this fileset starts.
    """
    preBackupScript: String
    "Supported in v5.0+"
    shareType: FilesetTemplateCreateShareType
}

"Supported in v5.0+"
input FilesetTemplatePatchInput {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    "Supported in v5.0+"
    exceptions: [String!] = []
    "Supported in v5.0+"
    excludes: [String!] = []
    "Fileset options."
    filesetOptions: FilesetOptionsInput
    "Required. Supported in v5.0+"
    id: String!
    "Supported in v5.0+"
    includes: [String!] = []
    """

    Supported in v7.0+
    Specifies whether this is created by a Kupr Host.
    """
    isCreatedByKupr: Boolean
    "Specifies whether the template was created for Rubrik Security Cloud NAS."
    isCreatedByPolarisNas: Boolean
    "Supported in v5.0+"
    name: String
    """

    Supported in v5.0+
    Operating system type of filesets created by template.
    """
    operatingSystemType: FilesetTemplatePatchOperatingSystemType
    """

    Supported in v5.0+
    Script to run after backup of this Fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this Fileset starts.
    """
    preBackupScript: String
    "Supported in v5.0+"
    shareType: FilesetTemplatePatchShareType
}

"A set of parameters to filter objects."
input Filter {
    awsNativeProtectionFeatureNames: [AwsNativeProtectionFeature!] = []
    azureNativeProtectionFeatureNames: [AzureNativeProtectionFeature!] = []
    field: HierarchyFilterField = IS_ARCHIVED
    isNegative: Boolean = false
    isSlowSearchEnabled: Boolean = false
    objectTypeFilterParams: [ManagedObjectType!] = []
    tagFilterParams: [TagFilterParams!] = []
    texts: [String!] = []
    unmanagedObjectAvailabilityFilter: [UnmanagedObjectAvailabilityFilter!] = []
}

"""

Supported in v7.0+
Information needed to create a multi-tag filter.
"""
input FilterInfoInput {
    """

    Required. Supported in v7.0+
    Conditional logic for vSphere tags.
    """
    condition: String!
    """

    Supported in v7.0+
    Filter description.
    """
    description: String
    """

    Required. Supported in v7.0+
    Filter name.
    """
    name: String!
}

"Input to process and finalize deletion of AWS cloud account."
input FinalizeAwsCloudAccountDeletionInput {
    "Rubrik ID of account to be deleted."
    cloudAccountId: UUID!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeature!
}

"Input to finalize set up of an AWS cloud account."
input FinalizeAwsCloudAccountProtectionInput {
    "Action to be performed with cloud account."
    action: CloudAccountAction!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    "List of AWS accounts."
    awsChildAccounts: [AwsCloudAccountInput!]!
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegion!]
    "External ID of the IAM role trust policy for the cloud account."
    externalId: String!
    "List of feature types to be protected for the cloud account."
    featureVersion: [AwsCloudAccountFeatureVersionInput!]!
    "List of features for native protection of cloud account."
    features: [CloudAccountFeature!]!
    "Name of the CloudFormation stack to be created."
    stackName: String
    "Stackset name of the CloudFormation stack to be created."
    stackSetName: String
}

"Represents the OneDrive folder to be restored."
input FolderInfo {
    channelInfo: TeamsChannelInfo
    folderId: String!
    folderName: String!
    folderSize: Long!
    snapshotId: UUID!
    snapshotNum: Int!
}

"Supported in v5.1+"
input FullyQualifiedDomainNameInfoInput {
    """

    Required. Supported in v5.1+
    Fully qualified domain name where the filter should be hosted for install/upgrade operations.
    """
    fqdn: String!
}

"Input required to add a GCP cloud account manually."
input GcpCloudAccountAddManualAuthProjectInput {
    "Features to be enabled for the GCP cloud account."
    features: [CloudAccountFeature!]!
    "The native project ID of the GCP project."
    gcpNativeProjectId: String!
    "The project name of the GCP project."
    gcpProjectName: String!
    "The project number of the GCP project."
    gcpProjectNumber: Long!
    "The name of the organization containing the project."
    organizationName: String
    "The JWT configuration of the service account."
    serviceAccountJwtConfig: String
}

"Input required to add a GCP cloud account."
input GcpCloudAccountAddProjectsInput {
    "List of project native IDs."
    cloudAccountsProjectIds: [String!]!
    "List of GCP project native IDs to be added for native protection."
    nativeProtectionProjectIds: [String!]!
    "Session ID of the current OAuth session."
    sessionId: String!
    "List of GCP shared VPC host project native IDs."
    sharedVpcHostProjectIds: [String!]!
}

"Input required to delete a list of GCP projects."
input GcpCloudAccountDeleteProjectsInput {
    "List of project native IDs."
    cloudAccountsProjectIds: [UUID!]!
    "List of GCP project native IDs to be added for native protection."
    nativeProtectionProjectIds: [UUID!]!
    "Session ID of the current OAuth session (optional)."
    sessionId: String
    "List of GCP shared VPC host project native IDs."
    sharedVpcHostProjectIds: [UUID!]!
    "Specifies whether cleanup of GCP resources should be skipped. If this flag is set, then the session ID is ignored."
    skipResourceDeletion: Boolean!
}

"Input to complete the GCP cloud account OAuth flow."
input GcpCloudAccountOauthCompleteInput {
    "Authorization code received after the OAuth flow."
    authorizationCode: String!
    "Redirect URL used in the OAuth flow."
    redirectUrl: String!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input to initiate the GCP cloud account OAuth flow."
input GcpCloudAccountOauthInitiateInput {
    "Customer URL."
    customerUrl: String!
}

"Input required to upgrade a list of GCP projects."
input GcpCloudAccountUpgradeProjectsInput {
    "Cloud account feature."
    feature: CloudAccountFeature!
    "List of GCP project IDs to be upgraded."
    projectIds: [UUID!]!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input required to disable protection for a GCP native project."
input GcpNativeDisableProjectInput {
    "GCP native project ID."
    projectId: UUID!
    "Specifies whether to delete the native snapshots while disabling the project."
    shouldDeleteNativeSnapshots: Boolean!
}

"Filters for list of GCP disks."
input GcpNativeDiskFilters {
    "Filter by GCP disk type."
    diskTypeFilter: GcpNativeDiskTypeFilter
    "Filter by the effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by GCP native labels."
    labelFilter: GcpNativeLabelFilter
    "Filter by GCP disk location."
    locationFilter: GcpNativeDiskLocationFilter
    "Filter by name or ID substring."
    nameOrIdSubstringFilter: GcpNativeDiskNameOrIdSubstringFilter
    "Filter by organization ID."
    orgFilter: OrgFilter
    "Filter by GCP project name."
    projectFilter: GcpNativeDiskProjectFilter
    "Filter by relic status."
    relicFilter: RelicFilter
}

"Filter to return GCP disks which have location in the given list of locations. Location can be a zone or a region."
input GcpNativeDiskLocationFilter {
    "Filter GCP disks by location."
    locations: [String!]!
}

"Filter to return GCP disks with a given substring in their name or ID."
input GcpNativeDiskNameOrIdSubstringFilter {
    "Name or ID substring."
    nameOrIdSubstring: String!
}

"Filter to return GCP disks which have project rubrik ID in the given list of project rubrik IDs."
input GcpNativeDiskProjectFilter {
    "Filter by GCP project ID."
    projectIds: [String!]!
}

"Filter to return GCP disks which have disk type in the given list of disk types."
input GcpNativeDiskTypeFilter {
    "Filter by GCP disk type."
    diskTypes: [String!]!
}

"Input required to exclude GCP native disks from GCE instance snapshots."
input GcpNativeExcludeDisksFromInstanceSnapshotInput {
    "Mapping from disk ID to whether it is excluded from GCP instance snapshots."
    diskIdToIsExcluded: [DiskIdToIsExcluded!]!
    "GCP instance Rubrik ID."
    instanceId: UUID!
}

"Input required to export a GCP native disk snapshot."
input GcpNativeExportDiskInput {
    "Encryption type of exported disk."
    diskEncryptionType: DiskEncryptionType!
    "Customer managed key to encrypt exported disk. This is only applicable when encryption type is CustomerManagedKey."
    kmsCryptoKey: KmsCryptoKey
    "Customer managed key to encrypt exported disk. This is only applicable when encryption type is CustomerManagedKeyResourceId."
    kmsCryptoKeyResourceId: String
    "Specifies whether the exported disk should replace the source disk from the attached instance."
    replaceAttached: Boolean!
    "The zones where the regional exported disk should be replicated."
    replicaZones: [String!]
    "Specifies whether to allow Rubrik labels on the exported disk or not."
    shouldAddRubrikLabels: Boolean!
    "Specfies whether the labels will be copied to the exported disk from the source disk that were there at the time of taking the snapshot or not."
    shouldCopyLabels: Boolean!
    "Snapshot Rubrik ID."
    snapshotId: UUID!
    "The name of the exported disk."
    targetDiskName: String!
    "The size of the exported disk in GBs."
    targetDiskSizeGb: Int!
    "The type of the exported disk."
    targetDiskType: String!
    "The region of the exported disk."
    targetRegion: String!
    "The zone of the exported disk."
    targetZone: String
}

"Input required to export a GCP GCE instance snapshot."
input GcpNativeExportGceInstanceInput {
    "Encryption type of created disk."
    diskEncryptionType: DiskEncryptionType!
    "Customer managed key to encrypt exported instance. This is only applicable when encryption type is CustomerManagedKey."
    kmsCryptoKey: KmsCryptoKey
    "Customer managed key to encrypt exported instance. This is only applicable when encryption type is CustomerManagedKeyResourceId."
    kmsCryptoKeyResourceId: String
    "Native ID of the shared VPC host project for the current service project."
    sharedVpcHostProjectNativeId: String
    "Specifies whether to allow Rubrik labels on the exported disk or not."
    shouldAddRubrikLabels: Boolean!
    "Specfies whether the labels will be copied to the exported disk from the source disk that were there at the time of taking the snapshot or not."
    shouldCopyLabels: Boolean!
    "Specifies whether the exported instance will be created in a powered-off state."
    shouldPowerOff: Boolean!
    "Snapshot Rubrik ID."
    snapshotId: UUID!
    "The name of the exported instance."
    targetInstanceName: String!
    "The machine type of the exported instance."
    targetMachineType: String!
    "The network tags of the exported instance."
    targetNetworkTags: [String!]
    "The subnet name of the exported instance."
    targetSubnetName: String!
    "The zone of the exported disk."
    targetZone: String!
}

"Filters for list of GCP GCE instances."
input GcpNativeGceInstanceFilters {
    "Filter by the effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by GCP native labels."
    labelFilter: GcpNativeLabelFilter
    "Filter by GCP instance type."
    machineTypeFilter: GcpNativeMachineTypeFilter
    "Filter by name or ID substring."
    nameOrIdSubstringFilter: GcpNativeInstanceNameOrIdSubstringFilter
    "Filter by GCP instance network name."
    networkFilter: GcpNativeNetworkFilter
    "Filter by organization ID."
    orgFilter: OrgFilter
    "Filter by GCP project name."
    projectFilter: GcpNativeProjectFilter
    "Filter by region."
    regionFilter: GcpNativeRegionFilter
    "Filter by relic status."
    relicFilter: RelicFilter
}

"Filter to return GCP GCE instances with a given substring in their name or ID."
input GcpNativeInstanceNameOrIdSubstringFilter {
    "Name or ID substring."
    nameOrIdSubstring: String!
}

"Filter to return GCP objects which have at least one label in the given list of labels."
input GcpNativeLabelFilter {
    "Filter by GCP labels."
    labelFilterParams: [LabelFilterParams!]!
}

"Filter to return GCP GCE instances which have instance type in the given list of machine types."
input GcpNativeMachineTypeFilter {
    "Filter by GCP instance type."
    machineTypes: [String!]!
}

"Filter to return GCP GCE instances which have network name in the given list of network names."
input GcpNativeNetworkFilter {
    "Filter by GCP instance network name."
    networkNames: [String!]!
}

"Filter to return GCP objects which have project rubrik ID in the given list of project rubrik IDs."
input GcpNativeProjectFilter {
    projectIds: [String!]!
}

"Filters for list of GCP projects."
input GcpNativeProjectFilters {
    "Filter by the effective SLA Domain."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter GCP projects by their native ID."
    idSubstringFilter: GcpNativeProjectIdSubstringFilter
    "Filter by name or ID substring."
    nameOrNumberSubstringFilter: GcpNativeProjectNameOrNumberSubstringFilter
}

"Filter to return GCP projects with the given string in their project ID."
input GcpNativeProjectIdSubstringFilter {
    "Native ID of the GCP project."
    idSubstring: String!
}

"Filter to return GCP projects with a given substring in their name or number."
input GcpNativeProjectNameOrNumberSubstringFilter {
    nameOrNumberSubstring: String!
}

"Input to refresh GCP native projects."
input GcpNativeRefreshProjectsInput {
    "List of project IDs."
    projectIds: [UUID!]!
}

"Filter to return GCP objects which have region in the given list of regions."
input GcpNativeRegionFilter {
    "List of GCP regions."
    regions: [String!]!
}

"Input required to restore a GCP GCE instance snapshot."
input GcpNativeRestoreGceInstanceInput {
    "Specifies whether to allow Rubrik labels on the restored disk or not."
    shouldAddRubrikLabels: Boolean!
    "Specifies whether to restore labels of the instance from snapshot or not."
    shouldRestoreLabels: Boolean!
    "Specfies whether the the restored instance should be started or not."
    shouldStartRestoredInstance: Boolean!
    "Snapshot Rubrik ID."
    snapshotId: UUID!
}

"Input required to set default GCP service account JWT configuration."
input GcpSetDefaultServiceAccountJwtConfigInput {
    "The JWT configuration for a service account."
    serviceAccountJwtConfig: String!
    "The name of the service account."
    serviceAccountName: String!
}

"Input required for providing cluster configuration details for registration."
input GenerateClusterRegistrationTokenInput {
    "Indicates whethere the registration is being performed in offline mode or online. Input is optional as all CDM releases don't support offline registration."
    isOfflineRegistration: Boolean
    "If true, generate a token for registering a Hybrid cluster. If false, generate a token for registering LifeOfDevice cluster. If it's not passed, the product type is inferred automatically. Value would be absent in case of single SKU."
    managedByPolaris: Boolean
    "Configuration details for nodes in the cluster. Input is optional as all CDM releases don't support this configuration generation."
    nodeConfigs: [NodeRegistrationConfigsInput!]
}

"Input for generating configuration protection restore form."
input GenerateConfigProtectionRestoreFormInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Request to generate restore form."
    restoreFormRequest: RestoreFormRequestInput!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Credentials to add or update a generic NAS system.
"""
input GenericNasSystemCredentialsInput {
    """

    Required. Supported in v7.0+
    Password associated with the NAS user account.
    """
    password: String!
    """

    Required. Supported in v7.0+
    Username to access the NAS server and share.
    """
    username: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Protocol support and SMB credentials for a NAS system.
"""
input GenericNasSystemParametersInput {
    """

    Required. Supported in v7.0+
    Specifies whether to enable NFS for this server.
    """
    hasNfsSupport: Boolean!
    """

    Required. Supported in v7.0+
    Specifies whether to enable SMB for this server.
    """
    hasSmbSupport: Boolean!
    """

    Supported in v7.0+
    The credentials to access SMB server.
    """
    smbCredentials: GenericNasSystemCredentialsInput
}

input GenericTimeRangeInput {
    absoluteTimeRange: TimeRangeInput
    relativeTimeRange: RelativeTimeRangeInput
}

"Input to retrieve the metadata of a certificate."
input GetCertificateInfoInput {
    "The certificate in x509 PEM format."
    certificatePem: String!
}

"Input to retrieve cloud compute connectivity status."
input GetCloudComputeConnectivityCheckRequestStatusInput {
    "Required. ID of the request."
    id: String!
}

"Input for getting cluster certificate signing request."
input GetClusterCsrInput {
    "Required. ID of the Rubrik cluster hosting the API session or *me* for self."
    id: String!
}

input GetClusterIpsInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

input GetClusterNtpServersInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

input GetCompatibleMssqlInstancesV1Input {
    "Required. ID of the Microsoft SQL database."
    id: String!
    "Time, in ISO8601 format, to recover to. For example \"2016-01-01T01:23:45.678Z\". If this is not specified, the latest recoverable time is used."
    recoveryTime: DateTime
    "Required. Recovery type."
    recoveryType: V1GetCompatibleMssqlInstancesV1RequestRecoveryType!
}

input GetComputeClusterInput {
    "Required. ID of the compute cluster."
    id: String!
}

"Input for retrieving Nutanix containers."
input GetContainersInput {
    "Required. ID of the Nutanix cluster."
    id: String!
}

"Input required for retrieving a specific Certificate Signing Request (CSR)."
input GetCsrInput {
    "ID of the CSR to retrieve."
    csrId: Long!
}

input GetDefaultDbPropertiesV1Input {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

input GetDefaultGatewayInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

input GetHotAddBandwidthInput {
    "Required. The ID of the vCenter server from which to derive the number of proxies needed."
    id: String!
}

input GetHotAddNetworkInput {
    "Required. ID of the vCenter server for which the Rubrik cluster is retrieving the configured HotAdd network information."
    id: String!
}

"Input for retrieving the status of an async request from the specified Hyper-V host."
input GetHypervHostAsyncRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the request."
    id: String!
}

"Input for retrieving the status of an async request from the specified Hyper-V SCVMM."
input GetHypervScvmmAsyncRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the request."
    id: String!
}

"Input for retrieving the status of an async request from the specified Hyper-V virtual machine."
input GetHypervVirtualMachineAsyncRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the request."
    id: String!
}

"Input for getting the details of a Hyper-V virtual machine."
input GetHypervVirtualMachineInput {
    "Required. ID of the Virtual Machine."
    id: String!
}

input GetIpmiInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

input GetLambdaDetectMalwareRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of an asynchronous malware detection."
    id: String!
}

input GetLambdaDetectMalwareResultInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of an asynchronous malware detection."
    id: String!
}

input GetLambdaMalwareScanDetailInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of an asynchronous malware detection."
    id: String!
}

input GetMissedMssqlDbSnapshotsInput {
    "Filter snapshots to those missed on or after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Filter snapshots to those missed on or before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input GetMissedOracleDbSnapshotsInput {
    "Filter the matches in the response to include only the snapshots taken on or after the time specified by a date-time string. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Filter the matches in the response to include only the snapshots taken on or after the time specified by a date-time string. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID assigned to an Oracle database object."
    id: String!
}

"Input for getting NoSQL protection recoverable range of snapshots."
input GetMosaicRecoverableRangeInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Request Object with details of Tables whose recovery range is required."
    recoveryRangeRequestData: MosaicRecoverableRangeRequestInput!
}

"Input for querying NoSQL protection store."
input GetMosaicStoreInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

"Input for querying NoSQL protection table schema."
input GetMosaicTableSchemaInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Schema request Object with details of schema which needs to be retrieved."
    schemaRequestData: MosaicGetSchemaRequestInput!
}

"Input for querying NoSQL protection version."
input GetMosaicVersionInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Version filters."
    versionData: VersionInput!
}

input GetMssqlDbMissedRecoverableRangesInput {
    "Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input GetMssqlDbRecoverableRangesInput {
    "Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678Z\"."
    afterTime: DateTime
    "Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input GetNetworkInterfaceInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Will retrieve info for a specific interface if passed in."
    interface: String
}

input GetNetworksInput {
    "Required. The ID of the vCenter server for which to retrieve user-configured networks."
    id: String!
}

"Input for getting a list of nodes in a Rubrik cluster."
input GetNodesInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

input GetNumProxiesNeededInput {
    "Required. The ID of the vCenter server for which to get the number of proxies needed."
    id: String!
}

"Input for retrieving the status of an async request from a specified Nutanix cluster."
input GetNutanixClusterAsyncRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the request."
    id: String!
}

"Input for retrieving Nutanix networks."
input GetNutanixNetworksInput {
    "Required. ID of the Nutanix cluster."
    id: String!
}

"Input for retrieving Nutanix virtual machine snapshot detail."
input GetNutanixSnapshotDetailInput {
    "Required. ID of snapshot."
    id: String!
}

"Input for retrieving the status of an async request from a specified Nutanix virtual machine."
input GetNutanixVmAsyncRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the request."
    id: String!
}

input GetOracleDbMissedRecoverableRangesInput {
    "Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Oracle database."
    id: String!
}

input GetOracleDbRecoverableRangesInput {
    "Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678Z\"."
    afterTime: DateTime
    "Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Oracle database."
    id: String!
    "Include database snapshot summaries in the response."
    shouldIncludeDbSnapshotSummaries: Boolean
}

"Supported in v8.0+"
input GetOraclePdbDetailsRequestInput {
    """

    Required. Supported in v8.0+
    Snapshot ID or timestamp for which the PDB details are to be retrieved.
    """
    recoveryPoint: OracleRecoveryPointInput!
}

input GetPendingSlaAssignmentsInput {
    "Required. Object with a list of object IDs to use when retrieving pending SLA Domain assignments."
    pendingAssignmentsRequest: PendingSlaOperationsRequestInput!
}

input GetSmbConfigurationInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

input GetSnmpConfigurationInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

input GetSyslogExportRulesInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

"Input for getting the status of SSH Tunnel for Support Access."
input GetTunnelStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the node to check the tunnel status for."
    id: String!
}

input GetVlanInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Will retrieve info for a specific VLAN if passed in."
    vlan: Int
}

input GetVmwareHostInput {
    "Required. ID of the VMWare host."
    id: String!
}

"Input to list global certificates."
input GlobalCertificatesQueryInput {
    "The UUIDs of the Rubrik clusters on which to filter."
    clusterIds: [UUID!]
    "Specifies whether to return only the certificates with private keys."
    hasKey: Boolean
    "Specifies whether the certificate is in the trust store of the Rubrik cluster."
    isTrustedAny: Boolean
    "The query to filter the certificates."
    searchText: String
    "The status of the certificates."
    statuses: [GlobalCertificateStatus!]
}

"Input for searching files across a Rubrik cluster."
input GlobalFileSearchInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Global search query."
    query: GlobalFileSearchQueryInput!
}

"Supported in v5.1+"
input GlobalFileSearchQueryInput {
    """

    Required. Supported in v5.1+
    Regex to match.
    """
    regex: String!
    """

    Required. Supported in v5.1+
    Managed IDs of snappables to search across.
    """
    snappableIds: [String!]!
}

input GlobalSlaEditRequest {
    archivalSpecInput: ArchivalSpecInput
    archivalSpecInputs: [ArchivalSpecInput!] = []
    archivalSpecs: [ArchivalSpecInput!] = []
    backupWindows: [BackupWindowInput!] = []
    description: String = ""
    firstFullBackupWindows: [BackupWindowInput!] = []
    id: String = ""
    "Specifies if the SLA Domain to be edited must be Retention Locked or not."
    isRetentionLockedSla: Boolean = false
    localRetentionLimit: SlaDurationInput
    logConfig: LogConfig
    name: String = ""
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    objectTypeList: [SlaObjectType!] = []
    objectTypes: [SlaObjectType!] = []
    replicationSpecInput: ReplicationSpecInput
    replicationSpecV2List: [ReplicationSpecV2Input!] = []
    replicationSpecsV2: [ReplicationSpecV2Input!] = []
    shouldApplyToExistingSnapshots: ShouldApplyToExistingSnapshots
    shouldApplyToNonPolicySnapshots: ShouldApplyToNonPolicySnapshots
    snapshotSchedule: GlobalSnapshotScheduleInput
    stateVersion: Long = 0
    "Optional user note."
    userNote: String = ""
}

"Filters for SLA Domains."
input GlobalSlaFilterInput {
    "Field for the SLA Domain filter."
    field: GlobalSlaQueryFilterInputField = NAME
    "List of workload types for the SLA Domain filter."
    objectTypeList: [SlaObjectType!] = []
    "Text for the SLA Domain filter."
    text: String = ""
    "List of text strings for the SLA Domain filter."
    textList: [String!] = []
}

"Snapshot schedule for different frequencies."
input GlobalSnapshotScheduleInput {
    "Daily schedule of the SLA Domain."
    daily: DailySnapshotScheduleInput
    "Hourly schedule of the SLA Domain."
    hourly: HourlySnapshotScheduleInput
    "Minute schedule of the SLA Domain."
    minute: MinuteSnapshotScheduleInput
    "Monthly schedule of the SLA Domain."
    monthly: MonthlySnapshotScheduleInput
    "Quarterly schedule of the SLA Domain."
    quarterly: QuarterlySnapshotScheduleInput
    "Weekly schedule of the SLA Domain."
    weekly: WeeklySnapshotScheduleInput
    "Yearly schedule of the SLA Domain."
    yearly: YearlySnapshotScheduleInput
}

"Group configuration."
input GroupConfig {
    name: String = ""
}

"Input for filtering user groups."
input GroupFilterInput {
    "Filter user groups by organization IDs."
    orgIdsFilter: [String!] = []
    """

    Filter user groups that have the specified roles assigned in the current
    organization.
    """
    roleIdsFilter: [String!] = []
}

"Input for sort parameters."
input GroupSortByParam {
    "Field to sort by."
    field: GroupSortByField = NAME
    "Sort order."
    sortOrder: SortOrder = ASC
}

"Supported in v5.0+"
input GuestCredentialDefinitionInput {
    baseGuestCredential: BaseGuestCredentialInput
    "Supported in v5.0+"
    domain: String
}

"Supported in v5.2+"
input HdfsBaseConfigInput {
    """

    Supported in v5.2+
    API token to access Hdfs.
    """
    apiToken: String
    """

    Required. Supported in v5.2+
    List of Hdfs Namenode Hosts.
    """
    hosts: [HdfsHostInput!]!
    """

    Supported in v5.2+
    Ticket Cache Path of Kerberos Ticket.
    """
    kerberosTicket: String
    """

    Supported in v5.2+
    Logical name for nameservice for Hdfs HA.
    """
    nameservices: String
    """

    Supported in v5.2+
    Username to access Hdfs API.
    """
    username: String
}

"Supported in v5.2+"
input HdfsConfigInput {
    "HDFS base config."
    hdfsBaseConfig: HdfsBaseConfigInput
}

"Supported in v5.2+"
input HdfsHostInput {
    """

    Required. Supported in v5.2+
    Hostname or Ip of Namenode.
    """
    hostname: String!
    """

    Required. Supported in v5.2+
    Port number of Namenode.
    """
    port: Int!
}

"Filter help contents results."
input HelpContentSnippetsFilterInput {
    "List of categories to filter by."
    categories: [String!] = []
    "Indicator for entity issuing a search request."
    initiator: HelpContentSnippetsFilterInitiator = INITIATOR_UNSPECIFIED
    "Language code in ISO 639-1."
    language: String = ""
    "List of product documentation types to filter by."
    productDocumentationTypes: [ProductDocumentationType!]!
    "Text to search for."
    query: String = ""
    "Datasource."
    source: HelpContentSource = SOURCE_UNSPECIFIED
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input for operation to hide or reveal one or more NAS namespaces.
"""
input HideNasNamespacesRequestInput {
    """

    Required. Supported in v7.0+
    Specifies whether the selected NAS namespaces should be hidden or revealed.
    """
    action: HideRevealAction!
    """

    Required. Supported in v7.0+
    IDs of NAS namespaces.
    """
    ids: [String!]!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input for operation to hide or reveal one or more NAS shares.
"""
input HideNasSharesRequestInput {
    """

    Required. Supported in v7.0+
    Specifies whether the selected NAS shares should be hidden or revealed.
    """
    action: HideRevealAction!
    """

    Required. Supported in v7.0+
    IDs of NAS shares.
    """
    ids: [String!]!
}

"Input for operation to hide or reveal NAS namespaces."
input HideRevealNasNamespacesInput {
    "Required. IDs of the selected NAS namespaces and the action to perform on them."
    hideNasNamespacesRequest: HideNasNamespacesRequestInput!
}

"Input for operation to hide or reveal NAS shares."
input HideRevealNasSharesInput {
    "Required. IDs of the selected NAS shares and the action to perform on them."
    hideNasSharesRequest: HideNasSharesRequestInput!
}

"Contains configuration of the legal hold to be placed."
input HoldConfig {
    "Boolean which denotes whether a snapshot is to be held in place."
    shouldHoldInPlace: Boolean = false
}

"Supported in v5.0+"
input HostRegisterInput {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    "Supported in v5.0+"
    hasAgent: Boolean
    "Supported in v5.2+"
    hdfsConfig: HdfsConfigInput
    "Required. Supported in v5.0+"
    hostname: String!
    """

    Supported in v5.2+
    A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration.
    """
    isOracleHost: Boolean
    "Supported in v5.0+"
    nasConfig: NasConfigInput
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v5.1+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    """
    oracleSysDbaUser: String
    """

    Supported in v5.0+
    The ID of the organization to which the host is assigned.
    """
    organizationId: String
}

"Supported in v5.0+"
input HostUpdateIdInput {
    """

    Required. Supported in v5.0+
    ID of the host.
    """
    hostId: String!
    "Required. Supported in v5.0+"
    updateProperties: HostUpdateInput!
}

"Supported in v5.0+"
input HostUpdateInput {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    "Supported in v5.0+"
    compressionEnabled: Boolean
    "Supported in v5.2+"
    hdfsConfig: HdfsConfigInput
    "When VFD is not enabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to not enabled."
    hostVfdDriverInstalled: Boolean
    "Supported in v5.0+"
    hostVfdEnabled: HostVfdInstallConfig
    "Supported in v5.0+"
    hostname: String
    """

    Supported in v5.2+
    v5.2-v5.3: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
    v6.0: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.

    v7.0+: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
    """
    isOracleHost: Boolean
    """

    Supported in v7.0+
    A Boolean that specifies whether to update the Rubrik Backup Agent and agent ID during host edit.
    """
    isUpdateCertAndAgentIdEnabled: Boolean
    "When CBT is not enabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to not enabled."
    mssqlCbtDriverInstalled: Boolean
    "Supported in v5.0+"
    mssqlCbtEnabled: MssqlCbtStatusType
    "Supported in v5.0+"
    nasConfig: NasConfigInput
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v5.1-v5.3: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v6.0+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    """
    oracleSysDbaUser: String
}

"Supported in v5.0+"
input HostVfdInstallRequestInput {
    """

    Required. Supported in v5.0+
    Ids of host on which to install/uninstall VFD.
    """
    hostIds: [String!]!
    "Required. Supported in v5.0+"
    install: Boolean!
}

"Supported in v5.3+"
input HotAddBandwidthInfoInput {
    """

    Required. Supported in v5.3+
    The HotAdd bandwidth limit in Mbps for export.
    """
    exportLimit: Int!
    """

    Required. Supported in v5.3+
    The HotAdd bandwidth limit in Mbps for ingest.
    """
    ingestLimit: Int!
}

"Supported in v5.3+"
input HotAddNetworkConfigWithIdInput {
    """

    Required. Supported in v5.3+
    The ID of a user-configured vCenter network selected for HotAdd backup and recovery.
    """
    networkId: String!
    """

    Supported in v5.3+
    The static IP information of a user-configured vCenter network selected for HotAdd backup and recovery.
    """
    staticIpInfo: StaticIpInfoInput
}

"Hourly snapshot schedule."
input HourlySnapshotScheduleInput {
    "Basic hourly snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
}

"Supported in v7.0+"
input HypervBatchExportSnapshotJobConfigInput {
    """

    Required. Supported in v7.0+
    Array of objects containing information about snapshots for export.
    """
    snapshots: [HypervExportSnapshotJobConfigForBatchInput!]!
}

"Supported in v7.0+"
input HypervBatchInstantRecoverSnapshotJobConfigInput {
    """

    Required. Supported in v7.0+
    Array of objects that contain information about snapshots to be instantly recovered.
    """
    snapshots: [HypervInstantRecoverConfigForBatchInput!]!
}

"Supported in v7.0+"
input HypervBatchMountSnapshotJobConfigInput {
    """

    Required. Supported in v7.0+
    Array of objects containing information about snapshots to be mounted.
    """
    snapshots: [HypervMountSnapshotConfigForBatchInput!]!
}

"Required. Input for deleting all snapshots of a Hyper-V virtual machine."
input HypervDeleteAllSnapshotsInput {
    "Required. Virtual machine ID."
    id: String!
}

"Supported in v5.0+"
input HypervDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    v5.0-v7.0: An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
    v8.0+: Array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
    """
    paths: [String!]!
}

"Supported in v7.0+"
input HypervExportSnapshotJobConfigForBatchInput {
    """

    Required. Supported in v7.0+
    Configuration for exporting the snapshot.
    """
    exportConfig: HypervExportSnapshotJobConfigInput!
    """

    Supported in v7.0+
    Exports the oldest snapshot taken after the specified date. snapshotAfterDate is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v7.0+
    Exports the snapshot most recently taken prior to the specified date. snapshotBeforeDate is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v7.0+
    ID of the snapshot to export. This parameter is optional if the snapshotBeforeDate or snapshotAfterDate parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v7.0+
    ID of the virtual machine with snapshot that requires exporting.
    """
    vmId: String!
    """

    Supported in v7.0+
    Prefix to be added to the name of the exported virtual machine.
    """
    vmNamePrefix: String
}

"Supported in v5.0+"
input HypervExportSnapshotJobConfigInput {
    """

    Supported in v5.0+
    v5.0-v6.0: Sets the state of the network interfaces when the virtual machine is mounted. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts. Default value is 'true'.
    v7.0+: Sets the state of the network interfaces when the virtual machine is exported. 'false' enables the network interfaces. 'true' disables the network interfaces. The default value is 'true'. Disabling the interfaces can prevent IP address conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.0+
    v5.0-v5.3: ID of the host to export to
    v6.0: ID of the host to export to.
    v7.0+: ID of the host for export.
    """
    hostId: String
    "Destination path for the new virtual machine virtual disks."
    path: String!
    "Specifies whether the virtual machine should be powered on after export. The default value is true."
    powerOn: Boolean
    """

    Supported in v5.0+
    v5.0-v6.0: Determines whether to remove the network interfaces from the mounted virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    v7.0+: Specifies whether to remove the network interfaces from the exported virtual machine. When the value is 'true' all the network interfaces are removed. The default value is 'true'.
    """
    removeNetworkDevices: Boolean
    "Name of the new virtual machine being exported."
    vmName: String
}

"Supported in v7.0+"
input HypervInstantRecoverConfigForBatchInput {
    """

    Required. Supported in v7.0+
    Configuration for recovering the snapshot.
    """
    instantRecoveryConfig: HypervInstantRecoveryJobConfigInput!
    """

    Supported in v7.0+
    Recovers the first snapshot taken after the specified date. The value of 'snapshotAfterDate' is considered only when 'snapshotId' and 'snapshotBeforeDate' are not configured.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v7.0+
    Recovers the snapshot most recently taken before the specified date. The value of 'snapshotBeforeDate' is considered only when a snapshot ID is not set using 'snapshotId'.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v7.0+
    ID of the snapshot to recover. This parameter is optional if the snapshotBeforeDate or snapshotAfterDate parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v7.0+
    ID of the virtual machine that contains a snapshot requiring instant recovery.
    """
    vmId: String!
}

"Supported in v5.0+"
input HypervInstantRecoveryJobConfigInput {
    """

    Supported in v5.0+
    v5.0-v5.3: ID of the host to instantly recover to
    v6.0: ID of the host to instantly recover to.
    v7.0+: ID of the instant recovery target host.
    """
    hostId: String
    "Name of the new virtual machine to instantly recover."
    vmName: String
}

"Filter Hyper-V live mount results."
input HypervLiveMountFilterInput {
    "Type of filter."
    field: HypervLiveMountFilterField = UNSPECIFIED
    "Values for the filter type."
    texts: [String!] = []
}

"Sort Hyper-V Live Mount results."
input HypervLiveMountSortByInput {
    "Field for sorting the Hyper-V Live Mount results."
    field: HypervLiveMountSortByField = UNSPECIFIED
    "Sorting order for Hyper-V Live Mount results."
    sortOrder: SortOrder = ASC
}

"Supported in v7.0+"
input HypervMountSnapshotConfigForBatchInput {
    """

    Required. Supported in v7.0+
    Configuration for mounting the snapshot.
    """
    mountConfig: HypervMountSnapshotJobConfigInput!
    """

    Supported in v7.0+
    Mounts the first snapshot taken after the specified date. The value of 'snapshotAfterDate' is considered only when 'snapshotId' and 'snapshotBeforeDate' are not configured.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v7.0+
    Mounts the snapshot most recently taken before the specified date. The value of 'snapshotBeforeDate' is considered only when a snapshot ID is not set using 'snapshotId'.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v7.0+
    ID of the snapshot to mount. This parameter is optional if the snapshotBeforeDate or snapshotAfterDate parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v7.0+
    ID of the virtual machine with snapshot that requires mounting.
    """
    vmId: String!
    """

    Supported in v7.0+
    Prefix to be added to the name of the mounted virtual machine.
    """
    vmNamePrefix: String
}

"Supported in v5.0+"
input HypervMountSnapshotJobConfigInput {
    """

    Supported in v5.0+
    v5.0-v6.0: Sets the state of the network interfaces when the virtual machine is mounted. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts. Default value is 'true'.
    v7.0+: Sets the state of the network interfaces when the virtual machine is mounted. 'false' enables the network interfaces. 'true' disables the network interfaces. The default value is 'true'. Disabling the interfaces can prevent IP address conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.0+
    v5.0-v5.3: ID of host for the mount to use
    v6.0: ID of host for the mount to use.
    v7.0+: ID of host to be used for mounting the snapshot.
    """
    hostId: String
    "Determines whether the virtual machine should be powered on after mount. The default value is true."
    powerOn: Boolean
    """

    Supported in v5.0+
    v5.0-v6.0: Determines whether to remove the network interfaces from the mounted virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    v7.0+: Determines whether to remove the network interfaces from the mounted virtual machine. 'true' removes all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    """

    Supported in v5.0+
    v5.0-v5.3: Name of the mounted VM
    v6.0: Name of the mounted VM.
    v7.0+: Name of the mounted virtual machine.
    """
    vmName: String
}

"Required. Input for taking a on-demand snapshot of a Hyper-V virtual machine."
input HypervOnDemandSnapshotInput {
    "Configuration for the on-demand backup."
    config: BaseOnDemandSnapshotConfigInput
    "Required. ID of the VM."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

"Supported in v5.0+"
input HypervRestoreFileConfigInput {
    """

    Required. Supported in v5.0+
    Absolute file path.
    """
    path: String!
    """

    Required. Supported in v5.0+
    Directory of folder to copy files into.
    """
    restorePath: String!
}

"Supported in v5.0+"
input HypervRestoreFilesConfigInput {
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Absolute path of the target location for the copied files
    v6.0-v7.0: Absolute path of the target location for the copied files.
    v8.0+: Absolute path for the copied files to the target location.
    """
    restoreConfig: [HypervRestoreFileConfigInput!]!
}

"Input parameters for deleting Hyper-V SCVMM."
input HypervScvmmDeleteInput {
    "ID of the Hyper-V SCVMM."
    id: String!
}

"Supported in v5.0+"
input HypervScvmmRegisterInput {
    """

    Required. Supported in v5.0+
    Name of the SCVMM host.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    The RunAs account which will be used to install connector on hosts.
    """
    runAsAccount: String!
    """

    Required. Supported in v5.0+
    Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
    """
    shouldDeployAgent: Boolean!
}

"Required. Input for Hyper-V SCVMM update."
input HypervScvmmUpdateInput {
    "Required. ID of Hyper-V SCVMM."
    id: String!
    "Required. Properties to update."
    updateProperties: UpdateHypervScvmmUpdatePropertiesInput!
}

"Supported in v5.0+"
input HypervUpdateMountConfigInput {
    """

    Required. Supported in v5.0+
    True to power on, false to power off.
    """
    powerStatus: Boolean!
}

"Input configuration for downloading a Hyper-V virtual machine snapshot."
input HypervVirtualMachineSnapshotDownloadConfigInput {
    "ID of the SLA Domain to manage retention of the downloaded snapshot."
    slaId: String
}

"Supported in v5.0+"
input HypervVirtualMachineUpdateInput {
    """

    Supported in v5.0+
    Cloud instantiation specification for the selected virtual machine.
    """
    cloudInstantiationSpec: CloudInstantiationSpecInput
    "Assign this virtual machine to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain."
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    A comma-separated list of Hyper-V virtual disk IDs that are excluded from backup.
    """
    virtualDiskIdsExcludedFromSnapshot: [String!] = []
}

"The name and type of the IdP claim."
input IdpClaimAttribute {
    "The name of the claim. It depends on your IdP."
    name: String!
    "The type of claim, for example, email or group."
    type: String!
}

"Supported in v6.0+"
input InPlaceRecoveryJobConfigForBatchInput {
    """

    Required. Supported in v6.0+
    Configuration for in-place recovery.
    """
    config: InPlaceRecoveryJobConfigV2Input!
    """

    Supported in v6.0+
    Runs in-place recovery with the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Runs in-plance recovery with the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    The ID of the snapshot to use for in-place recovery. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine to be recovered.
    """
    vmId: String!
}

"Supported in v5.3+"
input InPlaceRecoveryJobConfigV2Input {
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v5.3+
    Indicates whether to keeep the vSphere snapshot on the vCenter Server after the in-place recovery or not. Use `true` to keep the snapshot after in-place recovery. Use `false` to delete the snapshot after in-place recovery. The default is `false`.
    """
    shouldKeepVsphereSnapshotAfterRecovery: Boolean
}

"The data which represents indicator of compromise: a file path/pattern, hash, or YARA rule."
input IndicatorOfCompromiseInput {
    "IOC kind."
    iocKind: IndicatorOfCompromiseKind!
    "IOC value as a string."
    iocValue: String!
}

"Details of the customer-owned O365 app to insert."
input InsertCustomerO365AppInput {
    "ID of the app."
    appClientId: String!
    "Secret for the app."
    appClientSecret: String!
    "Type of app to insert."
    appType: String!
    "Certificate for a SharePoint-typed app."
    base64AppCertificate: String
    "Private key for a SharePoint-typed app."
    base64AppPrivateKey: String
    "ID of the subscription that the app would access."
    subscriptionId: String!
}

input InstallIoFilterInput {
    "Required. "
    fqdnInfo: FullyQualifiedDomainNameInfoInput!
    "Required. ID of the VMware compute cluster."
    id: String!
}

"Required. Input for recovering a Hyper-V virtual machine."
input InstantRecoverHypervVirtualMachineSnapshotInput {
    "Required. Configuration for the instant recover request."
    config: HypervInstantRecoveryJobConfigInput!
    "Required. ID of Snapshot."
    id: String!
}

input InstantRecoverOracleSnapshotInput {
    "Required. Configuration parameters for a job to instantly recover from an Oracle database snapshot."
    config: RecoverOracleDbConfigInput!
    "Required. ID of the Oracle database."
    id: String!
}

input InstantRecoveryJobConfig {
    baseConfig: AppBlueprintRestoreSnapshotJobConfigBase
    childrenToRestore: [AppBlueprintChildSnappableInstantRecoverySpec!] = []
    shouldRemoveChildrenFromAppBlueprint: Boolean = false
    shouldRemoveChildrenFromOtherAppBlueprints: Boolean = false
}

"Supported in v6.0+"
input InstantRecoveryJobConfigForBatchInput {
    """

    Required. Supported in v6.0+
    Configuration for snapshot export.
    """
    config: InstantRecoveryJobConfigV2Input!
    """

    Supported in v6.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    The ID of the snapshot to mount. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine whose snapshot needs to be mounted.
    """
    vmId: String!
}

"Supported in v5.1+"
input InstantRecoveryJobConfigV2Input {
    """

    Supported in v6.0+
    ID of the compute cluster where the new virtual machine will be mounted.
    """
    clusterId: String
    """

    Supported in v5.1+
    ID of the ESXi host to use for Instant Recovery.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    """

    Supported in v5.1+
    A Boolean value that determines whether the MOID of the source virtual machine is preserved in a restore operation. When this value is 'true', the MOID of the source is preserved. When this value is 'false', the restored virtual machine is assigned a new MOID.
    """
    preserveMoid: Boolean
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v6.0+
    ID of the resource pool where the new virtual machine will be mounted.
    """
    resourcePoolId: String
    """

    Supported in v5.1+
    A Boolean value that determines whether the job recovers the tags assigned to the virtual machine. When this value is 'true', the job recovers the tags. When this value is 'false', the job does not recover the tags.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v6.0+
    The network binding for vNIC of the virtual machine.
    """
    vNicBindings: [VmwareVnicBindingInfoV2Input!] = []
    """

    Supported in v5.1+
    The preferred VLAN ID used by the VLAN ESXi host to mount the datastore.
    """
    vlan: Int
}

input InterfaceCidrInput {
    cidr: String = ""
    interfaceType: InterfaceType = UNKNOWN_TYPE
    selected: Boolean = false
}

"Specifies the input required for inviting new SSO groups to the current organization."
input InviteSsoGroupInput {
    "SSO group name."
    groupName: String!
    "List of role IDs."
    roleIds: [String!]!
}

"Details of IP configuration."
input IpConfigInput {
    "IP address."
    address: String!
    "Gateway IP address."
    gateway: String!
    "Subnet mask."
    netmask: String!
    "VLAN ID."
    vlan: Int
}

"IP allow list of Rubrik cluster mappings."
input IpMappingInput {
    "Rubrik cluster UUID."
    clusterUuid: UUID!
    "IP addresses on the Rubrik cluster allow list."
    ips: [String!]!
}

"Supported in v5.0+"
input IpmiAccessUpdateInput {
    "Supported in v5.0+"
    https: Boolean
    "Supported in v5.0+"
    iKvm: Boolean
}

"Supported in v5.0+"
input IpmiUpdateInput {
    "Supported in v5.0+"
    access: IpmiAccessUpdateInput
    """

    Supported in v5.0+
    IPMI password, password should be 5-20 characters.
    """
    password: String
}

input JoinSmbDomainInput {
    "Required. Configuration for joining Active Directory."
    config: SmbDomainJoinRequestInput!
    "Required. SMB domain name."
    domainName: String!
}

"Configuration of the Kubernetes namespaces to be backed-up."
input K8sNamespaceSnapshot {
    "The ID of the Kubernetes namespace managed object to snapshot."
    namespaceId: UUID!
    "The SLA ID of the on demand snapshot request."
    onDemandSnapshotSlaId: String
}

"GCP KMS crypto key."
input KmsCryptoKey {
    "KMS crypto key."
    key: String = ""
    "KMS crypto key ring."
    keyRing: String = ""
    "KMS crypto key location."
    location: String = ""
    "GCP project native ID."
    projectNativeId: String = ""
}

"Azure KMS configuration, excluding the app secret."
input KmsSpecInput {
    "The ID of the client app."
    appId: String = ""
    "The secret of the client app. Deprecated and will be removed soon."
    appSecret: String = ""
    "The cloud type. The allowed values are PUBLIC and USGOV."
    cloudType: O365AzureCloudType = PUBLIC
    "The key encryption key (KeK) name for Colossus."
    kekNameColossus: String = ""
    "The key encryption key (KeK) name."
    keyName: String = ""
    "The complete ID of the Azure Key Vault."
    kmsId: String = ""
    "The tenant hosting the Azure Key Vault."
    tenantId: String = ""
}

"Label filter parameters for GCP objects."
input LabelFilterParams {
    "Type of the label filter."
    filterType: GcpNativeLabelFilterType!
    "Key of the label filter."
    labelKey: String!
    "Value of the label filter."
    labelValue: String!
}

"Label query over a set of K8's resources."
input LabelSelector {
    "List of label selector requirements. The requirements are ANDed."
    matchExpressions: [LabelSelectorRequirement!] = []
}

"Selector that contains values, a key, and an operator that relates the key and values."
input LabelSelectorRequirement {
    "Label key that the selector applies to."
    key: String = ""
    "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
    operator: String = ""
    "Array of string values."
    values: [String!] = []
}

"DataType represents label key-value pair."
input LabelType {
    "Key of the label."
    labelKey: String!
    "Value of the label."
    labelValue: String!
    "Specifies whether to match all label values or not."
    matchAllValues: Boolean!
}

"LDAP Server."
input LdapServerInput {
    "Hostname for the LDAP server."
    hostname: String = ""
    "Port used by the LDAP server."
    port: Int = 0
    "Whether the LDAP server uses TLS."
    useTls: Boolean = false
}

"Supported in v5.2+"
input LegalHoldDownloadConfigInput {
    """

    Required. Supported in v5.2+
    v5.2: Specifies whether the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that is used for integrity verification by external bodies.
    v5.3+: Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.
    """
    isLegalHoldDownload: Boolean!
}

"Legal Hold query filter."
input LegalHoldQueryFilter {
    "Filter after the specific time."
    afterTime: DateTime
    "Filter before the specific time."
    beforeTime: DateTime
    "Legal hold query filter field."
    filterField: LegalHoldQueryFilterField = UNKNOWN
    "Workload name."
    snappableName: String = ""
    "Workload types."
    snappableTypes: [ManagedObjectType!] = []
    "Snapshot types."
    snapshotTypes: [SnapshotTypeEnum!] = []
}

"Input to query snappables with legal hold snapshots."
input LegalHoldSnapshotsForSnappableInput {
    "Rubrik cluster UUID of the workload."
    clusterUuid: String!
    "Filter Parameters list."
    filterParams: [LegalHoldQueryFilter!]!
    "Workload ID."
    snappableId: String!
    "Sorting Parameters."
    sortParam: LegalHoldSortParam
}

"Legal hold sorting parameters."
input LegalHoldSortParam {
    "Sorts by order."
    sortOrder: SortOrder = ASC
    "Sort type."
    type: LegalHoldSortType = UNKNOWN
}

"Input required to get licenses for a cluster product."
input LicensesForClusterProductSummaryInput {
    "The cluster product for which the licenses are requested."
    product: Product = PRODUCT_UNKNOWN
}

input ListAccessGroupsFilterInput {
    groupName: String = ""
    userId: String = ""
}

input ListAccessUsersFilterInput {
    groupsIds: [String!] = []
    search: String = ""
    timeRange: UserTimeRangeInput!
}

input ListAccessUsersSortInput {
    sortBy: ListAccessUsersSort = USERNAME
    sortOrder: SortOrder = ASC
}

"Input to get the list of CIDRs for compute settings."
input ListCidrsForComputeSettingInput {
    "Optional List of Cluster IDs."
    clusterIds: [UUID!]
}

input ListFileActivitiesInput {
    "The corresponding snappable's FID."
    snappableFid: String!
    "The datetime to collect user activity from."
    startDateTime: String!
    "The standardized path to fetch user activities for."
    stdPath: String!
    "The user's IANA timezone."
    timezone: String!
}

input ListFileResultFiltersInput {
    analyzerGroupIds: [String!] = []
    fileType: FileCountType!
    searchText: String = ""
    snappablePaths: [SnappablePathInput!] = []
    snappableTypes: [String!] = []
    whitelistEnabled: Boolean = false
}

input ListMalwareScansInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

input ListObjectFilesFiltersInput {
    accessTypes: [AccessType!] = []
    activityTypes: [ActivityAccessType!] = []
    analyzerGroupIds: [String!] = []
    clusterIds: [String!] = []
    fileCountTypes: [FileCountType!] = []
    inodeTypes: [InodeType!] = []
    objectIds: [String!] = []
    objectTypes: [HierarchyObjectTypeEnum!]!
    openAccessTypes: [OpenAccessType!] = []
    pathPrefix: String = ""
    searchText: String = ""
    snappableTypes: [String!] = []
    stalenessTypes: [StalenessType!] = []
    whitelistEnabled: Boolean = false
}

"Location information."
input LocationInfo {
    "Id of the location."
    locationId: String = ""
    "Location type: CDM, AZURE, AWS, GCP."
    locationType: LocationType = UNKNOWN_TYPE
}

"Specifices the information about the users being locked."
input LockUsersByAdminInput {
    "Required. Specifies the list of user IDs."
    userIds: [String!]!
}

"Input to configure the log settings for databases in an SLA Domain."
input LogConfig {
    "SLA Domain log frequency configuration."
    slaLogFrequencyConfig: SlaLogFrequencyConfig
}

"Input for logging in."
input LoginCredentials {
    "Login."
    login: String!
    "Password for the login."
    password: String!
}

"Supported in v5.0+"
input LsnRecoveryPointInput {
    """

    Required. Supported in v5.0+
    LSN of the recovery point.
    """
    lsn: String!
    """

    Supported in v5.0+
    Recovery fork GUID of the recovery point. If not provided, the recovery fork GUID of the latest snapshot is used.
    """
    recoveryForkGuid: String
}

"Type representing the mailbox contents to be restored."
input MailboxRestoreConfig {
    RestoreConfigs: [RestoreObjectConfig!]!
    SnapshotUUID: UUID
}

"Supported in v6.0+"
input MalwareScanConfigInput {
    """

    Supported in v6.0+
    Criteria to restrict files to scan.
    """
    fileScanCriteria: MalwareScanFileCriteriaInput
    """

    Required. Supported in v6.0+
    List of IOCs to scan for.
    """
    indicatorsOfCompromise: [CdmIndicatorOfCompromiseInput!]!
    """

    Supported in v6.0+
    Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one.
    """
    maxMatchesPerSnapshot: Int
    """

    Supported in v6.0+
    Name of this scan.
    """
    name: String
    """

    Supported in v6.0+
    Notes to describe this scan.
    """
    notes: String
    """

    Required. Supported in v6.0+
    Snappable IDs to scan for malware.
    """
    objectIds: [String!]!
    """

    Supported in v6.0+
    Additional information required for files with malware matches.
    """
    requestedMatchDetails: RequestedMatchDetailsInput
    """

    Supported in v6.0+
    Specifies whether features that rely on the accuracy of filesystem metadata, like creation time and modification time of files, are enabled or not. These features include backend optimizations to skip re-scanning files that have not changed across snapshots, as indicated by the unchanged timestamps of files. This flag also gates access to some filters that can be specified in this API. Note that this flag should be used with caution, as relying on file timestamps may make the system vulnerable to adversarial techniques such as timestamp manipulation.
    """
    shouldTrustFilesystemTimeInfo: Boolean
    """

    Supported in v6.0+
    Limit which snapshots to include in the malware scan.
    """
    snapshotScanLimit: MalwareScanSnapshotLimitInput
}

"Supported in v6.0+"
input MalwareScanFileCriteriaInput {
    """

    Supported in v6.0+
    Specify the smallest and largest files to scan.
    """
    fileSizeLimits: MalwareScanFileSizeLimitsInput
    """

    Supported in v6.0+
    Specify limits around file creation and modification time. The top-level API field `shouldTrustFilesystemTimeInfo` must be set to true when this field is specified.
    """
    fileTimeLimits: MalwareScanFileTimeLimitsInput
    """

    Supported in v6.0+
    Please see /fileset_template for a detailed description of how includes, excludes, and exceptions are interpreted.
    """
    pathFilter: MalwareScanPathFilterInput
}

"Supported in v6.0+"
input MalwareScanFileSizeLimitsInput {
    """

    Supported in v6.0+
    Maximum size of files to scan. Files that are bigger than this size are ignored.
    """
    maximumSizeInBytes: Long
    """

    Supported in v6.0+
    Minimum size of files to scan. Files smaller than this size are ignored.
    """
    minimumSizeInBytes: Long
}

"Supported in v6.0+"
input MalwareScanFileTimeLimitsInput {
    """

    Supported in v6.0+
    Earliest file creation time.  Any files created before this time will be elided.
    """
    earliestCreationTime: DateTime
    """

    Supported in v6.0+
    Earliest file modification time.  Any files last modified before this time will be elided.
    """
    earliestModificationTime: DateTime
    """

    Supported in v6.0+
    Latest file creation time.  Any files created after this time will be elided.
    """
    latestCreationTime: DateTime
    """

    Supported in v6.0+
    Latest file modification time.  Any files modified after this time will be elided.
    """
    latestModificationTime: DateTime
}

"""

Supported in v6.0+
Please see v1/fileset_template API doc for a detailed description of how includes, excludes, & exceptions are interpreted.
"""
input MalwareScanPathFilterInput {
    """

    Supported in v6.0+
    Paths to exempt from exclusion.
    """
    exceptions: [String!] = []
    """

    Supported in v6.0+
    Paths to exclude.
    """
    excludes: [String!] = []
    """

    Supported in v6.0+
    Paths to include.
    """
    includes: [String!] = []
}

"Supported in v6.0+"
input MalwareScanSnapshotLimitInput {
    """

    Supported in v6.0+
    Maximum snapshot time.  Any snapshots taken after this time will be elided.
    """
    endTime: DateTime
    """

    Supported in v6.0+
    Maximum number of snapshots to scan per object.  The snapshots of each object are scanned in reverse chronological order, so this is equivalent to scan-last-n-snapshots.
    """
    maxSnapshotsPerObject: Int
    """

    Supported in v6.0+
    A array of object ID and list of snapshots of that object to scan. If this field is specified, none of the other `MalwareScanSnapshotLimit` fields may be specified.
    """
    snapshotsToScanPerObject: [ObjectIdToSnapshotIdsInput!] = []
    """

    Supported in v6.0+
    Minimum snapshot time.  Any snapshots taken before this time will be elided.
    """
    startTime: DateTime
}

"Specifies which Managed Disks are excluded from snapshots."
input ManagedDiskExclusion {
    "Specifies whether the Managed Disk is excluded from snapshots or not. When true, the Managed Disk will be excluded from the snapshot."
    isExcludedFromSnapshot: Boolean!
    "Rubrik ID of the Managed Disk."
    managedDiskRubrikId: UUID!
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Managed Volume Config.
"""
input ManagedVolumeConfigInput {
    """

    Supported in v5.0+
    v5.0-v6.0: Application whose data will be stored by this managed volume, like - Oracle, SAP Hana, MS SQL, etc.
    v7.0+: Application whose data this Managed Volume will store. For example, Oracle, SAP Hana, MS SQL, etc.
    """
    applicationTag: ManagedVolumeApplicationTag
    """

    Required. Supported in v5.0+
    v5.0-v8.0:
    v9.0: Config for a Managed Volume Export.
    """
    exportConfig: ManagedVolumeExportConfigInput!
    """

    Supported in v5.3+
    v5.3-v8.0:
    v9.0: Type of the Managed Volume (SlaBased / AlwaysMounted).
    """
    mvType: CdmManagedVolumeType
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Name of the managed volume.
    v7.0: Name of the Managed Volume.
    v8.0+: Name of the managed volume.
    """
    name: String!
    """

    Supported in v5.0+
    v5.0-v6.0: Number of channels to divide the volume into. Each channel provides a unique share to write to.
    v7.0+: Number of channels to divide the Managed Volume into. Each channel provides a unique share for writing.
    """
    numChannels: Int
    "Supported in v5.3+"
    slaClientConfig: SlaManagedVolumeClientConfigInput
    """

    Supported in v5.0+
    v5.0-v5.3: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces
    v6.0: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces.
    v7.0: IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
    v8.0+: IP subnet specifing an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
    """
    subnet: String
    """

    Required. Supported in v5.0+
    v5.0-v6.0: Maximum capacity for the volume across all the channels.
    v7.0+: Maximum capacity for the Managed Volume across all channels.
    """
    volumeSize: Long!
}

"Supported in v5.0+"
input ManagedVolumeDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    v5.0-v7.0: An array that contains the full source path of each file and folder in a download job. This array must contain at least one path. All Windows paths in the array must be on the same disk.
    v8.0+: An array containing the full source path of each file and folder in a download job. This array must contain at least one path. All Windows paths in the array must be on the same disk.
    """
    paths: [String!]!
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Config for a Managed Volume Export.
"""
input ManagedVolumeExportConfigInput {
    "Configuration for updating a Managed Volume."
    managedVolumePatchConfig: ManagedVolumePatchConfigInput
    """

    Supported in v5.0+
    v5.0-v6.0: Specifies if the managed volume is exported over NFS or SMB. This defaults to NFS if this optional property is not specified.
    v7.0+: Indicates if the Managed Volume is exported over NFS or SMB. Defaults to NFS if this optional property is not specified.
    """
    shareType: ManagedVolumeShareType
    """

    Supported in v5.0+
    v5.0-v6.0: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces.
    v7.0: IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
    v8.0+: IP subnet specifing an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
    """
    subnet: String
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Request object for creating a Managed Volume export.
"""
input ManagedVolumeExportRequestInput {
    managedVolumeExportConfig: ManagedVolumeExportConfigInput
    """

    Supported in v7.0+
    Specifies if the snapshot should be downloaded to local when not available locally.
    """
    shouldDownloadToLocal: Boolean
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Config for updating a Managed Volume.
"""
input ManagedVolumePatchConfigInput {
    """

    Supported in v5.0+
    v5.0-v5.3: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?
    v6.0: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
    v7.0: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards *, or ?.
    v8.0+: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
    """
    hostPatterns: [String!] = []
    """

    Supported in v5.0+
    v5.0-v6.0: List of node-ids to use for mounting this managed volume channels. Caller should specify at least one node per channel in the managed volume. If the nodeHint is not provided, system will randomly select a subset of nodes in cluster to mount the channels.
    v7.0+: List of node-IDs to use for mounting the channels of this Managed Volume. Caller should specify at least one node per channel in the Managed Volume. If nodeHint is not provided, the system randomly selects a subset of Rubrik cluster nodes to mount the channels.
    """
    nodeHint: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.3: Valid Active Directory domain name for users accessing this managed volume over SMB
    v6.0: Valid Active Directory domain name for users accessing this managed volume over SMB.
    v7.0+: Valid Active Directory domain name for users accessing this Managed Volume over SMB.
    """
    smbDomainName: String
    """

    Supported in v5.0+
    v5.0-v5.3: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
    v6.0: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
    v7.0+: List of valid SMB host IP addresses that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
    """
    smbValidIps: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.3: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
    v6.0: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
    v7.0+: List of valid usersnames in the domain that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
    """
    smbValidUsers: [String!] = []
}

"Supported in v5.3+"
input ManagedVolumePatchSlaClientConfigInput {
    "The full command with arguments to run the main backup script that backs up data from the host."
    backupScriptCommand: String
    """

    Supported in v5.3+
    An optional timeout for the main backup script in seconds. When this value is 0 or unspecified no timeout is used.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.3+
    A list of mount paths where the host mounts individual channels for managed volumes.
    """
    channelHostMountPaths: [String!] = []
    """

    Supported in v5.3+
    The ID of the host that mounts the managed volume channels and where the backup scripts run.
    """
    clientHostId: String
    "The full command with arguments to run the optional post-backup script that runs after unsuccessful data backup."
    postBackupScriptOnBackupFailureCommand: String
    """

    Supported in v5.3+
    An optional timeout for the post-backup script that runs after unsuccessful data backup in seconds. When this value is 0 or unspecified no timeout is used.
    """
    postBackupScriptOnBackupFailureTimeout: Long
    "The full command with arguments to run the optional post-backup script that runs after data backup is complete."
    postBackupScriptOnBackupSuccessCommand: String
    """

    Supported in v5.3+
    An optional timeout for the post-backup script that runs after data backup is complete in seconds. When this value is 0 or unspecified no timeout is used.
    """
    postBackupScriptOnBackupSuccessTimeout: Long
    "The full command with arguments to run the optional pre-backup script that runs after data backup is complete."
    preBackupScriptCommand: String
    """

    Supported in v5.3+
    An optional timeout for the pre-backup script in seconds. When this value is 0 or unspecified no timeout is used.
    """
    preBackupScriptTimeout: Long
    """

    Supported in v5.3+
    Specifies whether a failure of the pre-backup script halts the backup process.
    """
    shouldCancelBackupOnPreBackupScriptFailure: Boolean
    """

    Required. Supported in v5.3+
    Specifies whether to disable the execution of the optional post-backup script that runs after unsuccessful data backup.
    """
    shouldDisablePostBackupScriptOnBackupFailure: Boolean!
    """

    Required. Supported in v5.3+
    Specifies whether to disable the execution of the optional post-backup script that runs after data backup is complete.
    """
    shouldDisablePostBackupScriptOnBackupSuccess: Boolean!
    """

    Required. Supported in v5.3+
    Specifies whether to disable the execution of the optional pre-backup script.
    """
    shouldDisablePreBackupScript: Boolean!
    """

    Supported in v5.3+
    The name of the user that runs the scripts on the host.
    """
    username: String
}

"Represents the filter input for Managed Volume queued snapshots."
input ManagedVolumeQueuedSnapshotFilterInput {
    "Store information."
    timeRange: TimeRangeInput
}

"Supported in v5.3+"
input ManagedVolumeResizeInput {
    """

    Supported in v5.3+
    New size of the managed volume.
    """
    newSize: Long
}

"""

Supported in v5.3+
v5.3-v8.0:
v9.0: Config for an SLA Managed Volume Export.
"""
input ManagedVolumeSlaExportConfigInput {
    """

    Required. Supported in v5.3+
    v5.3-v8.0: Managed ID of the host on which this snapshot export is supposed to be mounted.
    v9.0: Managed ID of the host to mount the snapshot export.
    """
    hostId: String!
    """

    Required. Supported in v5.3+
    v5.3-v8.0: Valid paths on the host where the NFS/SMB mount points from this snapshot export are to be mounted.
    v9.0: Valid paths on the host to mount the NFS or SMB mount points from the snapshot export.
    """
    hostMountPaths: [String!]!
    "Configuration for a Managed Volume Export."
    managedVolumeExportConfig: ManagedVolumeExportConfigInput
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Request object for creating an SLA Managed Volume export.
"""
input ManagedVolumeSlaExportRequestInput {
    managedVolumeSlaExportConfig: ManagedVolumeSlaExportConfigInput
    """

    Supported in v7.0+
    Specifies if the snapshot should be downloaded to local when not available locally.
    """
    shouldDownloadToLocal: Boolean
}

"Supported in v5.0+"
input ManagedVolumeSnapshotConfigInput {
    """

    Supported in v5.0+
    v5.0-v6.0:
    v7.0+: Overridden SLA Domain Id for Managed Volume snapshot.
    """
    retentionConfig: BaseOnDemandSnapshotConfigInput
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Reference for a Managed Volume snapshot.
"""
input ManagedVolumeSnapshotReferenceDefinitionInput {
    "Reference for a Managed Volume snapshot."
    managedVolumeSnapshotReferencePatch: ManagedVolumeSnapshotReferencePatchInput
    """

    Required. Supported in v5.0+
    v5.0-v5.1: An ID representing the owner of a snapshot. This must be the same for all references of a snapshot.
    v5.2-v6.0: An ID representing the owner of a snapshot. All references to a snapshot must use the same ID.
    v7.0+: An ID representing the owner of a snapshot. All references to the snapshot must use the same ID.
    """
    ownerId: String!
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Reference for a Managed Volume snapshot.
"""
input ManagedVolumeSnapshotReferenceInput {
    "Reference for a Managed Volume snapshot."
    managedVolumeSnapshotReferenceDefinition: ManagedVolumeSnapshotReferenceDefinitionInput
    """

    Required. Supported in v5.0+
    v5.0-v6.0: A unique string representing a reference to a snapshot.
    v7.0+: A unique string representing a reference to a Managed Volume snapshot.
    """
    refId: String!
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: Reference for a Managed Volume snapshot.
"""
input ManagedVolumeSnapshotReferencePatchInput {
    """

    Supported in v5.0+
    v5.0-v5.1: Specifies a time interval in minutes. This reference expires from the snapshot after the specified interval. A value of -1 indicates that the snapshot should not expire.
    v5.2-v6.0: Specifies a time interval in minutes. This reference expires from the snapshot after the specified interval. A value of -1 indicates that the snapshot does not expire.
    v7.0+: A time interval, in minutes, after which the reference expires from the snapshot. A value of -1 indicates that the snapshot does not expire.
    """
    expiryDurationInMinutes: Int
}

"""

Supported in v5.0+
v5.0-v8.0:
v9.0: A wrapper around ManagedVolumeSnapshotReference.
"""
input ManagedVolumeSnapshotReferenceWrapperInput {
    """

    Supported in v5.0+
    A wrapper around ManagedVolumeSnapshotReference to be used when an optional argument is needed.
    """
    reference: ManagedVolumeSnapshotReferenceInput
}

"Supported in v5.0+"
input ManagedVolumeUpdateInput {
    """

    Supported in v5.0+
    v5.0-v8.0:
    v9.0: Config for updating a Managed Volume.
    """
    config: ManagedVolumePatchConfigInput
    """

    Supported in v5.0+
    v5.0-v5.1: Assign this managed volume to the given SLA domain.
    v5.2+: Assign this managed volume to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    Change the name of this managed volume.
    """
    name: String
    "Supported in v5.3+"
    slaClientConfig: ManagedVolumePatchSlaClientConfigInput
    """

    Supported in v5.3+
    Change the IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This option is only available for SLA Managed Volumes.
    """
    subnet: String
    """

    Supported in v5.0+
    Increase capacity for the volume across all the channels.
    """
    volumeSize: Long
}

"Input for mapping Azure cloud accounts to an Exocompute subscription."
input MapAzureCloudAccountExocomputeSubscriptionInput {
    "Rubrik IDs of the cloud accounts to be mapped."
    cloudAccountIds: [UUID!]!
    "Rubrik ID of the Exocompute cloud account to map to for launching exocompute."
    exocomputeCloudAccountId: UUID!
}

"Input for mapping Azure cloud accounts to a persistent storage location."
input MapAzureCloudAccountToPersistentStorageLocationInput {
    "Type of native protection feature to be mapped to."
    azureNativeProtectionFeature: AzureNativeProtectionFeature!
    "Rubrik IDs of the cloud accounts to be mapped."
    cloudAccountIds: [UUID!]!
    "Rubrik ID of the storage account to be used for persistent storage location."
    persistentStorageId: UUID!
}

"Input for migrating a Nutanix live Mount."
input MigrateNutanixMountV1Input {
    "Required. ID of the Live Mount."
    id: String!
}

"Minute snapshot schedule."
input MinuteSnapshotScheduleInput {
    "Basic minute snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
}

input MissedSnapshotFilterInput {
    timeRange: TimeRangeInput
}

input ModifyIpmiInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Required. password to set."
    updateProperties: IpmiUpdateInput!
}

"Input to modify NoSQL protection source."
input ModifyMosaicSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Source object with details of the source to be modified."
    sourceData: SourceInput!
}

"Input to modify Mosaic Store."
input ModifyMosaicStoreInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Modify store request object with modified details of a store."
    modifyStoreData: MosaicModifyStoreRequestInput!
}

"MongoDB client host information."
input MongoClientHostInput {
    "Required. Port on which the mongod process is running."
    configurationPort: Int!
    "Required. ID of the host where MongoDB is hosted."
    hostId: String!
}

"Configuration for adding a MongoDB source."
input MongoSourceAddRequestConfigInput {
    "Path to the CA certificate file."
    caCertfilePath: String
    "List of secondaries that should be ignored."
    ignoreSecondaries: [String!] = []
    "Required. List of host details where MongoDB is hosted."
    mongoClientHosts: [MongoClientHostInput!]!
    "Required. Type of MongoDB cluster."
    mongoType: MongoType!
    "Password of the mongod driver user account."
    sourceDriverPassword: String
    "Username of mongod driver user account."
    sourceDriverUser: String
    "Required. Name of the MongoDB cluster."
    sourceName: String!
    "Path to the SSL certificate file."
    sslCertfilePath: String
    "Specifies whether SSL certificates are required for the connection."
    sslCertificateRequired: MongoSslCertificateRequirement
    "Path to the SSL key file."
    sslKeyfilePath: String
}

"Configuration for patching a MongoDB source."
input MongoSourcePatchRequestConfigInput {
    "Path to the CA certificate file."
    caCertfilePath: String
    "List of secondaries that should be ignored."
    ignoreSecondaries: [String!] = []
    "Password of the mongod driver user account."
    sourceDriverPassword: String
    "Username of mongod driver user account."
    sourceDriverUser: String
    "Path to the SSL certificate file."
    sslCertfilePath: String
    "Specifies whether SSL certificates are required for the connection."
    sslCertificateRequired: MongoSslCertificateRequirement
    "Path to the SSL key file."
    sslKeyfilePath: String
}

"Monthly snapshot schedule."
input MonthlySnapshotScheduleInput {
    "Basic monthly snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
    "Day of the month."
    dayOfMonth: DayOfMonth = FIRST_DAY
}

"""

Supported in m3.2.0-m4.2.0
Object for stores added on mosaic.
"""
input MosaicAddStoreRequestInput {
    """

    Supported in m3.2.0-m4.2.0
    Access key id.
    """
    accessKeyId: String
    """

    Supported in m3.2.0-m4.2.0
    Nfs server.
    """
    nfsServer: String
    """

    Supported in m3.2.0-m4.2.0
    Nfs server mount path.
    """
    nfsServerMountPath: String
    """

    Supported in m3.2.0-m4.2.0
    Secret key.
    """
    secretKey: String
    """

    Supported in m3.2.0-m4.2.0
    Whether to skip key file config.
    """
    skipKeyFileConfig: Boolean
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the store.
    """
    storeName: String!
    """

    Required. Supported in m3.2.0-m4.2.0
    Type of the store on mosaic.
    """
    storeType: MosaicAddStoreRequestStoreType!
    """

    Required. Supported in m3.2.0-m4.2.0
    Store path/url.
    """
    storeUrl: String!
}

"Represents the store input for protection."
input MosaicBackupStoreInfoInput {
    "Name of the store."
    storeName: String = ""
}

"""

Supported in m3.2.0-m4.2.0
Request object to bulk get recoverable range on mosaic.
"""
input MosaicBulkRecoverableRangeRequestInput {
    """

    Required. Supported in m3.2.0-m4.2.0
    List of management objects.
    """
    managementObjects: MosaicDatabaseManagementObjectInput!
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String!
    """

    Supported in m4.1.0-m4.2.0
    Source type.
    """
    sourceType: MosaicBulkRecoverableRangeRequestSourceType
}

"Input for querying NoSQL protection recoverable range for objects in bulk."
input MosaicBulkRecoveryRangeInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Retrieve Recoverable Range required for Restore operation."
    recoveryRangeData: MosaicBulkRecoverableRangeRequestInput!
}

"""

Supported in m3.2.0-m4.2.0
Database management object for mosaic.
"""
input MosaicDatabaseManagementObjectInput {
    """

    Supported in m3.2.0-m4.2.0
    List of databases.
    """
    databases: [MosaicDatabaseObjectInput!] = []
}

"""

Supported in m3.2.0-m4.2.0
Database object for mosaic.
"""
input MosaicDatabaseObjectInput {
    """

    Supported in m3.2.0-m4.2.0
    Name of the database.
    """
    dbName: String
    """

    Supported in m3.2.0-m4.2.0
    List of tables.
    """
    tables: [String!] = []
}

"""

Supported in m3.2.0-m4.2.0
Request object to get schema from mosaic.
"""
input MosaicGetSchemaRequestInput {
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the database.
    """
    databaseName: String!
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String!
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the table.
    """
    tableName: String!
    """

    Required. Supported in m3.2.0-m4.2.0
    Timestamp of the version.
    """
    versionTimestamp: String!
}

"""

Supported in m3.2.0-m4.2.0
Object for stores added on mosaic.
"""
input MosaicModifyStoreRequestInput {
    """

    Supported in m3.2.0-m4.2.0
    Access key id.
    """
    accessKeyId: String
    """

    Supported in m3.2.0-m4.2.0
    Secret key.
    """
    secretKey: String
    """

    Supported in m3.2.0-m4.2.0
    Whether to skip key file config.
    """
    skipKeyFileConfig: Boolean
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the store.
    """
    storeName: String!
}

"Represents the monitor input for protection."
input MosaicMonitorInfoInput {
    "Frequency of monitor."
    frequency: Int = 0
    "Frequency unit of monitor."
    frequencyUnit: RetentionUnit = MINUTES
    "Specifies whether to enable monitor."
    isEnabled: Boolean = false
}

"""

Supported in m3.2.0-m4.2.0
Request object to get recoverable range on mosaic.
"""
input MosaicRecoverableRangeRequestInput {
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the database.
    """
    databaseName: String!
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String!
    """

    Supported in m4.1.0-m4.2.0
    Source type.
    """
    sourceType: MosaicRecoverableRangeRequestSourceType
    """

    Required. Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Table name.
    m4.1.0-m4.2.0: Name of the table.
    """
    tableName: String!
}

"Input for querying NoSQL protection restore data."
input MosaicRestoreDataInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Retrieve Request Object with details required for Restore operation."
    recoveryData: MosaicRetrieveRequestInput!
}

"""

Supported in m3.2.0-m4.2.0
Request object for retrieve request on mosaic.
"""
input MosaicRetrieveRequestInput {
    """

    Supported in m3.2.0-m4.2.0
    Destination Management objects for retrieve.
    """
    destinationManagementObjects: MosaicDatabaseManagementObjectInput
    """

    Required. Supported in m3.2.0-m4.2.0
    Destination path for restore.
    """
    destinationPath: String!
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source name for destination (restore).
    m4.1.0-m4.2.0: Destination source name for retrieve.
    """
    destinationSourceName: String
    """

    Supported in m3.2.0-m4.2.0
    Keyspace config.
    """
    keyspaceConfig: String
    """

    Required. Supported in m3.2.0-m4.2.0
    Source Management objects.
    """
    managementObjects: MosaicDatabaseManagementObjectInput!
    """

    Supported in m3.2.0-m4.2.0
    Max disk usage.
    """
    maxDiskUsage: String
    """

    Required. Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: If the parameter is encoded.
    m4.1.0-m4.2.0: If parameter is encoded.
    """
    parameterEncoded: Boolean!
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Restore db password.
    m4.1.0-m4.2.0: Db password of database to restore to.
    """
    restoreDbUserPwd: String
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Restore db username.
    m4.1.0-m4.2.0: Db name of database to restore to.
    """
    restoreDbUsername: String
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String!
    """

    Supported in m4.1.0-m4.2.0
    Source type.
    """
    sourceType: MosaicRetrieveRequestSourceType
    """

    Supported in m3.2.0-m4.2.0
    Start timestamp.
    """
    startTimestamp: Int
    """

    Supported in m3.2.0-m4.2.0
    Target encryption key.
    """
    targetEncryptionKey: String
    """

    Supported in m3.2.0-m4.2.0
    Target query.
    """
    targetQuery: String
    """

    Required. Supported in m3.2.0-m4.2.0
    Timestamp of the version.
    """
    versionTime: Int!
}

"Represents the protection backup input."
input MosaicSlaInfoInput {
    "Store information."
    mosaicBackupStoreInfo: MosaicBackupStoreInfoInput
    "Monitor information."
    mosaicMonitorInfo: MosaicMonitorInfoInput
    "Specifies whether to backup table index."
    shouldBackupIndex: Boolean
    "Specifies whether to delete all previous versions."
    shouldDelete: Boolean
    "Specifies whether to delete data copy versions."
    shouldDeleteData: Boolean
}

"Represents the mosaic snapshot filter input."
input MosaicSnapshotFilterInput {
    "Range of time."
    timeRange: TimeRangeInput
    "ID of the workload."
    workloadId: [String!]
}

"Input for MosaicStorageLocation Query Filter."
input MosaicStorageLocationFilterInput {
    "Field from which query should be filtered."
    field: MosaicStorageLocationFilterField = NAME
    "Value of the field."
    text: String = ""
}

"Supported in v5.0+"
input MountDiskJobConfigInput {
    """

    Supported in v5.0+
    ID of the target virtual machine where the disks will be attached to. The default value will be the virtual machine of the snapshot.
    """
    targetVmId: String
    """

    Supported in v5.0+
    The VLAN used by the ESXi host to mount the datastore.
    """
    vlan: Int
    """

    Supported in v5.0+
    The VMDK files to attach to the existing virtual machine. By default, this value is empty, which attaches all of the VMDKs in the snapshot to the target virtual machine.
    """
    vmdkIds: [String!] = []
}

"Supported in v5.0+"
input MountExportSnapshotJobCommonOptionsInput {
    """

    Supported in v5.0+
    Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.0+
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v5.0+
    v5.0-v8.0: Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
    v9.0: Determines whether the virtual machine is powered on after a recovery operation. Set to 'true' to power on the virtual machine. Set to 'false' to recover the virtual machine but not power it on. The default value is 'false' for export and 'true' for live mount, instant recovery, and in-place recovery.
    """
    powerOn: Boolean
    """

    Supported in v5.0+
    Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    "Supported in v5.0+. Name of the new virtual machine created by mount or export."
    vmName: String
}

"Supported in v5.1+"
input MountExportSnapshotJobCommonOptionsV2Input {
    """

    Supported in v5.1+
    Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.1+
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v5.1+
    v5.1-v8.0: Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
    v9.0: Determines whether the virtual machine is powered on after a recovery operation. Set to 'true' to power on the virtual machine. Set to 'false' to recover the virtual machine but not power it on. The default value is 'false' for export and 'true' for Live Mount, Instance Recovery, and In-Place Recovery.
    """
    powerOn: Boolean
    """

    Supported in v5.1+
    Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    """

    Supported in v5.1+
    v5.1-v5.3: Name of the new VM created by mount or export
    v6.0-v8.0: Name of the new VM created by mount or export.
    v9.0: Name of the new virtual machine created by mount or export.
    """
    vmName: String
}

"Supported in v5.0+"
input MountMssqlDbConfigInput {
    """

    Required. Supported in v5.0+
    Name to assign to the mounted database.
    """
    mountedDatabaseName: String!
    """

    Supported in v5.1+
    Recovery model to assign to the mounted database. If not specified, then assigns the recovery model of the mounted database to the recovery model of the source database.
    """
    recoveryModel: MssqlDatabaseRecoveryModel
    "Required. Supported in v5.0+"
    recoveryPoint: MssqlRecoveryPointInput!
    """

    Supported in v5.0+
    ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.
    """
    targetInstanceId: String
}

"Input for creating a Nutanix live Mount."
input MountNutanixSnapshotV1Input {
    "Required. Configuration for the Live Mount request."
    config: NutanixVmMountSnapshotJobConfigInput!
    "Required. ID of the virtual machine snapshot."
    id: String!
}

"Input for MountOracleDatabase."
input MountOracleDatabaseInput {
    "Advanced Recovery Configuration map for the Oracle database mount."
    advancedRecoveryConfigMap: [AdvancedRecoveryConfigMap!]
    "Request parameters for the Oracle database mount."
    request: CreateOracleMountInput!
}

"Supported in v5.0+"
input MountOracleDbConfigInput {
    """

    Supported in v5.2+
    v5.2-v5.3: Configuration file for advanced Oracle recovery in base64 encoded format.
    v6.0+: The configuration file for Oracle advanced recovery in base64 encoded format. This field cannot be specified if `advancedRecoveryConfigMap` is specified.
    """
    advancedRecoveryConfigBase64: String
    """

    Supported in v5.3+
    The full path of the pfile on the target Oracle Host or RAC to use for the database recovery.
    """
    customPfilePath: String
    """

    Supported in v5.3+
    v5.3: Number of channels used during live mount. The default value is decided based on the number of channels used during backups.
    v6.0+: Number of channels used during live mount.
    """
    numChannels: Int
    """

    Supported in v8.0+
    List of PDB names to be live mounted in the target database.
    """
    pdbsToLiveMount: [String!] = []
    """

    Supported in v6.0+
    Path to the post-script to run after the recovery task.
    """
    postScriptPath: String
    """

    Supported in v6.0+
    Path to the pre-script to run before the recovery task.
    """
    preScriptPath: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Snapshot ID or timestamp for which the export is done.
    v5.3+: Snapshot ID or timestamp for which the mount is done.
    """
    recoveryPoint: OracleRecoveryPointInput!
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether the database files are only mounted to the target host without recreating the database.
    v5.1+: A Boolean value that determines whether the database files are mounted to the target host without recreating the database. When 'true', the database is not recreated. When 'false', the database is recreated. The default value is 'false'.
    """
    shouldMountFilesOnly: Boolean
    """

    Supported in v6.0+
    Boolean value that determines whether to stop the recovery task if the pre-script exits with a non-zero value. Set to True to stop the recovery task on pre-script failure. The default setting is False, which allows the task to continue.
    """
    shouldStopRecoveryOnPreScriptFailure: Boolean
    """

    Supported in v5.0+
    The full path on the target host where the NFS share with the snapshot files will be mounted.
    """
    targetMountPath: String
    """

    Required. Supported in v5.0+
    ID of the Oracle Host or Oracle RAC object for the created database. The referenced Oracle host or RAC must have the Rubrik Backup Service installed and connected. Standalone source databases can be live mounted to OracleHost and clustered source databases can be live mounted to OracleRac only.
    """
    targetOracleHostOrRacId: String!
}

"Supported in v5.0+"
input MountSnapshotJobConfigForBatchV1Input {
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Snapshot mount config
    v6.0+: Configuration for Snapshot mount.
    """
    config: MountSnapshotJobConfigV1Input!
    """

    Supported in v5.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v5.0+
    v5.0-v5.3: Mounts the most recent snapshot prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    v6.0+: Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v5.0+
    v5.0-v5.3: ID of snapshot to mount. Optional. The snapshot to mount is determined from the other parameters in this call when the ID is not provided.
    v6.0+: The ID of the snapshot to export. This parameter is optional if either of the `snapshotBeforeDate` or `snapshotAfterDate` parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v5.0+
    v5.0: Mount a snapshot from this virtual machine.
    v5.1-v5.3: Mount a snapshot from this virtual machine
    v6.0+: ID of the virtual machine whose snapshot needs to be mounted.
    """
    vmId: String!
}

"Supported in v6.0+"
input MountSnapshotJobConfigForBatchV2Input {
    """

    Required. Supported in v6.0+
    Snapshot mount configuration.
    """
    config: MountSnapshotJobConfigV2Input!
    """

    Supported in v6.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is evaluated only snapshotId and snapshotBeforeDate. do not have values set.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Mounts the most recent snapshot taken prior to the specified date. This parameter is evaluated only when snapshotId does not have a value set.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    ID of the snapshot to mount. This parameter is optional if either the `snapshotBeforeDate` or `snapshotAfterDate` parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine whose snapshot must be mounted.
    """
    vmId: String!
    """

    Supported in v7.0+
    Prefix added to the name of new virtual machines created by the mount or export operation.
    """
    vmNamePrefix: String
}

"Supported in v5.0+"
input MountSnapshotJobConfigV1Input {
    """

    Supported in v5.0+
    The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
    """
    createDatastoreOnly: Boolean
    """

    Supported in v5.0+
    v5.0: Name of the host NAS datastore to use with the new virtual machine. The Rubrik cluster creates a new datastore on the host using the provided name.
    v5.1+: Obsolete parameter.
    """
    dataStoreName: String
    """

    Supported in v5.0+
    ID of the ESXi host to mount the new virtual machine on.
    """
    hostId: String
    mountExportSnapshotJobCommonOptions: MountExportSnapshotJobCommonOptionsInput
    """

    Supported in v5.0+
    The job recovers the tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v5.0+
    VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
    """
    vlan: Int
}

"Supported in v5.1+"
input MountSnapshotJobConfigV2Input {
    """

    Supported in v6.0+
    ID of the compute cluster where the new virtual machine will be mounted.
    """
    clusterId: String
    """

    Supported in v5.1+
    The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
    """
    createDatastoreOnly: Boolean
    """

    Supported in v5.1+
    Obsolete parameter.
    """
    dataStoreName: String
    """

    Supported in v5.1+
    ID of the ESXi host to mount the new virtual machine on.
    """
    hostId: String
    "Configuration for migration."
    migrationConfig: RelocateMountConfigV2Input
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v6.0+
    ID of the resource pool where the new virtual machine will be mounted.
    """
    resourcePoolId: String
    "Specifies whether to trigger migration immediately when the Live Mount succeeds."
    shouldMigrateImmediately: Boolean
    """

    Supported in v5.1+
    The job recovers the tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v6.0+
    The network binding for vNIC of the virtual machine.
    """
    vNicBindings: [VmwareVnicBindingInfoV2Input!] = []
    """

    Supported in v5.1+
    VLAN ID for the VLAN ESXi host preferred to use for mounting the datastore.
    """
    vlan: Int
}

"Supported in v5.0+"
input MssqlBackupJobConfigInput {
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    Whether to force a full snapshot or an incremental.
    """
    forceFullSnapshot: Boolean
}

"Supported in v5.2+"
input MssqlBackupSelectionInput {
    """

    Supported in v5.2+
    A filter for responses that are of the specified type.
    """
    backupType: MssqlBackupType
    "Supported in v5.2+"
    endPoint: MssqlRecoveryPointInput
    """

    Supported in v5.2+
    v5.2: Optional. A Boolean that specifies whether the download is in response to a Legal Hold.
    v5.3+: Optional. A Boolean that specifies if the download is in response to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    "Supported in v5.2+"
    recoveryPoint: MssqlRecoveryPointInput
    "Supported in v5.2+"
    startPoint: MssqlRecoveryPointInput
}

"Supported in v5.0+"
input MssqlBatchBackupJobConfigInput {
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list will be considered.
    v5.3+: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
    """
    availabilityGroupIds: [String!] = []
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Microsoft SQL databases. All databases in this list will be considered.
    v5.3+: IDs of the Microsoft SQL databases. All databases in this list are considered for taking an on demand snapshot.
    """
    databaseIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.2: Whether to force a full snapshot or an incremental.
    v5.3+: Determines whether to force a full or incremental snapshot.
    """
    forceFullSnapshot: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the hosts. All databases with a `rootId` belonging to this list will be considered.
    v5.3+: IDs of the hosts. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
    """
    hostIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Microsoft SQL instances. All non-availability databases on these instances will be considered.
    v5.3+: IDs of the Microsoft SQL instances. All non-availability databases on these instances are considered for taking an on demand snapshot.
    """
    instanceIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Windows clusters. All databases with a `rootId` belonging to this list will be considered.
    v5.3+: IDs of the Windows clusters. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
    """
    windowsClusterIds: [String!] = []
}

"Input to configure the log settings for SQL Server database in an SLA Domain."
input MssqlConfigInput {
    "Frequency for log backups of SQL Server databases."
    frequency: SlaDurationInput
    "The duration for which the logs will be retained."
    logRetention: SlaDurationInput
}

"Filter Mssql database live mount results."
input MssqlDatabaseLiveMountFilterInput {
    "Type of filter."
    field: MssqlDatabaseLiveMountFilterField = MOUNTED_DATABASE_NAME
    "Values for the filter type."
    texts: [String!] = []
}

"Sort Mssql database live mount results."
input MssqlDatabaseLiveMountSortByInput {
    "Field for Mssql database sort by."
    field: MssqlDatabaseLiveMountSortByField = MOUNTED_DATABASE_NAME
    "Sort order for Mssql database sort by."
    sortOrder: SortOrder = ASC
}

"Supported in v5.0+"
input MssqlDbDefaultsUpdateInput {
    """

    Supported in v5.0+
    v5.0-v5.2: True to enable CBT based backup, false to disable.
    v5.3+: True to enable a CBT-based backup, false to disable a CBT-based backup.
    """
    cbtStatus: Boolean
    "Supported in v5.0+"
    logBackupFrequencyInSeconds: Long
    "Supported in v5.3+"
    logRetentionTimeInHours: Int
    """

    Supported in v7.0+
    Use the default backup location configured in SQL Server for file-based log backups.
    """
    shouldUseDefaultBackupLocation: Boolean
}

"Supported in v5.0+"
input MssqlDbFileExportPathInput {
    """

    Required. Supported in v5.0+
    The target path for the database file.
    """
    exportPath: String!
    """

    Required. Supported in v5.0+
    Logical name of the database file.
    """
    logicalName: String!
    """

    Supported in v5.0+
    New filename for the database file.
    """
    newFilename: String
    """

    Supported in v5.0+
    New logical name for the database file.
    """
    newLogicalName: String
}

"Supported in v5.0+"
input MssqlDbUpdateIdInput {
    """

    Required. Supported in v5.0+
    ID of the Microsoft SQL database.
    """
    databaseId: String!
    "Required. Supported in v5.0+"
    updateProperties: MssqlDbUpdateInput!
}

"Supported in v5.0+"
input MssqlDbUpdateInput {
    "Assign database to SLA Domain."
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    Whether to pause or resume backups/archival for this database.
    """
    isPaused: Boolean
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to back up the database.
    """
    maxDataStreams: Int
    mssqlNonSlaProperties: MssqlNonSlaPropertiesInput
    mssqlSlaPatchProperties: MssqlSlaPatchPropertiesInput
    "Supported in v5.0+"
    postBackupScript: MssqlScriptDetailInput
    "Supported in v5.0+"
    preBackupScript: MssqlScriptDetailInput
    """

    Supported in v5.2+
    Determines whether to force a full for the next snapshot of a SQL Server database. When this value is true, the Rubrik cluster takes a full snapshot. This value is false by default and is reset to false after a successful full snapshot.
    """
    shouldForceFull: Boolean
}

"Supported in v5.2+"
input MssqlDownloadFromArchiveConfigInput {
    "Required. Supported in v5.2+"
    recoveryPoint: MssqlRecoveryPointInput!
}

input MssqlGetRestoreFilesV1Input {
    "Required. ID of the Microsoft SQL database."
    id: String!
    "LSN to recover to. This value or the time are required."
    lsn: String
    "Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified."
    recoveryForkGuid: String
    "Time, in ISO8601 date-time format, to recover to. For example, \"2016-01-01T01:23:45.678\". This value or the LSN are required."
    time: DateTime
}

"Supported in v5.0+"
input MssqlLogShippingCreateConfigInput {
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to copy data to the target system.
    """
    maxDataStreams: Int
    mssqlLogShippingTargetStateOptions: MssqlLogShippingTargetStateOptionsInput
    """

    Supported in v5.0+
    The path to the default target location for data file storage.
    """
    targetDataFilePath: String
    """

    Required. Supported in v5.0+
    The name of the secondary database.
    """
    targetDatabaseName: String!
    """

    Supported in v5.0+
    Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.
    """
    targetFilePaths: [MssqlDbFileExportPathInput!] = []
    """

    Required. Supported in v5.0+
    The ID of the SQL Server instance that hosts the secondary database.
    """
    targetInstanceId: String!
    """

    Supported in v5.0+
    The path to the location of the log files.
    """
    targetLogFilePath: String
}

"Supported in v5.3+"
input MssqlLogShippingCreateConfigV2Input {
    """

    Supported in v5.3+
    Maximum number of makeup reseed attempts during a 24 hour period.
    """
    makeupReseedLimit: Int
    mssqlLogShippingCreateConfig: MssqlLogShippingCreateConfigInput
}

"Supported in v5.0+"
input MssqlLogShippingReseedConfigInput {
    mssqlLogShippingTargetStateOptions: MssqlLogShippingTargetStateOptionsInput
}

"Filter Mssql log shipping target results."
input MssqlLogShippingTargetFilterInput {
    "Type of filter."
    field: MssqlLogShippingTargetFilterField = CLUSTER_UUID
    "Values for the filter type."
    texts: [String!] = []
}

"Sort Mssql log shipping target results."
input MssqlLogShippingTargetSortByInput {
    "Field for Mssql log shipping target sort by."
    field: MssqlLogShippingTargetSortByField = SECONDARY_NAME
    "Sort order for Mssql log shipping target sort by."
    sortOrder: SortOrder = ASC
}

"Supported in v5.0+"
input MssqlLogShippingTargetStateOptionsInput {
    """

    Supported in v5.0+
    v5.0-v5.2: Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. If the "state" field is `RESTORING`, this value can be omitted and will otherwise be ignored.
    v5.3+: Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the "state" field is `RESTORING`, this value can be omitted and is ignored.
    """
    shouldDisconnectStandbyUsers: Boolean
    "Required. Supported in v5.0+"
    state: MssqlLogShippingOkState!
}

"Supported in v5.3+"
input MssqlLogShippingUpdateV2Input {
    """

    Supported in v5.3+
    Maximum number of makeup reseed attempts during a 24 hour period.
    """
    makeupReseedLimit: Int
}

"Non-SLA properties of an MSSQL object."
input MssqlNonSlaPropertiesInput {
    """

    Supported in v5.0
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v5.0
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.0
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"Supported in v5.0+"
input MssqlRecoveryPointInput {
    """

    Supported in v5.2+
    Recovery point specified in ISO8601 format, such as "2016-01-01T01:23:45.678".
    """
    date: DateTime
    "Supported in v5.0+"
    lsnPoint: LsnRecoveryPointInput
    """

    Supported in v5.0+
    v5.0-v5.1: Recovery point specified in the form of a timestamp (in milliseconds).
    v5.2+: Recovery point specified in the form of a timestamp (in milliseconds). Deprecated. Please use 'date' instead.
    """
    timestampMs: Long
}

input MssqlRestoreEstimateV1Input {
    "Required. ID of the Microsoft SQL database."
    id: String!
    "LSN to recover to. This value or the LSN are required."
    lsn: String
    "Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified."
    recoveryForkGuid: String
    "Time, in ISO8601 date-time format, to recover to. For example, \"2016-01-01T01:23:45.678\". This value or the LSN are required."
    time: DateTime
}

"Supported in v5.0+"
input MssqlScriptDetailInput {
    """

    Required. Supported in v5.0+
    Action to take if the script returns an error or times out.
    """
    scriptErrorAction: ScriptErrorAction!
    """

    Required. Supported in v5.0+
    The script to be run.
    """
    scriptPath: String!
    """

    Required. Supported in v5.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"Supported in v5.1+"
input MssqlSlaDomainAssignInfoInput {
    "Supported in v5.1+"
    existingSnapshotRetention: ExistingSnapshotRetention
    """

    Required. Supported in v5.1+
    List of SQL Server object IDs which should be assigned these properties.
    """
    ids: [String!]!
    mssqlSlaPatchProperties: MssqlSlaPatchPropertiesInput
    """

    Supported in v7.0+
    A Boolean value indicating whether to retain existing snapshots of assigned objects with the specified SLA Domain configuration. The default value is 'true'. If objects are unprotected, existing snapshots are retained according to the value of the 'existingSnapshotRetention' parameter. For unprotected objects, this value is empty. When an SLA Domain assignment is cleared from an object, the retention strategy described by the 'existingSnapshotRetention' parameter is used only when the object can inherit a protection SLA Domain from an ancestor object.
    """
    shouldApplyToExistingSnapshots: Boolean
    """

    Supported in v7.0+
    A Boolean value. When true, specifies that the retention changes corresponding to the new SLA Domain are applied to non-policy snapshots in addition to existing policy-based snapshots.
    """
    shouldApplyToNonPolicySnapshots: Boolean
}

"Supported in v5.1+"
input MssqlSlaPatchPropertiesInput {
    """

    Supported in v5.1+
    v5.1: SLA Domain ID assigned to instance.
    v5.2+: SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    mssqlSlaRelatedProperties: MssqlSlaRelatedPropertiesInput
    """

    Supported in v5.3+
    Determines whether to use the configured default value of log backup retention.
    """
    useConfiguredDefaultLogRetention: Boolean
}

"Supported in v5.1+"
input MssqlSlaRelatedPropertiesInput {
    """

    Supported in v5.1+
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v7.0+
    A boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
    """
    hasLogConfigFromSla: Boolean
    """

    Supported in v5.1+
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.1+
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"Filter to return objects with a given substring in their name."
input NameSubstringFilter {
    nameSubstring: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Credentials to add or update NAS system with API integration.
"""
input NasApiCredentialsInput {
    """

    Supported in v7.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v7.0+
    Password associated with the NAS API user account.
    """
    apiPassword: String
    """

    Supported in v7.0+
    Username to access the vendor-specific NAS API.
    """
    apiUsername: String
    """

    Supported in v7.0+
    The ID corresponding to the imported certificate.
    """
    certificateId: String
}

"Supported in v5.0+"
input NasConfigInput {
    """

    Supported in v5.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v5.0+
    API endpoint to access NAS API 'FLASHBLADE'.
    """
    apiEndpoint: String
    """

    Supported in v5.0+
    Hostname or IP used in the NAS API calls.
    """
    apiHostname: String
    """

    Supported in v5.0+
    v5.0-v5.3: Password to access NAS API 'ISILON/NETAPP'
    v6.0+: Password to access NAS vendor API.
    """
    apiPassword: String
    """

    Supported in v5.0+
    API token to access NAS API 'FLASHBLADE'.
    """
    apiToken: String
    """

    Supported in v5.0+
    v5.0-v5.3: Username to access NAS API 'ISILON/NETAPP'
    v6.0+: Username to access NAS vendor API.
    """
    apiUsername: String
    "Specifies if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata retrievals during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots and reducing the metadata scanning time during a backup job."
    isIsilonChangelistEnabled: Boolean
    "Specifies if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata retrievals during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job."
    isNetAppSnapDiffEnabled: Boolean
    "Specifies whether CFT (Change File Tracking) is enabled on the Nutanix NAS share. When this value is 'true', metadata retrievals during backup operations use the Nutanix CFT feature. The CFT feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job."
    isNutanixCftEnabled: Boolean
    """

    Supported in v5.3+
    Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
    """
    isShareAutoDiscoveryEnabled: Boolean
    "Specifies whether SnapDiff is enabled on NetApp NAS."
    isSnapdiffEnabled: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'
    v6.0+: Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
    """
    vendorType: String!
    """

    Supported in v5.0+
    Name of the Isilon zone that data IP belongs to.
    """
    zoneName: String
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Properties of a NAS share.
"""
input NasSharePropertiesInput {
    """

    Required. Supported in v7.0+
    ID of NAS share.
    """
    id: String!
    """

    Supported in v7.0+
    Specifies whether Isilon changelist is enabled for the share.
    """
    isIsilonChangelistEnabled: Boolean
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input for registering a new NAS System.
"""
input NasSystemRegisterInput {
    "Supported in v7.0+"
    genericNasSystemParameters: GenericNasSystemParametersInput
    "Required. Supported in v7.0+"
    hostname: String!
    """

    Supported in v7.0+
    Specifies the default Changelist setting for all shares in the Isilon NAS system.
    """
    isIsilonChangelistEnabled: Boolean
    "Supported in v7.0+"
    nasTmpApiCredentials: NasApiCredentialsInput
    "Required. Supported in v7.0+"
    nasVendorType: NasVendorType!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input for updating a NAS system.
"""
input NasSystemUpdateInput {
    """

    Supported in v7.0+
    The updated Generic NAS system parameters.
    """
    genericNasSystemParameters: GenericNasSystemParametersInput
    """

    Supported in v7.0+
    The updated hostname of the NAS system.
    """
    hostname: String
    """

    Supported in v7.0+
    Specifies the default Changelist setting for all shares in the Isilon NAS system.
    """
    isIsilonChangelistEnabled: Boolean
    """

    Supported in v7.0+
    The updated API credentials of the NAS system.
    """
    nasApiCredentials: NasApiCredentialsInput
}

"Supported in v5.0+"
input NetworkThrottleScheduleSummaryInput {
    """

    Required. Supported in v5.0+
    Array of int32 values that represent the days of the week on which to apply a scheduled network throttle. The days of the week are represented from 1-7 with Sunday as 1.
    """
    daysOfWeek: [Int!]!
    """

    Required. Supported in v5.0+
    An int64 value that represents the end time for a scheduled network throttle. The end time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    endTime: Long!
    """

    Required. Supported in v5.0+
    An int64 value that represents the start time for a scheduled network throttle. The start time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    startTime: Long!
    """

    Required. Supported in v5.0+
    Network bandwidth throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    throttleLimit: Float!
}

"Supported in v5.0+"
input NetworkThrottleUpdateInput {
    """

    Supported in v8.0+
    Network port for archival throttling. This value can be specified only when enabling or updating the archive resource type for throttling.
    """
    archivalThrottlePort: Int
    """

    Supported in v5.0+
    Default throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    defaultThrottleLimit: Float
    """

    Supported in v5.0+
    Boolean value that determines whether a throttle limit is enabled. Set to true to enable the throttle limit, or set to false to disable the throttle limit.
    """
    isEnabled: Boolean
    """

    Supported in v5.2+
    The network interface where outgoing traffic is throttled.
    """
    networkInterface: String
    """

    Supported in v5.0+
    An array containing all of the scheduled throttle limits for a specified resource.
    """
    scheduledThrottles: [NetworkThrottleScheduleSummaryInput!] = []
}

"New compute configuration."
input NewComputeConfig {
    securityGroupName: String = ""
    subnetName: String = ""
    vnetName: String = ""
}

"Details of a new SSO Group that has not yet been authorized on Rubrik."
input NewSsoGroupInput {
    "Specifies whether the SSO group is an org admin or not."
    isOrgAdmin: Boolean!
    "Name of the SSO group."
    name: String!
}

"New storage account configuration."
input NewStorageAccountConfig {
    name: String = ""
    sku: StorageAccountSku = STANDARD_LRS
    tier: StorageAccountTier = COOL
}

"IP configurations for the node."
input NodeConfigInput {
    "IP configuration for data network."
    dataIpConfig: IpConfigInput
    "IP configuration for IPMI."
    ipmiIpConfig: IpConfigInput!
    "IP configuration for management network."
    managementIpConfig: IpConfigInput!
    "VLAN Ids and associated IPs for the node."
    vlanIpConfigs: [VlanIpInput!]
}

"Supported in v5.0+"
input NodeIpInput {
    """

    Required. Supported in v5.0+
    IP of the node.
    """
    ip: String!
    """

    Required. Supported in v5.0+
    Node this interface is configured on.
    """
    node: String!
}

"Input required for providing node configuration details for registration."
input NodeRegistrationConfigsInput {
    "Capacity of the cluster."
    capacity: String = ""
    "Cluster UUID."
    clusterUuid: String = ""
    "Node id."
    id: String = ""
    "Entitlement status of the node."
    isEntitled: Boolean = false
    "Manufacture time of node."
    manufactureTime: DateTime
    "Platform type."
    platform: String = ""
    "Node serial number."
    serial: String = ""
    "System uuid of node."
    systemUuid: String = ""
    "Teleport token of node."
    teleportToken: String = ""
}

"Mapping of Node name to IP configurations for the node."
input NodesMapInput {
    "Required. The name for the new node."
    key: String = ""
    "Node map value."
    value: NodeConfigInput!
}

"Supported in v5.0+"
input NtpServerConfigurationInput {
    """

    Required. Supported in v5.0+
    Name or IP address of the NTP server.
    """
    server: String!
    "Supported in v5.0+"
    symmetricKey: NtpSymmKeyConfigurationInput
}

"Supported in v5.0+"
input NtpSymmKeyConfigurationInput {
    """

    Required. Supported in v5.0+
    Symmetric key (asci or hex format).
    """
    key: String!
    """

    Required. Supported in v5.0+
    Symmetric key id.
    """
    keyId: Int!
    """

    Required. Supported in v5.0+
    Symmetric key type (e.g., MD5, SHA1).
    """
    keyType: String!
}

"Supported in v7.0+"
input NutanixBatchExportSnapshotJobConfigInput {
    """

    Required. Supported in v7.0+
    Array of objects containing information about snapshots for export.
    """
    snapshots: [NutanixExportSnapshotJobConfigForBatchInput!]!
}

"Supported in v7.0+"
input NutanixBatchMountSnapshotJobConfigInput {
    """

    Required. Supported in v7.0+
    Array of objects containing information about snapshots to be mounted.
    """
    snapshots: [NutanixMountSnapshotJobConfigForBatchInput!]!
}

"Supported in v5.0+"
input NutanixClusterConfigInput {
    """

    Required. Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String!
    """

    Required. Supported in v5.0+
    Address for the Prism host. Any Prism Element or Prism central host will do. We will use the highly available IP, if set, and this address, if not, to communicate with the cluster.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    The UUID of the Nutanix cluster being added. This is required because Prism Central may manage multiple clusters, and we need to differentiate between them.
    """
    nutanixClusterUuid: String!
    "Required. Supported in v5.0+"
    password: String!
    "Required. Supported in v5.0+"
    username: String!
}

"Supported in v5.0+"
input NutanixClusterPatchInput {
    """

    Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Supported in v5.0+
    v5.0-v5.1: ID of the SLA Domain that is configured for this Nutanix Cluster.
    v5.2+: ID of the SLA Domain that is configured for this Nutanix Cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    Address for the Prism host. Any Prism Element or Prism central host will do. We will use the highly available IP, if set, and this address, if not, to communicate with the cluster.
    """
    hostname: String
    "Supported in v5.0+"
    password: String
    "Supported in v5.0+"
    username: String
}

"Supported in v5.0+"
input NutanixDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    v5.0-v7.0: An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
    v8.0+: Array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
    """
    paths: [String!]!
}

"Supported in v7.0+"
input NutanixExportSnapshotJobConfigForBatchInput {
    """

    Required. Supported in v7.0+
    Configuration used for exporting the snapshot.
    """
    exportConfig: NutanixVmExportSnapshotJobConfigInput!
    """

    Supported in v7.0+
    Exports the oldest snapshot taken after the specified date. 'snapshotAfterDate' is only evaluated when no values are set for 'snapshotId' and 'snapshotBeforeDate'.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v7.0+
    Exports the snapshot taken most recently prior to the specified date. 'snapshotBeforeDate' is only evaluated when no value is set for 'snapshotId'.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v7.0+
    ID of the snapshot to export. This parameter is optional if the 'snapshotBeforeDate' or 'snapshotAfterDate' parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v7.0+
    ID of the virtual machine with the snapshot that requires exporting.
    """
    vmId: String!
    """

    Supported in v7.0+
    Prefix added to the name of the exported virtual machine.
    """
    vmNamePrefix: String
}

"Input to filter Nutanix virtual machine live mount results."
input NutanixLiveMountFilterInput {
    "Type of filter."
    field: NutanixLiveMountFilterField = FIELD_UNSPECIFIED
    "Values for the filter type."
    texts: [String!] = []
}

"Input to sort the Nutanix virtual machine live mounts results."
input NutanixLiveMountSortByInput {
    "Sort by field for Nutanix virtual machine live mounts."
    field: NutanixLiveMountSortByField = FIELD_UNSPECIFIED
    "Sort order for Nutanix virtual machine live mounts."
    sortOrder: SortOrder = ASC
}

"Input for InternalNutanixMissedSnapshots."
input NutanixMissedSnapshotsInput {
    """

    Required. v5.0-v5.3: ID of the vm
    v6.0-v8.0: ID of the vm.
    v9.0: ID of the virtual machine.
    """
    id: String!
}

"Supported in v7.0+"
input NutanixMountSnapshotJobConfigForBatchInput {
    """

    Required. Supported in v7.0+
    Configuration for mounting the snapshot.
    """
    mountConfig: NutanixVmMountSnapshotJobConfigInput!
    """

    Supported in v7.0+
    Mounts the first snapshot taken after the specified date. The value of 'snapshotAfterDate' is considered only when 'snapshotId' and 'snapshotBeforeDate' are not configured.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v7.0+
    Mounts the snapshot taken most recently before the specified date. The value of 'snapshotBeforeDate' is considered only when a snapshot ID is not set using 'snapshotId'.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v7.0+
    ID of the snapshot to mount. This parameter is optional if the 'snapshotBeforeDate' or 'snapshotAfterDate' parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v7.0+
    ID of the virtual machine whose snapshot requires mounting.
    """
    vmId: String!
    """

    Supported in v7.0+
    Prefix to be added to the name of the mounted virtual machine.
    """
    vmNamePrefix: String
}

"Supported in v6.0+"
input NutanixPatchVmMountConfigInput {
    """

    Required. Supported in v6.0+
    Specifies whether to power on the mounted virtual machine. When set to true, the virtual machine will be powered on. When set to false, the virtual machine will be powered off.
    """
    shouldPowerOn: Boolean!
}

"Supported in v5.0+"
input NutanixRestoreFileConfigInput {
    """

    Required. Supported in v5.0+
    Absolute file path.
    """
    path: String!
    """

    Required. Supported in v5.0+
    Target folder for the copied files.
    """
    restorePath: String!
}

"Supported in v5.0+"
input NutanixRestoreFilesConfigInput {
    """

    Required. Supported in v5.0+
    Directory of folder to copy files into.
    """
    restoreConfig: [NutanixRestoreFileConfigInput!]!
}

"Supported in v6.0+"
input NutanixVirtualMachineScriptDetailInput {
    """

    Required. Supported in v6.0+
    Action to take if the script returns an error or times out.
    """
    failureHandling: NutanixVirtualMachineScriptDetailFailureHandling!
    "The command to be run in virtual machine guest OS."
    scriptPath: String!
    """

    Required. Supported in v6.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"Supported in v7.0+"
input NutanixVmDownloadRequestInput {
    """

    Supported in v7.0+
    ID of the SLA Domain to manage retention of the downloaded snapshot.
    """
    slaId: String
}

"Supported in v5.0+"
input NutanixVmExportSnapshotJobConfigInput {
    """

    Required. Supported in v5.0+
    v5.0-v6.0: The natural ID of the container that will store the export VM's disks.
    v7.0+: The ID of the storage container that stores the export virtual machine's disks.
    """
    containerNaturalId: String!
    """

    Supported in v9.0
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine if nicNetworkUuids is provided. Set to 'false' to assign new MAC addresses.The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v9.0
    The IDs of the Nutanix networks used to create NICs on the exported virtual machine.
    """
    nicNetworkUuids: [String!] = []
    """

    Supported in v5.0+
    v5.0-v6.0: The ID of the Nutanix cluster to export to. If not specified, we will default to the VM's cluster.
    v7.0+: The ID of the Nutanix cluster for export. Defaults to the virtual machine's cluster if unspecified.
    """
    nutanixClusterId: String
    "Indicates if the virtual machine is started after an export operation."
    powerOn: Boolean
    """

    Supported in v5.0+
    v5.0-v6.0: Determines whether to remove the network interfaces from the exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'. If 'false' the export job will attempt to add nics that were both present at snapshot time and connected to networks that are still present on the target cluster.
    v7.0+: Determines whether to remove the network interfaces from the exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'. If set to 'false', the export job attempts to add NICs that were present at the time of the snapshot and were connected to networks that are still present on the target cluster.
    """
    removeNetworkDevices: Boolean
    "Name of the new virtual machine for export."
    vmName: String
}

"Supported in v6.0+"
input NutanixVmMountSnapshotJobConfigInput {
    """

    Supported in v6.0+
    v6.0: The natural ID of the container that will store the disks of the mounted virtual machine when migration is selected.
    v7.0+: The ID of the storage container that will store the disks of the mounted virtual machine when migration is selected.
    """
    containerNaturalId: String
    "Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine if nicNetworkUuids is provided. Set to 'false' to assign new MAC addresses.The default is 'false'. When removeNetworkDevices is set to true, this property is ignored."
    keepMacAddresses: Boolean
    "The IDs of the Nutanix networks used to create NICs on the exported virtual machine."
    nicNetworkUuids: [String!] = []
    """

    Supported in v6.0+
    ID of the Nutanix cluster to mount the new virtual machine to. Default value is the ID of the Nutanix cluster that hosts the source virtual machine of the snapshot.
    """
    nutanixClusterId: String
    "Specifies whether the migration option should not be enabled for the live mount. When set to true, the Rubrik cluster will serve as the external repository for the mounted virtual machine, and storage migration to the Nutanix cluster will be not be enabled. When set to false, a storage container on the Nutanix cluster must be specified, and a storage migration otion will be available for the live mount when it succeeds."
    shouldDisableMigration: Boolean!
    """

    Supported in v6.0+
    Specifies whether to trigger migration immediately when the Live Mount succeeds.
    """
    shouldMigrateImmediately: Boolean
    """

    Supported in v6.0+
    v6.0-v8.0: Specifies whether the virtual machine should be powered on after the Live Mount. Default value is true.
    v9.0: Specifies whether the virtual machine will be powered on after the Live Mount. Default value is false.
    """
    shouldPowerOn: Boolean
    """

    Supported in v6.0+
    Specifies whether to remove network configuration on the new virtual machine. Default value is false.
    """
    shouldRemoveNetwork: Boolean
    """

    Supported in v6.0+
    The target network on the newly mounted virtual machine if network configuration is not removed.
    """
    targetNetwork: String
    """

    Supported in v6.0+
    Name of the newly mounted virtual machine.
    """
    vmName: String
}

"Supported in v5.0+"
input NutanixVmPatchInput {
    "Assigns this virtual machine to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain."
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    A list of virtual disks IDs to exclude from the backup for this virtual machine.
    """
    excludedDiskIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.3: Whether backup/archival/replication is paused for this VM
    v6.0-v8.0: Whether backup/archival/replication is paused for this VM.
    v9.0: Specifies whether backup/archival/replication is paused for this virtual machine.
    """
    isPaused: Boolean
    "Supported in v6.0+"
    postBackupScript: NutanixVirtualMachineScriptDetailInput
    "Supported in v6.0+"
    postSnapScript: NutanixVirtualMachineScriptDetailInput
    "Supported in v6.0+"
    preBackupScript: NutanixVirtualMachineScriptDetailInput
    """

    Supported in v5.0+
    v5.0-v8.0: Consistency level mandated for this VM.
    v9.0: Consistency level mandated for this virtual machine.
    """
    snapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate
}

"Configuration for the exclusion of a SharePoint object from protection."
input O365FullSpExclusion {
    "The fid of the SharePoint object."
    fid: String!
    "The name of the SharePoint object."
    name: String!
    "The object type."
    objectType: SharePointDescendantType!
    "The URL of the SharePoint object."
    url: URL!
}

"Configuration for the exclusion of SharePoint objects under a site collection from protection."
input O365FullSpSiteExclusions {
    "The objects to be excluded under the site collection."
    excludedObjects: [O365FullSpExclusion!]!
    "The fid of the SharePoint site collection."
    siteFid: String!
}

"Configuration for the completion of an O365 OAuth consent flow."
input O365OauthConsentCompleteInput {
    "Authorization code for the consent flow."
    code: String!
    "Redirect URL for the consent flow."
    redirectUrl: String!
    "Natural ID of the resource."
    resourceNaturalId: String!
    "CSRF token for the setup flow."
    stateToken: String!
    "ID of the Microsoft 365 tenant."
    tenantId: String!
}

"Configuration for the kickoff of an OAuth consent flow."
input O365OauthConsentKickoffInput {
    "Type of the Azure app."
    appType: String!
    "UUID of the org."
    orgId: UUID!
}

"Configuration for the setup of a Rubrik-hosted subscription."
input O365SaasSetupCompleteInput {
    "Types of the apps created in the flow."
    appTypes: [String!]!
    "Azure KMS configuration, excluding the app secret."
    kmsSpec: KmsSpecInput
    "The value of this field depends on the value of the storeBackupInSameRegionAsData field. When its value is false, regionName represents the Azure region name. When true, regionName represents the name of the central data location of the M365 organization."
    regionName: String!
    "CSRF token for the setup flow."
    stateToken: String!
    "Specifies whether the backups will be stored in the same region as the source data. When true, the regionName field represents the name of the central data location of the M365 organization."
    storeBackupInSameRegionAsData: Boolean!
    "ID of the Azure tenant."
    tenantId: String!
}

"Input for specifying Microsoft Office 365 fields in WorkloadFieldsInput."
input O365SnapshotFileDeltaInput {
    "Browse Microsoft Office 365 OneDrive/SharePoint folder ID."
    folderId: String = ""
    "Microsoft Office 365 organization ID."
    orgId: String = ""
}

"Channel object consisting naturalId and name."
input O365TeamConvChannelInput {
    folderId: String!
    "The membership type of the channel."
    membershipType: ChannelMembershipType!
    name: String!
    naturalId: String!
}

"Supported in v6.0+"
input ObjectIdToSnapshotIdsInput {
    """

    Required. Supported in v6.0+
    Object ID.
    """
    id: String!
    """

    Required. Supported in v6.0+
    Snapshot IDs.
    """
    snapshots: [String!]!
}

input ObjectIdsForHierarchyTypeInput {
    objectIds: [String!]!
    snappableType: WorkloadLevelHierarchy!
}

"Object-specific configurations."
input ObjectSpecificConfigsInput {
    "SLA Domain configuration for AWS RDS object."
    awsRdsConfigInput: AwsRdsConfigInput
    "Input to configure the SLA Domain for Azure SQL Database DB."
    azureSqlDatabaseDbConfigInput: AzureSqlDatabaseDbConfigInput
    "Input to configure the SLA Domain for Azure SQL Managed Instance DB."
    azureSqlManagedInstanceDbConfigInput: AzureSqlManagedInstanceDbConfigInput
    "Input to configure the SLA Domain for Db2 database."
    db2ConfigInput: Db2ConfigInput
    "Input to configure the SLA Domain for SQL Server database."
    mssqlConfigInput: MssqlConfigInput
    "Input to configure the SLA Domain for Oracle database."
    oracleConfigInput: OracleConfigInput
    "SLA Domain configuration for SAP HANA object."
    sapHanaConfigInput: SapHanaConfigInput
    "SLA Domain configuration for VMware virtual machine object."
    vmwareVmConfigInput: VmwareVmConfigInput
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Properties of the object store associated with SnapMirror Cloud.
"""
input ObjectStoreAccessInput {
    """

    Supported in v7.0+
    Specifies whether SSL is enabled for the SnapMirrorCloud cloud target.
    """
    isSslEnabled: Boolean
    """

    Supported in v7.0+
    The URL of the object server for the cloud target.
    """
    objectServerUrl: String
    """

    Supported in v7.0+
    The type of provider for the cloud target.
    """
    providerType: String
    """

    Supported in v7.0+
    Specifies whether to use an HTTP proxy to connect to the SnapMirrorCloud cloud target.
    """
    shouldUseHttpProxy: Boolean
}

"Input for restore path pair."
input OldRestorePathPairInput {
    "Path to be restored from source."
    path: String = ""
    "The restore path."
    restorePath: String = ""
}

"Parameters for OneDrive file or folder search."
input OnedriveSearchFilter {
    channelFolderName: String
    channelId: String
    channelMembershipType: ChannelMembershipType = ALL
    channelNameKeyword: String
    createTime: TimeRangeFilter
    excludeItemsUnderRoot: Boolean
    modifiedTime: TimeRangeFilter
    searchKeywordFilter: OnedriveSearchKeywordFilter
    searchObjectFilter: OnedriveSearchObjectFilter
    "Determines whether to use exact version match query."
    useExactVersionMatch: Boolean = false
}

"OneDrive search keyword and keyword type."
input OnedriveSearchKeywordFilter {
    keywordType: OnedriveSearchKeywordType = NAME
    searchKeyword: String = ""
}

"OneDrive search object type."
input OnedriveSearchObjectFilter {
    searchObjectType: OnedriveSearchObjectType = O365_FOLDER
}

"Supported in v5.0+"
input OracleBackupJobConfigInput {
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    Boolean value that indicates whether to force a full snapshot for the specified Oracle database object. Set to true to force a full snapshot. Set to false to allow the Rubrik cluster to determine the type of snapshot required.
    """
    forceFullSnapshot: Boolean
}

"Supported in v5.2+"
input OracleBulkUpdateInput {
    """

    Required. Supported in v5.2+
    An array containing the IDs assigned to Oracle host, Oracle RAC, and Oracle Database objects.
    """
    ids: [String!]!
    oracleUpdate: OracleUpdateInput
}

"Input to configure the log settings for Oracle database in an SLA Domain."
input OracleConfigInput {
    "Frequency for log backups of Oracle databases."
    frequency: SlaDurationInput
    "The duration for which the archived redo logs will be retained."
    hostLogRetention: SlaDurationInput
    "The duration for which the logs will be retained."
    logRetention: SlaDurationInput
}

"Supported in v6.0+"
input OracleDataGuardGroupUpdateInput {
    oracleUpdateCommon: OracleUpdateCommonInput
    """

    Supported in v6.0+
    Ordered list of database unique names to use for backup.
    """
    preferredDgMemberUniqueNames: [String!] = []
    """

    Supported in v6.0+
    Value that indicates whether to backup from the PRIMARY member only, or from any available member.
    """
    shouldBackupFromPrimaryOnly: Boolean
}

"Filter Oracle live mount results."
input OracleLiveMountFilterInput {
    "Type of filter."
    field: OracleLiveMountFilterField = UNSPECIFIED
    "Values for the filter type."
    texts: [String!] = []
}

"Sort Oracle live mount results."
input OracleLiveMountSortBy {
    "Field for Oracle live mounts sort by."
    field: OracleLiveMountSortByField = UNSPECIFIED
    "Sort order for Oracle live mounts sort by."
    sortOrder: SortOrder = ASC
}

"Supported in v6.0+"
input OracleLogRecoveryRangeInput {
    """

    Supported in v6.0+
    Filter for archive logs within the specified time range.
    """
    oracleTimeRange: OracleTimeRangeInput
}

"Supported in v5.0+"
input OracleNodeOrderInput {
    """

    Required. Supported in v5.0+
    Nodename of the Oracle RAC node.
    """
    nodeName: String!
    """

    Required. Supported in v5.0+
    Order in which Rubrik uses this node for automated Oracle backup.
    """
    order: Int!
}

input OraclePdbDetailsInput {
    "Required. ID of the Oracle database."
    id: String!
    "Required. Request object to fetch the PDB details."
    pdbDetailsRequest: GetOraclePdbDetailsRequestInput!
}

"Supported in v8.0+"
input OraclePdbRestoreConfigInput {
    """

    Required. Supported in v8.0+
    List of PDB names to be restored on the source database.
    """
    pdbsToRestore: [String!]!
    """

    Required. Supported in v8.0+
    Snapshot ID or timestamp for which the PDB restore is done.
    """
    recoveryPoint: OracleRecoveryPointInput!
}

"Supported in v5.0+"
input OracleRecoveryPointInput {
    """

    Supported in v5.0+
    Snapshot ID of the Oracle database.
    """
    snapshotId: String
    """

    Supported in v5.0+
    v5.0-v5.2: Recovery point specified in the form of a timestamp (in milliseconds).
    v5.3+: A timestamp in milliseconds that specifies a recovery point.
    """
    timestampMs: Long
}

"Supported in v6.0+"
input OracleTimeRangeInput {
    """

    Required. Supported in v6.0+
    v6.0: Timestamp that ends the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
    v7.0+: Timestamp at the end of the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
    """
    endTime: DateTime
    """

    Required. Supported in v6.0+
    v6.0: Timestamp that starts the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
    v7.0+: Timestamp at the beginning of the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
    """
    startTime: DateTime
}

"Supported in v6.0+"
input OracleUpdateCommonInput {
    """

    Supported in v7.0+
    Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
    """
    hasLogConfigFromSla: Boolean
    """

    Supported in v6.0+
    Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.
    """
    hostLogRetentionHours: Int
    """

    Supported in v6.0+
    Path where the NFS share is mounted on the host.
    """
    hostMount: String
    """

    Supported in v6.0+
    Specifies an interval in minutes. This interval is the period between successive log backups.
    """
    logBackupFrequencyInMinutes: Int
    """

    Supported in v6.0+
    Specifies an interval in hours. Log backups are retained for the duration of the interval.
    """
    logRetentionHours: Int
    """

    Supported in v6.0+
    Number of channels used to backup the Oracle database.
    """
    numChannels: Int
    "Supported in Rubrik CDM version 9.0 and later. Specifies the section size, in gigabytes, to be used during database backup."
    sectionSizeInGb: Int
    """

    Supported in v8.0+
    Boolean value specifying whether to use the high file count format for database backups.
    """
    shouldEnableHighFileCountSupport: Boolean
    """

    Supported in v8.0+
    Boolean value specifying whether to use secure thrift as the data transfer mechanism between the Rubrik cluster and the Oracle database instead of NFS. The default data transfer mechanism is NFS.
    """
    shouldUseSecureThriftForDataTransfer: Boolean
}

"Supported in v5.0+"
input OracleUpdateInput {
    """

    Supported in v5.0-v5.1
    ID of the SLA Domain protecting the specified Oracle object.
    """
    configuredSlaDomainId: String
    """

    Supported in v6.0+
    ID of the SLA domain protecting the specified Oracle object. Log backup jobs are no longer scheduled if the SLA domain indicates the Oracle object is unprotected. The specified SLA domain is not used to configure the protection or retention for this Oracle object. This is a DEPRECATED field, and will be removed in later releases.
    """
    configuredSlaDomainIdDeprecated: String
    """

    Supported in v5.2-v5.3
    Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.
    """
    hostLogRetentionHours: Int
    """

    Supported in v5.0-v5.3
    Path where the NFS share is mounted on the host.
    """
    hostMount: String
    """

    Supported in v5.0-v5.3
    Specifies an interval in minutes. This interval is the period between successive log backups.
    """
    logBackupFrequencyInMinutes: Int
    """

    Supported in v5.0-v5.3
    Specifies an interval in hours. Log backups are retained for the duration of the interval.
    """
    logRetentionHours: Int
    """

    Supported in v6.0+
    Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
    """
    nodeOrder: [OracleNodeOrderInput!] = []
    """

    Supported in v5.0-v5.3
    Number of channels used to backup the Oracle database.
    """
    numChannels: Int
    oracleUpdateCommon: OracleUpdateCommonInput
    """

    Supported in v6.0+
    Boolean value that specifies whether the Rubrik cluster should automatically distribute backups across Oracle database instances running on the RAC nodes. By default, backups are run from the first connected node in the RAC priority order.
    """
    shouldDistributeBackupsAutomatically: Boolean
}

"Supported in v5.3+"
input OracleValidateConfigInput {
    """

    Supported in v5.3+
    Number of channels used during backup validation.
    """
    numChannels: Int
    """

    Required. Supported in v5.3+
    Snapshot ID or timestamp for which the validation is done.
    """
    recoveryPoint: OracleRecoveryPointInput!
    """

    Supported in v5.3+
    System Global Area(SGA) size used to create the instance on the target host with unit in MB. SGA is a group of shared memory structures for one Oracle Database instance.
    """
    sgaMaxSizeInMb: Long
    """

    Supported in v5.3+
    The full path on the target host where the NFS share with the snapshot files will be mounted.
    """
    targetMountPath: String
    """

    Supported in v5.3+
    The full path on the target host for the Oracle Home which is the directory location where all Oracle software is installed.
    """
    targetOracleHome: String
    """

    Required. Supported in v5.3+
    ID of the Oracle host or Oracle RAC object that is the target for the validation job. The referenced Oracle host or Oracle RAC must have the Rubrik Backup Service (RBS) installed and connected.
    """
    targetOracleHostOrRacId: String!
}

"Input to filter objects assigned to one of the specified organizations."
input OrgFilter {
    "List of organization IDs to filter by."
    orgIds: [String!]!
}

"CDP Performance dashboard pagination parameters."
input PaginationParam {
    "Limit."
    limit: Int = 0
    "Offset."
    offset: Int = 0
}

"Input to update authentication server-based AWS cloud account."
input PatchAwsAuthenticationServerBasedCloudAccountInput {
    "Authentication server's CA certificate to be updated for authentication server-based AWS cloud account."
    authServerCaCertId: AwsAuthServerCertificateIdInput
    "Authentication server's user client certificate to be updated for the authentication server-based AWS cloud account."
    authServerUserClientCertId: AwsAuthServerCertificateIdInput
    "Rubrik ID for the AWS cloud account."
    awsCloudAccountId: String!
    "Regions to be updated for the authentication server-based AWS cloud account."
    awsRegions: AwsAuthServerRegionsInput
    "Native protection feature to be updated."
    feature: CloudAccountFeature!
    "Name of the role created on the authentication server for the user account to be used by Rubrik."
    roleName: AwsAuthServerRoleNameInput
}

"Input to update IAM user-based AWS cloud account."
input PatchAwsIamUserBasedCloudAccountInput {
    "Rubrik ID for the AWS cloud account."
    awsCloudAccountId: String!
    "List of AWS Regions."
    awsRegions: AwsRegionsInput
    "AWS role ARN for native protection."
    awsRoleArn: AwsRoleArnInput
    "AWS IAM user access/secret keys."
    awsUserKeys: AwsUserKeysInput
    "Native protection feature to be updated."
    feature: CloudAccountFeature!
}

"Input for editing a DB2 instance."
input PatchDb2InstanceInput {
    "Required. The request object containing parameters like username, password, and list of hosts required to update a Db2 instance on the Rubrik cluster."
    db2InstanceRequestConfig: Db2InstancePatchRequestConfigInput!
    "Required. ID of the Db2 instance."
    id: String!
}

"Input for patching a MongoDB source."
input PatchMongoSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the MongoDB source."
    id: String!
    "Required. The request object containing parameters like username, password, which are to be edited for a MongoDB source on the Rubrik cluster."
    mongoSourcePatchRequestConfig: MongoSourcePatchRequestConfigInput!
}

"Input for patching a Nutanix live Mount."
input PatchNutanixMountV1Input {
    "Required. Configuration for updating the power status of the Live Mount."
    config: NutanixPatchVmMountConfigInput!
    "Required. ID of the Live Mount."
    id: String!
}

"Input for editing a SAP HANA system."
input PatchSapHanaSystemInput {
    "Required. The ID of the SAP HANA system."
    id: String!
    "Required. An object that contains the updated SLA Domain ID for the SAP HANA system."
    updateProperties: SapHanaSystemPatchInput!
}

input PauseSlaRequest {
    "List of Cluster Uuids."
    clusterUuids: [String!] = []
    "Whether or not to pause SLA."
    pauseSla: Boolean = false
    "Global SLA ID."
    slaId: String = ""
}

"Input for pausing archival location."
input PauseTargetInput {
    "ID of the archival location."
    id: String = ""
}

"Supported in v5.2+"
input PendingSlaOperationsRequestInput {
    """

    Required. Supported in v5.2+
    List of object IDs to use when retrieving pending SLA Domain assignments.
    """
    objectIds: [String!]!
}

input PermissionInput {
    objectsForHierarchyTypes: [ObjectIdsForHierarchyTypeInput!]!
    operation: Operation!
}

input PolarisSnapshotFilterInput {
    isOnDemandSnapshot: Boolean
    snappableId: [String!]
    timeRange: TimeRangeInput
}

input PolarisSnapshotFilterNewInput {
    field: FieldEnum = ALL
    texts: [String!] = []
}

"Range of ports that are allowed to be accessed."
input PortRange {
    "The maximum port in the port range."
    portMax: Int = 0
    "The minimum port in the port range."
    portMin: Int = 0
}

input PostBackupScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

input PostSnapScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

input PreAddVcenterInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Specify one of id or connectionConfig. If the vCenter is being added to Rubrik, specify the IP address and account credentials of the vCenter Server that is being added. If the vCenter is being updated specify the id of vCenter."
    vcenterConfig: VcenterPreAddConfigInput!
}

input PreBackupScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

"Input to initiate deletion of AWS cloud account."
input PrepareAwsCloudAccountDeletionInput {
    "Rubrik ID of account to be deleted."
    cloudAccountId: UUID!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeature!
}

"Input to prepare feature update for AWS cloud account."
input PrepareFeatureUpdateForAwsCloudAccountInput {
    "AWS account ID."
    cloudAccountId: UUID!
    "List of features to be updated for the AWS account."
    features: [CloudAccountFeature!]!
}

input PreviewFilterInput {
    "Required. Conditional logic of vSphere tags."
    filterCondition: String!
    "Required. ID of the vCenter Server."
    id: String!
    "Limit the number of virtual machine matches returned."
    limit: Int
    "Specifies the number of virtual machine matches to ignore starting at the beginning of the results."
    offset: Int
}

input PreviewerClusterConfigInput {
    clusterId: String = ""
    enabled: Boolean = false
}

"Input for promoting reader archival location."
input PromoteReaderTargetInput {
    "Id of the reader archival location to be promoted."
    locationId: String = ""
}

"Supported in v5.0+"
input ProxyConfigInput {
    "Required. Supported in v5.0+"
    host: String!
    "Supported in v5.0+"
    password: String
    "Supported in v5.0+"
    port: Int
    "Required. Supported in v5.0+"
    protocol: String!
    "Supported in v5.0+"
    username: String
}

"Input for creating target proxy setting."
input ProxySettingsInput {
    "Field for specifying password of the proxy."
    password: String = ""
    "Field for specifying port number of the proxy."
    portNumber: Int = 0
    "Field for specifying protocol of the proxy."
    protocol: String = ""
    "Filed for specifying the IP address or FQDN of the proxy server."
    proxyServer: String = ""
    "Field for specifying username of the proxy."
    username: String = ""
}

input PutSmbConfigurationInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. SMB configuration."
    config: SmbConfigInput!
}

"Configuration which indicates which files and snapshots to quarantine."
input QuarantineSpecInput {
    "Files which need to be quarantined."
    filesDetails: [FileDetailsInput!]!
    "Id of the snapshot."
    snapshotId: String!
}

"Quarterly snapshot schedule."
input QuarterlySnapshotScheduleInput {
    "Basic quarterly snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
    "Day of the Quarter."
    dayOfQuarter: DayOfQuarter = FIRST_DAY
    "Starting month of quarter."
    quarterStartMonth: Month = JANUARY
}

input QueryCertificatesInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Search certificates by description."
    description: String
    "Search certificates by expiration."
    expiration: String
    "Search certificates by whether or not they contain a private key."
    hasKey: Boolean
    "Specifies whether to include expired certificates. The default is false."
    includeExpired: Boolean
    "Search certificates according to whether or not they are added to truststore. The default is false."
    isTrusted: Boolean
    "Search by certificate name."
    name: String
    "Attribute by which the list of certificates is sorted."
    sortBy: V1QueryCertificatesRequestSortBy
    "Sort order, either ascending or descending."
    sortOrder: V1QueryCertificatesRequestSortOrder
}

"Query datastore freespace threshold."
input QueryDatastoreFreespaceThresholdInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: UUID!
    "Optional Virtual Machine ID."
    vmId: String
}

input QueryGuestCredentialInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

"Input for getting the summary of all Hyper-V hosts."
input QueryHypervHostInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Filter by ID of effective SLA domain."
    effectiveSlaDomainId: String
    "Limit the number of matches returned."
    limit: Int
    "Search for a virtual machine by name."
    name: String
    "Ignore these many matches in the beginning."
    offset: Int
    "Filter by primary cluster ID, or **local**."
    primaryClusterId: String
    "Filter by SLA assignment type."
    slaAssignment: InternalQueryHypervHostRequestSlaAssignment
    "Sort the result by the given attribute."
    sortBy: InternalQueryHypervHostRequestSortBy
    "Sort order, either ascending or descending."
    sortOrder: InternalQueryHypervHostRequestSortOrder
}

input QueryLogShippingConfigurationsV2Input {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Limit the summary information to a specified maximum number of results."
    limit: Int
    "Filter log shipping configuration objects by performing an infix search using the location string value for a secondary database in the format \"host/instance\"."
    location: String
    "Starting position in the list of results contained in the response. The summary information includes the specified numbered result and all higher-numbered results."
    offset: Int
    "ID of a primary database object."
    primaryDatabaseId: String
    "Filter log shipping configuration objects by performing an infix search using the name of a primary database."
    primaryDatabaseName: String
    "Filter log shipping configuration objects by performing an infix search using the name of a secondary database."
    secondaryDatabaseName: String
    "Attribute used to sort the results using an ASCII sort order. Sorts using the last_applied attribute represent the timestamp as an ISO 8601-encoded string."
    sortBy: V2QueryLogShippingConfigurationsV2RequestSortBy
    "Sort order, either ascending or descending."
    sortOrder: V2QueryLogShippingConfigurationsV2RequestSortOrder
    "Filter log shipping configuration objects based on the status value of the secondary database."
    status: V2QueryLogShippingConfigurationsV2RequestStatus
}

input QueryUnmanagedObjectSnapshotsV1Input {
    "Filter all the snapshots after a date."
    afterDate: DateTime
    "Filter all the snapshots before a date."
    beforeDate: DateTime
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of a object."
    id: String!
    "Limit the number of matches returned."
    limit: Int
    "Ignore these many matches in the beginning."
    offset: Int
    "Search snapshot by date and time."
    searchValue: String
    "Filter by snapshot type. Valid types are OnDemand, PolicyBased, Retrieved."
    snapshotType: V1QueryUnmanagedObjectSnapshotsV1RequestSnapshotType
    "Sort by given attribute."
    sortBy: V1QueryUnmanagedObjectSnapshotsV1RequestSortBy
    "The sort order. The default sort order is ascending."
    sortOrder: V1QueryUnmanagedObjectSnapshotsV1RequestSortOrder
}

"Input for querying vCD clusters."
input QueryVcdClusterInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Search for a vCD Cluster object by name."
    name: String
    "Attribute to sort the results."
    sortBy: QueryVcdClusterRequestSortBy
    "Order for sorting the results, either ascending or descending."
    sortOrder: QueryVcdClusterRequestSortOrder
    "Filter the results using the status value of the vCD Cluster objects."
    status: QueryVcdClusterRequestStatus
}

"Input for querying VIM servers belonging to the vCD."
input QueryVcdVimServerInput {
    "Required. ID assigned to a vCD Cluster object."
    id: String!
    "Attribute for sorting the results."
    sortBy: QueryVcdVimServerRequestSortBy
    "Order for sorting the results, either ascending or descending."
    sortOrder: QueryVcdVimServerRequestSortOrder
}

"Filter ransomware result data."
input RansomwareResultFilterInput {
    "Filter by Rubrik cluster ID."
    clusterUuid: [UUID!]
    "End of filtering time range."
    endTime: DateTime
    "Filter based on encrypted status of the snapshot."
    isEncrypted: Boolean
    "Filter by internal managed ID."
    managedId: [String!]
    "Start of filtering time range."
    startTime: DateTime
}

"Input for getting RCS azure archival locations consumption stats."
input RcsConsumptionStatsInput {
    "Input for enable forecasting of consumption stats."
    doForecasting: Boolean
    "Input of Rubrik Security Cloud archival location identifiers for getting consumption statistics."
    locationIds: [UUID!]!
    "Input of metric of which consumption stats are required."
    metricName: RcsConsumptionMetricNameType!
}

"Supported in v5.0+"
input RecoverOracleDbConfigInput {
    """

    Supported in v5.3+
    v5.3: Number of channels used during instant recovery. The default value is decided based on the number of channels used during backups.
    v6.0+: Number of channels used during instant recovery.
    """
    numChannels: Int
    """

    Required. Supported in v5.0+
    Snapshot ID or timestamp for which the export is done.
    """
    recoveryPoint: OracleRecoveryPointInput!
}

"Recovery Plan Blueprint information."
input RecoveryPlanBlueprintInfoInput {
    "Blueprint IDs."
    blueprintId: String = ""
    "Boot priority."
    bootPriority: Int = 0
    "Target location information."
    targetLocationInfo: RecoveryPlanLocationInfoInput
}

"Recovery Plan configuration."
input RecoveryPlanConfigInput {
    "Blueprints information."
    blueprintsInfo: [RecoveryPlanBlueprintInfoInput!] = []
    "Boot priority delay in seconds."
    bootPriorityDelaySeconds: [Int!] = []
}

"Recovery Plan failover job configuration."
input RecoveryPlanFailoverJobConfig {
    "Blueprint failover job configurations."
    blueprintFailoverJobConfigs: [BlueprintRecoveryPlanJobConfig!] = []
    "Continue Recovery Plan failover on blueprint error."
    continueRpFailoverOnBlueprintError: Boolean = false
    "Recovery Plan failover type."
    recoveryPlanFailoverType: RecoveryPlanFailoverType = UNKNOWN_RP_TYPE
    "Recovery Plan ID."
    recoveryPlanId: String = ""
    "Recovery Plan operation."
    recoveryPlanOperation: RecoveryPlanOperationType = UNKNOWN_OPERATION
}

"Recovery Plan location information."
input RecoveryPlanLocationInfoInput {
    "Location ID."
    locationId: String = ""
    "Location type."
    locationType: RecoveryPlanLocationType = LOCATION_TYPE_UNKNOWN
}

"Input for refreshing a Db2 database."
input RefreshDb2DatabaseInput {
    "Required. ID of the Db2 database."
    id: String!
}

"Refresh the connection to the host."
input RefreshHostInput {
    "Required. ID assigned to a host object."
    id: String!
}

"Input parameters for refreshing Hyper-V SCVMM."
input RefreshHypervScvmmInput {
    "ID of the Hyper-V SCVMM."
    id: String!
}

"Input for refreshing the metadata for the specified Hyper-V host."
input RefreshHypervServerInput {
    "Required. ID of the Hyper-V host."
    id: String!
}

"Configuration of the Kubernetes cluster to refresh."
input RefreshK8sClusterInput {
    "The ID of the Kubernetes cluster to refresh."
    k8sClusterId: UUID!
}

"Input to start auto-discovery jobs on multiple NAS systems."
input RefreshNasSystemsInput {
    "Required. IDs of the NAS systems to rediscover."
    discoverNasSystemRequest: DiscoverNasSystemRequestInput!
}

"Input for refreshing a Nutanix cluster."
input RefreshNutanixClusterInput {
    "Required. ID of the Nutanix cluster."
    id: String!
}

input RefreshOracleDatabaseInput {
    "Required. ID of the Oracle database."
    id: String!
}

"Input for refreshing reader archival location."
input RefreshReaderTargetInput {
    "List of workload IDs on the original Rubrik cluster. This list should be empty for full refresh."
    archivalDataSourceIds: [String!] = []
    "List of workload IDs on the reader Rubrik cluster. This list should be empty for full refresh."
    localDataSourceIds: [String!] = []
    "IDdatalocationservice/schema/Inputs.scala of the reader archival location to be refreshed."
    locationId: String = ""
}

"Refresh Storage arrays."
input RefreshStorageArraysInput {
    "Required. List of Storage arrays to refresh."
    inputs: [StorageArrayInput!]!
}

"Refresh vCD instances in Rubrik clusters."
input RefreshVcdInstancesInput {
    "Required. List of vCD instances to refresh."
    inputs: [VcdInstanceInput!]!
}

"Refresh Vcenter."
input RefreshVsphereVcenterInput {
    "Fid of vcenter."
    fid: UUID!
    "Specifies whether to run diagnostics. Default value is False."
    shouldDiagnose: Boolean = false
}

"Required. Input for registering Rubrik Backup Service in a Hyper-V virtual machine."
input RegisterAgentHypervVirtualMachineInput {
    "Required. ID of the Virtual Machine."
    id: String!
}

"Input for registering the agent installed on the Nutanix virtual machine."
input RegisterAgentNutanixVmInput {
    "Required. ID of the Virtual Machine."
    id: String!
}

"Input for cloud cluster registration."
input RegisterCloudClusterInput {
    "Cluster UUID."
    clusterUuid: String = ""
}

"Required. Input for register Hyper-V SCVMM."
input RegisterHypervScvmmInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Registration definition for a Hyper-V SCVMM."
    scvmm: HypervScvmmRegisterInput!
}

"Input for registering a new NAS System."
input RegisterNasSystemInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Registration definition for a NAS system. This contains parameters needed to protect the NAS system such as a hostname or the cluster management IP address, and login credentials to access the system."
    nasSystem: NasSystemRegisterInput!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to create a SnapMirror Cloud relationship.
"""
input RelationshipCreateInput {
    """

    Supported in v7.0+
    Properties required to access the object store (cloud target) for the SnapMirrorCloud object.
    """
    objectStoreAccess: ObjectStoreAccessInput
    """

    Required. Supported in v7.0+
    v7.0-v8.0: ID of SnapMirror Cloud protected object.
    v9.0: ID of SnapMirror Cloud workload.
    """
    snapMirrorCloudId: String!
}

input RelativeTimeRangeInput {
    magnitude: Int!
    unit: TimeUnitEnum!
}

"Filter to return objects which are relic or not."
input RelicFilter {
    relic: Boolean!
}

"Supported in v5.0+"
input RelocateMountConfigInput {
    """

    Required. Supported in v5.0+
    The ID of the datastore that is the target of relocation.
    """
    datastoreId: String!
}

"Supported in Rubrik CDM version 9.0 and later."
input RelocateMountConfigV2Input {
    "List of mappings between disk device keys and storage IDs. If the list is not defined or emtpy, the storageLocationId is the location where all virtual disks are migrated. When this mapping is provided, each Live-mounted virtual disk must be mapped to a valid storage location, either a datastore or a datastore cluster. An incomplete or invalid mapping will result in the failure of the relocation operation."
    diskDeviceKeyToStorageId: [VmwareStorageIdWithDeviceKeyV2Input!] = []
    "The ID of the datastore or datastore cluster that is the target of relocation."
    storageLocationId: String
}

"Request parameters for removing nodes from a cloud cluster."
input RemoveCloudClusterNodesInput {
    "Customer cloud account UUID."
    cloudAccountId: UUID!
    "Cluster UUID."
    clusterUuid: UUID!
    "List of node IDs to be removed."
    nodeIds: [String!] = []
}

"Request parameters for removing nodes from a cluster."
input RemoveClusterNodesInput {
    "Cluster UUID."
    clusterUuid: UUID!
    "List of node IDs to be removed."
    nodeIds: [String!] = []
}

input RemoveDiskInput {
    "Required. ID of a missing disk to mark removed."
    diskId: String!
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

"Inventory workloads to remove from an account."
input RemoveInventoryWorkloadsInput {
    "List of Inventory Cards."
    inventoryCards: [InventoryCard!]!
}

"Input for removing private endpoint connection to RCV location."
input RemovePrivateEndpointConnectionInput {
    "Field for specifying location identifier of the target."
    locationId: UUID!
    "Field for specifying the Azure resource identifier for an RCV private endpoint."
    privateEndpointId: String!
}

input RemoveProxyConfigInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
}

"Input for deleting VLAN(s) of a cluster."
input RemoveVlansInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Required. VLAN."
    vlanIds: [Int!]!
}

"Gateway information for a Rubrik cluster."
input ReplicationGatewayInfo {
    "Gateway IPv4 address."
    address: String!
    "Gateway ports."
    ports: [Int!]!
}

"Filter for replication pairs request."
input ReplicationPairsQueryFilter {
    "Rubrik cluster name."
    clusterName: String = ""
    "Source Rubrik cluster uuids."
    sourceClusterUuids: [String!] = []
    "Connection status of the replication pair."
    status: [ReplicationPairConnectionStatus!] = []
    "Target Rubrik cluster uuids."
    targetClusterUuids: [String!] = []
}

"Replication specification."
input ReplicationSpecInput {
    "Type of replication."
    replicationType: ReplicationType = UNKNOWN_REPLICATION_TYPE
    "Specific replication specification for the type."
    specificReplicationSpecInput: SpecificReplicationSpecInput
}

"Replication specification."
input ReplicationSpecV2Input {
    "AWS account."
    awsAccount: String = ""
    "AWS region."
    awsRegion: AwsNativeRegionForReplication
    "Azure region."
    azureRegion: AzureNativeRegionForReplication
    "Azure subscription."
    azureSubscription: String = ""
    "Cascading Archival Specifications."
    cascadingArchivalSpecs: [CascadingArchivalSpecInput!] = []
    "Cluster UUID."
    clusterUuid: String = ""
    "Time snapshot is kept on local target cluster."
    replicationLocalRetentionDuration: SlaDurationInput
    "Retention duration."
    retentionDuration: SlaDurationInput
    "Storage setting ID."
    storageSettingId: String = ""
}

"Replication to cloud location specification."
input ReplicationToCloudLocationSpecInput {
    "Cloud provider."
    cloudProvider: CloudProvider = AWS
    "Replication target ID."
    replicationTargetId: String = ""
    "Retention duration."
    retentionDuration: SlaDurationInput
}

"Replication to cloud region specification."
input ReplicationToCloudRegionSpecInput {
    "Replication cloud provider."
    cloudProvider: CloudProvider = AWS
    "Replication target region."
    replicationTargetRegion: String = ""
    "Retention period on replication region."
    retention: Int = 0
    "Unit of retention period."
    retentionUnit: RetentionUnit = MINUTES
}

"Create configs for a snappable data chart."
input ReportChartCreate {
    "The metrics focus of the chart."
    focus: ReportFocusEnum!
    groupBy: [GroupByFieldEnum!]
    "The name of the chart."
    name: String!
}

input ReportConfigInput {
    aggregations: [String!]!
    "Column selection for the report."
    columns: [String!]!
    "Type of report."
    dataViewType: DataViewTypeEnum!
    "Filter selection for the report."
    filters: [ReportFilterInput!]!
    "GroupBy selection for the report."
    groupBy: ConfigGroupByInput!
    "Report name."
    name: String!
    sortBy: String!
    sortOrder: SortOrder
}

input ReportFilterInput {
    name: String!
    "Values are JSON serialized string of the original value."
    values: [String]!
}

"Create configs for an activity data table."
input ReportTableCreate {
    focus: ReportFocusEnum!
    groupBy: [GroupByFieldEnum!]
    "The name of the table."
    name: String!
    selectedColumns: [ReportTableColumnEnum!]!
    sortBy: SortByFieldEnum
    "The data sorting order for the table, ASC or DESC."
    sortOrder: SortOrder
}

"Supported in v6.0+"
input RequestedMatchDetailsInput {
    """

    Supported in v6.0+
    Hash algorithm to be calculated for files with malware matches.
    """
    requestedHashTypes: [HashType!]
}

"Supported in v5.1+"
input RequiredRecoveryParametersInput {
    """

    Supported in v5.1+
    Point in time to recover to.
    """
    recoveryPoint: DateTime
    """

    Supported in v5.1+
    ID of the snapshot to recover.
    """
    snapshotId: String
}

"Input for reseeding an MSSQL Log Shipping secondary."
input ReseedLogShippingSecondaryInput {
    "Required. Configuration parameters for the reseed operation."
    config: MssqlLogShippingReseedConfigInput!
    "Required. ID of the log shipping configuration object for the specified secondary database."
    id: String!
}

"Input for resizing a Managed Volume."
input ResizeManagedVolumeInput {
    "Required. ID of managed volume."
    id: String!
    "Required. New size of the managed volume in bytes."
    size: ManagedVolumeResizeInput!
}

input ResolveVolumeGroupsConflictInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the Microsoft Exchange server."
    id: String!
}

input ResourceInput {
    snappableFid: String = ""
    snapshotFid: String = ""
}

input RestoreConfig {
    deltaTypeFilter: [DeltaType!] = []
    domainName: String = ""
    nextSnapshotFid: String = ""
    password: String = ""
    restoreFilesConfig: [RestoreFileConfig!] = []
    shouldIgnoreErrors: Boolean = false
    shouldRestoreXAttrs: Boolean
    shouldSaveCredentials: Boolean = false
    shouldUseAgent: Boolean
    username: String = ""
}

input RestoreFileConfig {
    path: String = ""
    restorePath: String = ""
}

"Supported in v5.0+"
input RestoreFilesJobConfigInput {
    """

    Supported in v5.1+
    Managed ID of the destination object that the files should be recovered to.
    """
    destObjectId: String
    """

    Supported in v5.0+
    Domain name (Use . for local admin).
    """
    domainName: String
    """

    Supported in v7.0+
    v7.0: ID of the guest OS credential that should be used for authentication when restoring files through the VMware tools. When this ID is specified, the 'domainName', 'username', 'password', and 'shouldSaveCredentials' fields will be ignored.
    v8.0+: ID of the guest OS credential used for authentication when restoring files through the VMware tools. When this ID is specified, the 'domainName', 'username', 'password', and 'shouldSaveCredentials' fields are ignored.
    """
    guestCredentialId: String
    """

    Supported in v5.0+
    v5.0: Optional field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. Default value is false, errors are not ignored.
    v5.1-v7.0: Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.
    v8.0+: Optional Boolean field specifying whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. When 'false', errors are not ignored. The default value is 'false'.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    Password.
    """
    password: String
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Absolute file path and restore path if not restored back to itself
    v6.0-v7.0: Absolute file path and restore path if not restored back to itself.
    v8.0+: Absolute file path and restore path if the object is not restored back to itself.
    """
    restoreConfig: [VmRestorePathPairInput!]!
    """

    Supported in v5.1+
    v5.1-v7.0: Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Windows, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.
    v8.0+: Boolean value specifying the restore file settings for Linux and Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Windows, use 'true' to include alternate data streams for restored files. For both systems, use 'false' to exclude this additional metadata.
    """
    shouldRestoreXAttrs: Boolean
    """

    Supported in v5.0+
    v5.0: Whether we should save the user-entered credentials
    v5.1-v7.0: A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
    v8.0+: Boolean value specifying whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
    """
    shouldSaveCredentials: Boolean
    """

    Supported in v5.1+
    v5.1-v7.0: A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore files. When 'true', the RBS restores files. When 'false',the VMware tools restores files.
    v8.0+: Boolean field specifying whether to use the Rubrik Backup Service or VMware tools to restore files. When 'true', the RBS restores files. When 'false',the VMware tools restores files.
    """
    shouldUseAgent: Boolean
    """

    Supported in v5.0+
    Username.
    """
    username: String
}

"Input for restoring files from Nutanix snapshot."
input RestoreFilesNutanixSnapshotInput {
    "Required. Configuration for a job to restore files to a source Nutanix virtual machine."
    config: NutanixRestoreFilesConfigInput!
    "Required. ID of snapshot."
    id: String!
}

"Supported in v7.0+"
input RestoreFormRequestInput {
    """

    Required. Supported in v7.0+
    Name of the backup file for which restore form needs to be generated.
    """
    backupFileName: String!
    """

    Required. Supported in v7.0+
    Passphrase that was used to encrypt the backup configuration.
    """
    encryptionPassword: String!
}

"Required. Input for restoring files from a snapshot of a Hyper-V virtual machine."
input RestoreHypervVirtualMachineSnapshotFilesInput {
    "Required. Configuration for a job to restore files from a snapshot."
    config: HypervRestoreFilesConfigInput!
    "Required. ID assigned to a snapshot."
    id: String!
}

"Configuration of the Kubernetes namespace snapshot to be restored and the target details."
input RestoreK8sNamespaceInput {
    "Filters resources based on labels."
    labelSelector: LabelSelector
    "The UUID of the Kubernetes namespace snapshot to be restored."
    snapshotUuid: UUID!
    "The UUID of the target cluster to restore the namespace snapshot to."
    targetClusterUuid: UUID!
    "The name of the target namespace to restore the namespace snapshot to."
    targetNamespaceName: String!
}

"Input for restoring an MSSQL database."
input RestoreMssqlDatabaseInput {
    """

    Required. v5.0-v5.1: Configuration for the restore.
    v5.2+: Restore configuration.
    """
    config: RestoreMssqlDbJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

"Supported in v5.0+"
input RestoreMssqlDbJobConfigInput {
    """

    Supported in v5.0+
    A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
    """
    finishRecovery: Boolean
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to copy data to the target system.
    """
    maxDataStreams: Int
    "Required. Supported in v5.0+"
    recoveryPoint: MssqlRecoveryPointInput!
}

"Configuration for O365 mailbox restore."
input RestoreO365MailboxInput {
    "Specifies the recovery type for the job."
    actionType: O365RestoreActionType!
    "Polaris ID of the mailbox."
    mailboxUuid: UUID!
    "Polaris ID of O365 subscription."
    orgUuid: UUID
    "Configuration for restore job."
    restoreConfigs: [RestoreObjectConfig!]!
    "Polaris ID of restoring snapshot."
    snapshotUuid: UUID
}

"Config for O365 Snappable Restore."
input RestoreO365SnappableInput {
    "Recovery action type for the job."
    actionType: O365RestoreActionType!
    "UUID of the target workload."
    destinationSnappableUuid: UUID!
    "Configuration for restore job."
    restoreConfig: SnappableRestoreConfig!
    "O365 Snappable Type."
    snappableType: SnappableType!
    "UUID of the source workload."
    sourceSnappableUuid: UUID!
}

"Input for restoring O365 Teams channel conversations."
input RestoreO365TeamsConversationsInput {
    " Information about the destination channel conversation."
    channelInfoForFullRestore: O365TeamConvChannelInput
    "Specifies whether the channel being restored is STANDARD or PRIVATE."
    channelRecoveryType: ChannelMembershipType!
    " Information about the destination Teams channel."
    destTeamsChannelInfo: TeamsChannelInfo
    "UUID of the O365 App used for authorization."
    o365AppId: String!
    "Specifies whether the newly created Teams channel should have the latest permissions, which maybe different from the permissions at backup time."
    recoverWithLatestPermissions: Boolean!
    "Encrypted refresh token."
    refreshTokenEncrypted: String!
    " Specifies whether a new destination channel needs to be created in Teams."
    shouldCreateDestChannel: Boolean!
    " Specifies whether file attachments in the conversation need to be restored."
    shouldRestoreFileAttachments: Boolean!
    "Specifies the sequence number of the snapshot being currently restored."
    snapshotSequenceNum: Int!
    "O365 Teams conversation channels to restore."
    teamChannels: [O365TeamConvChannelInput!]!
    " Teams unique identifier of the channel."
    teamUuid: UUID!
    " Filters Teams conversations based on the time of posts in the conversations."
    teamsConversationsSearchFilter: TeamsConversationsSearchFilter
}

"Input for restoring O365 Teams files."
input RestoreO365TeamsFilesInput {
    "Recovery task - Restore or Export."
    actionType: O365RestoreActionType!
    "Indicates whether the channel being restored is STANDARD or PRIVATE."
    channelRecoveryType: ChannelMembershipType!
    "Destination channel for the restore."
    destTeamsChannelInfo: TeamsChannelInfo
    "O365 Teams files to restore."
    filesToRestore: [FileInfo!]!
    "O365 Teams folders to restore."
    foldersToRestore: [FolderInfo!]!
    "Indicates whether a new channel with latest permissions will be created if a private channel is restored."
    recoverWithLatestPermissions: Boolean!
    "Specifies whether destination channel should be created."
    shouldCreateDestChannel: Boolean!
    "Specifies the sequence number of the snapshot being currently restored."
    snapshotSequenceNum: Int!
}

"Configuration for the mailbox object (email/folder) to be restored."
input RestoreObjectConfig {
    EmailID: String
    FolderID: String
    SnapshotUUID: UUID!
}

"Supported in v6.0+"
input RestoreOracleLogsConfigInput {
    """

    Required. Supported in v6.0+
    Filters for the archive logs to be restored. Exactly one of the filters should be set.
    """
    oracleLogRecoveryRange: OracleLogRecoveryRangeInput!
    """

    Required. Supported in v6.0+
    A Boolean value that determines whether to mount the archive log files to the target host without restoring the archive log files. The default value is true.
    """
    shouldMountFilesOnly: Boolean!
    """

    Supported in v6.0+
    The full path on the target host that serves as the mount point for the NFS share that contains the archive log files.
    """
    targetMountPath: String
    """

    Required. Supported in v6.0+
    The ID of the Oracle host or RAC object targeted by a job that restores Oracle database archive logs. The Oracle host or RAC object must have the Rubrik Backup Service (RBS) installed and connected.
    """
    targetOracleHostOrRacId: String!
}

input RestoreOracleLogsInput {
    "Required. Configuration parameters for a job to restore archive logs of the Oracle database."
    config: RestoreOracleLogsConfigInput!
    "Required. ID of the Oracle database."
    id: String!
}

"Supported in v5.0+"
input RestorePathPairInput {
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Original file path to be restored
    v6.0-v7.0: Original file path to be restored.
    v8.0+: Path of the original file to be restored.
    """
    path: String!
    """

    Supported in v5.0+
    v5.0-v7.0: Directory of the folder to copy files into. If this is empty, file will be restored back into original directory.
    v8.0+: Path of the destination folder where the files will be restored. When not configured, the files are restored to the original source folder.
    """
    restorePath: String
}

"Input for restoring volume group snapshot files."
input RestoreVolumeGroupSnapshotFilesInput {
    "Configuration information for a job to download files and folders from a volume group backup."
    config: VolumeGroupRestoreFilesConfigInput!
    "Filter for delta type."
    deltaTypeFilter: [DeltaType!]
    "Required. ID of Snapshot."
    id: String!
    "The FID of the next fileset snapshot."
    nextSnapshotFid: UUID
}

"Input for resuming archival location."
input ResumeTargetInput {
    "ID of the archival location."
    id: String = ""
}

"Input for putting a MongoDB source."
input RetryAddMongoSourceInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the MongoDB source."
    id: String!
    "Required. The request object containing parameters like username, password, and a list of hosts required to add a MongoDB source to the Rubrik cluster."
    mongoSourceRequestConfig: MongoSourceAddRequestConfigInput!
}

"Input required for revoking all roles of current organization from the given users and groups."
input RevokeAllOrgRolesInput {
    "List of group IDs."
    groupIds: [String!]
    "List of user IDs."
    userIds: [String!]
}

"Input parameters for rotating service account secret."
input RotateServiceAccountSecretInput {
    "ID of the service account."
    id: String!
}

input RunCustomAnalyzerInput {
    content: String = ""
    dictionaryCsv: String = ""
    regex: String = ""
}

input RunDetectMalwareInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Configuration for malware detection."
    malwareScanConfig: MalwareScanConfigInput!
}

"Supported in v6.0+"
input RunPolicyArgInput {
    """

    Supported in v6.0+
    List of node IDs where policies will be enforced.
    """
    nodeIds: [String!] = []
    """

    Required. Supported in v6.0+
    List of policy IDs.
    """
    policyIds: [String!]!
}

input SLAAuditDetailFilterInput {
    field: SLAAuditDetailFilterFieldEnum = USER_NAME
    text: String = ""
}

"Input to configure the SLA Domain for SAP HANA database."
input SapHanaConfigInput {
    "Frequency value for differential backup of SAP HANA databases."
    differentialFrequency: SlaDurationInput
    "Frequency value for incremental backup of SAP HANA databases."
    incrementalFrequency: SlaDurationInput
    "Specifies the duration for which the SAP HANA database logs will be retained."
    logRetention: SlaDurationInput
}

"Supported in v8.0+"
input SapHanaDownloadRecoverableRangeRequestInput {
    """

    Required. Supported in v8.0+
    Point in time for which the snapshots should be downloaded for recovery. The date-time string must be in the ISO8601 format. For example, "2016-01-01T01:23:45.678". The timezone is same as the timezone of the Rubrik cluster.
    """
    pointInTime: DateTime
    """

    Required. Supported in v8.0+
    ID of the location preferred for downloading the base full and log snapshots required for point in time recovery. The snapshots not available at the preferred location will be downloaded from the location where they are available.
    """
    preferredLocationId: String!
}

"Input for filtering SAP HANA log snapshots."
input SapHanaLogSnapshotFilterInput {
    "Filter by cluster UUID."
    clusterUuid: [UUID!]
    "Filter by start time of the log snapshots."
    fromTime: DateTime
    "Filter by the archival status of log snapshots. By default, archived snapshots are excluded."
    isArchived: Boolean
    "Filter by end time of the log snapshots."
    toTime: DateTime
    "Filter by SAP HANA database ID."
    workloadId: [String!]
}

"Input for filtering SAP HANA recoverable ranges."
input SapHanaRecoverableRangeFilterInput {
    "Filter by cluster UUID."
    clusterUuid: [UUID!]
    "Filter by SAP HANA database ID."
    databaseId: [String!]
    "Filter by start time for SAP HANA recoverable range."
    fromTime: DateTime
    "Filter by archival status of the SAP HANA recoverable range. By default archived recoverable ranges are excluded."
    isArchived: Boolean
    "Filter by end time for the SAP HANA recoverable range."
    toTime: DateTime
}

"Supported in v6.0+"
input SapHanaRestoreSourceConfigInput {
    """

    Supported in v6.0+
    ID of the source database.
    """
    snappableId: String
}

"Supported in v5.3+"
input SapHanaSslInfoInput {
    """

    Supported in v7.0+
    Library path for SAP HANA crypto library (libsapcrypto.so).
    """
    cryptoLibPath: String
    """

    Required. Supported in v5.3+
    The encryption provider for the SAPA HANA system. Possible values are OPENSSL, COMMON_CRYPTO, SAP_CRYPTO.
    """
    encryptionProvider: SapHanaSslInfoEncryptionProvider!
    """

    Supported in v7.0+
    Override the hostname used to verify the server's identity.
    """
    hostNameInCertificate: String
    """

    Required. Supported in v5.3+
    The path where the encryption key for the SAP HANA system is stored.
    """
    keyStorePath: String!
    """

    Supported in v7.0+
    Specifies whether to encrypt the database connection using SSL/TLS.
    """
    shouldEncrypt: Boolean
    """

    Supported in v7.0+
    Specifies whether to validate the SSL certificate of the SAP HANA DB server.
    """
    shouldValidateCertificate: Boolean
    """

    Supported in v7.0+
    Path to a trust store file that contains the public certificates of the SAP HANA DB server.
    """
    trustStorePath: String
}

"Supported in v5.3+"
input SapHanaSystemConfigInput {
    """

    Supported in v6.0+
    Data path details of the SAP HANA system.
    """
    dataPathSpec: SapHanaSystemDataPathSpecInput
    """

    Required. Supported in v5.3+
    The SAP HANA system hosts.
    """
    hostIds: [String!]!
    """

    Required. Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String!
    """

    Required. Supported in v5.3+
    The password of the SAP HANA system.
    """
    password: String!
    """

    Required. Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String!
    """

    Supported in v7.0+
    Information required to connect to SAP HANA database over SSL.
    """
    sslInfo: SapHanaSslInfoInput
    """

    Required. Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String!
}

"Supported in v6.0+"
input SapHanaSystemDataPathSpecInput {
    """

    Supported in v6.0+
    Data path of the SAP HANA BACKINT interface.
    """
    dataPathType: SapHanaDataPathType
}

"Supported in v5.3+"
input SapHanaSystemPatchInput {
    """

    Supported in v5.3+
    The ID of the SLA Domain that is configured for the SAP HANA system.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.3+
    The SAP HANA system hosts.
    """
    hostIds: [String!] = []
    """

    Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String
    """

    Supported in v5.3+
    The password of the SAP HANA system.
    """
    password: String
    """

    Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String
    """

    Supported in v7.0+
    Information required to connect to SAP HANA database over SSL.
    """
    sslInfo: SapHanaSslInfoInput
    """

    Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String
}

input ScheduledReportCreate {
    "List of attachment types for report emails."
    attachmentTypes: [ReportAttachmentType!]
    "Time of the day for daily report delivery."
    dailyTime: LocalTime
    "Date of the month for monthly report delivery."
    monthlyDate: Int
    "Time of the day for monthly report delivery on the configured monthly date."
    monthlyTime: LocalTime
    "List of email addresses of non-Rubrik user recipients of the scheduled report."
    nonRubrikRecipientEmails: [String!]!
    "ID of the report for which a schedule needs to be created."
    reportId: Int!
    "List of Rubrik user IDs that are the intended recipients of the scheduled report."
    rubrikRecipientUserIds: [String!]!
    "Title of the report."
    title: String!
    "Specifies whether to update the creator with the current user. This is typically used when the user account that was the schedule creator has been deleted from Rubrik. It will be null in createScheduledReport."
    updateCreator: Boolean
    "List of weekdays for weekly schedule of reports."
    weeklyDays: [WeekDay!]
    "Time of the day for weekly report delivery on the configured weekdays."
    weeklyTime: LocalTime
}

"Filters for the scheduled report list"
input ScheduledReportFilterInput {
    reportId: Int
}

"Parameters for mail or folder search."
input SearchFilter {
    emailAddresses: [EmailAddressFilter!] = []
    fromTime: DateTime
    searchKeywordFilter: SearchKeywordFilter
    searchObjectFilter: SearchObjectFilter
    untilTime: DateTime
}

"Search keyword and keyword type."
input SearchKeywordFilter {
    keywordType: SearchKeywordType = SUBJECT
    searchKeyword: String = ""
}

"Input for InternalSearchNutanixVm."
input SearchNutanixVmInput {
    "Pagination cursor returned by the previous request."
    cursor: String
    """

    Required. v5.0-v5.3: ID of the vm
    v6.0-v8.0: ID of the vm.
    v9.0: ID of the virtual machine.
    """
    id: String!
    "Maximum number of entries in the response."
    limit: Int
    "Required. The path query. Either path prefix or filename prefix."
    path: String!
}

"Search object type."
input SearchObjectFilter {
    searchObjectType: SearchObjectType = FOLDER
}

"Input for searching a file within the SnapMirror Cloud workload."
input SearchSnapMirrorCloudInput {
    "Pagination cursor returned by the previous request."
    cursor: String
    "Required. The Rubrik ID of the SnapMirrorCloud to search."
    id: String!
    "Maximum number of entries in the response."
    limit: Int
    "Required. The path query. Either path prefix or filename prefix."
    path: String!
}

"Recovery specification for selector."
input SelectorRecoverySpec {
    "Recovery destination."
    recoveryDestination: RecoveryDestinationType!
    "Recovery point."
    recoveryPoint: Long!
    "Subscription ID of the destination."
    targetSubscriptionId: UUID!
}

"When an org member adds an object to Rubrik that matches the provided (`inventoryRoot`, `inventoryWorkloadType`) category, the org is granted all permission operations specified within the `operations` field on that new object."
input SelfServicePermissionInput {
    "The inventory hierarchy root to which this set of permissions will apply."
    inventoryRoot: InventorySubHierarchyRootEnum!
    "The inventory workload type to which this set of permissions will apply."
    inventoryWorkloadType: WorkloadLevelHierarchy!
    "The operations granted to the org on newly added objects matching the provided `inventoryRoot` and `inventoryWorkloadType`."
    operations: [Operation!]!
}

"Input for sending report email to one or more recipients."
input SendScheduledReportAsyncInput {
    "Email addresses of non-Rubrik user recipients of the report."
    nonRubrikUserEmails: [String!]
    "ID of the report that needs to be emailed."
    reportId: Int!
    "Auth0 IDs of Rubrik user recipients of the report."
    rubrikUserIds: [String!]
}

"Input for sending a scheduled report."
input SendScheduledReportInput {
    "ID of the scheduled report to edit."
    id: Int!
    "Auth0 IDs of Rubrik recipients. This field has been deprecated in favor of rubrikRecipientIDs."
    recipients: [String!]!
}

"Input for setting the app credentials in the Azure Cloud Accounts."
input SetAzureCloudAccountCustomerAppCredentialsInput {
    "Client ID of the Application."
    appId: String!
    "Name of the application."
    appName: String
    "Client secret key of the Application."
    appSecretKey: String!
    "ID of the home tenant of the application."
    appTenantId: String
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudType! = AZUREPUBLICCLOUD
    "Specifies whether the input app should replace the existing app."
    shouldReplace: Boolean!
    "Domain Name of the Azure tenant."
    tenantDomainName: String
}

"Set datastore freespace threshold."
input SetDatastoreFreespaceThresholdInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: UUID!
    "Required. JSON object for setting datastore freespace threshold."
    datastoreFreespaceThreshold: VmwareDatastoreFreespaceThresholdInput!
}

"Set datastore freespace thresholds."
input SetDatastoreFreespaceThresholdsInput {
    "List of datastore freespace threshold configurations to set."
    thresholds: [SetDatastoreFreespaceThresholdInput!]!
}

"MFA settings to update for a LDAP integration."
input SetLdapMfaSettingInput {
    "Optional boolean value indicating whether TOTP is enforced for the given LDAP integration. If omitted, existing value of the setting is kept."
    isTotpEnforced: Boolean
    "ID of the LDAP integration."
    ldapId: String = ""
}

"MFA settings to update for an account."
input SetMfaSettingInput {
    "Optional boolean value indicating whether TOTP is globally enforced. If omitted, existing value of the setting is kept."
    isTotpEnforcedGlobal: Boolean
    "Optional integer value indicating the time of remembering the MFA login in hours. If omitted, existing value of the setting is kept."
    mfaRememberHours: Int
    "Optional integer value indicating the period of showing TOTP configuration reminder in hours. If omitted, existing value of the setting is kept."
    totpReminderHours: Int
}

"Request to set Ransomware Investigation enabled or not."
input SetRansomwareInvestigationEnabledInput {
    "Specifies whether to enable Ransomware Investigation or not."
    enabled: Boolean!
    "The ID of entity being enabled."
    entityId: String!
    "The type of entity for which Ransomware Investigation is being enabled."
    entityType: RansomwareInvestigationEnablementEntity!
}

input SetTotpConfigInput {
    "TOTP one-time password."
    otp: String = ""
    "TOTP secret for setting up TOTP as 2FA."
    secret: String = ""
    userId: String = ""
}

"Set upgrade type in cluster."
input SetUpgradeTypeInput {
    "Cluster UUID."
    clusterUuid: UUID!
    "Upgrade type."
    upgradeType: UpgradeType!
}

input SetUserLevelTotpEnforcementInput {
    "Indicate if TOTP is enforced at user level."
    isEnforced: Boolean = false
    "Users for whom TOTP is enforced."
    userIds: [String!] = []
}

input SetWebSignedCertificateInput {
    "Required. Request to update certificate for web server."
    certificatePayload: WebServerCertificatePayloadInput!
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

"Input required for setting workload alert."
input SetWorkloadAlertSettingInput {
    "Cluster ID of the workload."
    clusterId: String = ""
    "Specifies whether alerts should be enabled or not enabled."
    enabled: Boolean = false
    "Fid of the workload."
    workloadFid: String = ""
}

"Input for SetWwwTlsCert."
input SetWwwTlsCertInputType {
    "ID of certificate."
    certificateId: Long = 0
}

"Input required to setup backups."
input SetupCloudNativeSqlServerBackupInput {
    "Credentials for the admin in the databases."
    adminCredentials: LoginCredentials
    "Mechanism for SQL Server authentication."
    authMechanism: SqlAuthenticationMechanism
    "Rubrik IDs of the SQL Server databases."
    databaseIds: [UUID!]!
    "Session ID for the OAuth session."
    sessionId: String
}

input SetupDiskInput {
    "Required. ID of an unformatted disk to set up."
    diskId: String!
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
}

"Represents the sharepoint doc lib contents to be restored."
input SharePointDriveRestoreConfig {
    docLibName: String
    driveRestoreConfig: DriveRestoreConfig!
    parentSiteUuid: UUID
}

"Represents the objects or items to be restored from a site collection. Either the SharePoint object or SharePoint items should be populated, but not both."
input SharePointFullRestoreConfig {
    "The name for the new object."
    newObjectName: String
    "Type of object to create under the target."
    newObjectType: SnappableType
    "Create a new object under the target if true."
    shouldCreateNewObject: Boolean!
    "The items to restore, if browsing within a document library, list, or web part."
    spItemsToRestore: SharePointItems
    "The object (list, document library, web part, or site) to restore."
    spObjectToRestore: SharePointObject
    "Type of the target."
    targetObjectType: SnappableType
    "The Polaris ID of the target when restoring to a new location."
    targetObjectUuid: UUID
}

"Represents the SharePoint items in a site collection to be restored."
input SharePointItems {
    "Specifies whether these SharePoint items are Page Library items or not."
    arePageLibraryItems: Boolean!
    "The files to restore when the parent object is a document library."
    fileItems: [FileInfo!]!
    "The folder items to restore."
    folderItems: [FolderInfo!]!
    "The list items to restore when the parent object is a list."
    listItems: [SharePointListItem!]!
    "ID of the object in SharePoint Online."
    sharepointId: String!
    "Type of the parent object."
    snappableType: SnappableType
}

"Represents the SharePoint list item to be restored."
input SharePointListItem {
    "ID of the item to restore."
    itemId: String!
    "Name of the item to restore."
    itemName: String!
    "List of snapshots of this item to restore."
    itemSnapshotsToRestore: [SharePointListItemSnapshot!]!
}

"Represents the SharePoint list item snapshot to be restored."
input SharePointListItemSnapshot {
    "Id to snapshot to restore."
    snapshotId: UUID!
    "Number of snapshot to restore."
    snapshotNum: Int!
}

"Represents the sharepoint list contents to be restored."
input SharePointListRestoreConfig {
    "List of list folders to restore."
    foldersToRestore: [FolderInfo!]!
    "List of list items to restore."
    itemsToRestore: [SharePointListItem!]!
    "Destination list name."
    listName: String
    "Destination site ID."
    parentSiteUuid: UUID
    "Path within destination list to restore to."
    restoreFolderPath: String!
}

"Represents the SharePoint object (document library, list, site, or web part) to be restored."
input SharePointObject {
    "Name or title of the object."
    objectName: String!
    "ID of the object in SharePoint Online."
    objectSharepointId: String!
    "Type of the object."
    objectType: SnappableType
    "UUID of the snapshot for recovery."
    snapshotId: UUID!
    "Sequence number of the snapshot."
    snapshotNum: Int!
}

"Parameters for SharePoint site descendant search."
input SharePointSearchFilter {
    "Filters by on create time."
    createTime: TimeRangeFilter
    "Filters by modified time."
    modifiedTime: TimeRangeFilter
    "Filters by keywords appearing in the descendant object name."
    searchKeywordFilter: SharePointSearchKeywordFilter
    "Filters by object type (site, library, list or all)."
    searchObjectFilter: SharePointSearchObjectFilter
}

"SharePoint search keyword and keyword type."
input SharePointSearchKeywordFilter {
    "Type of the keyword."
    keywordType: SharePointSearchKeywordType = KEYWORD_UNSPECIFIED
    "The keyword used to search."
    searchKeyword: String = ""
}

"SharePoint search object type."
input SharePointSearchObjectFilter {
    "Object type to filter search results."
    searchObjectType: SharePointSearchObjectType = OBJECT_UNSPECIFIED
}

"Specifies whether the change should be applied to existing snapshots."
input ShouldApplyToExistingSnapshots {
    "True or false."
    value: Boolean = false
}

"Specifies whether the change should be applied to non-policy snapshots."
input ShouldApplyToNonPolicySnapshots {
    "True or false."
    value: Boolean = false
}

"Input to get SLA Archival warnings."
input SlaArchivalWarningsInput {
    "Archival Group Id to be validated."
    archivalGroupId: String = ""
    "Mapping between archival location and Rubrik cluster."
    archivalLocationToClusterMapping: [ArchivalLocationToClusterMappingInput!] = []
    "Archival Threshold of Global Sla."
    archivalThreshold: Int = 0
    "Archival Threshold Unit of Global Sla."
    archivalThresholdUnit: RetentionUnit = MINUTES
    "Archives all snapshots taken with the specified frequency."
    frequencies: [RetentionUnit!] = []
    "Snapshot schedule of Global Sla."
    snapshotSchedule: GlobalSnapshotScheduleInput
}

"Input to SLA Domain duration."
input SlaDurationInput {
    "Duration of SLA Domain."
    duration: Int = 0
    "Unit of duration."
    unit: RetentionUnit = MINUTES
}

"SLA Domain log frequency configuration."
input SlaLogFrequencyConfig {
    "Retention of the log frequency configuration."
    retention: SlaDurationInput
}

"Supported in v5.3+"
input SlaManagedVolumeClientConfigInput {
    """

    Required. Supported in v5.3+
    Specifies configuration information for the main backup script that backs up data from the host.
    """
    backupScript: SlaManagedVolumeScriptConfigInput!
    """

    Required. Supported in v5.3+
    v5.3-v6.0: A list of mount paths where the host mounts individual channels for managed volumes.
    v7.0+: A list of mount paths where the host mounts individual channels for Managed Volumes.
    """
    channelHostMountPaths: [String!]!
    """

    Required. Supported in v5.3+
    v5.3-v6.0: The ID of the host that mounts the managed volume channels and where the backup scripts run.
    v7.0+: The ID of the host that mounts the Managed Volume channels and location where the backup scripts are run.
    """
    clientHostId: String!
    """

    Supported in v5.3+
    v5.3-v6.0: Specifies configuration information for the optional post-backup script that runs after data backup failed.
    v7.0+: Specifies configuration information for the optional post-backup script that runs if data backup fails.
    """
    postBackupScriptOnBackupFailure: SlaManagedVolumeScriptConfigInput
    """

    Supported in v5.3+
    v5.3-v6.0: Specifies configuration information for the optional post-backup script that runs after data backup is complete.
    v7.0+: Specifies configuration information for the optional post-backup script that runs after data backup completes.
    """
    postBackupScriptOnBackupSuccess: SlaManagedVolumeScriptConfigInput
    """

    Supported in v5.3+
    Specifies configuration information for the optional pre-backup script that runs before data backup begins.
    """
    preBackupScript: SlaManagedVolumeScriptConfigInput
    """

    Supported in v5.3+
    Specifies whether a failure of the pre-backup script halts the backup process.
    """
    shouldCancelBackupOnPreBackupScriptFailure: Boolean
    """

    Required. Supported in v5.3+
    v5.3-v6.0: The name of the user that runs the scripts on the host.
    v7.0+: Name of the user running the scripts on the host.
    """
    username: String!
}

"Supported in v5.3+"
input SlaManagedVolumeScriptConfigInput {
    "The full command, with arguments, to run the script."
    scriptCommand: String!
    """

    Supported in v5.3+
    v5.3-v6.0: An optional timeout for the script in seconds. When this value is 0 or unspecified no timeout is used.
    v7.0+: Optional timeout, in seconds, for the script. When this value is 0 or unspecified, the script does not use a timeout.
    """
    timeout: Long
}

"Filter for SlaStatus."
input SlaStatusFilterInput {
    "Field for SLA Status Filter."
    field: SlaStatusFilterField = CLUSTER_NAME
    "Text for SLA Status Filter."
    text: String = ""
}

"Supported in v5.0+"
input SmbConfigInput {
    """

    Required. Supported in v5.0+
    A Boolean that specifies whether or not the cluster enforces SMB security. When this value is 'true,' SMB security is enforced. When this value is 'false,' SMB security is not enforced. The default value is 'false.'
    """
    enforceSmbSecurity: Boolean!
}

"Supported in v5.0+"
input SmbDomainAddRequestInput {
    """

    Required. Supported in v5.0+
    Specifies name to identify Active Directory domain for SMB authentication.
    """
    name: String!
    smbDomainJoinRequest: SmbDomainJoinRequestInput
}

"Filter SMB domain results."
input SmbDomainFilterInput {
    "Type of filter."
    field: SmbDomainFilterField = FIELD_UNSPECIFIED
    "Values for the filter type."
    texts: [String!] = []
}

"Supported in v5.0+"
input SmbDomainJoinRequestInput {
    """

    Supported in v5.0+
    Specifies the computer user and service principal name to create while joining Active Directory. Microsoft requires that this name should be a valid NETBIOS name and must be unique across the forest of this Active directory.
    """
    computerAccountName: String
    """

    Supported in v5.0+
    Specifies organization unit to create the computer user after joining Active Directory.
    """
    creationOrganizationUnit: String
    """

    Supported in v5.0+
    v5.0: Specifies an ordered list of domain controllers that are used to communicate with Active Directory domains.

    v5.1+:
    """
    domainControllers: [String!] = []
    """

    Supported in v5.0+
    A Boolean value that determines whether to run the SMB service when no shares are exposed. When this value is 'true,' the SMB service runs even when no shares are exposed. When this value is 'false,' the SMB service does not run when no shares are exposed.
    """
    isStickySmbService: Boolean
    """

    Required. Supported in v5.0+
    Password for joining Active Directory.
    """
    password: String!
    """

    Required. Supported in v5.0+
    Username for joining Active Directory.
    """
    username: String!
}

"Sort SMB domain results."
input SmbDomainSortByInput {
    "Field for SMB domain sort by."
    field: SmbDomainSortByField = FIELD_UNSPECIFIED
    "Sort order for SMB domain sort by."
    sortOrder: SortOrder = ASC
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to create a SnapMirror Cloud workload.
"""
input SnapMirrorCloudCreateInput {
    "Supported in v7.0+"
    nasVolumeId: String
    "Supported in v7.0+"
    snapMirrorLabel: String
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to restore files from SnapMirror Cloud snapshot.
"""
input SnapMirrorCloudRestoreParametersInput {
    """

    Supported in v7.0+
    Optional. A Boolean that specifies whether to ignore errors during the restore operation. By default, this value is false.
    """
    ignoreErrors: Boolean
    """

    Required. Supported in v7.0+
    A Boolean that specifies whether the restore operation is for the entire volume.
    """
    isVolumeRestore: Boolean!
    """

    Supported in v7.0+
    The name of the aggregate on the NetApp system under which to create the new volume.
    """
    netAppAggregateName: String
    """

    Supported in v7.0+
    The path relative to the root of the NAS share of the source file. If the restore operation is not using the original source path, also includes the new destination path.
    """
    restorePathPairs: [SnapMirrorCloudRestorePathPairInput!] = []
    """

    Supported in v7.0+
    The Rubrik ID of the NAS namespace on which to create the new volume to which the data should be exported.
    """
    targetNasNamespaceId: String
    """

    Supported in v7.0+
    The Rubrik ID of the NAS system on which to create the new volume to which the data should be exported.
    """
    targetNasSystemId: String
    """

    Supported in v7.0+
    The Rubrik ID of the NAS volume to which the data should be exported.
    """
    targetNasVolumeId: String
    """

    Supported in v7.0+
    The name of the new volume to create to which the data should be exported.
    """
    targetNasVolumeName: String
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to restore a file from a SnapMirror Cloud snapshot.
"""
input SnapMirrorCloudRestorePathPairInput {
    """

    Supported in v7.0+
    Absolute path to the restore or export destination for files and folders.
    """
    dstPath: String
    """

    Required. Supported in v7.0+
    Path relative to the root of the NAS share of the files/folders to restore or export.
    """
    srcPath: String!
}

"Input for browsing (list files and directories) SnapMirrorCloud snapshots."
input SnapMirrorCloudSnapshotFilesInput {
    "Required. The ID of the snapshot to browse."
    id: String!
    "Maximum number of entries in the response."
    limit: Int
    "Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries."
    offset: Int
    "Required. The absolute path of the starting point for the directory listing."
    path: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to update a SnapMirror Cloud workload.
"""
input SnapMirrorCloudUpdateConfigInput {
    "Required. Supported in v7.0+"
    snapMirrorLabel: String!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to update the SnapMirror Cloud protected objects.
"""
input SnapMirrorCloudUpdateInput {
    "Required. Supported in v7.0+"
    snapMirrorCloudId: String!
    "Required. Supported in v7.0+"
    snapMirrorLabel: String!
}

input SnappableFailoverInfoType {
    recoveryPoint: Long!
    snappableId: String!
}

"Filter workload data."
input SnappableFilterInput {
    "The cluster UUID of the workload."
    cluster: CommonClusterFilterInput
    "The compliance status of the workload."
    complianceStatus: [ComplianceStatusEnum!]
    "List of workload types to exclude. This should NOT be specified along with objectType."
    excludedObjectTypes: [ObjectTypeEnum!]
    "The object type of the workload."
    objectType: [ObjectTypeEnum!]
    "The organization ID of the workload."
    orgId: [UUID!]
    "The protection status of the workload."
    protectionStatus: [ProtectionStatusEnum!]
    "The search term applied to the workload."
    searchTerm: String
    "The SLA Domain of the workload."
    slaDomain: SnappableSlaDomainFilterInput
    "The SLA Domain time range applied to the workload."
    slaTimeRange: SlaComplianceTimeRange
}

"Filter workload data, including search capability."
input SnappableFilterInputWithSearch {
    "The cluster UUID of the workload."
    cluster: CommonClusterFilterInput
    "The compliance status of the workload."
    complianceStatus: [ComplianceStatusEnum!]
    "List of workload types to exclude. This should NOT be specified along with objectType."
    excludedObjectTypes: [ObjectTypeEnum!]
    "The object type of the workload."
    objectType: [ObjectTypeEnum!]
    "The organization ID of the workload."
    orgId: [UUID!]
    "The protection status of the workload."
    protectionStatus: [ProtectionStatusEnum!]
    "The search term applied to the workload."
    searchTerm: String
    "The SLA Domain of the workload."
    slaDomain: SnappableSlaDomainFilterInput
    "The SLA Domain time range applied to the workload."
    slaTimeRange: SlaComplianceTimeRange
    timeRange: TimeRangeInput
}

"Filter snappable data in group by."
input SnappableGroupByFilterInput {
    "The cluster UUID of the workload."
    cluster: CommonClusterFilterInput
    "The compliance status of the workload."
    complianceStatus: [ComplianceStatusEnum!]
    "List of workload types to exclude. This should NOT be specified along with objectType."
    excludedObjectTypes: [ObjectTypeEnum!]
    "The object type of the workload."
    objectType: [ObjectTypeEnum!]
    "The organization ID of the workload."
    orgId: [UUID!]
    "The protection status of the workload."
    protectionStatus: [ProtectionStatusEnum!]
    "The SLA Domain of the workload."
    slaDomain: SnappableSlaDomainFilterInput
    "The SLA Domain time range applied to the workload."
    slaTimeRange: SlaComplianceTimeRange
    timeRange: TimeRangeInput
}

"List of snappable IDs and recovery points."
input SnappableIdentifierInput {
    "Point in time to which to recover the VM."
    recoveryPoint: Long
    "Snappable ID of the blueprint child."
    snappableId: UUID!
    "Snappable type."
    snappableType: ObjectTypeEnum!
}

"Input for snappable info."
input SnappableInfoType {
    "Id of the snappable."
    id: String = ""
    "Recovery point of a snappable."
    recoveryPoint: Long = 0
}

input SnappablePathInput {
    snappableFid: String = ""
    stdPath: String = ""
}

"Represents the snappable contents to be restored."
input SnappableRestoreConfig {
    "Restore configuration for Mailbox jobs."
    MailboxRestoreConfig: MailboxRestoreConfig
    "Restore configuration for Onedrive jobs."
    OneDriveRestoreConfig: DriveRestoreConfig
    "Restore configuration for SharePoint drive jobs."
    SharePointDriveRestoreConfig: SharePointDriveRestoreConfig
    "Restore configuration for Teams jobs."
    TeamsRestoreConfig: TeamsRestoreConfig
    "Restore configuration for Calendar jobs."
    calendarRestoreConfig: CalendarRestoreConfig
    "Restore configuration for Contacts jobs."
    contactsRestoreConfig: ContactsRestoreConfig
    "Restore configuration for full SharePoint jobs."
    sharePointFullRestoreConfig: SharePointFullRestoreConfig
    "Restore configuration for SharePoint list jobs."
    sharePointListRestoreConfig: SharePointListRestoreConfig
}

"Filter workload data based on the properties of its SLA Domain."
input SnappableSlaDomainFilterInput {
    id: [String!]
}

"Input to query snappables with legal hold snapshots."
input SnappablesWithLegalHoldSnapshotsInput {
    "Rubrik cluster UUID of the workload."
    clusterUuid: String!
    "Filter Parameters list."
    filterParams: [LegalHoldQueryFilter!]!
    "Sorting Parameters."
    sortParam: LegalHoldSortParam
}

"Filtering results with this delta type."
input SnapshotDeltaFilterInput {
    "Delta type to filter for."
    deltaType: [DeltaType!]
}

"Filter snapshots."
input SnapshotQueryFilterInput {
    "Type of filter."
    field: SnapshotQueryFilterField = SLA_ID
    "Snapshots from linked workloads."
    shouldFetchLinked: Boolean = false
    "Additional Information for the filter type."
    text: String = ""
    "List of search texts for the filter type."
    textList: [String!] = []
    time: DateTime
    "Snapshot types to be filtered."
    typeFilters: [SnapshotTypeEnum!] = []
}

"Input for getting malware information for snapshots."
input SnapshotsMalwareInfoInput {
    "End time."
    endTime: DateTime
    "Pagination."
    pagination: PaginationParam
    "Sort order."
    sortOrder: SortOrder!
    "Start time."
    startTime: DateTime
    "Workload FIDs."
    workloadFids: [String!]!
}

"""

Supported in v5.0+
v5.0-v5.1: SNMP service configuration object.
v5.2+: SNMP service configuration object summary.
"""
input SnmpConfigurationInput {
    """

    Supported in v5.0+
    v5.0-v5.1: communicatyString is a user specified string for authentication to access SNMP statistics.

    v5.2+: communityString is a user specified string for authentication to access SNMP statistics. Provides access to MIBs using SNMP v2c.
    """
    communityString: String
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether the SNMP service is enabled. Set the value to true to enable the SNMP service and false to disable the SNMP service.
    """
    isEnabled: Boolean!
    """

    Required. Supported in v5.0+
    The SNMP agent port on the Rubrik cluster node.
    """
    snmpAgentPort: Int!
    """

    Supported in v5.0+
    Array of SNMP trap receivers for the SNMP service.
    """
    trapReceiverConfigs: [SnmpTrapReceiverConfigInput!] = []
    """

    Supported in v5.2+
    Array of usernames for the SNMP service. Provides access to MIBs using SNMP v3.
    """
    users: [String!] = []
}

"""

Supported in v5.2+
SNMP service configuration object.
"""
input SnmpConfigurationPatchInput {
    """

    Supported in v5.2+
    communityString is a user specified string for authentication to access SNMP statistics. Provides access to MIBs using SNMP v2c.
    """
    communityString: String
    """

    Required. Supported in v5.2+
    Boolean value that specifies whether the SNMP service is enabled. Set the value to true to enable the SNMP service and false to disable the SNMP service.
    """
    isEnabled: Boolean!
    """

    Required. Supported in v5.2+
    The SNMP agent port on the Rubrik cluster node.
    """
    snmpAgentPort: Int!
    """

    Supported in v5.2+
    Array of SNMP trap receivers for the SNMP service.
    """
    trapReceiverConfigs: [SnmpTrapReceiverConfigInput!] = []
    """

    Supported in v5.2+
    Array of users for the SNMP service. Provides access to MIBs using SNMP v3.
    """
    users: [SnmpUserConfigInput!] = []
}

"""

Supported in v5.0+
SNMP trap receiver configuration object.
"""
input SnmpTrapReceiverConfigInput {
    """

    Required. Supported in v5.0+
    IPv4 address or FQDN of the SNMP trap receiver host.
    """
    address: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1: The snmp trap port on the SNMP trap receiver host.
    v5.2+: The SNMP trap port on the SNMP trap receiver host.
    """
    port: Int!
    """

    Supported in v5.2+
    Specifies the security level for the SNMP trap receiver host. If a trap receiver user is specified, a securityLevel must be specified.
    """
    securityLevel: SnmpSecurityLevel
    """

    Supported in v5.2+
    Specifies the user for the SNMP trap receiver host. A valid user is required in order to use SNMP v3. The specified user must be a valid user in the users field of the SNMP configuration. When no user is specified, SNMP v2c traps are sent to the SNMP trap receiver host. If a trap receiver user is specified, the trap receiver security level must also be specified.
    """
    user: String
}

"""

Supported in v5.2+
SNMP user configuration object.
"""
input SnmpUserConfigInput {
    """

    Required. Supported in v5.2+
    Authentication password for the SHA hash.
    """
    authPassword: String!
    """

    Required. Supported in v5.2+
    Password for AES encryption.
    """
    privPassword: String!
    """

    Required. Supported in v5.2+
    Username for SNMP v3 MIB access.
    """
    username: String!
}

"Parameters to filter reports."
input SonarContentReportFilter {
    "Flag to hide or show allowed hits in report."
    applyWhitelists: Boolean = false
    "List of CDM clusters to filter report."
    clusterIds: [String!] = []
    objectTypes: [HierarchyObjectTypeEnum!]!
    "List of policies to filter reports."
    policyIds: [String!] = []
    "Search keyword to filter reports."
    search: String = ""
    "List of M365 subscriptions to filter reports."
    subscriptionIds: [String!] = []
}

"""

Supported in m3.2.0-m4.2.0
Source Object.
"""
input SourceInput {
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: If the call should be async.
    m4.1.0-m4.2.0: If call should be async.
    """
    async: Boolean
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: List of cassandra yaml.
    m4.1.0-m4.2.0: List of cassandra yaml files.
    """
    cassandraYaml: [String!] = []
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: List of dse yaml.
    m4.1.0-m4.2.0: List of dse yaml files.
    """
    dseYaml: [String!] = []
    """

    Supported in m3.2.0-m4.2.0
    Whether ssl enabled.
    """
    enableSsl: Boolean
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Https certificate to connect.
    m4.1.0-m4.2.0: HTTPS certificate.
    """
    httpsCertificate: String
    """

    Supported in m3.2.0-m4.2.0
    Ignore secondaries.
    """
    ignoreSecondaries: [String!] = []
    """

    Supported in m3.2.0-m4.2.0
    JMX password.
    """
    jmxPassword: String
    """

    Supported in m3.2.0-m4.2.0
    JMX user.
    """
    jmxUser: String
    """

    Supported in m3.2.0-m4.2.0
    If parameter is encoded.
    """
    parameterEncoded: Boolean
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Auth key for source.
    m4.1.0-m4.2.0: Source auth key.
    """
    sourceAuthKey: String
    """

    Supported in m3.2.0-m4.2.0
    Auth key file for source.
    """
    sourceAuthKeyfile: String
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source auth passphrase.
    m4.1.0-m4.2.0: Auth passphrase for source.
    """
    sourceAuthPassphrase: String
    """

    Supported in m3.2.0-m4.2.0
    Source driver password.
    """
    sourceDriverPassword: String
    """

    Supported in m3.2.0-m4.2.0
    Source driver user.
    """
    sourceDriverUser: String
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source https port.
    m4.1.0-m4.2.0: Source HTTPS port.
    """
    sourceHttpsPort: String
    """

    Required. Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: List of source IPs.
    m4.1.0-m4.2.0: Https certificate to connect.
    """
    sourceIp: [String!]!
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String!
    """

    Supported in m3.2.0-m4.2.0
    Source password.
    """
    sourcePassword: String
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source port number.
    m4.1.0-m4.2.0: Source port.
    """
    sourcePort: String
    """

    Supported in m3.2.0-m4.2.0
    Source rpc port.
    """
    sourceRpcPort: String
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source SSH Port number.
    m4.1.0-m4.2.0: Source SSH port.
    """
    sourceSshPort: String
    """

    Required. Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source type.
    m4.1.0-m4.2.0: Type of the source.
    """
    sourceType: SourceSourceType!
    """

    Supported in m3.2.0-m4.2.0
    m3.2.0-m4.0.1: Source username.
    m4.1.0-m4.2.0: Source user.
    """
    sourceUser: String
    """

    Supported in m3.2.0-m4.2.0
    SSD CA certificate.
    """
    sslCaCerts: String
    """

    Supported in m3.2.0-m4.2.0
    SSL Cert Reqs.
    """
    sslCertReqs: SourceSslCertReqs
    """

    Supported in m3.2.0-m4.2.0
    SSL certificate file.
    """
    sslCertfile: String
    """

    Supported in m3.2.0-m4.2.0
    SSL keyfile.
    """
    sslKeyfile: String
}

"Specific replication specification."
input SpecificReplicationSpecInput {
    "Bidirectional replication specifications."
    bidirectionalSpecInput: BidirectionalReplicationSpecInput
    "Cloud location specification."
    cloudLocationSpecInput: ReplicationToCloudLocationSpecInput
    "Cloud region specification."
    cloudRegionSpecInput: ReplicationToCloudRegionSpecInput
    "Unidirectional replication specifications."
    unidirectionalSpecInput: UnidirectionalReplicationSpecInput
}

"Input required to start the job to disable AWS Exocompute."
input StartAwsExocomputeDisableJobInput {
    "Rubrik ID of the account for which Exocompute should not be enabled."
    cloudAccountId: UUID!
}

"Input to trigger AWS native account disable job."
input StartAwsNativeAccountDisableJobInput {
    "Rubrik ID of AWS account."
    awsAccountRubrikId: UUID!
    "Type of native protection to not be enabled."
    awsNativeProtectionFeature: AwsNativeProtectionFeature!
    "Specifies whether to delete snapshots in the account."
    shouldDeleteNativeSnapshots: Boolean!
}

"Input to initiate a job to create AWS EC2 instance snapshots."
input StartAwsNativeEc2InstanceSnapshotsJobInput {
    "List of Rubrik EC2 instance IDs."
    ec2InstanceIds: [UUID!]!
    "Retention SLA Rubrik ID."
    retentionSlaId: String = ""
}

"Input to initiate job to create AWS RDS Instance snapshots."
input StartAwsNativeRdsInstanceSnapshotsJobInput {
    "List of Rubrik UUIDs of the RDS Instances."
    rdsInstanceIds: [UUID!]!
    "ID of the SLA Domain to be used for retention of the snapshots that are created by the RDS instance snapshot job."
    retentionSlaId: String = ""
}

"Input for initiating authentication of the Azure Cloud Accounts."
input StartAzureCloudAccountOauthInput {
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudType = AZUREPUBLICCLOUD
    "Domain name of the Azure Tenant."
    tenantDomainName: String
}

"Input for starting bulk recovery."
input StartBulkRecoveryInput {
    "Bulk recovery definition."
    definition: BulkRecoveryDefinition!
}

"Input required to trigger a job to create an index of snapshots."
input StartCloudNativeSnapshotsIndexJobInput {
    "The IDs of snapshots whose index needs to be generated."
    snapshotIds: [UUID!]!
}

"Input to initiate the snapshot creation job for AWS native EBS volume."
input StartCreateAwsNativeEbsVolumeSnapshotsJobInput {
    "Rubrik UUIDs of EBS volumes for snapshot creation."
    ebsVolumeIds: [UUID!]!
    "Retention SLA ID to be used for the snapshots to be created."
    retentionSlaId: String = ""
}

"Input to initiate a job to create Azure Native Managed Disk snapshots."
input StartCreateAzureNativeManagedDiskSnapshotsJobInput {
    "Rubrik UUIDs of the managed disks whose snapshots are to be taken.."
    managedDiskRubrikIds: [UUID!]!
    "The ID of the SLA Domain assigned to protect the on-demand snapshot."
    retentionSlaId: String
}

"Input to initiate a job to create Azure Native Virtual Machine snapshots."
input StartCreateAzureNativeVirtualMachineSnapshotsJobInput {
    "Retention SLA ID of the on-demand snapshot."
    retentionSlaId: String
    "Rubrik UUIDs of the Virtual Machines (VMs) whose snapshots are to be taken."
    virtualMachineRubrikIds: [UUID!]!
}

"Input to start the cyber recovery job."
input StartCyberRecoveryInput {
    "The ID of the Recovery Plan to be recovered."
    blueprintId: UUID!
    childSnappableFailoverInfos: [SnappableFailoverInfoType!]
    "The type of the data transfer, LIVEMOUNT."
    dataTransferType: DataTransferType
    "The failure action of failover, PAUSE or CLEANUP."
    failoverFailureAction: String
    "Errors that should be ignored during cyber recovery."
    failoverIgnorableErrors: [BlueprintFailoverIgnorableError!]
    "The operation of the failover, Start or Resume."
    failoverOperation: String
    "The type of the failover job, ISOLATED_RECOVERY."
    failoverType: String!
    jobTriggerEmail: String
    "The recovery name."
    recoveryName: String
    "The ID of the Recovery Spec to use for cyber recovery."
    recoverySpecId: UUID!
    "The type of the target location, CDM, AZURE, AWS or GCP."
    targetLocationType: LocationType
    "The UUID of the target location."
    targetLocationUuid: UUID
    "Timeout in minutes for cyber recovery job, if it is not given, then there will be no timeout."
    timeoutInMinutes: Int
}

"Input for starting jobs to disable a cloud account feature for a list of Azure Cloud Accounts."
input StartDisableAzureCloudAccountJobInput {
    "Rubrik IDs of the Cloud Accounts to not be enabled."
    cloudAccountIds: [UUID!]!
    "Feature to not be enabled."
    feature: CloudAccountFeature!
}

"Input for the job to start disabling protection from the Azure Native Subscription."
input StartDisableAzureNativeSubscriptionProtectionJobInput {
    "Type of native protection to not be enabled."
    azureNativeProtectionFeature: AzureNativeProtectionFeature!
    "The Rubrik ID of the Azure subscription for which to disable protection."
    azureSubscriptionRubrikId: UUID!
    "Specifies whether to delete the snapshots associated with the subscription being deleted. When true, deletes the snapshots associated with the subscription being deleted."
    shouldDeleteNativeSnapshots: Boolean!
}

"Input to initiate an export job for an AWS native EC2 instance."
input StartEc2InstanceSnapshotExportJobInput {
    "ID of the Amazon Machine Image (AMI) to be used for launching the EC2 instance. This field should be specified only when snapshotType is specified as Archived and amiTypeForAwsNativeArchivedSnapshot returns AMI type as USER_SPECIFIED. In other cases, either a pre-existing AMI is picked, or a new AMI is created at runtime, and an AMI ID is not required. The AMI specified here should be present in the target account and region of export. The specified AMI will be used for launching the instance for export, and all its volumes will be replaced."
    amiId: String
    "Rubrik UUID of the AWS account where the instance will be exported."
    destinationAwsAccountRubrikId: UUID!
    "Region of the exported instance."
    destinationRegionId: AwsNativeRegion!
    "Power state of the exported instance."
    exportInstanceInPoweredOffState: Boolean = false
    "ARN of the IAM instance profile to be attached to the exported EC2 instance."
    iamInstanceProfileArn: String
    "Name of the exported instance."
    instanceName: String!
    "AWS Native EC2 instance type to be used after export. Some examples are: t2.nano, m5.xlarge. For more information, see https://aws.amazon.com/ec2/instance-types."
    instanceType: AwsNativeEc2InstanceType!
    "ID of the KMS key to be used for export."
    kmsKeyId: String = ""
    "List of security group IDs to be used for the exported instance."
    securityGroupIds: [String!]!
    "Specifies whether to copy tags to the exported instance."
    shouldCopyTags: Boolean!
    "ID of the snapshot to be exported."
    snapshotId: UUID!
    "Type of snapshot used for export."
    snapshotType: SnapshotType = SOURCE
    "Name of the SSH key pair to be used for export."
    sshKeyPairName: String = ""
    "ID of the subnet to use for the exported instance."
    subnetId: String!
}

"Input to initiate an export job for the AWS native EBS volume."
input StartExportAwsNativeEbsVolumeSnapshotJobInput {
    "Availability Zone (AZ) of the exported volume."
    availabilityZone: String!
    "Rubrik UUID of the AWS account where exported volume will reside."
    destinationAwsAccountRubrikId: UUID!
    "Region of the exported volume."
    destinationRegionNativeId: AwsNativeRegion!
    "Input/Output (IO) operation limit per second for the exported volume."
    iops: Int!
    "ID of the KMS key to be used for export."
    kmsKeyId: String = ""
    "Specifies whether to copy tags to the exported volume."
    shouldCopyTags: Boolean!
    "Specifies whether to replace attached volumes."
    shouldReplaceAttached: Boolean!
    "ID of the snapshot to be exported."
    snapshotId: UUID!
    "Type of snapshot used for export."
    snapshotType: SnapshotType = SOURCE
    "Name of the exported volume."
    volumeName: String!
    "Size of the exported volume in Giga Bytes."
    volumeSize: Int!
    "AWS Native EBS volume type. Some examples are: g3, io2. For more information, see https://aws.amazon.com/ebs/volume-types."
    volumeType: AwsNativeEbsVolumeType!
}

"Input for the job to export the specified Azure Native Managed Disk to the specified destination."
input StartExportAzureNativeManagedDiskJobInput {
    "Availability Zone in which to export the disk. It is empty for regions types which do not support availability zones."
    destinationAvailabilityZone: String
    "Region in which the disk created after export will exist."
    destinationRegion: AzureNativeRegion!
    "Rubrik ID of the subscription in which to export the disk. When empty, the disk is exported to same subscription."
    destinationSubscriptionRubrikId: UUID
    "Native ID of the disk encryption set for encrypting the newly created disks."
    diskEncryptionSetNativeId: String
    "Name of the disk created after export."
    diskName: String!
    "Size of the disk created after export, in GiB."
    diskSize: Int!
    "Type of the disk created after export."
    diskStorageTier: AzureNativeManagedDiskType!
    "Resource group to be associated with the disk created after export."
    resourceGroup: String!
    "Specifies whether to export tags from the snapshot or not. When true, the tags from the snapshot are exported as well."
    shouldExportTags: Boolean!
    "Specifies whether to run only the export job or to run both the export and replace jobs. When true, the attached managed disk is exported and replaced."
    shouldReplaceAttachedManagedDisk: Boolean!
    "Specifies whether to recover from the replica of the source snapshot or not. Default value is false."
    shouldUseReplica: Boolean
    "Snapshot ID of the snapshot with which the disk is to be exported."
    snapshotId: UUID!
    "The type of the snapshot to recover from."
    snapshotType: AzureSnapshotType
}

"Input for the job to export the specified Azure Native Virtual Machine to the specified destination."
input StartExportAzureNativeVirtualMachineJobInput {
    "The native ID of the availability set used by the virtual machine created by the export job."
    availabilitySetNativeId: String
    "The Availability Zone where the virtual machine created by the export job exists. When the region type does not support Availability Zones, this value is null."
    destinationAvailabilityZone: String
    "The region where the virtual machine created by the export job exists."
    destinationRegion: AzureNativeRegion!
    "The Rubrik ID of the Azure subscription to which the virtual machine is exported. When this value is not specified, the virtual machine is exported to the same Azure subscription."
    destinationSubscriptionRubrikId: UUID
    "Native ID of the disk encryption set for encrypting the newly created disks."
    diskEncryptionSetNativeId: String
    "The native ID of the network security group used by the virtual machine created by the export job."
    networkSecurityGroupNativeId: String
    "Specifies a list of Azure disk unique native IDs that will be exported. When empty, all disks from the snapshot will be exported."
    recoveryDiskIds: [UUID!]
    "The resource group associated with the virtual machine created by the export job."
    resourceGroupName: String!
    "Specifies whether to enable accelerated networking for the virtual machine created by the export job. This value is false by default."
    shouldEnableAcceleratedNetworking: Boolean
    "Specifies whether to export the tags from the snapshot."
    shouldExportTags: Boolean!
    "Specifies whether to export the virtual machine in a powered-down state."
    shouldPowerOff: Boolean!
    "Specifies whether to recover from a replica of the source snapshot."
    shouldUseReplica: Boolean
    "The snapshot ID of the snapshot used to export a virtual machine."
    snapshotId: UUID!
    "The type of the snapshot to recover from."
    snapshotType: AzureSnapshotType
    "The native ID of the subnet used by the virtual machine created by the export job."
    subnetNativeId: String!
    "The name of the virtual machine created as a result of the export job."
    virtualMachineName: String!
    "The size, in GiB, of the virtual machine created by the export job."
    virtualMachineSize: String!
}

"Input for the job to export the specified Azure SQL Database."
input StartExportAzureSqlDatabaseDbJobInput {
    "Input for exporting from Long Term Retention (LTR) backup."
    azureSqlDatabaseDbLtrExportInput: AzureSqlDatabaseDbLtrExport
    "Input for exporting from Point-in-Time (PiT) backup."
    azureSqlDatabaseDbPitExportInput: AzureSqlDatabaseDbPitExport
    "Name of the exported Azure SQL Database."
    destinationDatabaseName: String!
    "Rubrik ID of the server to which export will be done."
    destinationServerRubrikId: UUID
    "Name of the elastic pool for the exported database."
    elasticPoolName: String
    "Input for exporting from Rubrik managed persistent backup."
    persistentBackupExportInput: AzureSqlPersistentBackupExportInput
    "Specifies whether the tags will be exported to the new Azure SQL Database."
    shouldExportTags: Boolean!
    "Rubrik ID of the Azure SQL Database instance to be exported."
    sourceDatabaseRubrikId: UUID!
}

"Input for the job to export the specified Azure SQL Managed Instance database."
input StartExportAzureSqlManagedInstanceDbJobInput {
    "Input for exporting from Long Term Retention (LTR) backup."
    azureSqlManagedInstanceDbLtrExportInput: AzureSqlManagedInstanceDbLtrExport
    "Input for exporting from Point-in-Time (PiT) backup."
    azureSqlManagedInstanceDbPitExportInput: AzureSqlManagedInstanceDbPitExport
    "Name of the exported Azure SQL Managed Instance database."
    destinationDatabaseName: String!
    "Name of the Azure SQL Managed Instance in which database is being exported."
    destinationManagedInstanceName: String!
    "Destination Rubrik ID of the Asure SQL Managed Instance to which export will be done."
    destinationManagedInstanceRubrikId: UUID
    "Resource Group in which database is being exported."
    destinationResourceGroupName: String!
    "Input for exporting from Rubrik managed persistent backup."
    persistentBackupExportInput: AzureSqlPersistentBackupExportInput
    "Rubrik ID of the Azure SQL Managed Instance Database to be exported."
    sourceManagedInstanceDatabaseRubrikId: UUID!
}

"Input to trigger AWS native RDS Instance export job."
input StartExportRdsInstanceJobInput {
    "Instance class of RDS instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClass!
    "Name of the exported RDS DB instance."
    dbInstanceName: String!
    "AWS account in which the exported RDS instance will be launched."
    destinationAwsNativeAccountId: String!
    "Region in which the exported RDS DB instance will be launched."
    destinationRegionNativeId: AwsNativeRegion!
    "Export timestamp for Point in Time recovery of the instance."
    exportTime: DateTime
    "Input Output (I/O) per second of the exported RDS DB instance."
    iops: Int = 0
    "Specifies whether the exported RDS DB instance is multi-AZ or not."
    isMultiAz: Boolean!
    "Specifies whether the export of the instance is from snapshot or point-in-time."
    isPointInTime: Boolean!
    "Specifies whether the new RDS instance is publicly accessible or not."
    isPubliclyAccessible: Boolean!
    "KMS Key ID of the exported RDS DB instance."
    kmsKeyId: String = ""
    "Name of the option group selected by the user for the new RDS instance."
    optionGroupName: String = ""
    "Name of the DB parameter group selected by the user for the new RDS instance."
    parameterGroupName: String = ""
    "Port on which the exported RDS DB instance accepts connections."
    port: Long!
    "Availability Zone (AZ) in which the exported RDS DB instance must be launched."
    primaryAz: String = ""
    "Rubrik ID of the RDS Instance to be exported."
    rdsInstanceId: UUID!
    "List of security group IDs for the new RDS instance. Default security group is used if empty list is provided here."
    securityGroupIds: [String!] = []
    "Specifies whether tags will be exported to the new RDS instance."
    shouldExportTags: Boolean!
    "ID of the snapshot if the export is from snapshot."
    snapshotId: String
    "Type of snapshot used for export. Required only if export is from a snapshot."
    snapshotType: SnapshotType = SOURCE
    "Storage type of the exported RDS DB instance."
    storageType: AwsNativeRdsStorageType = NOT_SPECIFIED
    "Name of the subnet group for the new RDS instance."
    subnetGroupName: String = ""
    "List of subnet IDs for the newly created subnet group, which will be associated with the exported RDS DB instance. Default subnet ids are used if empty list is provided here."
    subnetIds: [String!] = []
}

"Start Recovery Plan configuration."
input StartRecoveryPlanInput {
    "Account."
    account: String!
    "Recovery Plan configurations."
    configs: [RecoveryPlanFailoverJobConfig!]!
}

"Input to initiate a job to refresh an AWS native account."
input StartRefreshAwsNativeAccountsJobInput {
    "Rubrik UUIDs of the AWS account to be refreshed."
    awsAccountRubrikIds: [UUID!]!
    "Native protection feature to be refreshed."
    awsNativeProtectionFeatures: [AwsNativeProtectionFeature!]!
}

"Input to trigger the Refresh Azure Native Subscriptions job."
input StartRefreshAzureNativeSubscriptionsJobInput {
    "Rubrik IDs of the Azure Native Subscriptions to be refreshed."
    azureSubscriptionRubrikIds: [UUID!]!
}

"Trigger AWS EC2 instance snapshot restore job."
input StartRestoreAwsNativeEc2InstanceSnapshotJobInput {
    "Specifies the power status of the restored EC2 Instance. When true, the EC2 Instance is powered-on after completion of the restore."
    shouldPowerOn: Boolean!
    "Specifies whether to restore associated tags. If true, the restored EC2 Instance will have same tags associated."
    shouldRestoreTags: Boolean!
    "ID of snapshot to restore."
    snapshotId: String!
    "Snapshot type to use if source snapshot is expired."
    snapshotTypeToUseIfSourceExpired: SnapshotTypeToUseIfSourceExpired
}

"Inputs to trigger the job to restore Azure Native Virtual Machine."
input StartRestoreAzureNativeVirtualMachineJobInput {
    "Specifies a list of Azure disk unique native IDs that will be restored. When empty, all disks from the snapshot will be restored."
    recoveryDiskIds: [UUID!]
    "Specifies whether the restored virtual machine is to be launched in powered on state. When false, the restored virtual machine will not be connected to the internet."
    shouldPowerOn: Boolean!
    "Specifies whether the tags at the time of snapshot should also be restored. When true, the tags on the virtual machine will be reverted to the time of the backup."
    shouldRestoreTags: Boolean!
    "Snapshot ID of the snapshot which is to be restored."
    snapshotId: UUID!
    "Snapshot type to use if source snapshot is expired."
    snapshotTypeToUseIfSourceExpired: SnapshotTypeForRestoreIfSourceExpired
}

"The configuration to start a hunt, including which objects, indicators of compromise, and advanced parameters."
input StartThreatHuntInput {
    "UUID used to identify the cluster the request goes to."
    clusterUuid: UUID!
    "Criteria to restrict files to scan."
    fileScanCriteria: MalwareScanFileCriteriaInput
    "List of IOCs to scan for."
    indicatorsOfCompromise: [IndicatorOfCompromiseInput!]!
    "Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one."
    maxMatchesPerSnapshot: Int
    "Name of this threat hunt."
    name: String!
    "Notes to describe this threat hunt."
    notes: String = ""
    "Object FIDs to scan for malware."
    objectFids: [UUID!]!
    "Additional information required for files with malware matches."
    requestedMatchDetails: RequestedMatchDetailsInput
    "Specifies whether features that rely on the accuracy of filesystem metadata, like creation time and modification time of files, are enabled or not. These features include backend optimizations to skip re-scanning files that have not changed across snapshots, as indicated by the unchanged timestamps of files. This flag also gates access to some filters that can be specified in this API. Note that this flag should be used with caution, as relying on file timestamps may make the system vulnerable to adversarial techniques such as timestamp manipulation."
    shouldTrustFilesystemTimeInfo: Boolean
    "Limit which snapshots to include in the threat hunt."
    snapshotScanLimit: MalwareScanSnapshotLimitInput
}

"Start time attributes."
input StartTimeAttributesInput {
    "Day of the week."
    dayOfWeek: DayOfWeekOptInput
    "Hour of the day."
    hour: Int = 0
    "Minute of the day."
    minute: Int = 0
}

"Input to mount volume group snapshot."
input StartVolumeGroupMountInput {
    "Required. Configuration for the mount request. The mount will expose an SMB address per recovered volume. In addition, if a target host is specified, each volume must specify a mount path. If a target host is specified but no mount paths are, they will be generated for every volume. In all cases, a single SMB share will be created for this mount. If a target host is specified, the share will only be accessible by that host."
    config: VolumeGroupMountSnapshotJobConfigInput!
    "Required. ID of snapshot."
    id: String!
}

"""

Supported in v5.3+
Information about static IP configuration.
"""
input StaticIpInfoInput {
    """

    Supported in v5.3+
    DNS Servers for the specified IP addresses.
    """
    dnsServers: [String!] = []
    """

    Supported in v5.3+
    Gateway for the specified IP addresses.
    """
    gateway: String
    """

    Required. Supported in v5.3+
    IP addresses and ranges, separated by commas.
    """
    ipAddresses: [String!]!
    """

    Required. Supported in v5.3+
    Subnet mask for the specified IP addresses.
    """
    subnetMask: String!
}

"Input to stop a job instance."
input StopJobInstanceInput {
    "ID of the event series."
    eventSeriesId: String
    "ID of the job instance."
    jobInstanceId: String
}

"Supported in v5.0+"
input StorageArrayDefinitionInput {
    "Required. Supported in v5.0+"
    arrayType: StorageArrayType!
    """

    Supported in v5.0+
    A digital certificate, or concatenated chain of digital certificates, that permits verification of the public key certificate of the storage array. Each certificate must be an X.509 certificate in Base64 encoded DER format and must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Supported in v6.0+
    The ID corresponding to the imported certificate.
    """
    certificateId: String
    """

    Required. Supported in v5.0+
    Resolvable hostname or IPv4 address of the storage array.
    """
    hostname: String!
    "Required. Supported in v5.0+"
    password: String!
    "Required. Supported in v5.0+"
    username: String!
}

"Storage array input in a cluster."
input StorageArrayInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: String!
    "ID assigned to a storage array object."
    id: String!
}

"Input for the event and audit severities that the webhook is subscribed to."
input SubscriptionSeverityInput {
    "Input for the audit severities that the webhook is subscribed to."
    auditSeverities: [UserAuditSeverityEnum!]
    "Input for the event severities that the webhook is subscribed to."
    eventSeverities: [ActivitySeverityEnum!]
}

"Input for the event and audit types that the webhook is subscribed to."
input SubscriptionTypeInput {
    "Input for the audit types that the webhook is subscribed to. If specified, IsSubscribedToAllAudits should be false."
    auditTypes: [UserAuditTypeEnum!]
    "Input for the event types that the webhook is subscribed to. If specified, IsSubscribedToAllEvents should be false."
    eventTypes: [ActivityTypeEnum!]
    "Specifies whether the webhook is subscribed to all audits. If true, auditTypes should be empty."
    isSubscribedToAllAudits: Boolean = false
    "Specifies whether the webhook is subscribed to all events. If true, eventTypes should be empty."
    isSubscribedToAllEvents: Boolean = false
}

"Input for an attachment in a support case."
input SupportCaseAttachmentInput {
    "Attachment content encoded as a Base64 string."
    contentBase64: String!
    "Attachment name."
    name: String!
    "Attachment type."
    type: String!
}

"Input for Rubrik Support portal login."
input SupportPortalLoginInput {
    "Account ID."
    account: String = ""
    "Hostname to access the Rubrik Support portal."
    hostname: String = "rubrik.force.com"
    "Rubrik Support portal organization ID."
    organizationId: String = "00D40000000N3x2"
    "Support portal password to login."
    password: String!
    "Rubrik Support portal password to login."
    username: String!
}

"Input for SupportUserAccess query filter."
input SupportUserAccessFilterInput {
    "Field from which query should be filtered."
    field: SupportUserAccessFilterField!
    "Value of field."
    text: String = ""
}

input SyslogCertificateInfoInput {
    "Syslog server's X.509 certificate in Base64 encoded DER format. The certificate should start with -----BEGIN CERTIFICATE-----"
    serverCertificate: String
    "User friendly name to identify the server certificate."
    serverCertificateName: String
}

input SyslogConfigInputType {
    id: Int = 0
    notificationConf: CommonNotificationSettingInputType
    syslogConf: SyslogSettingInputType
}

"Supported in v5.1+"
input SyslogExportRuleFullInput {
    """

    Supported in v5.2+
    The ID corresponding to the imported certificate used by the syslog server.
    """
    certificateId: String
    """

    Required. Supported in v5.1+
    Specifies whether TLS should be used to communicate with the syslog server.
    """
    enableTls: Boolean!
    "Required. Supported in v5.1+"
    facility: SyslogFacility!
    "Required. Supported in v5.1+"
    hostname: String!
    "Required. Supported in v5.1+"
    port: Int!
    "Required. Supported in v5.1+"
    protocol: TransportLayerProtocol!
    "Required. Supported in v5.1+"
    severity: SyslogSeverity!
}

input SyslogExportRuleInput {
    syslogCertificateInfo: SyslogCertificateInfoInput
    syslogExportRuleFull: SyslogExportRuleFullInput
}

"Supported in v5.1+"
input SyslogExportRulePartialInput {
    """

    Supported in v5.2+
    The ID corresponding to the imported certificate used by the syslog server.
    """
    certificateId: String
    """

    Supported in v5.1+
    Specifies whether TLS should be used to communicate with the syslog server.
    """
    enableTls: Boolean
    "Supported in v5.1+"
    facility: SyslogFacility
    "Supported in v5.1+"
    hostname: String
    "Supported in v5.1+"
    port: Int
    "Supported in v5.1+"
    protocol: TransportLayerProtocol
    "Supported in v5.1+"
    severity: SyslogSeverity
}

input SyslogExportRuleUpdateInput {
    syslogCertificateInfo: SyslogCertificateInfoInput
    syslogExportRulePartial: SyslogExportRulePartialInput
}

input SyslogSettingInputType {
    facility: SyslogFacilityTypeEnum = ALL_SYSLOG
    severity: SyslogSeverityTypeEnum = ALL_SEVERITY
}

"Tag filter parameters."
input TagFilterParams {
    filterType: TagFilterType = TAG_KEY
    tagKey: String = ""
    tagValue: String = ""
}

"Input for tag."
input TagInput {
    "Key for the tag."
    key: String!
    "Value for the tag."
    value: String!
}

"Represents tag key-value pair."
input TagType {
    "Specifies if all tag values should be matched."
    matchAllValues: Boolean!
    "Tag key of the tag rule."
    tagKey: String!
    "Tag value of the tag rule."
    tagValue: String!
}

"Input for tags."
input TagsInput {
    "List of tags."
    tagList: [TagInput!]!
}

"Input for api call to take on demand snapshot of a Managed Volume."
input TakeManagedVolumeOnDemandSnapshotInput {
    "Configuration for the on-demand snapshot."
    config: ManagedVolumeSnapshotConfigInput
    "Required. ID of the SLA Managed Volume."
    id: String!
}

"Input for taking an MSSQL log backup."
input TakeMssqlLogBackupInput {
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input TakeOnDemandOracleDatabaseSnapshotInput {
    "Required. Configuration for the on-demand snapshot of an Oracle database."
    config: OracleBackupJobConfigInput!
    "Required. ID assigned to an Oracle database object."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

input TakeOnDemandOracleLogSnapshotInput {
    "Required. ID assigned to an Oracle database object."
    id: String!
}

"Input for taking on demand snapshot."
input TakeOnDemandSnapshotInput {
    "Retention SLA ID for the on demand snapshot. This can be passed as an empty string."
    slaId: String!
    "List of workload IDs."
    workloadIds: [UUID!]!
}

"Filter for target query request."
input TargetFilterInput {
    "Field from which query should be filtered."
    field: TargetQueryFilterField = NAME
    "Value of the field."
    text: String = ""
    "List of value for the field."
    textList: [String!] = []
}

"Filter for target mapping query request."
input TargetMappingFilterInput {
    "Field from which query should be filtered."
    field: TargetMappingQueryFilterField = NAME
    "Value of the field."
    text: String = ""
    "List of value for the field."
    textList: [String!] = []
}

"Input required to upload a database snapshot to an Azure storage account."
input TargetStorageAccountConfigInput {
    "Resource group name of the storage account."
    resourceGroupName: String!
    "Storage account name where database snapshot will be uploaded."
    storageAccountName: String!
    "Cloud account ID of the target storage account's subscription."
    subscriptionCloudAccountId: UUID!
    "Tags for the storage account. If storage account already exists, these tags are ignored and existing tags will be retained."
    tags: TagsInput
}

"Input for target and cluster mapping."
input TargetToClusterMapping {
    "Field for specifying Rubrik cluster UUID."
    clusterUuid: String = ""
    "Field for specifying target ID."
    locationId: String = ""
}

"Filter task detail"
input TaskDetailFilterInput {
    "The cluster location of the task."
    clusterLocation: [String!]
    "The cluster type of the task."
    clusterType: [String!]
    "The cluster UUID of the task."
    clusterUuid: [UUID!]
    "The object type of the task."
    objectType: [String!]
    "The organization ID of the task."
    orgId: [String!]
    "The replication source of the task."
    replicationSource: [String!]
    "The search term applied on the task."
    searchTerm: String
    "The SLA Domain of the object of the task."
    slaDomain: SnappableSlaDomainFilterInput
    "The task category."
    taskCategory: [String!]
    "The task status."
    taskStatus: [String!]
    "The task type."
    taskType: [String!]
    "The time used to filter tasks that ended after this time."
    time_gt: DateTime
    "The time used to filter tasks that ended before this time."
    time_lt: DateTime
}

"Filter task summary"
input TaskSummaryFilterInput {
    cluster: CommonClusterFilterInput
    objectType: [ObjectTypeEnum!]
    slaDomain: SnappableSlaDomainFilterInput
    time_gt: DateTime
    time_lt: DateTime
}

"Represents the Teams Channels to/from be restored."
input TeamsChannelInfo {
    ChannelFolderName: String
    ChannelID: UUID
    ChannelName: String
    ChannelNaturalId: String
    TeamID: UUID!
    "Represents membership type of the channel (STANDARD or PRIVATE)."
    channelMembershipType: ChannelMembershipType!
}

"Represents the Teams Channels to/from be restored."
input TeamsConvChannelInfo {
    ChannelFolderId: String
    ChannelFolderName: String
    ChannelID: UUID
    ChannelName: String
    ChannelNaturalId: String
    TeamID: UUID!
}

"Parameters for teams conversations search."
input TeamsConversationsSearchFilter {
    channelNaturalId: String
    convId: String
    "Describes whether to send post senders(shouldn't be called by UI)."
    fetchAllPostSenders: String
    includeArchived: Boolean = false
    parentId: String
    postedBy: String
    postedTime: TimeRangeFilter
    snapshotId: String
    snapshotNum: Int
}

"Represents the teams conversations search filter."
input TeamsConversationsSearchFilterJson {
    PostedBy: String
    PostedTime: TimeRangeFilterJson
    SnapshotId: String
}

"Represents the teams contents to be restored."
input TeamsRestoreConfig {
    "Indicates whether the channel being restored is STANDARD or PRIVATE."
    channelType: ChannelMembershipType!
    "Restore configuration for conversations."
    conversationsRestoreConfig: ConversationsRestoreConfig
    "Channel information in case of restoration to a new channel."
    destChannelInfo: TeamsChannelInfo
    "Restore configuration for files."
    filesRestoreConfig: DriveRestoreConfig
    "Indicates whether the new channel will be created with the most recent permissions if a private channel is restored."
    restoreLatestPermissions: Boolean!
    "Indicates whether a new channel must be created."
    shouldCreateDestChannel: Boolean!
    "Specifies the sequence number of the snapshot being currently restored."
    snapshotSequenceNum: Int!
}

"The existing webhook to test."
input TestExistingWebhookInput {
    "The ID of the webhook to be tested."
    id: Int!
}

input TestSyslogExportRuleInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Syslog export rule."
    syslogExportRuleV51: SyslogExportRuleInput
    "Syslog export rule."
    syslogExportRuleV52: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV53: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV60: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV70: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV80: SyslogExportRuleFullInput
    "Syslog export rule."
    syslogExportRuleV90: SyslogExportRuleFullInput
}

"Webhook configuration to test."
input TestWebhookInput {
    "The authentication type and token to authenticate the endpoint."
    authInfo: AuthInfoInput
    "The application that will receive the webhook."
    providerType: ProviderType!
    "The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint."
    serverCertificate: String
    "The URL endpoint to the receiving application."
    url: URL!
}

input TimeFilterInput {
    endTime: String = ""
    startTime: String = ""
    timeDuration: TimeDuration = HOUR
    timezone: String = ""
}

"Timerange filter."
input TimeRangeFilter {
    fromTime: DateTime
    untilTime: DateTime
}

"Represents the time range filter."
input TimeRangeFilterJson {
    FromTime: Long
    UntilTime: Long
}

input TimeRangeInput {
    "End time of the range."
    end: DateTime!
    "Start time of the range."
    start: DateTime!
}

"Input to trigger cloud compute connectivity check."
input TriggerCloudComputeConnectivityCheckInput {
    "Required. ID of the archival location."
    id: String!
    """

    Required. v6.0-v7.0: Indicates if the cloud compute connectivity check should be performed for the CloudOn feature.

    v8.0+: When should_check_cloud_connectivity_for_cloud_on is set to false, the Rubrik cluster verifies the cloud compute connectivity for Archive operations. When should_check_cloud_connectivity_for_cloud_on is set to true, The Rubrik cluster verifies the cloud compute connectivity for both Archive and CloudOn operations.
    """
    shouldCheckCloudConnectivityForCloudOn: Boolean!
    "Indicates if the cloud compute connectivity check should be performed for the CloudOut feature."
    shouldCheckCloudConnectivityForCloudOut: Boolean
}

"Input to initiate Exocompute health check."
input TriggerExocomputeHealthCheckInput {
    "Cloud provider type."
    cloudVendor: CloudVendor!
    "ID for Exocompute configuration."
    exocomputeConfigId: UUID!
    "Compute instance type of the worker nodes (applicable only for Azure)."
    nodeType: String
}

"Request to initiate a ransomware detection job on a snapshot."
input TriggerRansomwareDetectionInput {
    "The ID of the Rubrik cluster where the snapshot is available."
    clusterUuid: String = ""
    "The managed ID of the object."
    managedId: String = ""
    "The ID of the snapshot that was taken prior to the snapshot selected for ransomware detection."
    previousSnapshotId: String = ""
    "The ID of the snapshot."
    snapshotId: String = ""
}

"Input for removing SAP HANA database configuration after restore."
input UnconfigureSapHanaRestoreInput {
    "Required. ID assigned to target SAP HANA database object."
    id: String!
}

"Unidirectional replication specification."
input UnidirectionalReplicationSpecInput {
    "Replication target ID."
    replicationTargetId: String = ""
    "Retention on replication target."
    retention: Int = 0
    "Unit of retention."
    retentionUnit: RetentionUnit = MINUTES
}

input UninstallIoFilterInput {
    "Required. ID of the VMware compute cluster."
    id: String!
}

"Specifies the information about the users being unlocked."
input UnlockUsersByAdminInput {
    "Required. Specifies the list of user IDs."
    userIds: [String!]!
}

"Input to query unmanaged objects."
input UnmanagedObjectsInput {
    "Workload cluster UUID."
    clusterUuid: String!
    "Object name."
    name: String
    "Object Id."
    objectId: String
    "Object types to filter."
    objectTypes: [ManagedObjectType!]!
    "Retention SLAs to filter."
    retentionSlaDomainIds: [String!]!
    "Sorting Parameters."
    sortParam: UnmanagedObjectsSortParam
    "Unmanaged statuses to filter."
    unmanagedStatuses: [UnmanagedObjectAvailabilityFilter!]!
}

"Unmanaged objects sorting parameters."
input UnmanagedObjectsSortParam {
    "Sorts by order."
    sortOrder: SortOrder = ASC
    "Sort type."
    type: UnmanagedObjectsSortType = NAME
}

"Input for unmapping Azure cloud accounts from the mapped Exocompute subscription."
input UnmapAzureCloudAccountExocomputeSubscriptionInput {
    "Rubrik IDs of the cloud accounts to be unmapped."
    cloudAccountIds: [UUID!]!
}

"Input to update Rubrik cluster configuration."
input UpdateAutoEnablePolicyClusterConfigInput {
    "Rubrik cluster ID."
    clusterId: String = ""
    "Specifies whether Auto-enabled Data Discovery Policies are enabled on the Rubrik cluster or not."
    enabled: Boolean = false
}

"Input to edit AWS automatic target mapping."
input UpdateAutomaticAwsTargetMappingInput {
    "Compute settings ID of the AWS target."
    awsComputeSettingsId: String
    "Cloud account ID of the AWS target."
    cloudAccountId: UUID
    "List of Rubrik cluster UUIDs."
    clusterUuidList: [String!]
    "ID of the AWS target mapping."
    id: String!
    "Specifies whether consolidation is enabled on the AWS target."
    isConsolidationEnabled: Boolean
    "Name of the AWS target mapping."
    name: String
    "Proxy settings of the AWS target."
    proxySettings: ProxySettingsInput
    "Storage class of the AWS target."
    storageClass: AwsStorageClass
}

"Input to edit Azure automatic target mapping."
input UpdateAutomaticAzureTargetMappingInput {
    "Access key of the Azure target."
    accessKey: String
    "Cloud account ID of the Azure target."
    cloudAccountId: UUID
    "List of Rubrik cluster UUIDs."
    clusterUuidList: [String!]
    "Compute settings of the Azure target."
    computeSettings: AzureCloudComputeSettingsInput
    "ID of the Azure target mapping."
    id: String!
    "Specifies whether consolidation is enabled on the Azure target."
    isConsolidationEnabled: Boolean
    "Name of the Azure target mapping."
    name: String
    "Proxy settings of the Azure target."
    proxySettings: ProxySettingsInput
    "Storage account name of the Azure archival target."
    storageAccountName: String
}

"Input for editing an AWS account."
input UpdateAwsAccountInput {
    "Access key of the AWS account."
    accessKey: String!
    "Description of the AWS account."
    description: String
    "Name of the AWS account."
    id: String!
    "Name of the AWS account."
    name: String!
    "Secret key of the AWS account."
    secretKey: String!
}

"Input to update an AWS account."
input UpdateAwsCloudAccountFeatureInput {
    "Action to be taken for cloud account update."
    action: CloudAccountAction!
    "AWS account name."
    awsAccountName: String = ""
    "List of regions to be added."
    awsRegions: [AwsCloudAccountRegion!]
    "Rubrik ID of the AWS account."
    cloudAccountId: UUID!
    "Native protection feature to be updated."
    feature: CloudAccountFeature!
    "Role ARN for the cloud account."
    roleArn: String = ""
    "Stack ARN for the cloud account."
    stackArn: String = ""
}

"Input to update the AWS account."
input UpdateAwsCloudAccountInput {
    "AWS account name."
    awsAccountName: String = ""
    "Rubrik ID of the AWS account."
    cloudAccountId: UUID!
}

"Input to edit AWS cloud compute setting."
input UpdateAwsComputeSettingInput {
    "ID of the AWS cloud compute setting."
    id: String = ""
    "Name of the AWS cloud compute setting."
    name: String = ""
    "Security group ID of the AWS target."
    securityGroupId: String = ""
    "Subnet ID of the AWS target."
    subnetId: String = ""
    "VPC ID of the AWS target."
    vpcId: String = ""
}

"Input to edit AWS target."
input UpdateAwsTargetInput {
    "Compute settings ID of the AWS target."
    awsComputeSettingsId: String
    "Retrieval tier of the AWS target."
    awsRetrievalTier: AwsRetrievalTier
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean
    "Cloud account ID of the AWS target."
    cloudAccountId: UUID
    "Cloud compute settings of the AWS target."
    cloudComputeSettings: AwsCloudComputeSettingsInput
    "Compute proxy settings of the AWS target."
    computeProxySettings: ProxySettingsInput
    "Rubrik Security Cloud managed ID of the location to be edited."
    id: String!
    "AWS immutability settings."
    immutabilitySettings: AwsImmutabilitySettings
    "Flag to determine if consolidation is enabled."
    isConsolidationEnabled: Boolean
    "Optional field for specifying the KMS server endpoint when using KMS-based encryption, for example a VPC endpoint. When not specified, the default, region-based KMS server endpoint is used."
    kmsEndpoint: String
    "Name of the AWS location."
    name: String
    "Proxy settings of the target."
    proxySettings: ProxySettingsInput
    "Optional field for specifying an AWS S3 endpoint, for example a VPC endpoint. When not specified, the default, region-based S3 endpoint is used."
    s3Endpoint: String
    "Storage class of the AWS target."
    storageClass: AwsStorageClass
}

"Input for editing an Azure account."
input UpdateAzureAccountInput {
    "Description of the Azure account."
    description: String
    "ID of the Azure account."
    id: String!
    "Name of the Azure account."
    name: String
    "Subscription ID of the Azure account."
    subscriptionId: String
}

"Input for updating an Azure Cloud Account."
input UpdateAzureCloudAccountInput {
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeature!]!
    "Regions to be added."
    regionsToAdd: [AzureCloudAccountRegion!]
    "Regions to be removed."
    regionsToRemove: [AzureCloudAccountRegion!]
    "Subscriptions to be updated."
    subscriptions: [AzureCloudAccountSubscriptionInput!]!
}

"Input to edit Azure target."
input UpdateAzureTargetInput {
    "Access key of the Azure target."
    accessKey: String
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean! = false
    "Cloud account ID of the Azure target."
    cloudAccountId: UUID
    "Compute settings of the Azure target."
    computeSettings: AzureCloudComputeSettingsInput
    "Id of the Azure target to be edited."
    id: UUID!
    "Immutability settings of the Azure target."
    immutabilitySettings: AzureImmutabilitySettings
    "Flag to determine if consolidation is enabled in the Azure target."
    isConsolidationEnabled: Boolean
    "Name of the Azure target."
    name: String
    "Proxy settings of the Azure target."
    proxySettings: ProxySettingsInput
    "Retrieval tier to use for retrieving data from archive storage."
    retrievalTier: AzureRetrievalTier
    "Storage account name of the Azure target."
    storageAccountName: String
}

input UpdateBadDiskLedStatusInput {
    "Specifies the disk serial id."
    diskSerial: String
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Required. Node on which the script should be run."
    nodeId: String!
    "Specifies whether the off script flag should be used."
    turnOff: Boolean
}

"Update certificate of a host."
input UpdateCertificateHostInput {
    "Required. ID of the host."
    id: String!
}

"Input to update a storage setting for AWS."
input UpdateCloudNativeAwsStorageSettingInput {
    id: UUID!
    kmsMasterKeyId: String
    name: String
    storageClass: AwsStorageClass
}

"Input for updating azure storage settings. Specify old value of the property if no change is intended on the property."
input UpdateCloudNativeAzureStorageSettingInput {
    "Information about the customer-managed key and key vault."
    cmkInfo: [AzureCmkInput!]
    "ID for the storage setting."
    id: UUID!
    "Name of the storage setting."
    name: String!
    "Tags for the storage account. Old tags are removed and new tags are applied."
    storageAccountTags: TagsInput!
    "Storage tier for the storage account."
    storageTier: AzureStorageTier!
}

"Input required to update file indexing status of cloud native workloads."
input UpdateCloudNativeIndexingStatusInput {
    "Specifies whether file indexing is enabled or not for workloads."
    isIndexingEnabled: Boolean!
    "List of workload IDs."
    workloadIds: [UUID!]!
}

"Input required to update a cloud-native label rule."
input UpdateCloudNativeLabelRuleInput {
    "Specifies whether this label rule apply to all cloud accounts."
    applyToAllCloudAccounts: Boolean
    "Cloud native accounts on which label rule will be applied."
    cloudNativeAccountIds: CloudNativeIds
    "Label rule ID."
    labelRuleId: UUID!
    "Name of the label rule."
    labelRuleName: String!
    "Corresponds to the assignment type for the SLA."
    slaAssignType: TagRuleSlaAssignType!
    "Corresponds to optional global SLA Rubrik ID."
    slaId: UUID
}

"Input for updating an existing Rubrik Cloud Vault Azure storage settings."
input UpdateCloudNativeRcvAzureStorageSettingInput {
    "ID for the storage setting."
    id: UUID!
    "Name of the storage setting."
    name: String!
}

"Input required to update a cloud-native tag rule."
input UpdateCloudNativeTagRuleInput {
    "Specifies whether this tag rule apply to all cloud accounts."
    applyToAllCloudAccounts: Boolean
    "Cloud native accounts on which tag rule will be applied."
    cloudNativeAccountIds: CloudNativeIds
    "Corresponds to the assignment type for the SLA."
    slaAssignType: TagRuleSlaAssignType!
    "Corresponds to optional global SLA Rubrik ID."
    slaId: UUID
    "Tag rule ID."
    tagRuleId: UUID!
    "Name of the tag rule."
    tagRuleName: String!
}

"Object containing the new address of the Rubrik cluster."
input UpdateClusterDefaultAddressInput {
    "The new default address of the Rubrik cluster."
    address: String
    "UUID of the cluster."
    clusterUuid: UUID!
}

input UpdateClusterNtpServersInput {
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Required. List of NTP servers."
    ntpServerConfigs: [NtpServerConfigurationInput!]!
}

"Input to pause or resume a list of Rubrik clusters."
input UpdateClusterPauseStatusInput {
    "List of cluster UUIDs."
    clusterUuids: [String!] = []
    "Specifies whether to pause or resume the clusters."
    togglePauseStatus: Boolean = false
}

"Input for updating cluster settings."
input UpdateClusterSettingsInput {
    "Contains the changed information for the Rubrik cluster object."
    clusterUpdate: ClusterUpdateInput!
    "Cluster UUID."
    clusterUuid: UUID!
    "ID of a Rubrik cluster object, or use *me* for the Rubrik cluster that is hosting the current API session."
    id: String!
}

"Configuration to update config protection set up for the cluster."
input UpdateConfigProtectionSetupInput {
    "Details of the new CA certificate."
    caCertificate: ConfigProtectionCaCert
    "UUID of the cluster."
    clusterUuid: UUID!
    "New password for the backup encryption."
    encryptionPassword: String
    "UUID of the new replication target."
    replicationTargetUuid: UUID
    "New upload location type."
    uploadLocationType: UploadLocationType
}

"Configuration for the update of a configured group in O365."
input UpdateConfiguredGroupInput {
    "ID of the configured group to be updated."
    groupId: UUID!
    "UUID of the org."
    orgId: UUID!
    "When true, the group will be archived."
    performArchival: Boolean!
    "The updated display name for the configured group."
    updatedDisplayName: String
    "The updated preferred data locations configured for this group. When empty, group members will not be constrained on data location."
    updatedPdls: [String!]!
    "The updated wildcard pattern configured for this group. When empty, group members will not be constrained on name or URL identifiers."
    updatedWildcard: String
}

"Input for updating a custom report."
input UpdateCustomReportInput {
    "New configuration to update custom report to."
    config: CustomReportCreate!
    "ID of the custom report to update."
    id: Int!
}

"Input for updateDnsServersAndSearchDomains."
input UpdateDnsServersAndSearchDomainsInput {
    "Required. List of the DNS search domains."
    domains: [String!]!
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "Required. List of fully qualifed domain names or IPv4 addresses of DNS servers."
    servers: [String!]!
}

"Information required to save an event digest."
input UpdateEventDigestInput {
    "Name of the event digest."
    digestName: String
    "Event digest configuration."
    eventDigestConfig: EventDigestConfig!
    "Frequency, in hours, with which the event digests are sent."
    frequencyHours: Int
    "Specifies whether to include audits in the event digest or not."
    includeAudits: Boolean
    "Specifies whether to include events in the event digest or not."
    includeEvents: Boolean
    "Specifies whether to send event digest immediately or not."
    isImmediate: Boolean
    "User IDs of the recipients of the event digest."
    recipientUserIds: [String!]!
}

"Input for V1UpdateFailoverClusterApp."
input UpdateFailoverClusterAppInput {
    "Required. ID of failover cluster app."
    id: String!
    "Required. Properties to update."
    updateProperties: FailoverClusterAppConfigInput!
}

"Input for V1UpdateFailoverCluster."
input UpdateFailoverClusterInput {
    "Required. ID of failover cluster."
    id: String!
    "Required. Properties to update."
    updateProperties: FailoverClusterConfigInput!
}

input UpdateFloatingIpsInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. New list of cluster IPs."
    newClusterIps: [String!]!
}

"Input for editing the GCP Target."
input UpdateGcpTargetInput {
    "Proxy settings of the GCP target."
    archivalProxySettings: ProxySettingsInput
    "Bucket of the GCP target."
    bucket: String
    "Specifies whether the proxy settings should be bypassed for creating this target location."
    bypassProxy: Boolean
    "Encryption password for the GCP target."
    encryptionPassword: String
    "Id of the GCP target to be edited."
    id: UUID!
    "Name of the GCP target."
    name: String
    "Region of the GCP target."
    region: GcpRegion
    "Service account JSON key of the GCP target."
    serviceAccountJsonKey: String
    "Storage class of the GCP target."
    storageClass: GcpStorageClass
}

"Input for editing a legacy Glacier Reader Target."
input UpdateGlacierTargetInput {
    "Field for specifying cloud account ID."
    cloudAccountId: UUID
    "ID of the Glacier target to be edited."
    id: UUID!
    "Field for specifying name of the target."
    name: String
    "Field for specifying retrieval tier for this target."
    retrievalTier: AwsRetrievalTier
}

"Input to add a global certificate."
input UpdateGlobalCertificateInput {
    "The ID of the global certificate (either the RSC ID or the Rubrik CDM certificate ID)."
    certificateId: String!
    "The clusters on which to add the certificate."
    clusters: [CertificateClusterInput!]! = []
    "The updated description of the certificate."
    description: String
    "The updated display name of the certificate."
    name: String
}

"Input to update SLA Domain."
input UpdateGlobalSlaInput {
    "List of archival specifications for SLA Domain."
    archivalSpecs: [ArchivalSpecInput!] = []
    "Backup Window specifications for SLA Domain."
    backupWindows: [BackupWindowInput!] = []
    "Description of the SLA Domain."
    description: String = ""
    "Backup Window specifications of first full backup for SLA Domain."
    firstFullBackupWindows: [BackupWindowInput!] = []
    "ID of the SLA Domain."
    id: String = ""
    "Specifies if the SLA Domain to be updated must be Retention Locked or not."
    isRetentionLockedSla: Boolean = false
    "Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires."
    localRetentionLimit: SlaDurationInput
    "Log configuration of the SLA Domain."
    logConfig: LogConfig
    "Name of the SLA Domain."
    name: String = ""
    "Object-specific configuration of the SLA Domain."
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    "Object types of the SLA Domain."
    objectTypes: [SlaObjectType!] = []
    "Replication specification of the SLA Domain."
    replicationSpecInput: ReplicationSpecInput
    "Replication specificationsof the SLA Domain."
    replicationSpecsV2: [ReplicationSpecV2Input!] = []
    "Should apply to existing snapshots."
    shouldApplyToExistingSnapshots: ShouldApplyToExistingSnapshots
    "Should apply to non-policy snapshots."
    shouldApplyToNonPolicySnapshots: ShouldApplyToNonPolicySnapshots
    "Snapshot schedule of the SLA Domain."
    snapshotSchedule: GlobalSnapshotScheduleInput
    "State version of the SLA Domain."
    stateVersion: Long = 0
    "Optional user note."
    userNote: String = ""
}

input UpdateGuestCredentialInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Object for guest OS credential definition."
    definition: GuestCredentialDefinitionInput!
    "Required. ID of the guest OS credential to update."
    id: String!
}

input UpdateHealthMonitorPolicyStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The request object."
    runRequest: RunPolicyArgInput!
}

"Supported in v5.0+"
input UpdateHypervScvmmUpdatePropertiesInput {
    """

    Supported in v5.0+
    v5.0-v5.1: Assign this SCVMM to the given SLA domain.
    v5.2+: Assign this SCVMM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    Name of the SCVMM host.
    """
    hostname: String
    """

    Supported in v5.0+
    The RunAs account which will be used to install connector on hosts.
    """
    runAsAccount: String
    """

    Supported in v5.0+
    Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
    """
    shouldDeployAgent: Boolean
}

"Input for updating the Hyper-V virtual machine with the specified properties."
input UpdateHypervVirtualMachineInput {
    "Required. ID of Virtual Machine."
    id: String!
    "Required. Properties to update."
    vmUpdateProperties: HypervVirtualMachineUpdateInput!
}

"Input for updating the Hyper-V virtual machine Live Mount with the specified properties."
input UpdateHypervVirtualMachineSnapshotMountInput {
    "Required. Power state configuration."
    config: HypervUpdateMountConfigInput!
    "Required. ID of a Live Mount."
    id: String!
}

"Custom claims to add for an organisation's Idp."
input UpdateIdentityProviderInput {
    "List of IdP claim attributes."
    idpClaimAttribute: [IdpClaimAttribute!]!
}

"Specifies the input required to update the lockout config by the admin."
input UpdateLockoutConfigInput {
    "Specifies the time after which the account is unlocked automatically."
    accountAutoUnlockDurationInMins: Int = 0
    "Specifies whether the auto unlock feature is enabled on the UI."
    isAutoUnlockFeatureEnabled: Boolean = false
    "Specifies whether the account lockout feature is enabled on the UI."
    isBruteForceLockoutEnabled: Boolean = false
    "Specifies whether self service is enabled for all users in this organization."
    isSelfServiceEnabled: Boolean = false
    "Specifies the number of failed login attempts allowed after which the account is locked."
    loginAttemptsLimit: Int = 0
    "Specifies the number of times self-service is allowed to unlock the account."
    selfServiceAttemptsLimit: Int = 0
    "Specifies the validity of the current self service token."
    selfServiceTokenValidityInMins: Int = 0
}

"Input for api call to update a Managed Volume."
input UpdateManagedVolumeInput {
    "Required. ID of managed volume."
    id: String!
    "Required. Properties to update."
    update: ManagedVolumeUpdateInput!
}

"Input to edit manual target mapping."
input UpdateManualTargetMappingInput {
    "Field for specifying target and Rubrik cluster mapping."
    archivalLocationClusterMappings: [TargetToClusterMapping!] = []
    "ID of the target mapping."
    id: String = ""
    "Name of the target mapping."
    name: String = ""
}

"Supported in v5.0+"
input UpdateMountConfigInput {
    "True to power on, false to power off."
    powerStatus: Boolean!
    """

    Supported in v5.2+
    A Boolean that specifies whether to forcibly power down a virtual machine that is already mounted with Storage vMotion. When this value is 'true', the virtual machine is forcibly powered down. The default value for this Boolean is 'false'.
    """
    shouldForce: Boolean
}

"Input for UpdateMssqlDefaultProperties."
input UpdateMssqlDefaultPropertiesInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Updated default properties."
    defaultProperties: MssqlDbDefaultsUpdateInput!
}

"Input for UpdateMssqlLogShippingConfiguration."
input UpdateMssqlLogShippingConfigurationInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Configuration parameters for the update operation."
    config: MssqlLogShippingUpdateV2Input!
    "Required. ID of a log shipping configuration object."
    id: String!
}

"Input to update a NAS system share."
input UpdateNasSharesInput {
    "Required. NAS share update request object."
    updateNasSharesRequest: UpdateNasSharesRequestInput!
}

"""

Supported in v7.0+
v7.0-v8.0:
v9.0: Input to configure properties of one or more NAS shares.
"""
input UpdateNasSharesRequestInput {
    """

    Required. Supported in v7.0+
    Parameters for NAS shares.
    """
    nasShareProperties: [NasSharePropertiesInput!]!
}

"Input to update a NAS system."
input UpdateNasSystemInput {
    "Required. ID of the registered NAS system."
    id: String!
    "Required. Properties of the NAS system to update."
    nasSystemUpdateProperties: NasSystemUpdateInput!
}

"Input to update network throttle."
input UpdateNetworkThrottleInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID assigned to a network throttle object."
    id: String!
    "Required. Configuration changes to apply to a specified network throttle object. Unspecified values are left unchanged."
    throttleUpdate: NetworkThrottleUpdateInput!
}

"Input to edit NFS archival location."
input UpdateNfsTargetInput {
    "Export directory of the NFS archival location."
    exportDir: String
    "File lock period in seconds of the NFS archival location."
    fileLockPeriodInSeconds: Int
    "Host IP address of the NFS archival location."
    host: String
    "Id of the NFS archival location to be edited."
    id: UUID!
    "Flag to determine if consolidation is enabled in the NFS archival location."
    isConsolidationEnabled: Boolean
    "Name of the NFS archival location."
    name: String
    "Authentication type of the NFS archival location."
    nfsAuthType: AuthTypeEnum
}

"Input for patching a Nutanix cluster."
input UpdateNutanixClusterInput {
    "Required. ID of the Nutanix cluster."
    id: String!
    "Required. Object containing updated Nutanix cluster information."
    patchProperties: NutanixClusterPatchInput!
}

"Input for patching a Nutanix virtual machine."
input UpdateNutanixVmInput {
    "Required. ID of Nutanix Virtual Machine."
    id: String!
    "Required. Properties to patch."
    vmPatchProperties: NutanixVmPatchInput!
}

"Input for updating O365 App authentication status."
input UpdateO365AppAuthStatusInput {
    "App ID of the O365 app."
    o365AppId: String!
    "Office 365 subscription ID."
    o365OrgId: String!
}

"Input for updating O365 app permissions."
input UpdateO365AppPermissionsInput {
    "App ID of the O365 app."
    o365AppId: String!
    "Type of O365 app."
    o365AppType: O365AppType!
}

"Configuration for updating an O365 organization custom name."
input UpdateO365OrgCustomNameInput {
    "Custom name to use for the O365 organization."
    customName: String!
    "Polaris ID for an O365 organization."
    orgUuid: UUID!
}

input UpdateOracleDataGuardGroupInput {
    "Required. ID assigned to an Oracle Data Guard group object."
    id: String!
    "Required. Properties to use for the update of an Oracle Data Guard group object."
    updateProperties: OracleDataGuardGroupUpdateInput!
}

"Update organization details."
input UpdateOrgInput {
    "Allowed clusters for the organization."
    allowedClusters: [String!]!
    "Use the SSO/LDAP configuration of the global organization or set the configuration specific to this organization."
    authDomainConfig: TenantAuthDomainConfig!
    "New description of the organization."
    description: String!
    "Existing SSO groups to be authorized for this tenant organization."
    existingSsoGroups: [ExistingSsoGroupInput!]
    "Existing users to add to the tenant organization."
    existingUsers: [ExistingUserInput!]
    "New full name of the tenant organization."
    fullName: String!
    "Force organization to use envoy to connect their hosts."
    isEnvoyRequired: Boolean!
    "New unique name ID of the organization."
    name: String!
    "New SSO groups to be authorized for this tenant organization."
    newSsoGroups: [NewSsoGroupInput!]
    "ID of the organization to be updated."
    organizationId: String!
    "Permissions to be given to the org admin role."
    permissions: [PermissionInput!]!
    "Self-service permissions to be assigned to the organization."
    selfServicePermissions: [SelfServicePermissionInput!]!
    "Enforce MFA for all users in the organization."
    shouldEnforceMfaForAll: Boolean!
    "Invitations to invite new users to the tenant organization."
    userInvites: [UserInviteInput!]
}

"Update organization security policy details."
input UpdateOrgSecurityPolicyInput {
    "Specifies whether to disallow weaker policy for tenants."
    disallowWeakerPolicy: Boolean
}

"Input required to sign the EULA."
input UpdatePactsafeEulaAcceptedInput {
    "First name of the signer."
    firstName: String!
    "Last name of the signer."
    lastName: String!
    "Title of the signer."
    title: String!
}

"Parameters for updating a report with configurations."
input UpdatePolarisReportInput {
    "Selected charts of the report."
    charts: [ChartViewType!]!
    "The filter used for sorting in the report."
    filters: [ReportFilterInput!]!
    "Report name."
    name: String!
    "Id of report."
    reportId: Long!
    "Type of report."
    reportViewType: PolarisReportViewType!
    "The selected order of sorting in the report."
    sortBy: String!
    "The selected sortOrder in the report."
    sortOrder: SortOrder
    "The selected table of the report."
    table: TableViewType!
}

input UpdatePolicyInput {
    analyzerIds: [String!] = []
    colorEnum: ClassificationPolicyColor = UNKNOWN
    description: String = ""
    id: String = ""
    mode: ClassificationPolicyMode = DISCOVERY
    name: String = ""
    updateAnalyzerIds: Boolean = false
    updateDescription: Boolean = false
    updateMode: Boolean = false
    updateName: Boolean = false
}

input UpdateProxyConfigInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Proxy url and port."
    proxy: ProxyConfigInput!
}

"Input to update RCS automatic target mapping."
input UpdateRcsAutomaticTargetMappingInput {
    "List of cluster UUIDs."
    clusterUuidList: [String!]
    "ID of the target mapping."
    id: String!
    "Immutability lock duration in days."
    lockDurationDays: Long!
    "Name of the target mapping."
    name: String
}

"Input for the Rubrik Cloud Vault update request."
input UpdateRcvTargetInput {
    "ID of the RCV location."
    id: UUID!
    "List of allowed IP addresses for the RCV location."
    ipMapping: IpMappingInput
    "Lock duration for the immutable location, in days."
    lockDurationDays: Long!
    "New name for the RCV location."
    name: String
}

"Update Recovery Plan configuration."
input UpdateRecoveryPlanInput {
    "Recovery Plan configuration."
    config: RecoveryPlanConfigInput
    "Recovery Plan description."
    description: String
    "Recovery Plan ID."
    id: String!
    "Recovery Plan name."
    name: String!
}

"Request to update replication target information."
input UpdateReplicationTargetInput {
    "NAT or private replication setup type."
    setupType: ReplicationSetupType!
    "Source Rubrik cluster UUID."
    sourceClusterUuid: UUID!
    "Gateway information of the source cluster when using the NAT setup type."
    sourceGateway: ReplicationGatewayInfo
    "Target Rubrik cluster UUID."
    targetClusterUuid: UUID!
    "Gateway information of the target cluster when using the NAT setup type."
    targetGateway: ReplicationGatewayInfo
}

"Input to edit S3 compatible target."
input UpdateS3CompatibleTargetInput {
    "Access key of the S3 compatible target."
    accessKey: String
    "Endpoint of the S3 compatible target."
    endpoint: String
    "Rubrik Security Cloud managed ID of the S3 compatible target to be edited."
    id: UUID!
    "Flag to determine if consolidation is enabled in the NFS target."
    isConsolidationEnabled: Boolean
    "Name of the S3 compatible target."
    name: String
    "Number of buckets of the S3 compatible target."
    numberOfBuckets: Int
    "Secret key of the S3 compatible target."
    secretKey: String
    "Flag to determine if system proxy will be used or not."
    useSystemProxy: Boolean
}

"Input for updating a scheduled report."
input UpdateScheduledReportInput {
    "New configuration to update scheduled report to."
    config: ScheduledReportCreate!
    "ID of the scheduled report to edit."
    id: Int!
}

"Input parameters for updating service accounts."
input UpdateServiceAccountInput {
    "Optional description of the service account."
    description: String
    "ID of the service account to update."
    id: String!
}

"Input to update SnapMirror Cloud workload."
input UpdateSnapMirrorCloudInput {
    "Required. ID of the SnapMirror Cloud object to update."
    id: String!
    "Required. Properties of the SnapMirror Cloud to update."
    snapmirrorCloudUpdateConfig: SnapMirrorCloudUpdateConfigInput!
}

input UpdateSnmpConfigInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. ID of the Rubrik cluster or *me* for self."
    id: String!
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV50: SnmpConfigurationInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV51: SnmpConfigurationInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV52: SnmpConfigurationPatchInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV53: SnmpConfigurationPatchInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV60: SnmpConfigurationPatchInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV70: SnmpConfigurationPatchInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV80: SnmpConfigurationPatchInput
    "SNMP configuration updates for the specified Rubrik cluster."
    snmpConfigV90: SnmpConfigurationPatchInput
}

"Details of the storage array to be updated."
input UpdateStorageArrayInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: String!
    "Required. JSON object for storage array definition."
    definition: StorageArrayDefinitionInput!
    "Required. ID of the storage array to be updated."
    id: String!
}

"Update Storage array configurations."
input UpdateStorageArraysInput {
    "List of Storage array configurations to update."
    configs: [UpdateStorageArrayInput!]!
}

"Input for updating a support case."
input UpdateSupportCaseInput {
    "Attachments uploaded to the support case."
    attachments: [SupportCaseAttachmentInput!]!
    "Support case ID."
    caseId: String!
    "The Rubrik cluster UUID."
    clusterUuid: UUID
}

"Supported in v5.0+"
input UpdateSupportTunnelConfigInput {
    """

    Supported in v5.0+
    Tunnel inactivity timeout in seconds.
    """
    inactivityTimeoutInSeconds: Long
    """

    Required. Supported in v5.0+
    Pass **_true_** top open the support tunnel, and **_false_** to close.
    """
    isTunnelEnabled: Boolean!
}

"Input for updating a Rubrik Support representative's access to the customer account."
input UpdateSupportUserAccessInput {
    "Support user access ID."
    id: Int = 0
    "User ID of the customer on whose behalf the Rubrik Support representative is accessing the customer account."
    impersonatedUserId: String = ""
    "Duration of access, in hours."
    newDurationInHours: Int = 0
}

input UpdateSyslogExportRuleInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The ID of syslog export rule."
    id: String!
    "Syslog export rule"
    syslogSettingsV51: SyslogExportRuleUpdateInput
    "Syslog export rule"
    syslogSettingsV52: SyslogExportRulePartialInput
    "Syslog export rule"
    syslogSettingsV53: SyslogExportRulePartialInput
    "Syslog export rule."
    syslogSettingsV60: SyslogExportRulePartialInput
    "Syslog export rule."
    syslogSettingsV70: SyslogExportRulePartialInput
    "Syslog export rule."
    syslogSettingsV80: SyslogExportRulePartialInput
    "Syslog export rule."
    syslogSettingsV90: SyslogExportRulePartialInput
}

"Input for enabling or disabling the SSH Tunnel for Support Access."
input UpdateTunnelStatusInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. The support tunnel parameters."
    config: UpdateSupportTunnelConfigInput!
    "Required. ID of the node add the tunnel to (this must be the current node id or *me*)."
    id: String!
}

"vCD instance to update in a cluster."
input UpdateVcdInstanceInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: String!
    "Required. JSON object for a vCD instance."
    definition: VcdClusterPatchInput!
    "Required. ID of the vCD instance to be updated."
    id: String!
}

"VCD instance configurations."
input UpdateVcdInstancesInput {
    "List of vCD instances to add."
    vcdConfigs: [UpdateVcdInstanceInput!]!
}

input UpdateVcdVappInput {
    "Required. ID assigned to a vApp object."
    id: String!
    "Required. Parameters to use to update the specified vApp object."
    patchProperties: VcdVappPatchInput!
}

input UpdateVcenterHotAddBandwidthInput {
    "Required. The ingest and export bandwidth limits for the vCenter."
    hotAddBandwidthInfo: HotAddBandwidthInfoInput!
    "Required. ID of the vCenter server upon which the Rubrik cluster is setting the HotAdd bandwidth limits."
    id: String!
}

input UpdateVcenterHotAddNetworkInput {
    "Required. The information about a static IP address and user-configured vCenter network selected for HotAdd backup and recovery."
    hotAddNetworkInfo: HotAddNetworkConfigWithIdInput!
    "Required. ID of the vCenter server for which the Rubrik cluster is setting the HotAdd network information."
    id: String!
}

input UpdateVcenterInput {
    "Required. ID of the vCenter Server."
    id: String!
    "Required. Object containing updated vCenter Server information."
    updateProperties: VcenterConfigInput!
}

"Input to update protection settings for volume group."
input UpdateVolumeGroupInput {
    "Required. The ID of Volume Group."
    id: String!
    "Required. Properties to update for this Volume Group."
    patchProperties: VolumeGroupPatchInput!
}

input UpdateVsphereAdvancedTagInput {
    "Required. ID of the multi-tag filter."
    filterId: String!
    "Required. Filter name, description, and the conditional logic of vSphere tags."
    filterInfo: FilterInfoInput!
    "Required. ID of the vCenter Server."
    id: String!
}

input UpdateVsphereVmInput {
    "Required. ID of virtual machine."
    id: String!
    "Required. Properties to update."
    vmUpdateProperties: VirtualMachineUpdateWithSecretInput!
}

"Webhook configuration to update."
input UpdateWebhookInput {
    "The authentication type and token to authenticate the endpoint."
    authInfo: AuthInfoInput
    "A description of the webhook to be created."
    description: String
    "The ID of the webhook to be updated."
    id: Int!
    "The new name of the webhook to be updated."
    name: String
    "The application that will receive the webhook."
    providerType: ProviderType
    "The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint."
    serverCertificate: String
    "Specifies whether a test event will be sent upon update."
    shouldSendTestEvent: Boolean = false
    "Specifies whether the webhook is enabled or not."
    status: WebhookStatus
    "A list of event and audit severities to which the webhook is subscribed."
    subscriptionSeverity: SubscriptionSeverityInput
    "A list of event and audit types to which the webhook is subscribed."
    subscriptionType: SubscriptionTypeInput
    "The URL endpoint to the receiving application."
    url: URL
}

"Input to update status of features of AWS cloud account to connected from update permissions state."
input UpgradeAwsCloudAccountFeaturesWithoutCftInput {
    "Rubrik ID of cloud account to be upgraded."
    awsCloudAccountId: String!
    "Cloud account features to be upgraded."
    features: [CloudAccountFeature!]!
}

"Input to set status of IAM user-based AWS cloud account to connected from update permissions state."
input UpgradeAwsIamUserBasedCloudAccountPermissionsInput {
    "Rubrik ID of cloud account to be upgraded."
    awsCloudAccountId: String!
    "Cloud native features to be upgraded."
    features: [CloudAccountFeature!]!
}

"Input for upgrading an Azure Cloud Account."
input UpgradeAzureCloudAccountInput {
    "Rubrik IDs of the subscriptions to be upgraded."
    azureSubscriptionRubrikIds: [UUID!]!
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeature!]!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input for upgrading Azure Cloud Account feature to connected state from update permissions without OAuth."
input UpgradeAzureCloudAccountPermissionsWithoutOauthInput {
    "Rubrik ID of the cloud accounts to upgrade permissions."
    cloudAccountId: UUID!
    "Feature enabled on the Azure Cloud Account, which is currently in Update Permissions state."
    feature: CloudAccountFeature!
}

"Input for upgrading GCP Cloud Account feature to connected state from update permissions without OAuth."
input UpgradeGcpCloudAccountPermissionsWithoutOauthInput {
    "Rubrik ID of the cloud account to upgrade permissions."
    cloudAccountId: UUID!
    "Feature enabled on the GCP Cloud Account, which is currently in Update Permissions state."
    feature: CloudAccountFeature!
}

input UpgradeIoFilterInput {
    "Required. "
    fqdnInfo: FullyQualifiedDomainNameInfoInput!
    "Required. ID of the VMware compute cluster."
    id: String!
}

"Input to upgrade Rubrik SLA Domains."
input UpgradeSlasInput {
    "List of Rubrik SLA Domain IDs to upgrade."
    slaIds: [UUID!]!
}

"Input required to upload a database snapshot to a target blobstore."
input UploadDatabaseSnapshotToBlobstoreInput {
    "Snapshot ID of the database."
    snapshotId: UUID!
    "Storage account configuration to upload the snapshot."
    targetStorageAccountConfigInput: TargetStorageAccountConfigInput
}

"Filter user audit data."
input UserAuditFilter {
    "Filter by audit object type."
    auditObjectType: [AuditObjectType!]
    "Filter by audit severity."
    auditSeverity: [AuditSeverity!]
    "Filter by audit status."
    auditStatus: [AuditStatus!]
    "Filter by audit type."
    auditType: [AuditType!]
    "Filter by cluster UUIDs."
    clusterId: [UUID!]
    "Filter audits that have a user note attached."
    hasUserNote: Boolean
    "Filter by object IDs."
    objectIds: [String!]
    "Filter by organization ID."
    orgIds: [String!]
    "Filter by search term in audit message."
    searchTerm: String
    "Filter audits that have time after the specified value."
    timeGt: DateTime
    "Filter audits that have time before the specified value."
    timeLt: DateTime
}

"The username and password of the user to authenticate the endpoint."
input UserCredentials {
    "The password of the user to authenticate the endpoint."
    password: String!
    "The username of the user to authenticate the endpoint."
    username: String!
}

"Input for filtering a list of users."
input UserFilterInput {
    "Filter users by domain type."
    domainFilter: [UserDomainEnum!] = []
    "Filter users by email."
    emailFilter: String
    "Filter users by lockout state."
    lockoutStateFilter: LockoutStateFilter = ALL
    "Filter users by organization ID."
    orgIdsFilter: [String!] = []
    """

    Filter users that have the specified roles assigned in the current
    organization.
    """
    roleIdsFilter: [String!] = []
}

input UserGroupToRolesInput {
    roleIds: [String!] = []
    userGroupId: String = ""
}

"Details of the user invitation."
input UserInviteInput {
    "Email of the user."
    email: String!
    "Specifies whether the user should be an org admin or not."
    isOrgAdmin: Boolean!
    "Note to the user."
    note: String!
}

input UserSettingInputType {
    setting: String = ""
    value: String = ""
}

"Input for sort parameters."
input UserSortByParam {
    "Field to sort by."
    field: UserSortByField = EMAIL
    "Sort order."
    sortOrder: SortOrder = ASC
}

input UserTimeRangeInput {
    endTime: String = ""
    startTime: String = ""
    timezone: String = ""
}

input VSphereComputeTargetInputType {
    computeClusterCdmId: String = ""
    computeClusterId: String = ""
    computeClusterName: String = ""
    datacenterCdmId: String = ""
    datacenterId: String = ""
    datacenterName: String = ""
    hostCdmId: String = ""
    hostId: String = ""
    hostName: String = ""
    resourcePoolCdmId: String = ""
    resourcePoolId: String = ""
    resourcePoolName: String = ""
    vcenterCdmId: String = ""
    vcenterId: String = ""
    vcenterName: String = ""
}

input VSphereMountFilter {
    clusterUuid: [UUID!]
    name: String
    powerStatus: [Boolean!]
    sourceVmId: UUID
}

input VSphereVMNicSpecInputType {
    adapterType: NetworkAdapterType = E1000
    dnsInfos: [String!] = []
    gateway: String = ""
    ipv4Address: String = ""
    ipv6Address: String = ""
    isPrimaryNic: Boolean = false
    key: String = ""
    netmask: String = ""
    networkId: String = ""
    networkMoid: String = ""
    networkType: NetworkType = STATIC
}

input VSphereVMRecoverySpecInputType {
    email: String = ""
    enableMacPreserveOnly: Boolean = false
    enableNetworkPreserve: Boolean = false
    memoryMbs: Int = 0
    nics: [VSphereVMNicSpecInputType!] = []
    postScriptHash: String = ""
    postScriptTimestamp: String = ""
    target: VSphereComputeTargetInputType
    userData: String = ""
    vcpus: Int = 0
    version: Long = 0
    volumes: [VSphereVMVolumeSpecInputType!] = []
}

input VSphereVMVolumeSpecInputType {
    "Cdm Id of vSphere Datastore."
    dataStoreCdmId: String = ""
    "Id of vSphere Datastore."
    dataStoreId: String = ""
    "Id of vSphere Datastore Cluster."
    datastoreClusterId: String = ""
    "Key value defined in Ebs Volume."
    key: String = ""
    "Label for vSphere volume."
    label: String = ""
    "Size of datastore or datastore cluster in Gbs."
    sizeGbs: Float = 0.0
}

"Input to validate and set up an AWS account."
input ValidateAndCreateAwsCloudAccountInput {
    "Action to be performed with the cloud account."
    action: CloudAccountAction!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    "Details for cloud accounts to be initiated."
    awsChildAccounts: [AwsCloudAccountInput!]!
    "List of features to be enabled for cloud native protection."
    features: [CloudAccountFeature!]!
}

"Configuration to validate and save the customer's Azure KMS."
input ValidateAndSaveCustomerKmsInfoInput {
    "The secret of the client app."
    appSecret: String!
    "Azure KMS configuration, excluding the app secret."
    kmsSpec: KmsSpecInput
}

"Input for validating Exocompute configurations for an Azure Cloud Account."
input ValidateAzureCloudAccountExocomputeConfigurationsInput {
    "List of Exocompute configurations to be validated."
    azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!
    "Rubrik ID of the Azure Cloud Account."
    cloudAccountId: UUID!
}

"Input for ValidateBlueprint."
input ValidateBlueprintInput {
    "Blueprint failover related properties."
    blueprintFailoverProperties: BlueprintFailoverPropertiesInput!
    "Blueprint uuid."
    blueprintId: UUID!
    "List of snappable ids and recovery points."
    childSnappableFailoverInfos: [ChildSnappableFailoverInfoInput!]!
    "Flag to enable recoveries using Rubrik backup agent."
    enableRecoveryWithRba: Boolean
    "Specifies whether to skip validation for the workload recovery job status."
    skipSnappableRecoveryStatusValidation: Boolean
}

"Input for ValidateBlueprints."
input ValidateBlueprintsInput {
    "List of blueprint details."
    blueprintDetails: [ValidateBlueprintInput!]!
}

"Input to validate a certificate and private key pair."
input ValidateCertificateInput {
    "The certificate in x509 PEM format."
    certificatePem: String!
    "The ID of the CSR corresponding to the certificate."
    csrId: Long
    "The private key corresponding to the certificate."
    privateKey: String
}

"Input required to validate the cluster license capacity."
input ValidateClusterLicenseCapacityInput {
    "Specifies whether the cluster is managed by Rubrik Security Cloud or not. When true, the cluster is managed by Rubrik Security Cloud."
    managedByRubrik: ManagedByRubrik!
    "The nodes that will be added."
    nodes: [NodeRegistrationConfigsInput!]!
}

input ValidateOracleAcoFileInput {
    "Required. Contents of the Advanced Cloning Options file in base64 encoded format."
    acoContentsBase64: String!
    "Required. Specifies UUID used to identify the cluster the request goes to."
    clusterUuid: UUID!
    "ID of the Oracle database."
    dbId: String!
    "Required. Boolean that determines whether the ACO file is being used for a Live Mount."
    isLiveMount: Boolean!
}

input ValidateOracleDatabaseBackupsInput {
    "Required. Configuration parameters for a job to validate an Oracle backups."
    config: OracleValidateConfigInput!
    "Required. ID of the database to be validated."
    id: String!
}

"Input required for tenant organization name validation."
input ValidateOrgNameInput {
    "Full name of the organization."
    fullName: String!
    "Name of the organization."
    name: String
}

"Supported in v5.0+"
input VappExportSnapshotJobConfigInput {
    "Required. Supported in v5.0+"
    exportMode: VappExportMode!
    """

    Required. Supported in v5.0+
    Array of vApp networks that are in the specified vApp snapshot and should be set up as part of the export operation. A vApp network that is not included in the array will not be set up in the exported vApp.
    """
    networksToRestore: [CreateVappNetworkParamsInput!]!
    "Supported in v5.0+"
    newVappParams: CreateNewVappParamsInput
    """

    Supported in v5.0+
    Boolean value that indicates whether to power on the exported vApp. Use 'true' to turn the power on for the exported vApp or use 'false' to leave the power off for the exported vApp.
    """
    shouldPowerOnVappAfterExport: Boolean
    """

    Supported in v5.0+
    ID assigned to the target vApp object, when the export is into an existing vApp. When the export is not into a target vApp, remove the 'targetVappId' member.
    """
    targetVappId: String
    """

    Required. Supported in v5.0+
    An array containing summary information for the virtual machines included in the vApp export.
    """
    vmsToExport: [VappVmRestoreSpecInput!]!
}

"Supported in v5.0+"
input VappInstantRecoveryJobConfigInput {
    """

    Supported in v5.0+
    Boolean value that indicates whether to power on the recovered virtual machines in a vApp after Instant Recovery. Use 'true' to turn the power on for the recovered virtual machines or use 'false' to leave the power off for the virtual machines.
    """
    shouldPowerOnVmsAfterRecovery: Boolean
    """

    Required. Supported in v5.0+
    An array containing the restore specification for an Instant Recovery of virtual machines in a vApp snapshot.
    """
    vmsToRestore: [VappVmRestoreSpecInput!]!
}

"Supported in v5.0+"
input VappNetworkSummaryInput {
    """

    Required. Supported in v5.0+
    Boolean value that indicates whether the specified vApp network object has been deployed. Value is 'true' when the vApp network object has been deployed and 'false' when it has not been deployed.
    """
    isDeployed: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Name for the specified vApp network object.
    v6.0+: Name of the specified vApp network object.
    """
    name: String!
    """

    Supported in v5.0+
    vCloud Director ID of the associated organization VDC network object. For an Isolated network, the value is empty.
    """
    parentNetworkId: String
}

"Retrieve vApp snapshot export options."
input VappSnapshotExportOptionsInput {
    "Required. Export mode types enum."
    exportMode: GetVappSnapshotExportOptionsRequestExportMode!
    "Required. ID assigned to the vApp snapshot object."
    snapshotId: String!
    "Optional. ID assigned to a target organization vDC object, when the export is into an existing vDC."
    targetOrgVdcId: String
    "Optional. ID assigned to the target vApp object, when the export is into an existing vApp."
    targetVappId: String
}

"Input for vApp snapshot instant recovery options."
input VappSnapshotInstantRecoveryOptionsInput {
    "Required. ID assigned to a vApp snapshot object."
    snapshotId: String!
}

"Input for getting vApp template snapshot export options."
input VappTemplateSnapshotExportOptionsInput {
    "Required. ID of the target catalog object."
    catalogId: String!
    "Required. Name of template object to create. This is used to verify the existence of a template with the given name. Templates must have unique names."
    name: String!
    "ID assigned to a target organization vDC object. Use the ID when exporting a vApp template snapshot to a specified organization vDC."
    orgVdcId: String
    "Required. ID assigned to a vApp snapshot object."
    snapshotId: String!
}

"Supported in v5.0+"
input VappVmNetworkConnectionInput {
    "Addressing mode of the virtual machine network connection."
    addressingMode: VappVmIpAddressingMode!
    """

    Supported in v5.0+
    v5.0-v5.3: IPv4 address to assign to the specified vApp network connection. Only set this value when the network address allocation method is 'Static'. Otherwise, the value should be empty.
    v6.0+: IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.
    """
    ipAddress: String
    """

    Required. Supported in v5.0+
    Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.
    """
    isConnected: Boolean!
    """

    Supported in v5.0+
    MAC address of the NIC that is used by the specified vApp network connection.
    """
    macAddress: String
    """

    Supported in v5.3+
    v5.3: The network adapter type of this NIC.
    v6.0+: The network adapter type of the NIC.
    """
    networkAdapterType: String
    """

    Required. Supported in v5.0+
    Index assigned to the NIC that is used by the specified vApp network connection.
    """
    nicIndex: Int!
    """

    Supported in v5.0+
    v5.0-v5.3: Name of the vApp network the NIC corresponding to this connection will connect to.
    v6.0+: Name of the vApp network to which the NIC corresponding to this connection will connect to.
    """
    vappNetworkName: String
}

"Supported in v5.0+"
input VappVmRestoreSpecInput {
    """

    Required. Supported in v5.0+
    Name of the specified vApp virtual machine within vCloud.
    """
    name: String!
    "Required. Supported in v5.0+"
    networkConnections: [VappVmNetworkConnectionInput!]!
    """

    Supported in v5.0+
    v5.0-v5.3: Storage policy where this vApp virtual machine should be restored to. If omitted, the VMs will be exported to the default storage policy of the target Organization VDC.
    v6.0+: Storage policy where this vApp virtual machine should be restored to. If omitted, the virtual machines will be exported to the default storage policy of the target Organization VDC.
    """
    storagePolicyId: String
    """

    Required. Supported in v5.0+
    vCloud managed object ID (moid) of the specified vApp virtual machine.
    """
    vcdMoid: String!
}

"Supported in v5.0+"
input VcdClusterBaseConfigInput {
    """

    Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    "Required. Supported in v5.0+"
    hostname: String!
    "Required. Supported in v5.0+"
    username: String!
}

"Supported in v5.0+"
input VcdClusterConfigInput {
    "Required. Supported in v5.0+"
    password: String!
    vcdClusterBaseConfig: VcdClusterBaseConfigInput
}

"Supported in v5.0+"
input VcdClusterPatchInput {
    """

    Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Supported in v5.0+
    v5.0-v5.1:
    v5.2+: Assign this Vcd Cluster to the given SLA Domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    "Supported in v5.0+"
    hostname: String
    "Supported in v5.0+"
    password: String
    "Supported in v5.0+"
    username: String
}

"vCD instance in a Rubrik cluster."
input VcdInstanceInput {
    "Required. UUID of the Rubrik cluster the request goes to."
    clusterUuid: String!
    "ID assigned to a vCD instance."
    id: String!
}

"Supported in v5.0+"
input VcdVappPatchInput {
    """

    Supported in v5.0+
    v5.0-v5.1: ID assigned to the SLA Domain object that manages protection for the specified vApp object.
    v5.2-v5.3: ID assigned to the SLA Domain object that manages protection for the specified vApp object. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    v6.0+: ID assigned to the SLA Domain object that manages protection for the specified vApp object. Existing snapshots of the object will be retained with the configuration of the specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    v5.0-v5.3: Boolean value that indicates whether Rubrik should attempt taking synchronized snapshots across all child Virtual Machines of the vApp.
    v6.0+: Boolean value that indicates whether the Rubrik cluster should attempt taking synchronized snapshots across all child virtual machines of the vApp.
    """
    isBestEffortSynchronizationEnabled: Boolean
    """

    Supported in v5.0+
    Boolean value that indicates whether protection activity is paused for the specified vApp. Set to 'true' when protection activity is paused and 'false' when protection activity is not paused. Protection activity includes backup, replication, and archiving.
    """
    isPaused: Boolean
    """

    Supported in v5.0+
    v5.0-v5.3: Array containing vCloud Director Virtual Machine moids that will be excluded from vApp snapshots.
    v6.0+: Array containing vCloud Director virtual machine moids that will be excluded from vApp snapshots.
    """
    vcdVmMoidsToExcludeFromSnapshot: [String!] = []
}

"Supported in v5.0+"
input VcenterConfigInput {
    """

    Supported in v5.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Supported in v6.0+
    Select compute clusters that must be visible to this Rubrik cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machinesthat currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.
    """
    computeVisibilityFilter: [ClusterVisibilityConfigInput!] = []
    """

    Supported in v5.0+
    Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
    """
    conflictResolutionAuthz: VcenterConfigConflictResolutionAuthz
    "Required. Supported in v5.0+"
    hostname: String!
    "Required. Supported in v5.0+"
    password: String!
    """

    Supported in v7.0+
    A Boolean value that determines whether to enable HotAdd transport mode for On-Premise vCenter. When this value is `true`, VMware virtual machines can use HotAdd proxy to transport virtual disk data in addition to NBD(SSL). When this value is `false`, VMware virtual machines can ONLY use NBD(SSL) to transport virtual disk data. Default value is `false`.
    """
    shouldEnableHotAddProxyForOnPrem: Boolean
    "Required. Supported in v5.0+"
    username: String!
}

"Supported in v5.3+"
input VcenterConfigV2Input {
    """

    Supported in v5.3+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Supported in v6.0+
    Select compute clusters that must be visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machines that currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.
    """
    computeVisibilityFilter: [ClusterVisibilityConfigInput!] = []
    """

    Supported in v5.3+
    Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
    """
    conflictResolutionAuthz: VcenterConfigV2ConflictResolutionAuthz
    """

    Required. Supported in v5.3+
    The hostname of the new vCenter.
    """
    hostname: String!
    """

    Required. Supported in v5.3+
    The password of the new vCenter.
    """
    password: String!
    """

    Supported in v7.0+
    A Boolean value that determines whether to enable HotAdd transport mode for On-Premise vCenter. When this value is `true`, VMware virtual machines can use HotAdd proxy to transport virtual disk data in addition to NBD(SSL). When this value is `false`, VMware virtual machines can ONLY usee NBD(SSL) to transport virtual disk data. Default value is `false`.
    """
    shouldEnableHotAddProxyForOnPrem: Boolean
    """

    Required. Supported in v5.3+
    The username of the new vCenter.
    """
    username: String!
}

"Supported in v6.0+"
input VcenterConnectionConfigInput {
    """

    Supported in v6.0+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Required. Supported in v6.0+
    Hostname of the new vCenter.
    """
    hostname: String!
    """

    Required. Supported in v6.0+
    Password for the new vCenter.
    """
    password: String!
    """

    Required. Supported in v6.0+
    Username of the new vCenter.
    """
    username: String!
}

"Supported in v6.0+"
input VcenterPreAddConfigInput {
    """

    Supported in v6.0+
    IP address and account credentials of the vCenter server that is being added. Specify this if the vCenter is not added to Rubrik cluster.
    """
    connectionConfig: VcenterConnectionConfigInput
    """

    Supported in v6.0+
    Id of the vCenter. Specify this if the vCenter is already added to the Rubrik cluster.
    """
    id: String
}

"""

Supported in m3.2.0-m4.2.0
Mosaic management object version.
"""
input VersionInput {
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the database.
    """
    databaseName: String!
    """

    Supported in m3.2.0-m4.2.0
    Limit number of entries.
    """
    maxEntries: Int
    """

    Supported in m3.2.0-m4.2.0
    Since the given timestamp.
    """
    since: Int
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the source.
    """
    sourceName: String!
    """

    Supported in m4.1.0-m4.2.0
    Source type.
    """
    sourceType: VersionSourceType
    """

    Required. Supported in m3.2.0-m4.2.0
    Name of the table.
    """
    tableName: String!
    """

    Supported in m3.2.0-m4.2.0
    Upto the given timestamp.
    """
    upto: Int
}

"Supported in v5.0+"
input VirtualMachineScriptDetailInput {
    """

    Required. Supported in v5.0+
    Action to take if the script returns an error or times out.
    """
    failureHandling: VirtualMachineScriptDetailFailureHandling!
    """

    Required. Supported in v5.0+
    The command to be run in VM guest OS.
    """
    scriptPath: String!
    """

    Required. Supported in v5.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"Supported in v5.0+"
input VirtualMachineUpdateInput {
    """

    Supported in v5.0+
    Cloud instantiation specification for the selected virtual machine.
    """
    cloudInstantiationSpec: CloudInstantiationSpecInput
    """

    Supported in v5.0+
    v5.0-v5.1: Assign this VM to the given SLA domain.
    v5.2+: Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.
    """
    isArrayIntegrationEnabled: Boolean
    """

    Supported in v5.0+
    Whether to pause or resume backups/archival for this VM.
    """
    isVmPaused: Boolean
    "Supported in v5.0+"
    maxNestedVsphereSnapshots: Int
    "Supported in v5.0+"
    postBackupScript: VirtualMachineScriptDetailInput
    "Supported in v5.0+"
    postSnapScript: VirtualMachineScriptDetailInput
    "Supported in v5.0+"
    preBackupScript: VirtualMachineScriptDetailInput
    """

    Supported in v5.0+
    Consistency level mandated for this VM or empty string for none.
    """
    snapshotConsistencyMandate: VirtualMachineUpdateSnapshotConsistencyMandate
    "Supported in v5.0+"
    throttlingSettings: VmwareAdaptiveThrottlingSettingsInput
}

"Supported in v5.0+"
input VirtualMachineUpdateWithSecretInput {
    "Supported in v5.0+"
    guestCredential: BaseGuestCredentialInput
    """

    Supported in v7.0+
    ID of the guest OS credential to be used for authentication to the virtual machine guest OS. When this ID is specified, the 'guestCredential' field will be ignored.
    """
    guestCredentialId: String
    """

    Supported in v5.0+
    A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.
    """
    shouldRefreshCacheAfterUpdate: Boolean
    virtualMachineUpdate: VirtualMachineUpdateInput
}

"Supported in v5.0+"
input VlanConfigInput {
    """

    Required. Supported in v5.0+
    Network interfaces for each node.
    """
    interfaces: [NodeIpInput!]!
    """

    Required. Supported in v5.0+
    Netmask for addresses on this VLAN.
    """
    netmask: String!
    "Required. Supported in v5.0+"
    vlan: Int!
}

"Details of VLAN IP."
input VlanIpInput {
    "IP for the VLAN interface."
    ip: String!
    "VLAN ID for the node."
    vlan: Int!
}

"Details of the virtual machine to be used as the download location."
input VmDownloadLocationDetailsInput {
    "The Rubrik ID of the virtual machine."
    id: String!
    "The path where the files will be downloaded on the target virtual machine. When downloading to the source virtual machine, this field must be empty to recover to the original path."
    pathToRecover: String
}

"Supported in v5.0+"
input VmRestorePathPairInput {
    restorePathPair: RestorePathPairInput
}

"Supported in v5.0+"
input VmwareAdaptiveThrottlingSettingsInput {
    """

    Supported in v5.0+
    Threshold virtual machine CPU utilization value that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value as a percentage.
    """
    cpuUtilizationThreshold: Int
    """

    Supported in v5.0+
    Threshold datastore latency value, measured across all datastores, that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value in milliseconds (ms).
    """
    datastoreIoLatencyThreshold: Int
    """

    Supported in v5.0+
    Threshold virtual machine latency value that determines whether to postpone a scheduled snapshot of the vSphere virtual machine. Specify the threshold value in milliseconds (ms).
    """
    ioLatencyThreshold: Int
}

"Supported in v5.3+"
input VmwareDatastoreFreespaceThresholdInput {
    "Required. Supported in v5.3+"
    threshold: Float!
    "Supported in v5.3+"
    vmId: String
}

input VmwareDownloadSnapshotFromLocationInput {
    "Additional configuration for the snapshot download operation."
    downloadConfig: VmwareSnapshotDownloadRequestInput
    "Required. ID of the replication or archival location."
    locationId: String!
    "Required. ID of a snapshot."
    snapshotId: String!
}

"Supported in v6.0+"
input VmwareNetworkDeviceInfoV2Input {
    """

    Required. Supported in v6.0+
    Device key of the network adapter.
    """
    key: Int!
    """

    Required. Supported in v6.0+
    Name of the network adapter.
    """
    name: String!
}

"Supported in v6.0+"
input VmwareNetworkInfoV2Input {
    """

    Required. Supported in v6.0+
    MOID of the VMware network.
    """
    moid: String!
    """

    Required. Supported in v6.0+
    Name of the VMware network.
    """
    name: String!
}

"Supported in v7.0+"
input VmwareSnapshotDownloadRequestInput {
    """

    Supported in v7.0+
    ID of the SLA Domain to manage retention of the downloaded snapshot.
    """
    slaId: String
}

"Supported in Rubrik CDM version 9.0 and later. The VMware disk device key and the storage location ID it belongs to."
input VmwareStorageIdWithDeviceKeyV2Input {
    "Required. Supported in Rubrik CDM version 9.0 and later. The VMware disk device key."
    deviceKey: Int!
    "Supported in Rubrik CDM version 9.0 and later. ID of the datastore or datastore cluster."
    storageLocationId: String
}

input VmwareVmConfigInput {
    logRetentionSeconds: Long = 0
}

"Supported in v6.0+"
input VmwareVnicBindingInfoV2Input {
    """

    Required. Supported in v6.0+
    Information about the backing network.
    """
    backingNetworkInfo: VmwareNetworkInfoV2Input!
    """

    Required. Supported in v6.0+
    Information about the network device.
    """
    networkDeviceInfo: VmwareNetworkDeviceInfoV2Input!
}

"Supported in v5.0+"
input VolumeGroupDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    v5.0-v7.0: An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
    v8.0+: Array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
    """
    paths: [String!]!
}

"Filter volume group live mount results."
input VolumeGroupLiveMountFilterInput {
    "Type of filter."
    field: VolumeGroupLiveMountFilterField = MOUNT_NAME
    "Values for the filter type."
    texts: [String!] = []
}

"Sort volume group live mounts results."
input VolumeGroupLiveMountSortByInput {
    "Field for volume group live mounts sort by."
    field: VolumeGroupLiveMountSortByField = MOUNT_NAME
    "Sort order for volume group live mounts sort by."
    sortOrder: SortOrder = ASC
}

"Supported in v5.0+"
input VolumeGroupMountSnapshotJobConfigInput {
    """

    Supported in v5.0+
    Domain name of the users that are authenticated to access the SMB share.
    """
    smbDomainName: String
    """

    Supported in v5.0+
    IP address of the hosts that are authenticated to access the SMB share.
    """
    smbValidIps: [String!] = []
    """

    Supported in v5.0+
    Usernames of the users that are authenticated to access the SMB share.
    """
    smbValidUsers: [String!] = []
    """

    Supported in v5.0+
    Only specified if mounting on a specific Host is desired. If not specified, Rubrik will simply expose addresses of SMB mounts per recovered Volume. If a mount point is specified in any of the volumeConfigs, this must be defined. If this is specified, but no mount points are, Rubrik will generate mount paths to mount on the target Host for each volume.
    """
    targetHostId: String
    """

    Required. Supported in v5.0+
    The configuration of the Volumes to be mounted on the Host.
    """
    volumeConfigs: [VolumeGroupVolumeMountConfigInput!]!
}

"Supported in v5.0+"
input VolumeGroupOnDemandSnapshotConfigInput {
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Volumes which we will include in the snapshot. If not passed, the Volumes currently assigned to the Volume Group will be used.
    v5.3+: The unique ID of each volume included in the Volume Group snapshot.
    """
    volumeIdsIncludedInSnapshot: [String!] = []
}

"Supported in v5.0+"
input VolumeGroupPatchInput {
    """

    Supported in v5.0+
    v5.0-v5.2: Assign this Volume Group to the given SLA domain.
    v5.3+: The ID of the SLA Domain policy to assign to the Volume Group.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.1+
    v5.1-v5.2: Boolean value that determines whether to force a full for the next snapshot of a volume group. Use true to force a full and false to use the default. The backup job resets the parameter to false after a successful full snapshot.
    v5.3+: Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.
    """
    forceFull: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: Whether backup/archival/replication is paused for this Volume Group
    v5.3+: Indicates whether backup, archival, and replicated is paused for this Volume Group.
    """
    isPaused: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Volumes which we will include in snapshots. The volume must either currently exist on the host, or already be included in snapshots.
    v5.3: The unique ID of each volume included in the Volume. Group.
    v6.0+: The unique ID of each volume included in the Volume Group.
    """
    volumeIdsIncludedInSnapshots: [String!] = []
}

"Supported in v5.0+"
input VolumeGroupRestoreFileConfigInput {
    """

    Required. Supported in v5.0+
    Absolute file path.
    """
    path: String!
    """

    Required. Supported in v5.0+
    Target folder for the copied files.
    """
    restorePath: String!
}

"Supported in v5.0+"
input VolumeGroupRestoreFilesConfigInput {
    """

    Required. Supported in v5.0+
    Directory of folder to copy files into.
    """
    restoreConfigs: [VolumeGroupRestoreFileConfigInput!]!
    """

    Supported in v5.0+
    Windows Host ID to restore files to. If left empty, the host ID of the Volume Group will be used.
    """
    targetHostId: String
}

"Supported in v7.0+"
input VolumeGroupSnapshotDownloadConfigInput {
    """

    Supported in v7.0+
    ID of the SLA Domain to manage retention of the downloaded snapshot.
    """
    slaId: String
}

"Supported in v5.0+"
input VolumeGroupVolumeMountConfigInput {
    """

    Supported in v5.0+
    The path on the Host on which the Volume will be mounted. It must be either an untaken drive letter name, a directory that does not exist but on a valid drive letter, or an empty directory that already exists.
    """
    mountPointOnHost: String
    """

    Required. Supported in v5.0+
    ID of the Volume to mount.
    """
    volumeId: String!
}

"Exclusion status of AWS EBS volumes."
input VolumeIdExclusion {
    "Specfies whether the EBS volume is excluded from snapshot."
    isExcluded: Boolean!
    "ID of the AWS EBS volume."
    volumeId: String!
}

"Input to trigger on demand snapshot for multiple virtual machines."
input VsphereBulkOnDemandSnapshotInput {
    "Required. The IDs of the virtual machines for which to take an on-demand snapshot and the ID of the SLA Domain to assign to the resulting snapshot."
    config: BulkOnDemandSnapshotJobConfigInput!
    "Required. User note to associate with audits."
    userNote: String
}

"Input for deleting vSphere vCenter."
input VsphereDeleteVcenterInput {
    "Required. ID of the vCenter Server. to remove."
    id: String!
}

"Set disks to be included/excluded in snapshot."
input VsphereExcludeVmDisksInput {
    "Virtual disk will be excluded from snapshot."
    excludeFromSnapshots: Boolean
    "Fid of virtual disk."
    virtualDiskFid: UUID!
}

"Input for exporting snapshot to standalone host."
input VsphereExportSnapshotToStandaloneHostV2Input {
    "Required. Configuration for the export request to standalone ESXi host."
    config: ExportSnapshotToStandaloneHostRequestInput!
    "Required. ID of snapshot."
    id: String!
}

"Filter vSphere Live Mount results."
input VsphereLiveMountFilterInput {
    "Type of filter."
    field: VsphereLiveMountFilterField = UNSPECIFIED
    "Values for the filter type."
    texts: [String!] = []
}

"Sort vSphere Live Mount results."
input VsphereLiveMountSortBy {
    "Field to sort vSphere Live Mounts by."
    field: VsphereLiveMountSortByField = UNSPECIFIED
    "Sort order for vSphere Live Mounts."
    sortOrder: SortOrder = ASC
}

"Supported in v5.0+"
input VsphereLoginInfoInput {
    """

    Required. Supported in v5.0+
    IP address of ESXi host.
    """
    ip: String!
    """

    Required. Supported in v5.0+
    Password of ESXi host.
    """
    password: String!
    """

    Required. Supported in v5.0+
    Username of ESXi host.
    """
    username: String!
}

"Input for taking on demand snapshot of vSphere virtual machine."
input VsphereOnDemandSnapshotInput {
    "Configuration for the on-demand snapshot."
    config: BaseOnDemandSnapshotConfigInput
    "Required. ID of the virtual machine."
    id: String!
    "Required. User note to associate with audits."
    userNote: String
}

input VsphereVirtualDiskFilter {
    clusterUuid: [UUID!]
    fileName: String
    sourceVmId: UUID
}

"Input for batch export snapshots for vSphere."
input VsphereVmBatchExportInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the exported virtual machine snapshot."
    config: BatchExportSnapshotJobConfigInput!
}

"Input for batch in place recovery for vSphere virtual machines."
input VsphereVmBatchInPlaceRecoveryInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the virtual machine snapshot for in-place recovery."
    config: BatchInPlaceRecoveryJobConfigInput!
}

"Input for deleting VMware snapshots."
input VsphereVmDeleteSnapshotInput {
    "Required. ID of snapshot."
    id: String!
    "Required. Location of the snapshot. Use **_local_** to delete only the local copy of the snapshot. Or use **_all_** to delete the snapshot locally, on a replication target, and at an archival location."
    location: DeleteVmwareSnapshotRequestLocation!
}

"Input for downloading vSphere snapshot files."
input VsphereVmDownloadSnapshotFilesInput {
    "The delta type options which the files will be filtered on."
    deltaTypeFilter: [DeltaType!]
    """

    Supported in v5.2+.
    v5.2+: Specifies whether the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that is used for integrity verification by external bodies.
    """
    isLegalHoldDownload: Boolean
    "The fid of the next snapshot to perform the delta on."
    nextSnapshotFid: UUID
    "Required. Paths of the files."
    paths: [String!]!
    "Required. ID of the virtual machine snapshot."
    snapshotFid: UUID!
    "User note to associate with audits."
    userNote: String
}

"Input for downloading vSphere snapshot from archive."
input VsphereVmDownloadSnapshotInput {
    "Required. ID of snapshot."
    id: String!
}

"Input to export snapshot for vSphere virtual machine."
input VsphereVmExportSnapshotV2Input {
    "Required. Configuration for the Export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available."
    config: ExportSnapshotJobConfigV2Input!
    "Required. ID of a VM."
    id: String!
}

"Supported in Rubrik CDM version 9.0 and later."
input VsphereVmExportSnapshotV3Input {
    "Required. Configuration for the export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available."
    config: ExportSnapshotJobConfigV3Input!
    "Required. Virtual machine ID."
    id: String!
}

"Input to download and export vSphere snapshot from archival."
input VsphereVmExportSnapshotWithDownloadFromCloudInput {
    "Required. Configuration for the export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available."
    config: ExportSnapshotJobConfigV2Input!
    "Required. ID of a VM."
    id: String!
}

"Input for batch instant recovery for vSphere."
input VsphereVmInitiateBatchInstantRecoveryInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the virtual machine snapshot for Instant Recovery."
    config: BatchInstantRecoveryJobConfigInput!
}

"Input for live mounting multiple vSphere snapshots."
input VsphereVmInitiateBatchLiveMountV2Input {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. Configuration object containing an array of virtual machine IDs, providing a way to indicate the selected snapshot and the mount configurations."
    config: BatchMountSnapshotJobConfigV2Input!
}

"Input for creating vSphere disk mount."
input VsphereVmInitiateDiskMountInput {
    "Required. Configuration for the mount request."
    config: MountDiskJobConfigInput!
    "Required. ID of a snapshot."
    id: String!
}

"Input for in place recovery for vSphere virtual machine."
input VsphereVmInitiateInPlaceRecoveryInput {
    "Required. Configuration for the in-place recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an in-place recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an in-place recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT in-place recovery that uses the most recent time available."
    config: InPlaceRecoveryJobConfigV2Input!
    "Required. ID of a VM."
    id: String!
}

"Input for instant recovery for vSphere virtual machine."
input VsphereVmInitiateInstantRecoveryV2Input {
    "Required. Configuration for the Instant Recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an instant recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an instant recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT instant recovery that uses the most recent time or snapshot available."
    config: InstantRecoveryJobConfigV2Input!
    "Required. ID of a VM."
    id: String!
}

"Input to initiate live mount of vSphere snapshot."
input VsphereVmInitiateLiveMountV2Input {
    "Configuration for the Live Mount request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers a live mount using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers a live mount using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT live mount that uses the most recent time or snapshot available."
    config: MountSnapshotJobConfigV2Input
    "Required. ID of a VM."
    id: String!
}

"Input for getting all datastores for ESXi host."
input VsphereVmListEsxiDatastoresInput {
    "Required. UUID used to identify the cluster the request goes to."
    clusterUuid: String!
    "Required. "
    loginInfo: VsphereLoginInfoInput!
}

"Input for relocating vSphere mount."
input VsphereVmMountRelocateInput {
    "Required. Configuration for the RelocateMount request to another data store."
    config: RelocateMountConfigInput!
    "Required. ID of the live mount."
    id: String!
}

"Supported in Rubrik CDM version 9.0 and later. Input for relocating vSphere mount."
input VsphereVmMountRelocateV2Input {
    "Required. Configuration for the RelocateMount request to another datastore or datastore cluster."
    config: RelocateMountConfigV2Input!
    "Required. ID of the Live Mount."
    id: String!
}

"Input for powering vSphere mount on/off."
input VsphereVmPowerOnOffLiveMountInput {
    "Required. Power state configuration."
    config: UpdateMountConfigInput!
    "Required. ID of a Live Mount."
    id: String!
}

"Input for recovering files from snapshot."
input VsphereVmRecoverFilesInput {
    "Virtual machine restore parameters."
    restoreConfig: RestoreConfig!
    "Corresponds to snapshot forever UUID."
    snapshotFid: UUID!
}

"Input for recovering files from snapshot."
input VsphereVmRecoverFilesNewInput {
    "UUID used to identify the cluster the request goes to."
    clusterUuid: UUID!
    "Required. Configuration for the restore request."
    config: RestoreFilesJobConfigInput!
    "An object providing the parameters for the recovery of a snapshot and a next snapshot delta."
    deltaRequest: DeltaRecoveryInput
    "ID of a snapshot."
    id: String!
}

"Input to register Rubrik Backup Agent."
input VsphereVmRegisterAgentInput {
    "Required. ID assigned to a virtual machine object."
    id: String!
}

"Input for warm search cache for an O365 workload."
input WarmSearchCacheInput {
    "The fid for the workload."
    workloadFid: UUID!
}

"Supported in v5.2+"
input WebServerCertificatePayloadInput {
    """

    Required. Supported in v5.2+
    ID assigned to the imported certificate object.
    """
    certificateId: String!
}

"Weekly snapshot schedule."
input WeeklySnapshotScheduleInput {
    "Basic weekly snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
    "Day of the week."
    dayOfWeek: DayOfWeek = MONDAY
}

"The workload fields in BrowseSnapshotFileDelta request."
input WorkloadFieldsInput {
    "Microsoft Office 365 fields in BrowseSnapshotFileDelta request."
    o365FileDelta: O365SnapshotFileDeltaInput
}

"Filters for list of workload."
input WorkloadFilter {
    "Filter by organization IDs."
    orgIds: [String!]
}

"Yearly snapshot schedule."
input YearlySnapshotScheduleInput {
    "Basic yearly snapshot schedule."
    basicSchedule: BasicSnapshotScheduleInput
    "Day of the Year."
    dayOfYear: DayOfYear = FIRST_DAY
    "Starting month of year."
    yearStartMonth: Month = JANUARY
}
