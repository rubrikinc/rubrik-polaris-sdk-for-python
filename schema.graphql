# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface AwsNativeAccountDescendantType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface AwsNativeAccountLogicalChildType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Blueprint"
interface Blueprint {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "list of children"
    children: [BlueprintChild!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "status of the last test failover"
    currentFailoverStatus: AppBlueprintFailoverStatusEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "relic status of the Blueprint"
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    "last test failover"
    lastTestFailover: Failover
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "resource mapping status of the Blueprint"
    rmStatus: AppBlueprintRmStatusEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "status of the Blueprint"
    status: AppBlueprintStatusEnum!
}

"Blueprint Child"
interface BlueprintChild {
    "boot priority"
    bootPriority: Int!
    "child fid"
    fid: UUID!
}

"A Blueprint failover instance"
interface BlueprintFailoverInstance {
    "blueprint child snappable id"
    snappableId: String!
}

"Blueprint Location"
interface BlueprintLocation {
    "The type of the location"
    type: BlueprintLocationTypeEnum!
}

"A Blueprint"
interface BlueprintNew {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "list of children"
    children: [BlueprintChild!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "archived status of the Blueprint"
    isArchived: Boolean!
    "Status of the last failover."
    lastFailoverStatus: BlueprintFailoverStatus!
    "Time when the last failover occurred."
    lastFailoverTime: DateTime
    "Status of the last test failover."
    lastTestFailoverStatus: BlueprintFailoverStatus!
    "Time when the last test failover occurred."
    lastTestFailoverTime: DateTime
    "Details of the latest failover."
    latestFailover: BlueprintFailover
    "Details of the local blueprint RPO lag."
    localRpoLagInfo: RPOLagInfo
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "blueprint remote RPO lag info"
    remoteRpoLagInfo: RPOLagInfo
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "The source location from which this object originated."
    sourceLocation: BlueprintLocation
    "status of the Blueprint"
    status: BlueprintStatusEnum!
    "The target location to which the object failed over"
    targetLocation: BlueprintLocation
    "version of the Blueprint"
    version: Int!
}

"A CDM Managed Hierarchy Object"
interface CdmHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Managed Hierarchy Snappable"
interface CdmHierarchySnappableNew {
    "The ID of the snappable on the Rubrik CDM cluster."
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this snappable originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

"Cloud Account (AWS, Azure etc.) Info"
interface CloudAccount {
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
}

interface DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
}

interface FailoverClusterAppDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FailoverClusterAppPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FailoverClusterTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FilesetTemplateDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FilesetTemplatePhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface GcpNativeProjectDescendantType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface GcpNativeProjectLogicalChildType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A generic snapshot type"
interface GenericSnapshot {
    "The date of the snapshot."
    date: DateTime!
    "The expirationDate of the snapshot."
    expirationDate: DateTime
    "The id of the snapshot."
    id: UUID!
    "The number of indexing attempts for the snapshot."
    indexingAttempts: Long!
    "Whether or not the snapshot is corrupted."
    isCorrupted: Boolean!
    "Whether or not the snapshot is expired"
    isExpired: Boolean!
    "Whether or not the snapshot is indexed."
    isIndexed: Boolean!
    "Whether the snapshot is an on-demand snapshot"
    isOnDemandSnapshot: Boolean!
    "Whether or not the snapshot is unindexable."
    isUnindexable: Boolean!
    "The snappableId of the snapshot."
    snappableId: String!
}

"A Managed Hierarchy Object"
interface HierarchyObject {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Generic Hierarchy Snappable"
interface HierarchySnappable {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostFailoverClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostFailoverClusterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostShareDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostSharePhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVSCVMMDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVSCVMMLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVServerDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVServerLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface K8sClusterDescendant {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlAvailabilityGroupDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlAvailabilityGroupLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlInstanceDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlInstanceLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NutanixClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NutanixClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface O365AppObject {
    "The added time of the O365 app."
    addedAt: DateTime!
    "The id of the O365 app."
    appId: String!
    "The owner of the O365 app (RUBRIK or CUSTOMER)."
    appOwner: String!
    "The type of the O365 app (e.g. ONEDRIVE)"
    appType: String!
    "The authentication status of the app against the subscription"
    isAuthenticated: Boolean!
    "The subscription to which the O365 app is associated."
    subscription: String!
}

interface O365ExchangeObject {
    "The id of the O365 exchange object."
    id: String!
    "The parent folder id of the object (ROOT indicates root folder)."
    parentFolderId: String
}

interface O365OnedriveObject {
    "The name of the folder corresponding to the Teams channel."
    channelFolderName: String
    "The display name of the Teams channel."
    channelName: String
    "The creation time of the onedrive object"
    createTime: DateTime
    "The id of the O365 onedrive object."
    id: String!
    "The modified time of the onedrive object"
    modifiedTime: DateTime
    "The name of the onedrive object"
    name: String
    "The parent folder id of the object (ROOT indicates root folder)."
    parentFolderId: String
    "The size of the onedrive object or its contents in bytes"
    size: Long
}

interface O365OrgDescendant {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface O365SharepointObject {
    "The sharepoint object ID"
    objectId: String!
    "The parent id of the object"
    parentId: String!
    "The title or name of the sharepoint object"
    title: String!
}

interface O365TeamsChannelObject {
    "The id of the Sharepoint folder for the Teams channel."
    folderId: String
    "The name of the Sharepoint folder for the Teams channel."
    folderName: String
    "The id of the Teams channel"
    id: String
    "The display name of the Teams channel."
    name: String
}

interface O365TeamsMessageObject {
    "The sender of the Teams message."
    from: String
    "The id of the email representing the Teams message"
    id: String
    "The time the Teams message was sent."
    sentDateTime: DateTime
    "The id of the snapshot."
    snapshotId: UUID
    "The recipients of the Teams message."
    toRecipients: [String!]!
}

interface O365UserDescendant {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleHostDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleHostLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleRacDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleRacLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface PhysicalHostDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Polaris Managed Hierarchy Object"
interface PolarisHierarchyObject {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Polaris Snappable"
interface PolarisHierarchySnappable {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

interface ProtectedObjectSummary {
    "The effective sla of the protected object (if defined)."
    effectiveSlaOpt: String
    "The id of the protected object."
    id: String!
    "Whether the protected object is archived."
    isArchived: Boolean!
    "The name of the protected object."
    name: String!
    "The object type of the protected object (if returned)"
    objectType: ManagedObjectType
}

"A Recovery Spec"
interface RecoverySpec {
    "the user provided scripts"
    userData: String
    "recovery spec version"
    version: Long!
}

"A Resource Spec"
interface ResourceSpec {
    "resource spec is archived"
    isArchived: Boolean!
    "resource spec child snappable id"
    snappableId: String!
    "resource spec child snappable name"
    snappableName: String!
    "resource spec child snapshot id"
    snapshotId: String!
}

interface SapHanaSystemDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface SapHanaSystemPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface SlaDomain {
    "The id of the SLA Domain."
    id: String!
    "The name of the SLA Domain."
    name: String!
    "The version of the SLA Domain."
    version: String
}

"Target Info to be used for archival or replication"
interface Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    "The name of this Target"
    name: String!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Target Template to be used for automatic archival group"
interface TargetTemplate {
    "The type of this Target"
    targetType: TargetTypeEnum!
}

interface VSphereComputeClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereComputeClusterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereDatacenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereDatacenterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereDatacenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereFolderDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereFolderLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereHostDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagCategoryDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagCategoryTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface Value {
    serializedValue: String!
}

interface VcdCatalogDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdCatalogLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgVdcDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgVdcLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdVappLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface WindowsClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface WindowsClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

union ActivitySeriesGroupByInfo = ActivityObjectType | ActivityStatus | ActivityType | Cluster | ClusterType | TimeRangeWithUnit

union AnomalyResultGroupByInfo = AnomalyStatus | Cluster | Snappable | TimeRangeWithUnit

union CdmSnapshotGroupByInfo = TimeRangeWithUnit

union ClusterGroupByInfo = ClusterType | TimeRangeWithUnit

union ClusterMetricGroupByInfo = TimeRangeWithUnit

union CustomReportGroupByInfo = ReportFocus

union FailoverGroupByInfo = FailoverStatus | FailoverType | LastTestStatus | Source | TargetSite | TimeRangeWithUnit

union MissedSnapshotGroupByInfo = TimeRangeWithUnit

union PolarisSnapshotGroupByInfo = TimeRangeWithUnit

union RansomwareResultGroupByInfo = Cluster | Snappable | TimeRangeWithUnit

"All the possible chart types."
union ReportChartType = ActivityChart | AnomalyChart | FailoverChart | InfrastructureChart | SnappableChart | SonarContentReportChart | SonarReportChart | TaskDetailChart | TaskSummaryChart | UserAuditChart

"All the possible table types."
union ReportTableType = ActivityTable | AnomalyTable | FailoverTable | InfrastructureTable | SnappableTable | SonarContentReportTable | SonarReportTable | TaskDetailTable | TaskSummaryTable | UserAuditTable

union SnappableGroupByInfo = Cluster | ClusterSlaDomain | ClusterType | ComplianceStatus | ObjectType | ProtectionStatus | TimeRangeWithUnit

union TaskDetailGroupByInfo = Cluster | Status | TaskDetailClusterType | TaskDetailObjectType | TimeRangeWithUnit

union TaskSummaryGroupByInfo = Cluster | ClusterType | GlobalSla | ObjectType | PolarisHierarchySnappableObject | TimeRangeWithUnit

union UpgradeGroupByInfo = ClusterJobStatusType | ClusterType

union UserAuditGroupByInfo = Cluster | ClusterType | TimeRangeWithUnit | UserAuditObjectType | UserAuditStatus | UserAuditType

type ADObject {
    cn: String!
    distinguishedName: String!
    emailAddress: String!
    memberOf: String!
    objectCategory: String!
    objectClass: String!
    objectGuid: String!
    objectSid: String!
    paginationId: Int!
    resolutionType: ResolutionTypeEnum!
}

type ADObjectConnection {
    count: Int!
    edges: [ADObjectEdge!]!
    nodes: [ADObject!]!
    pageInfo: PageInfo!
}

type ADObjectEdge {
    cursor: String!
    node: ADObject!
}

type ASPKey {
    account: String!
    component: ComponentEnum!
    name: String!
}

type ASPValue {
    key: ASPKey
    value: String!
}

"additional information about the vcenter object, such as name, version, os type, and api type, only available on clusters 5.1+"
type AboutInformation {
    apiType: String!
    name: String!
    osType: String!
    version: String!
}

type AccessGroup {
    groupId: String!
    groupName: String!
}

type AccessGroupConnection {
    count: Int!
    edges: [AccessGroupEdge!]!
    nodes: [AccessGroup!]!
    pageInfo: PageInfo!
}

type AccessGroupEdge {
    cursor: String!
    node: AccessGroup!
}

type AccessUser {
    activityDelta: Int!
    email: String!
    lastAccessTime: String!
    numActivities: Int!
    userSid: String!
    username: String!
}

type AccessUserConnection {
    count: Int!
    edges: [AccessUserEdge!]!
    nodes: [AccessUser!]!
    pageInfo: PageInfo!
}

type AccessUserEdge {
    cursor: String!
    node: AccessUser!
}

type AccountSetting {
    isEmailNotificationEnabled: Boolean
    isEulaAccepted: Boolean
}

type Activity {
    activityInfo: String
    activitySeries: ActivitySeries!
    clusterId: UUID!
    id: ID!
    message: String!
    objectId: String!
    objectType: ActivityObjectTypeEnum!
    progress: String
    severity: ActivitySeverityEnum!
    status: ActivityStatusEnum!
    time: DateTime!
    type: ActivityTypeEnum!
}

type ActivityChart {
    focus: ReportFocusEnum!
    groupBy: [ActivitySeriesGroupByEnum!]
    name: String!
}

type ActivityConnection {
    count: Int!
    edges: [ActivityEdge!]!
    nodes: [Activity!]!
    pageInfo: PageInfo!
}

type ActivityEdge {
    cursor: String!
    node: Activity!
}

type ActivityObjectType {
    enumValue: ActivityObjectTypeEnum!
}

type ActivityResult {
    accessType: ActivityAccessTypeEnum!
    count: Int!
    countDelta: Int!
}

type ActivitySeries {
    activityConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ActivityConnection!
    activitySeriesId: UUID!
    causeErrorCode: String
    causeErrorMessage: String
    causeErrorReason: String
    causeErrorRemedy: String
    cluster: Cluster
    clusterName: String!
    clusterUuid: UUID!
    failureReason: String
    fid: UUID
    id: Long!
    isCancelable: Boolean
    isPolarisEventSeries: Boolean!
    lastActivityStatus: ActivityStatusEnum!
    lastActivityType: ActivityTypeEnum!
    lastEventAddedAt: DateTime
    lastUpdated: DateTime!
    lastVerifiedAt: DateTime
    location: String!
    objectId: String!
    objectName: String
    objectType: ActivityObjectTypeEnum!
    progress: String
    severity: ActivitySeverityEnum!
    startTime: DateTime
}

type ActivitySeriesConnection {
    count: Int!
    edges: [ActivitySeriesEdge!]!
    nodes: [ActivitySeries!]!
    pageInfo: PageInfo!
}

type ActivitySeriesEdge {
    cursor: String!
    node: ActivitySeries!
}

"Activity series data with groupby info applied to it."
type ActivitySeriesGroupBy {
    "Paginated activity series data."
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort activity series by field"
        sortBy: ActivitySeriesSortByEnum = LastUpdated
    ): ActivitySeriesConnection!
    "Further provide groupings for the data."
    activitySeriesGroupBy(
        "group activity series by a field"
        groupBy: ActivitySeriesGroupByEnum!
    ): [ActivitySeriesGroupBy!]!
    "The data groupby info."
    groupByInfo: ActivitySeriesGroupByInfo!
}

type ActivitySeriesGroupByConnection {
    count: Int!
    edges: [ActivitySeriesGroupByEdge!]!
    nodes: [ActivitySeriesGroupBy!]!
    pageInfo: PageInfo!
}

type ActivitySeriesGroupByEdge {
    cursor: String!
    node: ActivitySeriesGroupBy!
}

type ActivityStatus {
    enumValue: ActivityStatusEnum!
}

type ActivityTable {
    focus: ReportFocusEnum!
    groupBy: [ActivitySeriesGroupByEnum!]
    name: String!
    selectedColumns: [ActivityTableColumnEnum!]!
    sortBy: ActivitySeriesSortByEnum
    sortOrder: SortOrderEnum
}

type ActivityTimelineResult {
    activityResults: [ActivityResult!]!
    day: String!
    topFiles: [FileAccessResult!]!
}

type ActivityTimelineResultConnection {
    count: Int!
    edges: [ActivityTimelineResultEdge!]!
    nodes: [ActivityTimelineResult!]!
    pageInfo: PageInfo!
}

type ActivityTimelineResultEdge {
    cursor: String!
    node: ActivityTimelineResult!
}

type ActivityType {
    enumValue: ActivityTypeEnum!
}

"Add O365 Org response"
type AddO365OrgResponse {
    orgId: String!
    refreshOrgTaskchainId: String!
}

"It contains the reply of Add vm app consistent specs endpoint"
type AddVmAppConsistentSpecsReply {
    failedSnappableIds: [String!]!
    successSnappableIds: [String!]!
}

type AddressBlockV4 {
    cidrBlock: String!
}

"The status of the agent running on the vm"
type AgentStatus {
    agentStatus: AgentConnectStatusEnum!
    disconnectReason: String
}

type Analyzer {
    analyzerType: AnalyzerTypeEnum!
    dictionary: [String!]!
    dictionaryCsv: String!
    id: String!
    name: String!
    regex: String!
}

type AnalyzerAccessUsage {
    analyzer: Analyzer
    count: Int!
    countDelta: Int!
    topFiles: [FileAccessResult!]!
}

type AnalyzerAccessUsageConnection {
    count: Int!
    edges: [AnalyzerAccessUsageEdge!]!
    nodes: [AnalyzerAccessUsage!]!
    pageInfo: PageInfo!
}

type AnalyzerAccessUsageEdge {
    cursor: String!
    node: AnalyzerAccessUsage!
}

type AnalyzerConnection {
    count: Int!
    edges: [AnalyzerEdge!]!
    nodes: [Analyzer!]!
    pageInfo: PageInfo!
}

type AnalyzerEdge {
    cursor: String!
    node: Analyzer!
}

type AnalyzerGroup {
    analyzers: [Analyzer!]!
    groupType: AnalyzerGroupTypeEnum!
    id: String!
    name: String!
}

type AnalyzerGroupConnection {
    count: Int!
    edges: [AnalyzerGroupEdge!]!
    nodes: [AnalyzerGroup!]!
    pageInfo: PageInfo!
}

type AnalyzerGroupEdge {
    cursor: String!
    node: AnalyzerGroup!
}

type AnalyzerGroupResult {
    analyzerGroup: AnalyzerGroup!
    analyzerResults: [AnalyzerResult!]!
    hits: Hits!
}

type AnalyzerMapping {
    analyzerResult: AnalyzerResult!
    groups: [AnalyzerGroup!]!
}

type AnalyzerResult {
    analyzer: Analyzer!
    hits: Hits!
}

type AnalyzerUsage {
    analyzer: Analyzer!
    policies: [ClassificationPolicySummary!]!
}

type AnalyzerUsageConnection {
    count: Int!
    edges: [AnalyzerUsageEdge!]!
    nodes: [AnalyzerUsage!]!
    pageInfo: PageInfo!
}

type AnalyzerUsageEdge {
    cursor: String!
    node: AnalyzerUsage!
}

type AnomalyChart {
    focus: ReportFocusEnum!
    groupBy: [AnomalyResultGroupByEnum!]
    name: String!
}

"Anomaly analysis report from lambda service"
type AnomalyResult {
    anomalyProbability: Float!
    bytesCreatedCount: Long
    bytesDeletedCount: Long
    bytesModifiedCount: Long
    bytesNetChangedCount: Long
    cluster: Cluster!
    filesCreatedCount: Long
    filesDeletedCount: Long
    filesModifiedCount: Long
    id: String!
    isAnomaly: Boolean!
    "The location of the object."
    location: String!
    managedId: String!
    objectType: ObjectTypeEnum
    previousSnapshotDate: DateTime!
    previousSnapshotId: String!
    snappableFid: UUID!
    snappableId: String!
    snappableName: String
    snapshotDate: DateTime!
    snapshotFid: UUID!
    snapshotId: String!
    suspiciousFilesCount: Long
}

type AnomalyResultAggregation {
    bytesAdded: Long!
    bytesDeleted: Long!
    bytesModified: Long!
    filesAdded: Long!
    filesDeleted: Long!
    filesModified: Long!
}

type AnomalyResultConnection {
    aggregation: AnomalyResultAggregation!
    count: Int!
    edges: [AnomalyResultEdge!]!
    nodes: [AnomalyResult!]!
    pageInfo: PageInfo!
}

type AnomalyResultEdge {
    cursor: String!
    node: AnomalyResult!
}

"Anomaly result data with groupby info applied to it"
type AnomalyResultGroupBy {
    "Paginated anomaly result data"
    anomalyResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter anomaly results by input"
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort anomaly results by field"
        sortBy: AnomalyResultSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): AnomalyResultConnection!
    "Further provide groupings for the data."
    anomalyResultGroupBy(
        "group anomaly results by field"
        groupBy: AnomalyResultGroupByEnum!
    ): [AnomalyResultGroupBy!]!
    "Groupby info."
    groupByInfo: AnomalyResultGroupByInfo!
}

type AnomalyResultGroupByConnection {
    count: Int!
    edges: [AnomalyResultGroupByEdge!]!
    nodes: [AnomalyResultGroupBy!]!
    pageInfo: PageInfo!
}

type AnomalyResultGroupByEdge {
    cursor: String!
    node: AnomalyResultGroupBy!
}

type AnomalyStatus {
    isAnomaly: Boolean!
}

type AnomalyTable {
    focus: ReportFocusEnum!
    groupBy: [AnomalyResultGroupByEnum!]
    name: String!
    selectedColumns: [AnomalyTableColumnEnum!]!
    sortBy: AnomalyResultSortByEnum
    sortOrder: SortOrderEnum
}

type AppBlueprintSnapshotCloudImage {
    appImageIds: [String!]!
    imageConverted: Boolean!
    snapshotFid: String!
}

type AppIDForType {
    appId: String!
    appType: String!
}

type AppflowsSummary {
    numBlueprintsReady: Int!
    numBlueprintsWithIssues: Int!
    numDRPlansReady: Int!
    numDRPlansWithIssues: Int!
    numVmwareVmsProtected: Int!
    totalBlueprints: Int!
    totalDRPlans: Int!
    totalVmwareVms: Int!
}

type ArchivalLocation {
    bucket: String
    id: String!
    isActive: Boolean!
    locationType: ArchivalLocationType!
    name: String!
}

type ArchivalSpec {
    targetMapping: TargetMapping
    threshold: Int!
    thresholdUnit: RetentionUnitEnum!
}

"A reply of the async download request"
type AsyncDownloadReply {
    "The Id of the job"
    jobId: Long!
    "The reference Id of the job"
    referenceId: String!
}

type AsyncJobStatus {
    "Error message if pre validation failed."
    error: String!
    "Job ID for object if pre validation succeeds for object. If pre validation failed Job ID will be empty and detials will be present in error field."
    jobId: String!
}

type AsyncJobStatusJobError {
    error: String!
    rubrikObjectId: String!
}

type AsyncJobStatusJobId {
    jobId: String!
    rubrikObjectId: String!
}

"""

Supported in v5.0+
"""
type AsyncRequestStatus {
    """

    Supported in v5.0+
    The end time of the request.
    """
    endTime: DateTime
    """

    Supported in v5.0+
    Any errors encountered.
    """
    error: RequestErrorInfo
    """

    Required. Supported in v5.0+
    v5.0: The ID of the request object. Use it to poll the status.
    v5.1+: The ID of the request object used to poll the status.
    """
    id: String!
    """

    Required. Supported in v5.0+
    References to any related objects.
    """
    links: [Link!]!
    """

    Supported in v5.0+
    The ID of the node where the job ran.
    """
    nodeId: String
    """

    Supported in v5.0+
    v5.0: The current progress in terms of percentage of the async request.
    v5.1+: The current percentage progress of the asynchronous request.
    """
    progress: Float
    """

    Supported in v5.0+
    The start time of the request.
    """
    startTime: DateTime
    """

    Required. Supported in v5.0+
    v5.0: Status of the id.
    v5.1+: Status of the ID.
    """
    status: String!
}

type AttachmentSpecForEbsVolume {
    awsNativeEc2InstanceId: String!
    devicePath: String!
    isExcludedFromSnapshot: Boolean!
    isRootVolume: Boolean!
}

type AttachmentSpecForEc2Instance {
    awsNativeEbsVolumeId: String!
    devicePath: String!
    isExcludedFromSnapshot: Boolean!
    isRootVolume: Boolean!
}

"Attachment Specs for Azure Native Managed Disk"
type AttachmentSpecsForManagedDisk {
    attachedToVmId: String!
    isExcludedFromSnapshot: Boolean!
    isOsDisk: Boolean!
    lun: Int!
}

"Attachment Specs for Azure Native Virtual Machine"
type AttachmentSpecsForVirtualMachine {
    isExcludedFromSnapshot: Boolean!
    isOsDisk: Boolean!
    lun: Int!
    managedDiskId: String!
}

type AuthorizedOperations {
    id: String!
    operations: [OperationEnum!]!
    snappableHierarchy: SnappableLevelHierarchyTypeEnum
}

"Ldap Authorized Principal"
type AuthorizedPrincipal {
    authDomainId: String!
    authDomainName: String!
    email: String
    id: String!
    name: String!
    principalType: PrincipalTypeEnum!
    roles: [Role!]!
}

type AuthorizedPrincipalConnection {
    count: Int!
    edges: [AuthorizedPrincipalEdge!]!
    nodes: [AuthorizedPrincipal!]!
    pageInfo: PageInfo!
}

type AuthorizedPrincipalEdge {
    cursor: String!
    node: AuthorizedPrincipal!
}

"AWS Account specific info"
type AwsAccount implements CloudAccount {
    accessKey: String!
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
}

"Details of AWS account."
type AwsAccountResponse {
    "Name of cloud account."
    accountName: String!
    "Type of cloud account"
    cloudType: AwsCloudTypeEnum!
    id: String!
    message: String!
    "Native ID of cloud account."
    nativeId: String!
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean!
}

"Validate given aws accounts."
type AwsAccountValidationResponse {
    accountName: String!
    cloudType: AwsCloudTypeEnum!
    message: String!
    nativeId: String!
    seamlessFlowEnabled: Boolean!
}

"Feature version of aws cloud accounts"
type AwsCloudAccountFeatureVersion {
    "Feature Enum"
    feature: CloudAccountFeatureEnum!
    "Version"
    version: Int!
}

"Initiate aws cloud accounts."
type AwsCloudAccountInitiate {
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegionEnum!]
    "AWS CloudFormation URL."
    cloudFormationUrl: String!
    "External ID for the cloud account."
    externalId: String!
    "List of feature versions."
    featureVersionList: [AwsCloudAccountFeatureVersion!]!
    "Role ARN for the feature (if valid)."
    roleArn: String!
    "Stack name of template to run, only for single account addition."
    stackName: String
    "StackSet name of template to run, only for bulk account addition."
    stackSetName: String
    "AWS CloudFormation template URL."
    templateUrl: String!
}

"Aws cloud Account list KMS Keys response"
type AwsCloudAccountListKMSKeysResponse {
    result: [KMSKey!]!
}

"Aws cloud Account list Security Group response"
type AwsCloudAccountListSecurityGroupsResponse {
    result: [CloudAccountSub!]!
}

"Aws cloud Account list Subnet response"
type AwsCloudAccountListSubnetsResponse {
    result: [CloudAccountSubnet!]!
}

"Aws cloud Account list VPC response"
type AwsCloudAccountListVpcResponse {
    result: [CloudAccountVpc!]!
}

"Aws cloud accounts."
type AwsCloudAccountSelectorType {
    "AWS account details."
    awsCloudAccount: AwsAccountResponse
    "Feature details for the cloud account."
    featureDetails: [FeatureDetail!]!
}

"Aws Cloud Account Update Feature Response."
type AwsCloudAccountUpdateFeatureResponse {
    success: Boolean!
}

"Aws cloud accounts validate response."
type AwsCloudAccountValidateResponse {
    "Contains error message for account(s)."
    invalidAwsAccounts: [AwsAccountValidationResponse!]!
    "Contains error message for admin account."
    invalidAwsAdminAccount: AwsAccountValidationResponse
}

"Compute setting for AWS Target"
type AwsComputeSettings {
    cloudAccount: CloudAccount
    clusterInterfaceCidrs: [ClusterInfCidrs!]!
    id: String!
    isArchived: Boolean!
    isPolarisManaged: Boolean!
    name: String!
    proxySettings: ProxySettings
    region: AwsRegionEnum!
    securityGroupId: String!
    subnetId: String!
    vpcId: String!
}

type AwsEc2Instance {
    imageId: String!
    instanceId: String!
    instanceName: String!
    instanceType: String!
}

"AWS Exocompute configurations in an AWS account."
type AwsExocomputeConfig {
    "Account details."
    awsCloudAccount: AwsAccountResponse!
    "Aws exocompute get configurations response"
    configs: [AwsExocomputeGetConfigResponse!]!
    "List of regions for which exocompute can be configured."
    exocomputeEligibleRegions: [AwsCloudAccountRegionEnum!]!
    "Feature details."
    featureDetails: FeatureDetail!
}

"AWS Exocompute configurations Deletion status."
type AwsExocomputeConfigsDeletionStatusType {
    exocomputeConfigId: String!
    success: Boolean!
}

"AWS Exocompute configuration in a region."
type AwsExocomputeGetConfigResponse {
    areSecurityGroupsPolarisManaged: Boolean!
    clusterSecurityGroupId: String!
    configUuid: String!
    message: String!
    nodeSecurityGroupId: String!
    region: AwsCloudAccountRegionEnum!
    subnet1: AwsExocomputeSubnetType!
    subnet2: AwsExocomputeSubnetType!
    vpcId: String!
}

"AWS Exocompute configuration in a region."
type AwsExocomputeSubnetType {
    availabilityZone: String!
    subnetId: String!
}

"AWS feature configurations in an AWS account."
type AwsFeatureConfig {
    "Account details."
    awsCloudAccount: AwsAccountResponse!
    "Aws exocompute configurations."
    exocomputeConfigs: [AwsExocomputeGetConfigResponse!]!
    "Feature detail."
    featureDetail: FeatureDetail!
}

type AwsInstanceType {
    instanceTypeId: Int!
    memoryMbs: Int!
    name: String!
    networkPerformance: String!
    region: String!
    storage: String!
    tenancy: String!
    vcpus: Int!
}

type AwsNativeAccount implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "List of all ebs volumes under this AWS account"
    awsNativeEbsVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ebsVolumeFilters: AwsNativeEbsVolumeFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEbsVolumeConnection!
    "List of all ec2 instances under this AWS account"
    awsNativeEc2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ec2InstanceFilters: AwsNativeEc2InstanceFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEc2InstanceConnection!
    "List of all RDS instances under this AWS account"
    awsNativeRdsInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        rdsInstanceFilters: AwsNativeRdsInstanceFilters,
        "Sort fields for list of AWS RDS instances."
        sortBy: AwsNativeRdsInstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeRdsInstanceConnection!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Count of EBS volumes in the account."
    ebsVolumeCount: Int!
    "Count of EC2 instances in the account."
    ec2InstanceCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Last refresh time of account."
    lastRefreshedAt: DateTime
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): AwsNativeAccountLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Count of RDS instances in the account."
    rdsInstanceCount: Int!
    "List of AWS regions associated to the account."
    regions: [AwsNativeRegionEnum!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Refresh status of account."
    status: AwsAccountStatusEnum!
}

type AwsNativeAccountConnection {
    count: Int!
    edges: [AwsNativeAccountEdge!]!
    nodes: [AwsNativeAccount!]!
    pageInfo: PageInfo!
}

type AwsNativeAccountEdge {
    cursor: String!
    node: AwsNativeAccount!
}

type AwsNativeAccountLogicalChildTypeConnection {
    count: Int!
    edges: [AwsNativeAccountLogicalChildTypeEdge!]!
    nodes: [AwsNativeAccountLogicalChildType!]!
    pageInfo: PageInfo!
}

type AwsNativeAccountLogicalChildTypeEdge {
    cursor: String!
    node: AwsNativeAccountLogicalChildType!
}

type AwsNativeEbsVolume implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Ec2 Instance to which this volume is attached"
    attachedEc2Instances: [AwsNativeEc2Instance!]!
    "List of EC2 instance details to which volume is attached."
    attachmentSpecs: [AttachmentSpecForEbsVolume!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZ for EC2 instance on cloud(AWS). More info: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones."
    availabilityZone: String!
    "Rubrik ID of Instance."
    awsAccountRubrikId: String!
    "Aws account of the EBS Volumes"
    awsNativeAccount: AwsNativeAccount!
    "Name for the AWS account."
    awsNativeAccountName: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Input/Output (IO) limit per second for volume."
    iops: Long!
    "Whether exocompute is configured for the region where the volume is."
    isExocomputeConfigured: Boolean!
    "Whether indexing is enabled for snapshots of volume."
    isIndexingEnabled: Boolean!
    "Whether the volume image is marketplace image."
    isMarketplace: Boolean!
    "Whether the volume is relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EBS volume on cloud(AWS). More info: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions."
    region: AwsNativeRegionEnum!
    "Size of volume in GB."
    sizeInGBs: Int!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "List of tags associated with volume."
    tags: [Tag!]!
    "Name of volume on AWS. Name is not necessarily unique for different volumes."
    volumeName: String!
    "AWS Native ID of EBS volume."
    volumeNativeId: String!
    "AWS Native EBS volume type. Some examples are: g3, io2. This field cannot be null or empty string and will be mapped directly to available EBS volumes on cloud(AWS). More info: https://aws.amazon.com/ebs/volume-types."
    volumeType: String!
}

type AwsNativeEbsVolumeConnection {
    count: Int!
    edges: [AwsNativeEbsVolumeEdge!]!
    nodes: [AwsNativeEbsVolume!]!
    pageInfo: PageInfo!
}

type AwsNativeEbsVolumeEdge {
    cursor: String!
    node: AwsNativeEbsVolume!
}

type AwsNativeEc2Instance implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Attached ebs volumes"
    attachedEbsVolumes: [AwsNativeEbsVolume!]!
    "List of EBS volume details attached to the instance."
    attachmentSpecs: [AttachmentSpecForEc2Instance!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZs for EC2 instance on cloud(AWS). More info: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones."
    availabilityZone: String!
    "Rubrik ID of Instance."
    awsAccountRubrikId: String!
    "Aws account of the Ec2 instance"
    awsNativeAccount: AwsNativeAccount!
    "Name for the AWS Account."
    awsNativeAccountName: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Name of instance on AWS. Name is not necessarily unique for different instances."
    instanceName: String!
    "AWS Native ID of Instance."
    instanceNativeId: String!
    "AWS Native EC2 instance type. Some examples are: t2.nano, m5.xlarge. This field cannot be null or empty string and will be mapped directly to available EC2 instance on cloud(AWS). More info:  https://aws.amazon.com/ec2/instance-types."
    instanceType: String!
    "Whether exocompute is configured for the region where the instance is."
    isExocomputeConfigured: Boolean!
    "Whether indexing is enabled for snapshots of instance."
    isIndexingEnabled: Boolean!
    "Whether the instance image is marketplace image."
    isMarketplace: Boolean!
    "Whether the instance is relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Name of the Operating System (OS) for the Instance. Some examples are: Linux, Windows. This field cannot be null or empty string but can be Undefined in case it is not currently supported.List of supported OS: Linux, Windows."
    osType: OsTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Private IP address for instance."
    privateIp: String!
    "Public IP address for instance."
    publicIp: String!
    "Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EC2 instance on cloud(AWS). More info: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions."
    region: AwsNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "Name of SSH key-pair for the Instance."
    sshKeyPairName: String!
    "List of tags associated with Instance."
    tags: [Tag!]!
    "ID of Virtual Private Cloud (VPC) associated with instance."
    vpcId: String!
    "Name of Virtual Private Cloud (VPC) associated with instance."
    vpcName: String!
}

type AwsNativeEc2InstanceConnection {
    count: Int!
    edges: [AwsNativeEc2InstanceEdge!]!
    nodes: [AwsNativeEc2Instance!]!
    pageInfo: PageInfo!
}

type AwsNativeEc2InstanceEdge {
    cursor: String!
    node: AwsNativeEc2Instance!
}

type AwsNativeProtectionAccountAddResponse {
    cloudFormationName: String!
    cloudFormationTemplateUrl: String!
    cloudFormationUrl: String!
    errorMessage: String!
}

type AwsNativeRdsInstance implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Allocated size of RDS Instance in GiB."
    allocatedStorageInGibi: Long!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Rubrik Identifier for account associated with RDS Instance."
    awsAccountRubrikId: String!
    "AWS account of the RDS instance"
    awsNativeAccount: AwsNativeAccount!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Engine being used for RDS Instance."
    dbEngine: AwsNativeRdsDbEngineEnum!
    "Class type of RDS Instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClassEnum!
    "Name of RDS Instance."
    dbInstanceName: String!
    "Resource identifier of RDS Instance."
    dbiResourceId: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Identifies if the RDS Instance is part of multiple Availability Zones."
    isMultiAz: Boolean!
    "Indicates if the RDS Instance is relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Maintenance window of RDS Instance."
    maintenanceWindow: String!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Name of Availability Zone(AZ) associated with RDS Instance."
    primaryAvailabilityZone: String!
    "AWS region of RDS Instance."
    region: AwsNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "List of tags associated with RDS Instance."
    tags: [Tag!]!
    "Identifier of VPC associated with RDS Instance."
    vpcId: String!
    "Name of VPC associated with RDS Instance."
    vpcName: String!
}

type AwsNativeRdsInstanceConnection {
    count: Int!
    edges: [AwsNativeRdsInstanceEdge!]!
    nodes: [AwsNativeRdsInstance!]!
    pageInfo: PageInfo!
}

type AwsNativeRdsInstanceEdge {
    cursor: String!
    node: AwsNativeRdsInstance!
}

"The PIT restore window of the RDS instance."
type AwsNativeRdsPointInTimeRestoreWindow {
    earliestTime: DateTime
    latestTime: DateTime
}

"A subnet on AWS as defined in awsnative service."
type AwsNativeSubnet {
    availabilityZone: String!
    id: String!
    name: String!
}

type AwsRdsConfig {
    logRetention: SlaDuration
}

type AwsReplicationTarget {
    accountId: String!
    accountName: String!
    region: AwsNativeRegionForReplicationEnum!
}

"AWS role based Account specific info"
type AwsRoleBasedAccount implements CloudAccount {
    awsSpecificInfo: AwsCloudAccountSelectorType!
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
}

"A Security group in AWS realm."
type AwsSecurityGroup {
    id: String!
    name: String!
}

type AwsStorageVolumeType {
    maxIops: Int!
    maxSizeGbs: Int!
    name: String!
    volumeTypeId: Int!
}

"A Subnet in AWS realm."
type AwsSubnet {
    availabilityZone: String!
    id: String!
    name: String!
}

"Specific info for AWS Target Template"
type AwsTargetTemplate implements TargetTemplate {
    bucketPrefix: String!
    cloudAccount: CloudAccount!
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    computeSettings: AwsComputeSettings
    encryptionType: TargetEncryptionTypeEnum!
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String
    proxySettings: ProxySettings
    region: AwsRegionEnum!
    storageClass: AwsStorageClassTypeEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

type AwsVMNicSpec {
    ipv4Address: String!
    key: Int!
    "security group of the nic"
    securityGroup: SnappableSecurityGroup
    securityGroupId: String!
    "subnet of the nic"
    subnet: SnappableSubnet
    subnetId: String!
}

type AwsVMVolumeSpec {
    iops: Int!
    key: Int!
    sizeGbs: Int!
    volumeTypeId: Int!
}

"A Virtual Private Cloud (VPC) in AWS realm."
type AwsVpc {
    "ID for the VPC."
    id: String!
    "Name of the VPC."
    name: String!
    "List of security groups associated with the VPC."
    securityGroups: [AwsSecurityGroup!]!
    "List of subnets associated with the VPC."
    subnets: [AwsSubnet!]!
}

"Azure Account specific info"
type AzureAccount implements CloudAccount {
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
    subscriptionId: String!
    tenantId: String!
}

"Azure Check Permissions On Subscription Response."
type AzureCheckPermissionsOnSubscriptionResponse {
    missingPermissions: [String!]!
    subscriptionNativeId: String!
}

"Azure Cloud Account Add Response."
type AzureCloudAccountAddResponse {
    "Status of the Azure Cloud Account Add operations."
    status: [AzureCloudAccountAddStatus!]!
    "Tenant ID for the added subscriptions"
    tenantId: String!
}

"Status of the Azure Cloud Accout Add operation."
type AzureCloudAccountAddStatus {
    error: String!
    subscriptionId: String!
    subscriptionNativeId: String!
}

"Azure Cloud Account Add Without OAuth Response."
type AzureCloudAccountAddWithoutOAuthResponse {
    status: [AzureCloudAccountAddStatus!]!
    tenantId: String!
}

"Azure Cloud Account Delete Response."
type AzureCloudAccountDeleteResponse {
    "Status of the Azure Cloud Account Delete operations."
    status: [AzureCloudAccountDeleteStatus!]!
}

"Status of the Azure Cloud Account Delete operation."
type AzureCloudAccountDeleteStatus {
    error: String!
    subscriptionId: String!
    success: Boolean!
}

"Azure Cloud Account Delete Without OAuth Response."
type AzureCloudAccountDeleteWithoutOAuthResponse {
    "Status of the Azure Cloud Account Delete operations."
    status: [AzureCloudAccountDeleteStatus!]!
}

"Azure Cloud Account Feature details"
type AzureCloudAccountFeatureDetail {
    feature: CloudAccountFeatureEnum!
    regions: [AzureCloudAccountRegionEnum!]!
    status: CloudAccountStatusEnum!
}

"Azure Cloud Account OAuth Complete Response."
type AzureCloudAccountOAuthCompleteResponse {
    subscriptions: [AzureCloudAccountSubscription!]!
    success: Boolean!
}

"Azure Cloud Account OAuth Initiate Response."
type AzureCloudAccountOAuthInitiateResponse {
    clientId: String!
    sessionId: String!
}

"Role permissions and Polaris policy version required for Azure subscription setup."
type AzureCloudAccountPermissionConfigResponse {
    "Policy permission version to be used on Polaris for adding a subscription."
    permissionVersion: Int!
    "List of permissions to be applied on the role created in Azure for a subscription."
    rolePermissions: [AzureCloudAccountRolePermission!]!
}

"Azure Permission type with included and excluded actions."
type AzureCloudAccountRolePermission {
    "Actions which should be explicitly disallowed on the Azure role for the subscription."
    excludedActions: [String!]!
    "Data actions which should be explicitly disallowed on the Azure role for the subscription."
    excludedDataActions: [String!]!
    "Actions which should be allowed on the Azure role for the subscription."
    includedActions: [String!]!
    "Data actions which should be allowed on the Azure role for the subscription."
    includedDataActions: [String!]!
}

"Azure Subscription type with basic details."
type AzureCloudAccountSubscription {
    isAuthorized: Boolean!
    name: String!
    nativeId: String!
}

"Azure Cloud Account Subscription details for a given feature"
type AzureCloudAccountSubscriptionDetail {
    featureDetail: AzureCloudAccountFeatureDetail
    id: String!
    name: String!
    nativeId: String!
}

"Azure Cloud Account Tenant with details of subscriptions configured for a given feature."
type AzureCloudAccountTenant {
    clientId: String!
    cloudType: AzureCloudTypeEnum!
    domainName: String!
    id: String!
    subscriptionCount: Int!
    subscriptions: [AzureCloudAccountSubscriptionDetail!]!
}

"Azure Cloud Account Update Response."
type AzureCloudAccountUpdateResponse {
    "Status of the Azure Cloud Account Update operations."
    status: [AzureCloudAccountUpdateStatus!]!
}

"Status of the Azure Cloud Account Update operation."
type AzureCloudAccountUpdateStatus {
    subscriptionId: String!
    success: Boolean!
}

"Azure Cloud Account Upgrade Response."
type AzureCloudAccountUpgradeResponse {
    "Status of the Azure Cloud Account Upgrade permission operations."
    status: [AzureCloudAccountUpgradeStatus!]!
}

"Status of the Azure Cloud Account Upgrade permission operation."
type AzureCloudAccountUpgradeStatus {
    error: String!
    subscriptionId: String!
    success: Boolean!
}

"Compute setting for Azure Target"
type AzureComputeSettings {
    appId: String!
    computeProxySettings: ProxySettings
    generalPurposeStorageContainer: String!
    generalPurposeStorageName: String!
    region: AzureRegionEnum!
    resourceGroup: String!
    securityGroupId: String!
    subnetId: String!
    virtualNetworkId: String!
}

type AzureDiskClusterCreateReply {
    clusterUuid: String!
    vmInfo: [VmInfo!]!
}

"Azure Exocompute Configs Create Response."
type AzureExocomputeConfigsCreateResponse {
    configs: [AzureExocomputeGetConfigResponse!]!
}

"Azure Exocompute Configs Delete Response."
type AzureExocomputeConfigsDeleteResponse {
    deletionFailedIds: [String!]!
    deletionSuccessIds: [String!]!
}

"AWS Exocompute configs in an AWS account."
type AzureExocomputeConfigsInAccount {
    "Account details."
    azureCloudAccount: AzureCloudAccountSubscriptionDetail!
    "Azure exocompute get config response"
    configs: [AzureExocomputeGetConfigResponse!]!
    "List of regions for which exocompute can be configured."
    exocomputeEligibleRegions: [AzureCloudAccountRegionEnum!]!
    "Feature details."
    featureDetails: AzureCloudAccountFeatureDetail!
}

"Azure Exocompute Configs List Response."
type AzureExocomputeConfigsResponse {
    configs: [AzureExocomputeConfigsInAccount!]!
}

"Azure Exocompute config"
type AzureExocomputeGetConfigResponse {
    configUuid: String!
    isPolarisManaged: Boolean!
    message: String!
    region: AzureCloudAccountRegionEnum!
    subnetNativeId: String!
}

"An Azure availability set"
type AzureNativeAvailabilitySet {
    name: String!
    nativeId: String!
}

"Represents available disk types for an Azure availability zone."
type AzureNativeDiskTypesForAvailabilityZone {
    availabilityZone: String!
    diskTypes: [String!]!
}

"Azure Managed Disk"
type AzureNativeManagedDisk implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Virtual Machines to which this disk is attached"
    attachedAzureNativeVirtualMachines: [AzureNativeVirtualMachine!]!
    attachmentSpecs: [AttachmentSpecsForManagedDisk!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    availabilityZone: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    diskIopsReadWrite: Long!
    diskMbpsReadWrite: Int!
    diskSizeGib: Int!
    diskStorageTier: AzureNativeManagedDiskTypeEnum!
    diskUniqueNativeId: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isAdeEncrypted: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    osType: AzureNativeVmOsTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    region: AzureNativeRegionEnum!
    "Resource Group of the Azure Disk"
    resourceGroup: AzureNativeResourceGroup!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    tags: [AzureTag!]!
}

type AzureNativeManagedDiskConnection {
    count: Int!
    edges: [AzureNativeManagedDiskEdge!]!
    nodes: [AzureNativeManagedDisk!]!
    pageInfo: PageInfo!
}

type AzureNativeManagedDiskEdge {
    cursor: String!
    node: AzureNativeManagedDisk!
}

"An Azure resource group"
type AzureNativeResourceGroup implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    diskSla: AzureNativeResourceGroupSlaAssignment!
    disksCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    region: AzureNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Azure subscription of the resource group"
    subscription: AzureNativeSubscription!
    subscriptionId: UUID!
    tags: [AzureTag!]!
    "List of Azure Virtual Machines in the resource group"
    virtualMachineConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure virtual machines."
        sortBy: AzureNativeVirtualMachineSortFieldsEnum,
        sortOrder: HierarchySortOrder,
        virtualMachineFilters: AzureNativeVirtualMachineFilters
    ): AzureNativeVirtualMachineConnection!
    vmSla: AzureNativeResourceGroupSlaAssignment!
    vmsCount: Int!
}

type AzureNativeResourceGroupConnection {
    count: Int!
    edges: [AzureNativeResourceGroupEdge!]!
    nodes: [AzureNativeResourceGroup!]!
    pageInfo: PageInfo!
}

type AzureNativeResourceGroupEdge {
    cursor: String!
    node: AzureNativeResourceGroup!
}

"An Azure resource group SLA assignment"
type AzureNativeResourceGroupSlaAssignment {
    configuredSlaDomain: GlobalSla!
    effectiveSlaDomain: GlobalSla!
    slaAssignment: SlaAssignmentTypeEnum!
}

"An Azure security group"
type AzureNativeSecurityGroup {
    name: String!
    nativeId: String!
    resourceGroupName: String!
}

"An Azure subnet"
type AzureNativeSubnet {
    name: String!
    nativeId: String!
    vnet: AzureNativeVnet!
}

"An Azure Subscription"
type AzureNativeSubscription implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    cloudType: AzureCloudTypeEnum!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    disksCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    lastRefreshedAt: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    nativeId: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Lists Azure resource groups in the subscription"
    resourceGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for listing Azure resource groups"
        commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for listing Azure resource groups."
        sortBy: AzureNativeCommonResourceGroupSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AzureNativeResourceGroupConnection!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: AzureSubscriptionStatusEnum!
    tenantId: String!
    vmsCount: Int!
}

type AzureNativeSubscriptionConnection {
    count: Int!
    edges: [AzureNativeSubscriptionEdge!]!
    nodes: [AzureNativeSubscription!]!
    pageInfo: PageInfo!
}

type AzureNativeSubscriptionEdge {
    cursor: String!
    node: AzureNativeSubscription!
}

"Represents available virtual machine sizes for an Azure availability zone."
type AzureNativeVMSizesForAvailabilityZone {
    availabilityZone: String!
    vmSizes: [String!]!
}

"Azure Virtual Machine"
type AzureNativeVirtualMachine implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Attached Managed Disks to the Azure VM"
    attachedManagedDisks: [AzureNativeManagedDisk!]!
    attachmentSpecs: [AttachmentSpecsForVirtualMachine!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    availabilitySetNativeId: String!
    availabilityzone: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isAcceleratedNetworkingEnabled: Boolean!
    isAdeEnabled: Boolean!
    isAppConsistencyEnabled: Boolean!
    isExocomputeConfigured: Boolean!
    isPrePostScriptEnabled: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    osType: AzureNativeVmOsTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    region: AzureNativeRegionEnum!
    "Resource Group of the Azure VM"
    resourceGroup: AzureNativeResourceGroup!
    sizeType: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    subnetName: String!
    tags: [AzureTag!]!
    vmAppConsistentSpecs: VmAppConsistentSpecsInternal
    vmName: String!
    vmUniqueNativeId: String!
    vnetName: String!
}

type AzureNativeVirtualMachineConnection {
    count: Int!
    edges: [AzureNativeVirtualMachineEdge!]!
    nodes: [AzureNativeVirtualMachine!]!
    pageInfo: PageInfo!
}

type AzureNativeVirtualMachineEdge {
    cursor: String!
    node: AzureNativeVirtualMachine!
}

"An Azure virtual network"
type AzureNativeVnet {
    name: String!
    resourceGroupName: String!
}

type AzureNetworkSecurityGroupResp {
    reason: String!
    rulesStatus: AzureNetworkSecurityRulesStatusEnum!
}

type AzureNetworkSubnetResp {
    valid: Boolean!
}

type AzureNetworkSubnetUnusedAddrResp {
    unusedAddr: Long!
}

type AzureO365ExocomputeCluster {
    acrId: String!
    aksId: String!
    aksVersion: String!
    azureAppId: String!
    azureCloudType: O365AzureCloudTypeEnum!
    groupName: String!
    hostType: AzureHostTypeEnum!
    id: String!
    isProvisioned: Boolean!
    kmsId: String!
    orgId: String!
    orgName: String!
    orgStatus: String!
    orgTenantId: String!
    polarisAccount: String!
    regionName: String!
    scaleRuntime: ScaleRuntime
    setupConfiguration: String!
    storageId: String!
    subscriptionId: String!
    tenantId: String!
}

type AzureOAuthConsentKickoffResp {
    appClientId: String!
    csrfToken: String!
    govAppClientId: String!
}

type AzureRegionsResp {
    regions: [Region!]!
}

type AzureReplicationTarget {
    region: AzureNativeRegionForReplicationEnum!
    subscriptionId: String!
    subscriptionName: String!
}

type AzureResourceAvailabilityResp {
    available: Boolean!
    reason: String!
}

type AzureSubscription {
    id: String!
    name: String!
}

type AzureSubscriptionConnection {
    count: Int!
    edges: [AzureSubscriptionEdge!]!
    nodes: [AzureSubscription!]!
    pageInfo: PageInfo!
}

type AzureSubscriptionEdge {
    cursor: String!
    node: AzureSubscription!
}

"Azure Tag"
type AzureTag {
    key: String!
    value: String!
}

"Specific info for Azure Target Template"
type AzureTargetTemplate implements TargetTemplate {
    cloudAccount: CloudAccount!
    computeSettings: AzureComputeSettings
    containerNamePrefix: String!
    instanceType: InstanceTypeEnum!
    isConsolidationEnabled: Boolean!
    proxySettings: ProxySettings
    storageAccountName: String!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

type AzureUserRoleResp {
    globalAdministrator: RoleStatus
    subscriptionOwner: RoleStatus
}

type BackupWindow {
    durationInHours: Int!
    startTimeAttributes: StartTimeAttributes
}

"""

Supported in v5.0+
"""
type BaseSnapshotSummary {
    """

    Supported in v5.0+
    """
    archivalLocationIds: [String!]!
    """

    Supported in v5.0+
    Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
    """
    cloudState: Long
    cloudStorageTier: SnapshotCloudStorageTierEnum
    """

    Supported in v5.0+
    """
    consistencyLevel: String
    """

    Required. Supported in v5.0+
    """
    date: DateTime
    """

    Supported in v5.0+
    """
    expirationDate: DateTime
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
    """
    indexState: Long
    """

    Supported in v5.2+
    A Boolean that indicates whether or not custom retention is applied to the snapshot.
    """
    isCustomRetentionApplied: Boolean
    """

    Supported in v5.0+
    """
    isOnDemandSnapshot: Boolean!
    """

    Supported in v5.2+
    A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
    """
    isPlacedOnLegalHold: Boolean
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true,' the snapshot is being retained under a Retention Lock SLA Domain.
    v5.2+: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
    """
    isRetainedByRetentionLockSla: Boolean
    """

    Supported in v5.2+
    ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
    """
    parentSnapshotId: String
    """

    Supported in v5.0+
    """
    replicationLocationIds: [String!]!
    """

    Supported in v5.0+
    v5.0-v5.1:
    v5.2+: (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
    """
    slaId: String!
    """

    Supported in v5.0+
    v5.0-v5.1:
    v5.2+: (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
    """
    slaName: String!
    """

    Supported in v5.2+
    Snapshot retention related information for local, archival and replication locations.
    """
    snapshotRetentionInfo: SnapshotRetentionInfo
    """

    Supported in v5.0+
    """
    sourceObjectType: String
}

type BasicSnapshotSchedule {
    frequency: Int!
    retention: Int!
    retentionUnit: RetentionUnitEnum!
}

type BatchAsyncJobStatus {
    "List of map of Rubrik object ID to error message for those object for which pre validation failed."
    errors: [AsyncJobStatusJobError!]!
    "List of map of Rubrik object ID to Job ID for object if pre validation succeeds for object. If pre validation failed, detials will be present in error field."
    jobIds: [AsyncJobStatusJobId!]!
}

"""

Supported in v5.0+
"""
type BatchAsyncRequestStatus {
    """

    Required. Supported in v5.0+
    The asynchronous request status of a batch request.
    """
    responses: [AsyncRequestStatus!]!
}

"""

Supported in v5.1+
"""
type BatchVmwareCdpLiveInfo {
    """

    Required. Supported in v5.1+
    The live CDP info for the virtual machines.
    """
    responses: [VmwareCdpLiveInfo!]!
}

"""

Supported in v5.3+
"""
type BatchVmwareVmRecoverableRanges {
    """

    Required. Supported in v5.3+
    The recoverable ranges for a set of virtual machines.
    """
    responses: [VmwareVmRecoverableRanges!]!
}

type BidirectionalReplicationSpec {
    replicationSpec1: UnidirectionalReplicationSpec
    replicationSpec2: UnidirectionalReplicationSpec
}

type BlueprintCdmLocation implements BlueprintLocation {
    "the cluster"
    cluster: Cluster!
    locationId: String!
    "The type of the location"
    type: BlueprintLocationTypeEnum!
}

type BlueprintChildConnection {
    count: Int!
    edges: [BlueprintChildEdge!]!
    nodes: [BlueprintChild!]!
    pageInfo: PageInfo!
}

type BlueprintChildEdge {
    cursor: String!
    node: BlueprintChild!
}

type BlueprintConnection {
    count: Int!
    edges: [BlueprintEdge!]!
    nodes: [Blueprint!]!
    pageInfo: PageInfo!
}

type BlueprintEdge {
    cursor: String!
    node: Blueprint!
}

"Failover metadata."
type BlueprintFailover {
    "Type of the failover."
    failoverType: FailoverTypeEnum!
    "Status of the failover (succeeded or failed)."
    status: FailoverStatusEnum!
}

type BlueprintNewConnection {
    count: Int!
    edges: [BlueprintNewEdge!]!
    nodes: [BlueprintNew!]!
    pageInfo: PageInfo!
}

type BlueprintNewEdge {
    cursor: String!
    node: BlueprintNew!
}

type BlueprintRecoveryRange {
    beginTime: DateTime
    endTime: DateTime
}

type BlueprintRecoveryRanges {
    missedRecoverableRanges: [BlueprintRecoveryRange!]!
    recoverableRanges: [BlueprintRecoveryRange!]!
}

"the recovery spec of a Blueprint."
type BlueprintRecoverySpec {
    childRecoverySpecs: [ChildRecoverySpecMap!]!
    isPending: Boolean!
    planType: PlanNameEnum!
    userData: String
    version: Long!
}

"the recovery specs of a Blueprint."
type BlueprintRecoverySpecs {
    errors: [ValidateFailureReason!]!
    specs: [BlueprintRecoverySpec!]!
}

"""

Supported in v5.0+
"""
type BrowseResponse {
    """

    Supported in v5.0+
    The type of file, either a regular file or a directory.
    """
    fileMode: String
    """

    Supported in v5.0+
    The name of the file.
    """
    filename: String
    """

    Supported in v5.0+
    """
    lastModified: String
    """

    Supported in v5.0+
    The complete path of the file.
    """
    path: String
    """

    Supported in v5.0+
    """
    size: Long
    """

    Supported in v5.0+
    Description about the status.
    """
    statusMessage: String
    """

    Supported in v5.3+
    Reason the file is unreadable. Undefined if the file is readable.
    """
    unreadable: Int
}

"""

Supported in v5.0+
"""
type BrowseResponseListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [BrowseResponse!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

type CDMSnapshotLocationRetentionInfo {
    expirationTime: DateTime
    id: String!
    isExpirationDateCalculated: Boolean!
    isSnapshotPresent: Boolean!
    name: String!
    snapshotFrequency: SnapshotFrequencyEnum!
}

type CDMSnapshotRetentionInfo {
    archivalInfos: [CDMSnapshotLocationRetentionInfo!]
    localInfo: CDMSnapshotLocationRetentionInfo
    replicationInfos: [CDMSnapshotLocationRetentionInfo!]
}

type CancelJobReply {
    message: String!
    status: Boolean!
}

"Async reply for a submitted job."
type CcProvisionJobReply {
    "Job Id of the submitted job."
    jobId: Long!
    "Detail of the submitted job including job name and function parameters."
    message: String!
    "Indicates if the operation was a success or not"
    success: Boolean!
}

type CdmArchivalSpec {
    archivalLocationFid: String!
    archivalLocationName: String!
    threshold: Int!
    thresholdUnit: RetentionUnitEnum!
}

type CdmClusterStatus {
    message: String!
    status: CdmClusterStatusTypeEnum!
}

type CdmHierarchyObjectConnection {
    count: Int!
    edges: [CdmHierarchyObjectEdge!]!
    nodes: [CdmHierarchyObject!]!
    pageInfo: PageInfo!
}

type CdmHierarchyObjectEdge {
    cursor: String!
    node: CdmHierarchyObject!
}

type CdmInventorySubHierarchyRoot {
    "List of children"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)"
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
}

type CdmSnapshot implements GenericSnapshot {
    archivalLocations: [DataLocation!]
    cdmId: String!
    cdmVersion: String!
    "children snapshot id list"
    childSnapshots: [CdmSnapshot!]!
    cloudNativeLocations: [DataLocation!]
    cluster: Cluster!
    consistencyLevel: ConsistencyLevelEnum
    date: DateTime!
    expirationDate: DateTime
    expiryHint: Boolean!
    "number of files in the snapshot"
    fileCount: Long!
    hasDelta: Boolean!
    "flag if the snapshot has image(s) converted."
    hasImageConverted: Boolean!
    id: UUID!
    indexingAttempts: Long!
    "flag if the snapshot is an anomaly."
    isAnomaly: Boolean!
    isCorrupted: Boolean!
    isDownloadedSnapshot: Boolean
    "Whether or not the snapshot is expired"
    isExpired: Boolean!
    isIndexed: Boolean!
    isOnDemandSnapshot: Boolean!
    isSapHanaIncrementalSnapshot: Boolean
    isUnindexable: Boolean!
    localLocations: [DataLocation!]
    locations: [DataLocation!]
    "Non-null when a user has assigned a SLA to this snapshot, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "Mapping from snapshot to delete pending action status"
    pendingSnapshotDeletion: PendingSnapshotDeletion
    replicationLocations: [DataLocation!]
    "SAP HANA specific metadata for the snapshot"
    sapHanaAppMetadata: SapHanaAppMetadata
    "sla domain of the snapshot"
    slaDomain: SlaDomain
    "The snappableId of the snapshot."
    snappableId: String!
    snappableNew: CdmHierarchySnappableNew!
    snapshotRetentionInfo: CDMSnapshotRetentionInfo
}

type CdmSnapshotConnection {
    count: Int!
    edges: [CdmSnapshotEdge!]!
    nodes: [CdmSnapshot!]!
    pageInfo: PageInfo!
}

type CdmSnapshotEdge {
    cursor: String!
    node: CdmSnapshot!
}

"Specific info for Target created on and synced from cdm cluster"
type CdmTarget implements Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    "The name of this Target"
    name: String!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

type CdmUpgradeAvailabilityReply {
    isAvailable: Boolean!
    status: UpgradeStatus
}

type CdmUpgradeInfo {
    "Operations the user are authorized to take on the cluster"
    authorizedOperations: AuthorizedOperations!
    "Cluster Job Status"
    clusterJobStatus: ClusterJobStatusTypeEnum
    "Status of cluster"
    clusterStatus: CdmClusterStatus
    "The cluster uuid."
    clusterUuid: UUID!
    "Current running state progress percentage"
    currentStateProgress: Float
    "Downloaded version of tarball"
    downloadedVersion: String
    "Finished states of upgrade"
    finishedStates: String
    "Overall upgrade Progress"
    overallProgress: Float
    "Pending states of upgrade"
    pendingStates: String
    "Upgrade ending time"
    previousVersion: String
    "ScheduledUpgrade Action"
    scheduleUpgradeAction: String
    "ScheduledUpgrade timestamp"
    scheduleUpgradeAt: DateTime
    "ScheduledUpgrade Mode."
    scheduleUpgradeMode: String
    "Upgrade state machine status"
    stateMachineStatus: String
    "Last time when state machine was updated"
    stateMachineStatusAt: DateTime
    "Upgrade ending time"
    upgradeEndAt: DateTime
    "The upgrade event series id"
    upgradeEventSeriesId: String
    "Recommended upgrade version of cluster"
    upgradeRecommendationInfo: UpgradeRecommendationInfo
    "Upgrade started time"
    upgradeStartAt: DateTime
    "Version of cluster"
    version: String!
    "Version status of cluster"
    versionStatus: VersionStatusTypeEnum
}

type CdmUpgradeRecommendationReply {
    isRecommended: Boolean!
    status: UpgradeStatus
}

type CdmUpgradeReleaseDetail {
    description: String!
    gaReleaseDate: String!
    isRecommended: Boolean!
    isUpgradable: Boolean!
    md5Sum: String!
    name: String!
    releaseDate: String!
    releaseNotesLink: String!
    size: Long!
    tarDownloadLink: String!
}

type CdmUpgradeReleaseDetailsFromSupportPortalReply {
    compatibilityMatrixLink: String!
    releaseDetails: [CdmUpgradeReleaseDetail!]!
    supportSoftwareLink: String!
}

type CellData {
    displayableValue: DisplayableValue
    metadata: [Metadata!]!
}

"Certificate Information"
type Certificate {
    certificate: String!
    certificateId: Long!
    description: String!
    expiringAt: DateTime
    hasKey: Boolean!
    name: String!
    usedBy: [String!]!
}

type CertificateConnection {
    count: Int!
    edges: [CertificateEdge!]!
    nodes: [Certificate!]!
    pageInfo: PageInfo!
}

type CertificateEdge {
    cursor: String!
    node: Certificate!
}

type ChartConfig {
    chartType: ChartType!
    groupBy: [String!]!
}

type CheckGuestOsReply {
    success: Boolean!
    supportedOs: [GuestOSEnum!]!
    validationResult: [CheckGuestOsResult!]!
}

type CheckGuestOsResult {
    errorMessage: String!
    "vsphere vm instance"
    instance: VSphereVm!
    instanceId: String!
    instanceOs: GuestOSEnum!
    instanceType: String!
}

"Contains the details about RBA connectivity taskchains"
type CheckRBAConnectivityReply {
    failures: [Failure!]!
    successes: [Success!]!
}

type ChildInfo {
    vSphereVmInfo: VsphereBlueprintChildSnapshotInfo!
}

type ChildRecoverySpecMap {
    "the recovery spec"
    recoverySpec: RecoverySpec!
    "the fid of the recovery spec"
    recoverySpecFid: String!
    "sla to be assigned post failover"
    slaId: String
    "the child snappable Fid"
    snappableFid: String!
    "the child snapshot Fid"
    snapshotId: String
}

type ChildVmRecoveryInfo {
    missedRecoverableRanges: [VmwareRecoverableRange!]!
    recoverableRanges: [VmwareRecoverableRange!]!
    recoveryPoints: VmwareRecoveryPoints!
    recoveryState: VmwareRecoveryState!
}

type ClassificationPolicyDetail {
    analyzers: [Analyzer!]!
    colorEnum: ClassificationPolicyColor!
    createdTime: Long!
    creator: User
    deletable: Boolean!
    description: String!
    hierarchyObjectIds: [String!]!
    hierarchyObjects: [HierarchyObject!]!
    id: String!
    lastUpdatedTime: Long!
    mode: ClassificationPolicyMode!
    name: String!
    numAnalyzers: Int!
    objectStatuses: [ObjectStatus!]!
    totalObjects: Int!
    whitelists: [ClassificationPolicyWhitelistDetailedEntry!]!
}

type ClassificationPolicyDetailConnection {
    count: Int!
    edges: [ClassificationPolicyDetailEdge!]!
    nodes: [ClassificationPolicyDetail!]!
    pageInfo: PageInfo!
}

type ClassificationPolicyDetailEdge {
    cursor: String!
    node: ClassificationPolicyDetail!
}

type ClassificationPolicySummary {
    colorEnum: ClassificationPolicyColor!
    id: String!
    name: String!
}

type ClassificationPolicyWhitelistDetailedEntry {
    nativePath: String!
    snappable: HierarchyObject!
    stdPath: String!
    updateTs: Long!
    updateUsername: String!
}

"Updated service account details"
type Client {
    clientId: String!
    description: String!
    lastLogin: DateTime
    name: String!
}

type CloudAccountAddressBlockV4 {
    cidrBlock: String!
}

type CloudAccountSub {
    description: String!
    name: String!
    ownerId: String!
    securityGroupId: String!
    vpcId: String!
}

type CloudAccountSubnet {
    availabilityZone: String!
    cidrBlock: CloudAccountAddressBlockV4
    name: String!
    subnetId: String!
    vpcId: String!
}

type CloudAccountVpc {
    cidrBlock: CloudAccountAddressBlockV4
    id: String!
    name: String!
    vpcId: String!
}

"Cloud native Account Id with its name"
type CloudNativeAccountIdWithName {
    id: String!
    name: String!
}

type CloudNativeFileRecoveryFeasibility {
    fileRecoveryFeasibility: FileRecoveryFeasibility!
    snapshotId: String!
}

type CloudNativeFileVersion {
    fileMode: FileModeEnum!
    lastModified: DateTime!
    sizeInBytes: Long!
    snapshot: CloudNativeSnapshotInfo!
}

"A single Label"
type CloudNativeLabel {
    labelKey: String!
    labelValue: String!
    matchAllValues: Boolean!
}

type CloudNativeSnapshotInfo {
    date: DateTime!
    id: String!
    isOnDemandSnapshot: Boolean!
}

"CloudNativeTagRule represents a single tag rule"
type CloudNativeTagRule {
    cloudNativeAccounts: [CloudNativeAccountIdWithName!]!
    effectiveSla: TagRuleEffectiveSla
    hasPermissionToModify: Boolean!
    id: String!
    name: String!
    objectType: ManagedObjectType!
    tag: TagRuleTag
}

type CloudNativeVersionedFile {
    absolutePath: String!
    displayPath: String!
    fileVersions: [CloudNativeFileVersion!]!
    filename: String!
    path: String!
}

type CloudNativeVersionedFileConnection {
    count: Int!
    edges: [CloudNativeVersionedFileEdge!]!
    nodes: [CloudNativeVersionedFile!]!
    pageInfo: PageInfo!
}

type CloudNativeVersionedFileEdge {
    cursor: String!
    node: CloudNativeVersionedFile!
}

type Cluster {
    "The cluster's activity series."
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort activity series by field"
        sortBy: ActivitySeriesSortByEnum = LastUpdated
    ): ActivitySeriesConnection!
    "The cluster's archival locations."
    archivalLocations: [ArchivalLocation!]!
    "Cluster Upgrade info"
    cdmUpgradeInfo: CdmUpgradeInfo
    "The cluster disks."
    clusterDiskConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterDiskFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterDiskConnection!
    "The cluster nodes."
    clusterNodeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterNodeConnection!
    "When the global manager connectivity was last updated."
    connectivityLastUpdated: DateTime
    "Sonar previewer config."
    datagovPreviewerConfig: PreviewerClusterConfig!
    "The cluster's default address."
    defaultAddress: String
    "Whether or not the cluster is encrypted."
    encryptionEnabled: Boolean!
    "The number of days remaining before the system fills up."
    estimatedRunway: Long!
    "The cluster's location."
    geoLocation: GeoLocation
    "The cluster's global manager connectivity status."
    globalManagerConnectivityStatus: GlobalManagerConnectivity
    "The cluster uuid."
    id: UUID!
    "Whether or not the cluster is healthy."
    isHealthy: Boolean!
    "Lambda config."
    lambdaConfig: GetLambdaConfigReply
    "Lambda feature history."
    lambdaFeatureHistory: LambdaFeatureHistory
    "The time the cluster was last connected"
    lastConnectionTime: DateTime
    "Metadata pull scheduler."
    metadataPullScheduler: JobsReply
    "The most recent metric of a cluster."
    metric: ClusterMetric
    "The metric time series of a cluster."
    metricTimeSeries(timeRange: TimeRangeInput, unit: TimeUnitEnum!): [metricTimeSeries!]!
    "The cluster name."
    name: String!
    "Whether the global manager connectivity is healthy."
    passesConnectivityCheck: Boolean
    "This field contains information about the various jobs that sync data from the CDM Cluster to Polaris"
    polarisSyncStatus: PolarisSyncStatus!
    "The cluster product type (e.g., CDM, DATOS, etc.)."
    productType: ClusterProductEnum
    "The time the cluster was registered."
    registrationTime: DateTime!
    "The cluster's replication sources."
    replicationSources: [ReplicationSource!]!
    "The cluster's replication targets."
    replicationTargets: [ReplicationTarget!]!
    "The cluster's snappables."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input"
        filter: SnappableFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): SnappableConnection!
    "The total number of snapshots."
    snapshotCount: Long!
    "The cluster state."
    state: clusterState!
    "The cluster status."
    status: ClusterStatus!
    "The cluster type."
    type: ClusterTypeEnum!
    "The software version."
    version: String
}

type ClusterConnection {
    count: Int!
    edges: [ClusterEdge!]!
    nodes: [Cluster!]!
    pageInfo: PageInfo!
}

type ClusterDisk {
    capacityBytes: Long!
    clusterId: UUID!
    diskType: ClusterDiskType!
    id: String!
    isEncrypted: Boolean!
    nodeId: String
    path: String!
    status: ClusterDiskStatus!
    unallocatedBytes: Long
    usableBytes: Long
}

type ClusterDiskConnection {
    count: Int!
    edges: [ClusterDiskEdge!]!
    nodes: [ClusterDisk!]!
    pageInfo: PageInfo!
}

type ClusterDiskEdge {
    cursor: String!
    node: ClusterDisk!
}

type ClusterEdge {
    cursor: String!
    node: Cluster!
}

"Cluster data with groupby info applied to it."
type ClusterGroupBy {
    "Paginated snappable data."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Further provide groupings for the data."
    clusterGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: ClusterGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [ClusterGroupBy!]!
    "The data groupby info."
    groupByInfo: ClusterGroupByInfo!
}

type ClusterGroupByConnection {
    count: Int!
    edges: [ClusterGroupByEdge!]!
    nodes: [ClusterGroupBy!]!
    pageInfo: PageInfo!
}

type ClusterGroupByEdge {
    cursor: String!
    node: ClusterGroupBy!
}

"Cluster interface CIDR map."
type ClusterInfCidrs {
    clusterId: String!
    clusterName: String!
    interfaceCidr: [InterfaceCidr!]!
}

type ClusterJobStatusType {
    enumValue: ClusterJobStatusTypeEnum!
}

type ClusterMetric {
    availableCapacity: Long!
    ingestedSnapshotStorage: Long!
    lastUpdateTime: DateTime!
    liveMountCapacity: Long!
    miscellaneousCapacity: Long!
    physicalSnapshotStorage: Long!
    snapshotCapacity: Long!
    totalCapacity: Long!
    usedCapacity: Long!
}

type ClusterNode {
    brikId: String!
    clusterId: UUID!
    id: String!
    ipAddress: String
    needsInspection: Boolean
    status: String
}

type ClusterNodeConnection {
    count: Int!
    edges: [ClusterNodeEdge!]!
    nodes: [ClusterNode!]!
    pageInfo: PageInfo!
}

type ClusterNodeEdge {
    cursor: String!
    node: ClusterNode!
}

"Replication target specific information."
type ClusterReplicationTarget {
    "Id of replication target."
    id: String!
    "Name of replication target."
    name: String!
}

type ClusterSlaDomain implements SlaDomain {
    archivalSpec: CdmArchivalSpec
    backupWindows: [BackupWindow!]!
    baseFrequency: SlaDuration
    cdmId: String!
    cluster: Cluster
    fid: String!
    firstFullBackupWindows: [BackupWindow!]!
    id: String!
    localRetentionLimit: SlaDuration
    name: String!
    polarisManagedId: String
    protectedObjectCount: Int!
    replicationSpec: ReplicationSpec
    replicationSpecV2: [ReplicationSpecV2!]!
    snapshotSchedule: SnapshotSchedule
    version: String
}

type ClusterSlaDomainConnection {
    count: Int!
    edges: [ClusterSlaDomainEdge!]!
    nodes: [ClusterSlaDomain!]!
    pageInfo: PageInfo!
}

type ClusterSlaDomainEdge {
    cursor: String!
    node: ClusterSlaDomain!
}

"Metadata for rendering a cluster sla for filter."
type ClusterSlaDomainForFilter {
    "The name of the cluster the sla belongs to"
    clusterName: String
    "The uuid of the cluster the sla belongs to"
    clusterUuid: UUID!
    "The fid of the sla"
    id: String!
    "The name of the sla"
    name: String!
}

type ClusterSlaDomainForFilterConnection {
    count: Int!
    edges: [ClusterSlaDomainForFilterEdge!]!
    nodes: [ClusterSlaDomainForFilter!]!
    pageInfo: PageInfo!
}

type ClusterSlaDomainForFilterEdge {
    cursor: String!
    node: ClusterSlaDomainForFilter!
}

type ClusterType {
    enumValue: ClusterTypeEnum!
}

type Column {
    aggregate: Boolean!
    default: Boolean!
    dimensional: Boolean!
    displayName: String!
    name: String!
    nullable: Boolean!
    sortable: Boolean!
    type: DataTypeEnum!
}

type CommonNotificationConfig {
    hostname: String!
    networkType: NetworkProtocolTypeEnum!
    port: Int!
    securityType: SMTPSecurityTypeEnum!
    trustedCerts: String!
}

type ComplianceStatus {
    enumValue: ComplianceStatusEnum!
}

type ConfigFilter {
    filter: ReportFilter!
    filterHeader: [String!]!
}

type Context {
    status: UpgradeStatus
}

type CountOfObjectsProtectedBySLAsResult {
    slaObjectCounts: [SLAIdToObjectCount!]!
}

type Crawl {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    crawlObj(snappableFid: String!): CrawlObj!
    crawlObjConnection: CrawlObjConnection!
    endTime: Long!
    failedObjectCount: Int!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListFileResultFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput
    ): FileResultConnection!
    filesAnalyzeable: Long!
    filesAnalyzed: Long!
    filesTotal: Long!
    filesWithHits: Long!
    id: String!
    name: String!
    progress: Float!
    snappableTypeSummaries: [SnappableTypeSummary!]!
    startTime: Long!
    status: CrawlStatusEnum!
    totalHits: Int!
    user: User
}

type CrawlConnection {
    count: Int!
    edges: [CrawlEdge!]!
    nodes: [Crawl!]!
    pageInfo: PageInfo!
}

type CrawlEdge {
    cursor: String!
    node: Crawl!
}

type CrawlObj {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    cluster: Cluster!
    crawlId: String!
    endTime: Long!
    error: String!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrowseDirectoryFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        stdPath: String!
    ): FileResultConnection!
    filesAnalyzeable: Long!
    filesAnalyzed: Long!
    filesTotal: Long!
    filesWithHits: Long!
    progress: Float!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTime: Long!
    startTime: Long!
    status: SnappableCrawlStatus!
    totalHits: Int!
}

type CrawlObjConnection {
    count: Int!
    edges: [CrawlObjEdge!]!
    nodes: [CrawlObj!]!
    pageInfo: PageInfo!
}

type CrawlObjEdge {
    cursor: String!
    node: CrawlObj!
}

"AWS Exocompute Configs Create Response."
type CreateAwsExocomputeConfigsReply {
    "List of exocompute configurations."
    configs: [AwsExocomputeGetConfigResponse!]!
}

"Disk ID and the error encountered while scheduling create azure native disk snapshot job for the Disk"
type CreateAzureNativeDiskSnapshotError {
    diskID: String!
    error: String!
}

"Disk ID and the Taskchain ID of the create azure native disk snapshot job scheduled for the Disk"
type CreateAzureNativeDiskSnapshotTaskchainUuid {
    diskId: String!
    taskchainUuid: String!
}

"The status of Create Azure Native Disk Snapshots request. For each disk ID in the request: an entry in errors if failed, or in taskchainUuids if succeeded."
type CreateAzureNativeDiskSnapshotsReply {
    errors: [CreateAzureNativeDiskSnapshotError!]!
    taskchainUuids: [CreateAzureNativeDiskSnapshotTaskchainUuid!]!
}

"Virtual Machine ID and the error encountered while schedulingcreate azure native virtual machine snapshot job for the VM"
type CreateAzureNativeVirtualMachineSnapshotError {
    error: String!
    vmId: String!
}

"Virtual Machine ID and the Taskchain ID of the create azure native virtual machine snapshot job scheduled for the VM"
type CreateAzureNativeVirtualMachineSnapshotTaskchainUuid {
    taskchainUuid: String!
    vmId: String!
}

"The status of Create Azure Native Virtual Machine Snapshots request. For each vm ID in the request: an entry in errors if failed, or in taskchainUuids if succeeded."
type CreateAzureNativeVirtualMachineSnapshotsReply {
    errors: [CreateAzureNativeVirtualMachineSnapshotError!]!
    taskchainUuids: [CreateAzureNativeVirtualMachineSnapshotTaskchainUuid!]!
}

"Output for CreateCloudNativeAwsStorageSetting mutation"
type CreateCloudNativeAwsStorageSettingReply {
    targetMapping: TargetMapping!
}

"The status of Create label Rule request. It contains theid of the new label rule if request succeeds"
type CreateCloudNativeLabelRuleReply {
    labelRuleId: String!
}

"The status of Create tag Rule request. It contains theid of the new tag rule if request succeeds"
type CreateCloudNativeTagRuleReply {
    tagRuleId: String!
}

"O365 create app kickoff response"
type CreateO365AppKickoffResp {
    appClientId: String!
    csrfToken: String!
    o365TenantId: String!
}

"Reply to Create on-demand job request"
type CreateOnDemandJobReply {
    jobId: Long!
    taskchainId: String!
}

"Contains the URLs for RBA installers"
type CreateRBAInstallerReply {
    debianUrl: String!
    rpmUrl: String!
    windowsUrl: String!
}

"Service account details"
type CreateServiceAccountReply {
    accessTokenUri: String!
    clientId: String!
    clientSecret: String!
    name: String!
}

"CSR Information"
type Csr {
    csr: String!
    csrId: Long!
    hostnames: [String!]!
    name: String!
}

type CsrConnection {
    count: Int!
    edges: [CsrEdge!]!
    nodes: [Csr!]!
    pageInfo: PageInfo!
}

type CsrEdge {
    cursor: String!
    node: Csr!
}

type CustomAnalyzerMatch {
    endIndex: Int!
    startIndex: Int!
}

"Metadata for rendering a custom report."
type CustomReport {
    "The list of charts in the custom report."
    charts: [ReportChartType!]!
    "Time the report was created."
    createdAt: DateTime!
    "The filters applied to the data in the report."
    filters: CustomReportFilters!
    "The metrics focus of the custom report."
    focus: ReportFocusEnum!
    "ID of the custom report."
    id: Int!
    "True if report should be hidden from gallery view."
    isHidden: Boolean!
    "True if report is auto-generated and not allowed to be edited."
    isReadOnly: Boolean!
    "Name of the custom report."
    name: String!
    newestSyncDate: DateTime
    oldestSyncDate: DateTime
    "The creator of the custom report."
    owner: User!
    scheduledReportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    "The list of tables in the custom report."
    tables: [ReportTableType!]!
    "Time the report was last updated (i.e., saved)."
    updatedAt: DateTime!
    "Time the report was last viewed / opened by the user."
    viewedAt: DateTime!
}

type CustomReportConnection {
    count: Int!
    edges: [CustomReportEdge!]!
    nodes: [CustomReport!]!
    pageInfo: PageInfo!
}

type CustomReportEdge {
    cursor: String!
    node: CustomReport!
}

"Filter configs for a report."
type CustomReportFilters {
    "List of activity object types to filter on."
    activityObjectType: [ActivityObjectTypeEnum!]
    "List of clusters to filter on."
    cluster: [Cluster!]
    clusterLocation: [String!]
    "List of cluster types to filter on."
    clusterType: [ClusterTypeEnum!]
    complianceStatus: [ComplianceStatusEnum!]
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    "Anomalous value to filter data on."
    isAnomaly: Boolean
    "List of activity statuses to filter on."
    lastActivityStatus: [ActivityStatusEnum!]
    "List of activity types to filter on."
    lastActivityType: [ActivityTypeEnum!]
    "List of managed ids to filter data on."
    managedId: [String!]
    "List of snappable types to filter on."
    objectType: [ObjectTypeEnum!]
    "List of policy IDs to filter on."
    policyId: [String!]
    protectionStatus: [ProtectionStatusEnum!]
    replicationSource: [String!]
    searchTerm: String
    slaDomain: [SlaDomain!]
    "The time range for sla compliance report"
    slaTimeRange: SLAComplianceTimeRangeEnum
    sonarObjectTypes: [HierarchyObjectTypeEnum!]
    source: [String!]
    targetSite: [String!]
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    "Start and end time range to filter data on."
    timeRange: GenericTimeRange
    "List of object types to filter on for Audits."
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    "List of user audit status to filter on."
    userAuditStatus: [UserAuditStatusEnum!]
    "List of user audit types to filter on."
    userAuditType: [UserAuditTypeEnum!]
}

"CustomReport data with groupby info applied to it."
type CustomReportGroupBy {
    "The data groupby info."
    groupByInfo: CustomReportGroupByInfo!
    "Paginated snappable data."
    reportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort by field"
        sortBy: CustomReportSortByEnum = UpdateTime,
        "sort order"
        sortOrder: SortOrderEnum
    ): CustomReportConnection!
    "Further provide groupings for the data."
    reportGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: CustomReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [CustomReportGroupBy!]!
}

type CustomReportGroupByConnection {
    count: Int!
    edges: [CustomReportGroupByEdge!]!
    nodes: [CustomReportGroupBy!]!
    pageInfo: PageInfo!
}

type CustomReportGroupByEdge {
    cursor: String!
    node: CustomReportGroupBy!
}

type DailyAnalysisDetails {
    anomalyEventCount: Long!
    createdDataBytes: Long!
    createdFileCount: Long!
    day: String!
    deletedDataBytes: Long!
    deletedFileCount: Long!
    modifiedDataBytes: Long!
    modifiedFileCount: Long!
    suspiciousDataBytes: Long!
    suspiciousFileCount: Long!
}

type DailySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
}

type DataLocation {
    clusterUuid: UUID!
    createDate: DateTime!
    id: String!
    isActive: Boolean!
    isArchived: Boolean!
    "the name of the data location"
    name: String!
    type: LocationTypeEnum!
}

"Cluster specific info for supported cluster"
type DataLocationSupportedCluster {
    name: String!
    uuid: String!
    version: String!
}

"Objects containing Datastore names for a given ESXi host"
type Datastore {
    name: String!
}

"Datastores for a given ESXi host"
type DatastoreListResponse {
    data: [Datastore!]!
    hasMore: Boolean
    total: Long
}

type DayOfWeekOpt {
    day: DayOfWeekEnum!
}

"An db parameter group on AWS."
type DbParameterGroup {
    arn: String!
    family: String!
    name: String!
}

"Reply for deletion of aws compute setting"
type DeleteAwsCloudComputeSettingReply {
    success: Boolean!
}

"AWS Exocompute Configs Delete Response."
type DeleteAwsExocomputeConfigsReply {
    "Deletion status for exocompute configurations."
    deletionStatus: [AwsExocomputeConfigsDeletionStatusType!]!
}

"Result of cleanup process of cluster."
type DeleteAzureDiskClusterReply {
    "Indicates if the operation was a success or not"
    result: Boolean!
}

type DeleteBlueprintRecoverySpecReply {
    recoverySpecIds: [RecoverySpecId!]!
}

"Response from the delete subscription job. The response contains the taskchain Id, enabling the internal caller to be able to track progress of the job."
type DeleteSubscriptionReply {
    taskchainUuid: String!
}

"Statistic result for certain file/folder"
type DiffData {
    bytesCreated: Long!
    bytesDeleted: Long!
    bytesModified: Long!
    filesCreated: Long!
    filesDeleted: Long!
    filesModified: Long!
    isDeleted: Boolean!
    isFolder: Boolean!
    lastModifiedTime: Long!
    mode: Int!
    path: String!
    suspiciousFilesAdded: Long!
    totalSize: Long!
}

"Browse diff fmd result under given path"
type DiffFMDReply {
    data: [DiffData!]!
    previousSnapshotDate: Long!
    previousSnapshotId: String!
}

"Taskchain ID of the taskchain to disable the specified project"
type DisableProjectReply {
    taskchainUuid: String!
}

type DisplayableValueBoolean implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Boolean
}

type DisplayableValueDateRange implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: PastDurationEnum
}

type DisplayableValueDateTime implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: DateTime
}

type DisplayableValueFloat implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Float
}

type DisplayableValueInteger implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Int
}

type DisplayableValueLong implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Long
}

type DisplayableValueNull implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
}

type DisplayableValueString implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: String
}

type DownloadActiveSlaWithReplicationCsvReply {
    downloadLink: String!
    isActiveSla: Boolean!
}

type DownloadCdmUpgradesPdfReply {
    downloadLink: String!
}

type DownloadCsvReply {
    "Status of queueing a download CSV job."
    isSuccessful: Boolean!
}

"The status of download cloud native files req. It contains thetaskchain id of the download job if succeeded"
type DownloadFilesReply {
    taskchainId: String!
}

type DownloadJobInfo {
    eventId: String!
    jobInstanceId: String!
    progress: Float!
    remainingTimeEstimateInSeconds: Long!
    status: String!
}

"Link to report"
type DownloadLink {
    "The link to the report."
    link: String!
}

type DownloadPackageReply {
    jobId: String!
}

type DownloadPackageReplyWithUuid {
    jobId: String!
    uuid: String!
}

type DownloadPackageStatusReply {
    availability: String!
    description: String!
    downloadJobInfo: DownloadJobInfo
    md5Sum: String!
    size: Long!
    version: String!
}

type DownloadResultsCsvReply {
    downloadLink: String!
}

type Ec2Blueprint implements Blueprint & HierarchyObject & HierarchySnappable & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The list of children snappable"
    childConnection: BlueprintChildConnection!
    children: [Ec2InstanceChild!]!
    "The cloud account of EC2 Blueprint"
    cloudAccount: AwsNativeAccount
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    currentFailoverStatus: AppBlueprintFailoverStatusEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    lastFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastFailoverTimeMillisOpt: Long
    "last test failover"
    lastTestFailover: Failover
    lastTestFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastTestFailoverTimeMillisOpt: Long
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: PolarisSnapshot
    "The newest snapshot ready for failover"
    newestFailoverReadySnapshot(isTestFailover: Boolean!): PolarisSnapshot
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    rmStatus: AppBlueprintRmStatusEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    status: AppBlueprintStatusEnum!
}

type Ec2BlueprintChildFailoverInstance implements BlueprintFailoverInstance {
    snappableId: String!
}

type Ec2InstanceChild implements BlueprintChild {
    bootPriority: Int!
    "failover instance of child snappable"
    failoverInstance: Ec2BlueprintChildFailoverInstance
    fid: UUID!
    "recoverySpec of child snappable"
    recoverySpec: RecoverySpec
    "resourceSpec of child snappable"
    resourceSpec: Ec2InstanceResourceSpec
    "the child snappable"
    snappable: AwsNativeEc2Instance
    snappableType: ObjectTypeEnum!
}

type Ec2InstanceNic {
    key: String!
    secGroup: SnappableSecurityGroup
    subnet: SnappableSubnet
}

type Ec2InstanceRecoverySpec implements RecoverySpec {
    availabilityZone: String
    awsNicSpecs: [AwsVMNicSpec!]!
    awsVolumeSpecs: [AwsVMVolumeSpec!]!
    dedicatedHostId: String
    hostAffinity: String
    instanceTypeId: Int!
    instanceTypeName: String!
    keyName: String
    placementGroup: String
    tenancy: AwsInstanceTenancyEnum!
    userData: String
    version: Long!
}

type Ec2InstanceResourceSpec implements ResourceSpec {
    ec2InstanceNics: [Ec2InstanceNic!]!
    ec2InstanceVolumeSpecs: [Ec2InstanceVolume!]!
    instanceType: String!
    instanceTypeMemoryMbs: Int!
    instanceTypeVCpus: Int!
    isArchived: Boolean!
    nativeId: String!
    osType: String!
    region: String!
    snappableId: String!
    snappableName: String!
    snapshotId: String!
}

type Ec2InstanceVolume {
    key: String!
    sizeGbs: Int!
}

"""

Supported in v5.1+
"""
type EffectiveSlaHolder {
    """

    Supported in v5.1+
    v5.1: ID of the effective SLA domain
    v5.2+: The ID of the SLA Domain that controls the protection of the Rubrik object.
    """
    effectiveSlaDomainId: String!
    """

    Supported in v5.1+
    v5.1: name of the effective SLA domain
    v5.2+: The name of the SLA Domain that controls the protection of the Rubrik object.
    """
    effectiveSlaDomainName: String!
    """

    Supported in v5.1+
    v5.1: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    v5.2+: Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v5.1+
    v5.1: ID of the object from which the effective SLA domain is inherited.
    v5.2+: The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.1+
    v5.1: Name of the object from which the effective SLA domain is inherited.
    v5.2+: The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
    """
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA Domain is a Retention Lock SLA Domain.
    v5.2+: Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
}

"Status of 'enable automatic upload' service on certain cluster"
type EnableAutomaticFmdUploadReply {
    clusterId: String!
    enabled: Boolean!
}

"Toggle enable/disable app consistent protection for VM"
type EnableDisableAppConsistencyReply {
    failedSnappableIds: [String!]!
    successSnappableIds: [String!]!
}

"Status of 'enable lambda service' on certain cluster"
type EnableLambdaForSnappableReply {
    diffFmdEnabled: Boolean!
    fullFmdEnabled: Boolean!
    snappableFid: String!
}

type EventDigest {
    account: String!
    digestId: Int!
    digestName: String!
    eventDigestConfigJson: String!
    frequency: Int!
    includeAudits: Boolean!
    includeEvents: Boolean!
    isImmediate: Boolean!
    recipientUserId: String!
}

"Taskchain ID of the taskchain to export GCP native disk"
type ExportDiskReply {
    taskchainUuid: String!
}

"Taskchain information for export azure native disk job"
type ExportDiskSnapshotReply {
    taskchainUuid: String!
}

"Taskchain ID of the taskchain to export GCP native instance"
type ExportGCEInstanceReply {
    taskchainUuid: String!
}

"Taskchain information for export azure native virtual machine job"
type ExportVMReply {
    taskchainUuid: String!
}

"A protection task."
type Failover {
    "ID of the associated appblueprint."
    appBlueprintId: UUID!
    "Name of the associated appblueprint."
    appBlueprintName: String!
    "Duration of the appflows failover job, number of millis."
    duration: Long
    "The timestamp that the job ends."
    endTime: DateTime
    "The failover job status."
    failoverStatus: FailoverStatusEnum!
    "The type of the failover job."
    failoverType: FailoverTypeEnum!
    "ID of the failover job."
    id: String!
    "The status of the last test."
    lastTestStatus: LastTestStatusEnum
    "The timestamp of the last test."
    lastTestTime: DateTime
    "The report for the failover job."
    report(
        "failover report ID"
        failoverReportId: String!
    ): FailoverReport
    "Source of the snappable associated with this appflows failover job."
    source: String!
    "The timestamp that the job starts."
    startTime: DateTime!
    "Target site of the appflows failover job."
    targetSite: String!
    taskchainId: UUID!
}

type FailoverChart {
    focus: ReportFocusEnum!
    groupBy: [FailoverGroupByEnum!]
    name: String!
}

type FailoverClusterApp implements CdmHierarchyObject & FailoverClusterTopLevelDescendantType & HierarchyObject & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterAppDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    failoverClusterId: String!
    failoverClusterType: String
    "The fid of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterAppPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: FailoverClusterStatusObject
    vips: [String!]!
}

"""

Supported in v5.2+
"""
type FailoverClusterAppConfig {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
    """
    failoverClusterAppSource: FailoverClusterAppSource
    """

    Supported in v5.2+
    Cluster ID of the failover cluster app.
    """
    failoverClusterId: String!
    failoverClusterType: FailoverClusterTypeEnum
    """

    Required. Supported in v5.2+
    Name of the failover cluster app.
    """
    name: String!
}

type FailoverClusterAppConnection {
    count: Int!
    edges: [FailoverClusterAppEdge!]!
    nodes: [FailoverClusterApp!]!
    pageInfo: PageInfo!
}

type FailoverClusterAppDescendantTypeConnection {
    count: Int!
    edges: [FailoverClusterAppDescendantTypeEdge!]!
    nodes: [FailoverClusterAppDescendantType!]!
    pageInfo: PageInfo!
}

type FailoverClusterAppDescendantTypeEdge {
    cursor: String!
    node: FailoverClusterAppDescendantType!
}

type FailoverClusterAppEdge {
    cursor: String!
    node: FailoverClusterApp!
}

type FailoverClusterAppPhysicalChildTypeConnection {
    count: Int!
    edges: [FailoverClusterAppPhysicalChildTypeEdge!]!
    nodes: [FailoverClusterAppPhysicalChildType!]!
    pageInfo: PageInfo!
}

type FailoverClusterAppPhysicalChildTypeEdge {
    cursor: String!
    node: FailoverClusterAppPhysicalChildType!
}

"""

Supported in v5.2+
"""
type FailoverClusterAppSource {
    """

    Supported in v5.2+
    Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
    """
    nodeOrders: [FailoverClusterNodeOrder!]!
    "Virtual IP addresses of the failover cluster."
    vips: [String!]!
    """

    Supported in v5.3+
    Virtual IP addresses of the failover cluster.
    """
    virtualIps: [String!]!
}

"""

Supported in v5.2+
"""
type FailoverClusterAppSummary {
    connectionStatus: FailoverClusterAppConnectionStatusEnum
    effectiveSlaHolder: EffectiveSlaHolder
    failoverClusterAppConfig: FailoverClusterAppConfig
    """

    Supported in v5.3+
    The failover cluster name of the failover cluster app. The failover cluster is a group of hosts that provides high availability for running failover clustered applications.
    """
    failoverClusterName: String
    """

    Required. Supported in v5.2+
    ID assigned to the failover cluster app.
    """
    id: String!
    operatingSystemType: FailoverClusterOsTypeEnum
    """

    Supported in v5.2+
    """
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    slaAssignment: SlaAssignmentEnum
}

"""

Supported in v5.2+
"""
type FailoverClusterDetail {
    failoverClusterSummary: FailoverClusterSummary
    """

    Supported in v5.2+
    Count of the number of failover cluster apps.
    """
    numApps: Int!
    """

    Supported in v5.2+
    Count of the number of nodes on the failover cluster.
    """
    numNodes: Int!
}

"""

Supported in v5.2+
"""
type FailoverClusterNode {
    connectionStatus: FailoverClusterNodeConnectionStatusEnum
    """

    Required. Supported in v5.2+
    ID of the node in the failover cluster.
    """
    id: String!
    """

    Required. Supported in v5.2+
    Name of the node in the failover cluster.
    """
    name: String!
    """

    Supported in v5.3+
    Operating system of the node in the failover cluster.
    """
    operatingSystem: String
}

"""

Supported in v5.2+
"""
type FailoverClusterNodeOrder {
    """

    Supported in v5.2+
    ID of the failover cluster node.
    """
    nodeId: String!
    """

    Supported in v5.3+
    The name of the failover cluster node.
    """
    nodeName: String
    """

    Required. Supported in v5.2+
    An integer that specifies the place occupied by this node in the failover cluster app backup order.
    """
    order: Int!
}

"Additional information about the status of the failover cluster"
type FailoverClusterStatusObject {
    connectivity: String!
    timestamp_millis: DateTime
}

"""

Supported in v5.2+
"""
type FailoverClusterSummary {
    connectionStatus: FailoverClusterConnectionStatusEnum
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Required. Supported in v5.2+
    ID assigned to the failover cluster.
    """
    id: String!
    """

    Required. Supported in v5.2+
    Cluster name assigned to the failover cluster.
    """
    name: String!
    """

    Required. Supported in v5.2+
    Details of the nodes of this failover cluster.
    """
    nodes: [FailoverClusterNode!]!
    operatingSystemType: FailoverClusterOsTypeEnum
    """

    Supported in v5.2+
    """
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    slaAssignment: SlaAssignmentEnum
}

type FailoverClusterTopLevelDescendantTypeConnection {
    count: Int!
    edges: [FailoverClusterTopLevelDescendantTypeEdge!]!
    nodes: [FailoverClusterTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type FailoverClusterTopLevelDescendantTypeEdge {
    cursor: String!
    node: FailoverClusterTopLevelDescendantType!
}

type FailoverConnection {
    count: Int!
    edges: [FailoverEdge!]!
    nodes: [Failover!]!
    pageInfo: PageInfo!
}

type FailoverEdge {
    cursor: String!
    node: Failover!
}

type FailoverEvent {
    message: String!
    seq: Int!
    startTime: Long!
    status: String!
}

"Appflows failover jobs data with groupby info applied to it."
type FailoverGroupBy {
    "Paginated appflows failover jobs data."
    failoverConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort appflows failover jobs by field"
        sortBy: FailoverSortByEnum = AppBlueprintName,
        "failover jobs sort order"
        sortOrder: SortOrderEnum = Desc
    ): FailoverConnection!
    failoverGroupBy(
        "group appflows failover jobs by a field"
        groupBy: FailoverGroupByEnum!
    ): [FailoverGroupBy!]!
    "The data groupby info."
    groupByInfo: FailoverGroupByInfo!
}

type FailoverGroupByConnection {
    count: Int!
    edges: [FailoverGroupByEdge!]!
    nodes: [FailoverGroupBy!]!
    pageInfo: PageInfo!
}

type FailoverGroupByEdge {
    cursor: String!
    node: FailoverGroupBy!
}

type FailoverJobReport {
    elapsedTime: Long!
    endTime: Long!
    jobId: String!
    jobType: String!
    progress: Float!
    startTime: Long!
    status: String!
    steps: [FailoverStep!]!
}

"Failover report."
type FailoverReport {
    expireTime: DateTime!
    id: String!
    reportUrl: String
    "status of the failover report"
    status: AppflowsBlueprintFailoverReportStatusEnum!
}

"All source sites."
type FailoverSource {
    "Source of the snappable associated with this appflows failover job."
    source: String!
}

type FailoverSourceConnection {
    count: Int!
    edges: [FailoverSourceEdge!]!
    nodes: [FailoverSource!]!
    pageInfo: PageInfo!
}

type FailoverSourceEdge {
    cursor: String!
    node: FailoverSource!
}

type FailoverStatus {
    enumValue: FailoverStatusEnum!
}

type FailoverStep {
    elapsedTime: Long!
    message: String!
    progress: Float!
    seq: Int!
    startTime: Long!
    status: String!
    subSteps: [FailoverSubStep!]!
}

type FailoverSubStep {
    events: [FailoverEvent!]!
    message: String!
    seq: Int!
}

type FailoverTable {
    focus: ReportFocusEnum!
    groupBy: [FailoverGroupByEnum!]
    name: String!
    selectedColumns: [FailoverTableColumnEnum!]!
    sortBy: FailoverSortByEnum
    sortOrder: SortOrderEnum
}

"All target sites."
type FailoverTargetSite {
    "Target site of the appflows failover job."
    targetSite: String!
}

type FailoverTargetSiteConnection {
    count: Int!
    edges: [FailoverTargetSiteEdge!]!
    nodes: [FailoverTargetSite!]!
    pageInfo: PageInfo!
}

type FailoverTargetSiteEdge {
    cursor: String!
    node: FailoverTargetSite!
}

type FailoverType {
    enumValue: FailoverTypeEnum!
}

"Contains the failure details about RBA connectivity taskchains"
type Failure {
    error: String!
    snappableId: String!
}

"Feature specific details for a cloud account."
type FeatureDetail {
    "Aws regions."
    awsRegions: [AwsCloudAccountRegionEnum!]!
    "Feature enum."
    feature: CloudAccountFeatureEnum!
    "Role arn for feature."
    roleArn: String!
    "Stack arn for feature."
    stackArn: String!
    "Feature status for a cloud account."
    status: CloudAccountStatusEnum!
}

"A flag with a dynamically computed value."
type FeatureFlag {
    "Name of the flag."
    name: FeatureFlagNameEnum!
    "Computed value of this flag."
    variant: String
}

"A collection of all feature flags"
type FeatureFlagAll {
    "List of flags."
    flags: [FeatureFlag!]!
}

type FederatedLoginStatus {
    enabled: Boolean!
    inventoryCardEnabled: Boolean!
}

type FileAccessResult {
    accessType: ActivityAccessTypeEnum!
    directory: String!
    filename: String!
    nativePath: String!
    numAccesses: Int!
}

type FileResult {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    directory: String!
    errorCode: AnalyzerErrorCodeEnum!
    filename: String!
    filesWithHits: Hits
    hits: Hits!
    lastAccessTime: Long!
    lastModifiedTime: Long!
    mode: DataGovFileModeEnum!
    nativePath: String!
    numActivities: Int!
    numActivitiesBreakdown: [ActivityResult!]!
    numActivitiesDelta: Int!
    numDescendantErrorFiles: Long!
    numDescendantFiles: Int!
    numDescendantFolders: Long!
    numDescendantSkippedExtFiles: Long!
    numDescendantSkippedSizeFiles: Long!
    openAccessFiles: Hits
    openAccessFilesWithHits: Hits
    openAccessFolders: Hits
    openAccessStaleFiles: Hits
    openAccessType: OpenAccessTypeEnum!
    owner: String!
    paginationId: String!
    size: Long!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTimestamp: Long!
    staleFiles: Hits
    staleFilesWithHits: Hits
    stalenessType: StalenessTypeEnum!
    stdPath: String!
}

type FileResultConnection {
    count: Int!
    edges: [FileResultEdge!]!
    nodes: [FileResult!]!
    pageInfo: PageInfo!
}

type FileResultEdge {
    cursor: String!
    node: FileResult!
}

"""

Supported in v5.0+
"""
type FileVersion {
    """

    Supported in v5.0+
    The type of file, either a regular file or a directory.
    """
    fileMode: String
    """

    Supported in v5.0+
    """
    lastModified: String
    """

    Supported in v5.0+
    """
    size: Long
    """

    Supported in v5.0+
    The snapshot this file belongs to.
    """
    snapshotId: String
    """

    Supported in v5.0+
    The location where the file is stored, either in the cloud or locally.
    """
    source: String
}

"""

Supported in v5.0+
"""
type FilesetArraySpec {
    """

    Supported in v5.0+
    ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
    """
    proxyHostId: String
}

"""

Supported in v5.0+
"""
type FilesetDetail {
    """

    Supported in v5.0+
    """
    archiveStorage: Long
    """

    Supported in v5.0+
    """
    archivedSnapshotCount: Int
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    filesetSummary: FilesetSummary
    filesetUpdate: FilesetUpdate
    """

    Supported in v5.0+
    """
    localStorage: Long
    """

    Supported in v5.0+
    Script to run after backup of this Fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this Fileset starts.
    """
    preBackupScript: String
    """

    Supported in v5.0+
    """
    protectionDate: DateTime
    """

    Supported in v5.0+
    """
    snapshotCount: Int!
    """

    Supported in v5.0+
    """
    snapshots: [FilesetSnapshotSummary!]!
}

"""

Supported in v5.0+
"""
type FilesetDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [FilesetDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0+
"""
type FilesetOptions {
    """

    Supported in v5.0+
    Include or exclude hidden folders inside locally-mounted remote file systems from backups.
    """
    allowBackupHiddenFoldersInNetworkMounts: Boolean
    """

    Supported in v5.0+
    Include or exclude locally-mounted remote file systems from backups.
    """
    allowBackupNetworkMounts: Boolean
    """

    Supported in v5.0+
    Use VSS during Windows backups.
    """
    useWindowsVss: Boolean
}

"""

Supported in v5.0+
"""
type FilesetSnapshotDetail {
    filesetSnapshotSummary: FilesetSnapshotSummary
    """

    Supported in v5.0+
    """
    lastModified: String!
    """

    Required. Supported in v5.0+
    """
    size: Long!
    """

    Supported in v5.0+
    """
    verbose: FilesetSnapshotVerbose
}

"""

Supported in v5.0+
"""
type FilesetSnapshotSummary {
    baseSnapshotSummary: BaseSnapshotSummary
    """

    Supported in v5.0+
    """
    fileCount: Long
    """

    Supported in v5.0+
    """
    filesetName: String!
    """

    Supported in v5.1+
    """
    snapdiffUsed: Boolean
}

"""

Supported in v5.0+
"""
type FilesetSnapshotVerbose {
    """

    Supported in v5.0+
    Whether or not the fileset snapshot has fingerprint info.
    """
    hasFingerprint: Boolean!
    """

    Supported in v5.0+
    List a partition paths for the fileset snapshot.
    """
    partitionPaths: [String!]!
}

"""

Supported in v5.0+
"""
type FilesetSummary {
    """

    Supported in v5.0+
    """
    arraySpec: FilesetArraySpec
    """

    Supported in v5.0+
    v5.0: The ID of the effective SLA domain for this Fileset
    v5.1+: The ID of the effective SLA Domain for this fileset.
    """
    effectiveSlaDomainId: String
    """

    Supported in v5.0+
    v5.0: The name of the effective SLA domain for this Fileset
    v5.1+: The name of the effective SLA Domain for this fileset.
    """
    effectiveSlaDomainName: String
    """

    Supported in v5.0+
    v5.0: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    v5.1+: Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v5.1+
    A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
    """
    enableHardlinkSupport: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
    """
    enableSymlinkResolution: Boolean
    """

    Supported in v5.0+
    """
    exceptions: [String!]!
    """

    Supported in v5.0+
    """
    excludes: [String!]!
    """

    Supported in v5.2+
    ID of the failover cluster app.
    """
    failoverClusterAppId: String
    """

    Supported in v5.3+
    The name of the failover cluster app.
    """
    failoverClusterAppName: String
    filesetOptions: FilesetOptions
    """

    Supported in v5.0+
    """
    hostId: String
    """

    Supported in v5.0+
    """
    hostName: String!
    """

    Required. Supported in v5.0+
    """
    includes: [String!]!
    """

    Supported in v5.1+
    An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
    v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
    """
    isPassthrough: Boolean
    """

    Supported in v5.0+
    """
    isRelic: Boolean!
    """

    Supported in v5.0+
    """
    operatingSystemType: String
    """

    Supported in v5.2+
    v5.2: Describes any pending SLA Domain assignment to this object.
    v5.3+: Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    """

    Supported in v5.0+
    """
    shareId: String
    slaAssignable: SlaAssignable
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
    """

    Supported in v5.0+
    """
    templateId: String!
    """

    Supported in v5.0+
    """
    templateName: String!
}

type FilesetTemplate implements CdmHierarchyObject & HierarchyObject {
    allowBackupHiddenFoldersInNetworkMounts: Boolean!
    allowBackupNetworkMounts: Boolean!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    backupScriptErrorHandling: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FilesetTemplateDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    exceptions: [String!]!
    excludes: [String!]!
    "The fid of the hierarchy object."
    id: UUID!
    includes: [String!]!
    isArrayEnabled: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    osType: FilesetOSType!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FilesetTemplatePhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    postBackupScript: String!
    preBackupScript: String!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "Share type of this fileset template"
    shareType: ShareTypeEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type FilesetTemplateConnection {
    count: Int!
    edges: [FilesetTemplateEdge!]!
    nodes: [FilesetTemplate!]!
    pageInfo: PageInfo!
}

"""

Supported in v5.0+
"""
type FilesetTemplateCreate {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.0+
    """
    exceptions: [String!]!
    """

    Supported in v5.0+
    """
    excludes: [String!]!
    filesetOptions: FilesetOptions
    """

    Required. Supported in v5.0+
    """
    includes: [String!]!
    """

    Supported in v5.0+
    Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
    """
    isArrayEnabled: Boolean
    """

    Required. Supported in v5.0+
    """
    name: String!
    operatingSystemType: FilesetTemplateCreateOperatingSystemTypeEnum
    """

    Supported in v5.0+
    Script to run after backup of this fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplateCreateShareTypeEnum
}

type FilesetTemplateDescendantTypeConnection {
    count: Int!
    edges: [FilesetTemplateDescendantTypeEdge!]!
    nodes: [FilesetTemplateDescendantType!]!
    pageInfo: PageInfo!
}

type FilesetTemplateDescendantTypeEdge {
    cursor: String!
    node: FilesetTemplateDescendantType!
}

"""

Supported in v5.0+
"""
type FilesetTemplateDetail {
    filesetTemplateCreate: FilesetTemplateCreate
    """

    Supported in v5.0+
    Number of hosts where this template has been applied.
    """
    hostCount: Int
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    """
    isArchived: Boolean
    """

    Supported in v6.0
    Specifies whether this is created by a Kupr Host.
    """
    isCreatedByKupr: Boolean
    """

    Supported in v5.0+
    """
    primaryClusterId: String!
    """

    Supported in v5.0+
    Number of shares where this template has been applied.
    """
    shareCount: Int
}

"""

Supported in v5.0+
"""
type FilesetTemplateDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [FilesetTemplateDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

type FilesetTemplateEdge {
    cursor: String!
    node: FilesetTemplate!
}

type FilesetTemplatePhysicalChildTypeConnection {
    count: Int!
    edges: [FilesetTemplatePhysicalChildTypeEdge!]!
    nodes: [FilesetTemplatePhysicalChildType!]!
    pageInfo: PageInfo!
}

type FilesetTemplatePhysicalChildTypeEdge {
    cursor: String!
    node: FilesetTemplatePhysicalChildType!
}

"""

Supported in v5.0+
"""
type FilesetUpdate {
    """

    Supported in v5.0+
    v5.0-v5.1: Assign Fileset to SLA domain
    v5.2+: Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.
    """
    forceFull: Boolean
    """

    Supported in v5.2+
    Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.
    """
    forceFullPartitionIds: [Int!]!
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
}

type FilterOption {
    displayValue: String!
    value: String
}

"Process delete of aws cloud account."
type FinalizeAwsCloudAccountDeletionReply {
    "Contains success response message."
    message: String
}

"Finalize aws cloud account(s) protection."
type FinalizeAwsCloudAccountProtectionReply {
    "Contains success response message."
    awsChildAccounts: [AwsAccountResponse!]!
    "Contains success response message."
    message: String
}

"Detail of the Gcp Cloud Account Add operations."
type GcpCloudAccountAddProjectDetail {
    error: String!
    projectId: String!
    uuid: String!
}

"Gcp Cloud Account Add Projects Response."
type GcpCloudAccountAddProjectsResponse {
    details: [GcpCloudAccountAddProjectDetail!]!
}

"Details of the Gcp Cloud Account feature."
type GcpCloudAccountFeatureDetail {
    feature: CloudAccountFeatureEnum!
    status: CloudAccountStatusEnum!
}

"List of permissions missing for project addition for projects ineligible for addition."
type GcpCloudAccountMissingPermissionsForAddition {
    missingPermissions: [String!]!
    projectId: String!
}

"Gcp Cloud Account OAuth Complete Response."
type GcpCloudAccountOAuthCompleteResponse {
    userInfo: GcpOAuthUserInfo
}

"Gcp Cloud Account OAuth Initiate Response."
type GcpCloudAccountOAuthInitiateResponse {
    clientId: String!
    redirectUrl: String!
    scope: [String!]!
    sessionId: String!
    state: String!
}

"Gcp Cloud Account Project Type."
type GcpCloudAccountProject {
    id: String!
    name: String!
    projectId: String!
    projectNumber: Long!
    roleId: String!
}

"Status of the Gcp Cloud Account delete operation."
type GcpCloudAccountProjectDeleteStatus {
    error: String!
    projectUuid: String!
    success: Boolean!
}

"Details of the Gcp Cloud Account project configured for a feature."
type GcpCloudAccountProjectDetail {
    featureDetail: GcpCloudAccountFeatureDetail
    project: GcpCloudAccountProject
}

"Status of the Gcp Cloud Account upgrade operation."
type GcpCloudAccountProjectUpgradeStatus {
    error: String!
    projectUuid: String!
    success: Boolean!
}

"Gcp List Projects For OAuth Response"
type GcpListProjectsForOAuthResponse {
    missingPermissions: [String!]
    name: String!
    projectId: String!
}

"Represents the attachment details of a GCP native disk "
type GcpNativeAttachmentDetails {
    deviceName: String!
    diskID: String!
    diskName: String!
    instanceID: String!
    instanceName: String!
    instanceZone: String!
    isBootDisk: Boolean!
    isExcluded: Boolean!
    sizeInGBs: Int!
}

type GcpNativeDisk implements GcpNativeProjectDescendantType & GcpNativeProjectLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Instances to which the disk is attached"
    attachedInstances: [GcpNativeAttachmentDetails!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    diskID: String!
    diskName: String!
    diskType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "GCP Project of the Disk"
    gcpNativeProject: GcpNativeProject!
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    kmsKey: String!
    labels: [Label!]!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    projectId: String!
    region: String!
    replicaZones: [String!]!
    sizeInGBs: Int!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    zone: String!
}

type GcpNativeDiskConnection {
    count: Int!
    edges: [GcpNativeDiskEdge!]!
    nodes: [GcpNativeDisk!]!
    pageInfo: PageInfo!
}

type GcpNativeDiskEdge {
    cursor: String!
    node: GcpNativeDisk!
}

"Represents a GCP native firewall rule"
type GcpNativeFirewallRule {
    name: String!
    targetTags: [String!]!
}

type GcpNativeGCEInstance implements GcpNativeProjectDescendantType & GcpNativeProjectLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Attached disks"
    attachedDisks: [GcpNativeAttachmentDetails!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "GCP Project of the GCE Instance"
    gcpNativeProject: GcpNativeProject!
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    labels: [Label!]!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    machineType: String!
    "The name of the hierarchy object."
    name: String!
    nativeId: String!
    nativeName: String!
    networkHostProjectNativeId: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    projectId: String!
    region: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    vpcName: String!
    zone: String!
}

type GcpNativeGCEInstanceConnection {
    count: Int!
    edges: [GcpNativeGCEInstanceEdge!]!
    nodes: [GcpNativeGCEInstance!]!
    pageInfo: PageInfo!
}

type GcpNativeGCEInstanceEdge {
    cursor: String!
    node: GcpNativeGCEInstance!
}

"Represents a GCP native VPC network"
type GcpNativeNetwork {
    firewallRules: [GcpNativeFirewallRule!]!
    name: String!
    nativeProjectId: String!
    subnetworks: [GcpNativeSubnetwork!]!
}

type GcpNativeProject implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    diskCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "List of all GCE instances under this GCP project"
    gcpNativeGceInstanceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        gceInstanceFilters: GcpNativeGceInstanceFilters,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): GcpNativeGCEInstanceConnection!
    "The fid of the hierarchy object."
    id: UUID!
    lastRefreshedAt: DateTime
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): GcpNativeProjectLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    nativeId: String!
    nativeName: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    organizationName: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    projectNumber: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: GcpNativeProjectStatusEnum!
    vmCount: Int!
}

type GcpNativeProjectConnection {
    count: Int!
    edges: [GcpNativeProjectEdge!]!
    nodes: [GcpNativeProject!]!
    pageInfo: PageInfo!
}

type GcpNativeProjectEdge {
    cursor: String!
    node: GcpNativeProject!
}

type GcpNativeProjectLogicalChildTypeConnection {
    count: Int!
    edges: [GcpNativeProjectLogicalChildTypeEdge!]!
    nodes: [GcpNativeProjectLogicalChildType!]!
    pageInfo: PageInfo!
}

type GcpNativeProjectLogicalChildTypeEdge {
    cursor: String!
    node: GcpNativeProjectLogicalChildType!
}

"Represents a GCP native region"
type GcpNativeRegion {
    name: String!
    zones: [String!]!
}

"Represents a GCP native subnetwork"
type GcpNativeSubnetwork {
    name: String!
    region: String!
}

type GcpOAuthUserInfo {
    domain: String!
    emailId: String!
    firstName: String!
}

type GcpPermission {
    permission: String!
}

type GenericSnapshotConnection {
    count: Int!
    edges: [GenericSnapshotEdge!]!
    nodes: [GenericSnapshot!]!
    pageInfo: PageInfo!
}

type GenericSnapshotEdge {
    cursor: String!
    node: GenericSnapshot!
}

type GenericTimeRange {
    absoluteTimeRange: TimeRange
    relativeTimeRange: RelativeTimeRange
}

type GeoLocation {
    address: String!
    latitude: Float!
    longitude: Float!
}

type GetAppBlueprintOngoingFailoverTaskchainUuidsRsp {
    taskchains: [TaskchainInfo!]!
}

type GetAppBlueprintSnapshotCloudImagesRsp {
    snapshotCloudImages: [AppBlueprintSnapshotCloudImage!]!
}

type GetAzureHostTypeResp {
    hostType: AzureHostTypeEnum!
}

type GetAzureO365ExocomputeResp {
    cluster: AzureO365ExocomputeCluster
}

"It contains the list of all label rules visible to the user"
type GetCloudNativeLabelRulesReply {
    labelRules: [LabelRule!]!
}

"It contains the list of all tag rules visible to the user"
type GetCloudNativeTagRulesReply {
    tagRules: [CloudNativeTagRule!]!
}

type GetDashboardSummaryReply {
    analyzerResults: [AnalyzerResult!]!
    policyResults: [AnalyzerGroupResult!]!
}

"Lambda configuration details of given cluster"
type GetLambdaConfigReply {
    accountId: String!
    clusterId: String!
    defaultDiffFmdUploadPrefix: String!
    enableAutomaticFmdUpload: Boolean!
    enableFmdUploadForAllResources: Boolean!
    maxSnapshotsToUploadAutomatically: Int!
}

type GetO365ServiceStatusResp {
    lastUpdated: DateTime
    status: O365ServiceStatusEnum!
}

type GetO365StorageStatsResp {
    dailyGrowthInBytes: Long!
    estimatedThirtyDaysStorageInBytes: Long!
    liveDataSizeInBytes: Long!
    physicalDataSizeInBytes: Long!
    physicalDataSizeTimeSeries: [O365PhysicalDataSizeTimeStamp!]!
    storageEfficiencyPercent: Long!
}

"Get the health metric for the radar pipeline covering the backup, indexing, and analysis jobs"
type GetPipelineHealthReply {
    failedAnalysis: Long!
    failedBackup: Long!
    failedIndexing: Long!
    totalAnalysis: Long!
    totalBackup: Long!
    totalIndexing: Long!
}

type GetPoliciesTimelineReply {
    policyFilesHitsEntries: [TimelineEntry!]!
    policyHitsEntries: [TimelineEntry!]!
    policyOaFilesHitsEntries: [TimelineEntry!]!
    policyStaleFilesHitsEntries: [TimelineEntry!]!
    policySummaries: [ClassificationPolicySummary!]!
    totalFilesHitsEntries: [TimelineEntry!]!
    totalHitsEntries: [TimelineEntry!]!
    totalOaFilesEntries: [TimelineEntry!]!
    totalOaFilesHitsEntries: [TimelineEntry!]!
    totalOaFoldersEntries: [TimelineEntry!]!
    totalStaleFilesHitsEntries: [TimelineEntry!]!
    totalStaleOaFilesEntries: [TimelineEntry!]!
}

type GetSMTPConfigurationReply {
    defaultFromEmail: String!
    hostname: String!
    isValid: Boolean!
    port: Int!
    securityType: SMTPSecurityTypeEnum!
    trustedCerts: String!
    username: String!
}

type GetSPExplicitReply {
    applicationCallbackUrl: String!
    encryptionCertificate: String!
    signingCertificate: String!
    spEntityId: String!
}

"Get radar alert enablment for a snappable"
type GetSnappableAlertSettingReply {
    enabled: Boolean!
}

type GetSyslogConfigurationReply {
    conf: [SyslogConfig!]!
}

"Taskchain info reply"
type GetTaskchainInfoReply {
    account: String!
    endTime: DateTime
    error: String!
    jobId: Long!
    jobType: String!
    progress: Long!
    startTime: DateTime
    state: TaskchainStateEnum!
    taskchainId: String!
}

"Taskchain status reply"
type GetTaskchainStatusReply {
    taskchain: Taskchain
}

type GetUserDetailReply {
    location: String!
    name: String!
    numFilesAccessible: Int!
    risk: RiskLevelTypeEnum!
}

"Get IP whitelist configuration"
type GetWhitelistReply {
    enabled: Boolean!
    ipCidrs: [String!]!
    mode: WhitelistModeEnum!
}

"Global manager connectivity status."
type GlobalManagerConnectivity {
    "URLs pinged to check connectivity."
    urls: [GlobalManagerUrl!]!
}

"URLs pinged to check connectivity."
type GlobalManagerUrl {
    "Whether or not the URL check has passed."
    isReachable: Boolean!
    "URL pinged to check connectivity."
    url: String!
}

"Metadata for rendering a global sla."
type GlobalSla implements SlaDomain {
    archivalSpec: ArchivalSpec
    archivalSpecList: [ArchivalSpec!]!
    backupWindows: [BackupWindow!]!
    baseFrequency: SlaDuration
    clusterToSyncStatusMap: [PolarisSLASyncStatus!]!
    clusterUUID: String!
    description: String!
    firstFullBackupWindows: [BackupWindow!]!
    id: String!
    isArchived: Boolean!
    isDefault: Boolean!
    localRetentionLimit: SlaDuration
    logConfig: LogConfigResult
    name: String!
    objectSpecificConfigs: ObjectSpecificConfigs
    objectTypeList: [SLAObjectTypeEnum!]!
    protectedObjectCount: Int!
    replicationSpec: ReplicationSpec
    replicationSpecV2: [ReplicationSpecV2!]!
    snapshotSchedule: SnapshotSchedule
    snapshotScheduleLastUpdatedAt: DateTime
    stateVersion: Long!
    uiColor: String!
    version: String
}

"Metadata for rendering a sla for filter."
type GlobalSlaForFilter {
    id: String!
    name: String!
}

type GlobalSlaForFilterConnection {
    count: Int!
    edges: [GlobalSlaForFilterEdge!]!
    nodes: [GlobalSlaForFilter!]!
    pageInfo: PageInfo!
}

type GlobalSlaForFilterEdge {
    cursor: String!
    node: GlobalSlaForFilter!
}

type Group {
    groupId: String!
    roles: [Role!]!
    users: [User!]!
}

type GroupCount {
    count: Int!
    group: String!
}

type GroupCountListWithTotal {
    groupList: [GroupCount!]!
    totalCount: Int!
}

type GrowthResponse {
    growthList: [GrowthResponseSnapshot!]!
}

type GrowthResponseSnapshot {
    awsPrice: Float!
    azurePrice: Float!
    cumArchiveStorage: Float!
    date: Long!
    storageInGb: Float!
}

"""

Supported in v5.2+
"""
type HdfsBaseConfig {
    """

    Supported in v5.2+
    API token to access Hdfs.
    """
    apiToken: String
    """

    Required. Supported in v5.2+
    List of Hdfs Namenode Hosts.
    """
    hosts: [HdfsHost!]!
    """

    Supported in v5.2+
    Ticket Cache Path of Kerberos Ticket.
    """
    kerberosTicket: String
    """

    Supported in v5.2+
    Logical name for nameservice for Hdfs HA.
    """
    nameservices: String
    """

    Supported in v5.2+
    Username to access Hdfs API.
    """
    username: String
}

"""

Supported in v5.2+
"""
type HdfsHost {
    """

    Required. Supported in v5.2+
    Hostname or Ip of Namenode.
    """
    hostname: String!
    """

    Required. Supported in v5.2+
    Port number of Namenode.
    """
    port: Int!
}

type HierarchyObjectConnection {
    count: Int!
    edges: [HierarchyObjectEdge!]!
    nodes: [HierarchyObject!]!
    pageInfo: PageInfo!
}

type HierarchyObjectEdge {
    cursor: String!
    node: HierarchyObject!
}

type HierarchySnappableConnection {
    count: Int!
    edges: [HierarchySnappableEdge!]!
    nodes: [HierarchySnappable!]!
    pageInfo: PageInfo!
}

type HierarchySnappableEdge {
    cursor: String!
    node: HierarchySnappable!
}

type HierarchySnappableFileVersion {
    fileMode: FileModeEnum!
    lastModified: DateTime!
    size: Long!
    snapshot: CdmSnapshot
    snapshotId: String!
    source: FileVersionSourceEnum!
}

type Hits {
    permittedHits: Int!
    permittedHitsDelta: Int!
    totalHits: Int!
    totalHitsDelta: Int!
    violations: Int!
    violationsDelta: Int!
}

"The connection status of a host"
type HostConnectionStatus {
    connectivity: HostConnectivityStatusEnum!
    timestampMillis: DateTime
}

"""

Supported in v5.0+
"""
type HostConnectivitySummary {
    """

    Required. Supported in v5.0+
    """
    action: String!
    """

    Required. Supported in v5.0+
    """
    status: String!
}

"""

Supported in v5.0+
"""
type HostDetail {
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: ID of the Rubrik Backup Service (RBS) installed on the host.
    """
    agentId: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.
    """
    compressionEnabled: Boolean
    hostSummary: HostSummary
    hostVfdDriverState: HostVfdStateEnum
    hostVfdEnabled: HostVfdInstallConfigEnum
    """

    Supported in v5.2+
    v5.2: Specifies whether the host is an Oracle host. When the host is an Oracle host, the UI displays the Oracle discovery fields.
    v5.3: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
    v6.0: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
    """
    isOracleHost: Boolean
    """

    Supported in v5.0+
    A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).
    """
    isRelic: Boolean!
    """

    Supported in v5.0+
    v5.0-v5.2: Boolean value that indicates whether the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
    v5.3: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
    v6.0: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.
    """
    mssqlCbtDriverInstalled: Boolean!
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with sysdba privileges.
    """
    oracleSysDbaUser: String
}

"""

Supported in v5.0+
"""
type HostDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [HostDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0+
"""
type HostDiagnosisSummary {
    """

    Supported in v5.0+
    """
    connectivity: [HostConnectivitySummary!]!
}

type HostFailoverCluster implements CdmHierarchyObject & FailoverClusterTopLevelDescendantType & HierarchyObject {
    "The list of Hosts making up this Host Failover Cluster."
    allNodes: [PhysicalHost!]!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostFailoverClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The OS Type of this Host Failover Cluster"
    nodesOsType: GuestOsTypeEnum
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostFailoverClusterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: FailoverClusterStatusObject
}

type HostFailoverClusterConnection {
    count: Int!
    edges: [HostFailoverClusterEdge!]!
    nodes: [HostFailoverCluster!]!
    pageInfo: PageInfo!
}

type HostFailoverClusterDescendantTypeConnection {
    count: Int!
    edges: [HostFailoverClusterDescendantTypeEdge!]!
    nodes: [HostFailoverClusterDescendantType!]!
    pageInfo: PageInfo!
}

type HostFailoverClusterDescendantTypeEdge {
    cursor: String!
    node: HostFailoverClusterDescendantType!
}

type HostFailoverClusterEdge {
    cursor: String!
    node: HostFailoverCluster!
}

type HostFailoverClusterPhysicalChildTypeConnection {
    count: Int!
    edges: [HostFailoverClusterPhysicalChildTypeEdge!]!
    nodes: [HostFailoverClusterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type HostFailoverClusterPhysicalChildTypeEdge {
    cursor: String!
    node: HostFailoverClusterPhysicalChildType!
}

type HostShare implements CdmHierarchyObject & HierarchyObject & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostShareDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostSharePhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HostShareConnection {
    count: Int!
    edges: [HostShareEdge!]!
    nodes: [HostShare!]!
    pageInfo: PageInfo!
}

type HostShareDescendantTypeConnection {
    count: Int!
    edges: [HostShareDescendantTypeEdge!]!
    nodes: [HostShareDescendantType!]!
    pageInfo: PageInfo!
}

type HostShareDescendantTypeEdge {
    cursor: String!
    node: HostShareDescendantType!
}

type HostShareEdge {
    cursor: String!
    node: HostShare!
}

type HostSharePhysicalChildTypeConnection {
    count: Int!
    edges: [HostSharePhysicalChildTypeEdge!]!
    nodes: [HostSharePhysicalChildType!]!
    pageInfo: PageInfo!
}

type HostSharePhysicalChildTypeEdge {
    cursor: String!
    node: HostSharePhysicalChildType!
}

"""

Supported in v5.0+
"""
type HostSummary {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    """

    Supported in v5.2+
    """
    hdfsBaseConfig: HdfsBaseConfig
    """

    Required. Supported in v5.0+
    Deprecated. Please use 'name' instead.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Unique identifier for host.
    """
    id: String!
    mssqlCbtEffectiveStatus: MssqlCbtEffectiveStatusTypeEnum
    mssqlCbtEnabled: MssqlCbtStatusTypeEnum
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: IP address or hostname of the host.
    """
    name: String
    """

    Supported in v5.0+
    """
    nasBaseConfig: NasBaseConfig
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.
    """
    operatingSystem: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.
    """
    operatingSystemType: String
    """

    Supported in v5.0+
    The ID of the organization to which the host is assigned (set by envoy).
    """
    organizationId: String
    """

    Supported in v5.0+
    The name of the organization to which the host is assigned (set by envoy).
    """
    organizationName: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: ID of the Rubrik cluster to which the host belongs.
    """
    primaryClusterId: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.
    """
    status: String
}

type HourlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
}

type HyperVCluster implements CdmHierarchyObject & HierarchyObject & HyperVSCVMMDescendantType & HyperVSCVMMLogicalChildType & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVClusterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HyperVClusterDescendantTypeConnection {
    count: Int!
    edges: [HyperVClusterDescendantTypeEdge!]!
    nodes: [HyperVClusterDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVClusterDescendantTypeEdge {
    cursor: String!
    node: HyperVClusterDescendantType!
}

type HyperVClusterLogicalChildTypeConnection {
    count: Int!
    edges: [HyperVClusterLogicalChildTypeEdge!]!
    nodes: [HyperVClusterLogicalChildType!]!
    pageInfo: PageInfo!
}

type HyperVClusterLogicalChildTypeEdge {
    cursor: String!
    node: HyperVClusterLogicalChildType!
}

type HyperVSCVMM implements CdmHierarchyObject & HierarchyObject & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVSCVMMDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVSCVMMLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HyperVSCVMMDescendantTypeConnection {
    count: Int!
    edges: [HyperVSCVMMDescendantTypeEdge!]!
    nodes: [HyperVSCVMMDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVSCVMMDescendantTypeEdge {
    cursor: String!
    node: HyperVSCVMMDescendantType!
}

type HyperVSCVMMLogicalChildTypeConnection {
    count: Int!
    edges: [HyperVSCVMMLogicalChildTypeEdge!]!
    nodes: [HyperVSCVMMLogicalChildType!]!
    pageInfo: PageInfo!
}

type HyperVSCVMMLogicalChildTypeEdge {
    cursor: String!
    node: HyperVSCVMMLogicalChildType!
}

type HyperVServer implements CdmHierarchyObject & HierarchyObject & HyperVClusterDescendantType & HyperVClusterLogicalChildType & HyperVSCVMMDescendantType & HyperVSCVMMLogicalChildType & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVServerDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVServerLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HyperVServerDescendantTypeConnection {
    count: Int!
    edges: [HyperVServerDescendantTypeEdge!]!
    nodes: [HyperVServerDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVServerDescendantTypeEdge {
    cursor: String!
    node: HyperVServerDescendantType!
}

type HyperVServerLogicalChildTypeConnection {
    count: Int!
    edges: [HyperVServerLogicalChildTypeEdge!]!
    nodes: [HyperVServerLogicalChildType!]!
    pageInfo: PageInfo!
}

type HyperVServerLogicalChildTypeEdge {
    cursor: String!
    node: HyperVServerLogicalChildType!
}

type HyperVTopLevelDescendantTypeConnection {
    count: Int!
    edges: [HyperVTopLevelDescendantTypeEdge!]!
    nodes: [HyperVTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVTopLevelDescendantTypeEdge {
    cursor: String!
    node: HyperVTopLevelDescendantType!
}

type HyperVVirtualMachine implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HyperVClusterDescendantType & HyperVSCVMMDescendantType & HyperVServerDescendantType & HyperVServerLogicalChildType & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type HyperVVirtualMachineConnection {
    count: Int!
    edges: [HyperVVirtualMachineEdge!]!
    nodes: [HyperVVirtualMachine!]!
    pageInfo: PageInfo!
}

type HyperVVirtualMachineEdge {
    cursor: String!
    node: HyperVVirtualMachine!
}

type IdentityProvider {
    entityId: String!
    expirationDate: DateTime
    name: String!
    signInUrl: String!
    signOutUrl: String!
    spInitiatedSignInUrl: String!
    spInitiatedTestUrl: String!
}

type InfrastructureChart {
    focus: ReportFocusEnum!
    groupBy: [ClusterGroupByEnum!]
    name: String!
}

type InfrastructureTable {
    focus: ReportFocusEnum!
    groupBy: [ClusterGroupByEnum!]
    name: String!
    selectedColumns: [InfrastructureTableColumnEnum!]!
    sortBy: ClusterSortByEnum
    sortOrder: SortOrderEnum
}

"Aws Cloud Account Update Feature Initiate Response."
type InitiateFeatureUpdateForAwsCloudAccountReply {
    cloudFormationUrl: String!
    templateUrl: String!
}

type InstalledVersionGroupCount {
    count: Int!
    group: String!
    isUpgradeRecommended: Boolean!
}

"Interface CIDR Info."
type InterfaceCidr {
    cidr: String!
    interfaceType: InterfaceTypeEnum!
    selected: Boolean!
}

type InternalBulkUpdateHostResponse {
    items: [HostDetail!]!
}

type InventoryRoot {
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
}

type InventorySubHierarchyRoot {
    "List of children"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)"
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
}

"Link to download investigation results as CSV."
type InvestigationCsvDownloadLinkReply {
    "Link for the CSV file which can be downloaded."
    downloadLink: String!
}

"It checks if the rule name is unique or not"
type IsCloudNativeTagRuleNameUniqueReply {
    isUnique: Boolean!
}

"A boolean specifying whether the volume snapshot is restorable"
type IsVolumeSnapshotRestorableReply {
    isRestorable: Boolean!
}

type Issue {
    events: [IssueEvent!]!
    fileResult: FileResult!
    id: String!
    latestPolicyObj: PolicyObj!
    openTime: Long!
    paginationId: String!
    policies: [ClassificationPolicySummary!]!
    resolvedTime: Long!
    violations: Int!
}

type IssueConnection {
    count: Int!
    edges: [IssueEdge!]!
    nodes: [Issue!]!
    pageInfo: PageInfo!
}

type IssueEdge {
    cursor: String!
    node: Issue!
}

type IssueEvent {
    snapshotFid: String!
    timestamp: Long!
    type: IssueEventTypeEnum!
    violations: Int!
    violationsDelta: Int!
}

type JobMetadata {
    createdAt: DateTime
    currentInstance: Int!
    id: Long!
    info: String!
    jobType: String!
    lastFailure: DateTime
    lastOwner: String!
    lastSkipped: DateTime
    lastSuccess: DateTime
    logLevel: LogLevelEnum!
    numScheduledRuns: Int!
    numSuccessfulRuns: Int!
    owner: String!
    progress: String!
    progressedAt: DateTime
    retryAttempts: Int!
    startTime: DateTime
    startedAt: DateTime
    state: String!
    updatedAt: DateTime
}

type JobReply {
    clusterName: String!
    clusterUuid: String!
    customerAccount: String!
    metadata: JobMetadata
    version: String!
}

type JobsReply {
    jobs: [JobReply!]!
}

type K8sCluster implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "Information about the Kubernetes cluster."
    clusterInfo: K8sClusterInfo!
    "List of IPs for the Kubernetes cluster."
    clusterIp: [String!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): K8sClusterDescendantConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Namespaces belonging to the Kubernetes cluster."
    k8sDescendantNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): K8sNamespaceConnection!
    lastRefreshTime: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Range of ports that are allowed to be accessed."
    rbsPortRanges: [K8sRbsInfo!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: K8sClusterStatus!
}

type K8sClusterConnection {
    count: Int!
    edges: [K8sClusterEdge!]!
    nodes: [K8sCluster!]!
    pageInfo: PageInfo!
}

type K8sClusterDescendantConnection {
    count: Int!
    edges: [K8sClusterDescendantEdge!]!
    nodes: [K8sClusterDescendant!]!
    pageInfo: PageInfo!
}

type K8sClusterDescendantEdge {
    cursor: String!
    node: K8sClusterDescendant!
}

type K8sClusterEdge {
    cursor: String!
    node: K8sCluster!
}

type K8sClusterInfo {
    associatedCdm: Cluster
    k8sVersion: String
    kuprClusterUUID: UUID!
    port: Int!
    type: K8sClusterDBType!
}

type K8sNamespace implements HierarchyObject & HierarchySnappable & K8sClusterDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    apiVersion: String!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    clusterScoped: Boolean!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    k8sClusterID: String!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    namespaceName: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    resouceVersion: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

type K8sNamespaceConnection {
    count: Int!
    edges: [K8sNamespaceEdge!]!
    nodes: [K8sNamespace!]!
    pageInfo: PageInfo!
}

type K8sNamespaceEdge {
    cursor: String!
    node: K8sNamespace!
}

type K8sRbsInfo {
    kuprClusterUUID: UUID!
    maxPort: Int!
    minPort: Int!
}

"Represents a fully qualified GCP native KMS Crypto Key"
type KMSCryptoKey {
    key: String!
    keyRing: String!
    location: String!
    projectNativeId: String!
}

"A KMS key in AWS realm."
type KMSEncryptionKeyType {
    aliases: [String!]!
    arn: String!
    "ID of KMS key."
    id: String!
}

type KMSKey {
    arn: String!
    id: String!
    name: String!
}

type LDAPConfig {
    clusterId: String!
    domain: String!
    id: Long!
    ldapName: String!
    password: String!
    userName: String!
}

type Label {
    key: String!
    value: String!
}

"A single Label Rule"
type LabelRule {
    Label: CloudNativeLabel
    cloudNativeAccounts: [CloudNativeAccountIdWithName!]!
    effectiveSla: TagRuleEffectiveSla
    hasPermissionToModify: Boolean!
    id: String!
    name: String!
    objectType: ManagedObjectType!
}

"History of Radar and Sonar features."
type LambdaFeatureHistory {
    "True is Radar was ever enabled."
    wasRadarEverEnabled: Boolean!
    "True is Sonar was ever enabled."
    wasSonarEverEnabled: Boolean!
}

type LambdaSettings {
    anomalyThreshold: Float
    isAnomalyAlertEnabled: Boolean
    ransomwareThreshold: Float
}

type LastTestStatus {
    enumValue: LastTestStatusEnum!
}

"Ldap Integration Information"
type LdapIntegration {
    baseDn: String!
    bindUserName: String!
    dynamicDnsName: String!
    groupMemberAttr: String
    groupMembershipAttr: String
    groupSearchFilter: String
    id: String!
    ldapServers: [LdapServer!]!
    name: String!
    trustedCerts: String
    userNameAttr: String
    userSearchFilter: String
}

type LdapIntegrationConnection {
    count: Int!
    edges: [LdapIntegrationEdge!]!
    nodes: [LdapIntegration!]!
    pageInfo: PageInfo!
}

type LdapIntegrationEdge {
    cursor: String!
    node: LdapIntegration!
}

"Ldap Server Information"
type LdapServer {
    hostname: String!
    port: Int!
    useTls: Boolean!
}

"""

Supported in v5.0+
"""
type Link {
    """

    Required. Supported in v5.0+
    v5.0: The link's destination.
    v5.1+: The destination of the link.
    """
    href: String!
    """

    Required. Supported in v5.0+
    v5.0: The relation of this link's destination to the current resource.
    v5.1+: The relation of the destination of this link to the current resource.
    """
    rel: String!
}

type LinuxFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FailoverClusterAppDescendantType & FailoverClusterAppPhysicalChildType & FailoverClusterTopLevelDescendantType & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    failoverClusterApp: FailoverClusterApp
    hardlinkSupportEnabled: Boolean!
    host: PhysicalHost
    "The fid of the hierarchy object."
    id: UUID!
    isPassThrough: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    pathExceptions: [String!]!
    pathExcluded: [String!]!
    pathIncluded: [String!]!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    symlinkResolutionEnabled: Boolean!
}

"List CIDRs for Compute Setting."
type ListCidrsForComputeSetting {
    clusterInterfaceCidrs: [ClusterInfCidrs!]!
}

"List of locations where customer's GCP disks are present"
type ListStoredDiskLocationsReply {
    regions: [String!]!
    zones: [String!]!
}

type LogConfigResult {
    slaLogFrequencyConfig: SlaLogFrequencyConfigResult
}

"""

Supported in v5.2+
"""
type ManagedObjectPendingSlaInfo {
    """

    Supported in v5.2+
    """
    isPendingSlaDomainRetentionLocked: Boolean
    """

    Supported in v5.2+
    Managed ID of the object.
    """
    objectId: String!
    """

    Supported in v5.2+
    """
    pendingSlaDomainId: String!
    """

    Supported in v5.2+
    """
    pendingSlaDomainName: String!
}

type ManagedVolume implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type ManagedVolumeConnection {
    count: Int!
    edges: [ManagedVolumeEdge!]!
    nodes: [ManagedVolume!]!
    pageInfo: PageInfo!
}

type ManagedVolumeEdge {
    cursor: String!
    node: ManagedVolume!
}

type Metadata {
    key: String!
    value: Value
}

type MinuteSnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
}

"The missed snapshot object associated with the vm"
type MissedSnapshotCommon {
    archivalLocationType: [String!]!
    date: DateTime!
}

type MissedSnapshotCommonConnection {
    count: Int!
    edges: [MissedSnapshotCommonEdge!]!
    nodes: [MissedSnapshotCommon!]!
    pageInfo: PageInfo!
}

type MissedSnapshotCommonEdge {
    cursor: String!
    node: MissedSnapshotCommon!
}

"Missed Snapshot data with groupby info applied to it."
type MissedSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: MissedSnapshotGroupByInfo!
    "Paginated missed snapshot data."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "sort snapshots by field"
        sortBy: MissedSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): MissedSnapshotCommonConnection!
    "Further provide groupings for the data."
    missedSnapshotGroupBy(
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!
    ): [MissedSnapshotGroupBy!]!
}

type MissedSnapshotGroupByConnection {
    count: Int!
    edges: [MissedSnapshotGroupByEdge!]!
    nodes: [MissedSnapshotGroupBy!]!
    pageInfo: PageInfo!
}

type MissedSnapshotGroupByEdge {
    cursor: String!
    node: MissedSnapshotGroupBy!
}

type MonthlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfMonth: DayOfMonthEnum!
}

type MssqlAvailabilityGroup implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlAvailabilityGroupDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlAvailabilityGroupLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type MssqlAvailabilityGroupDescendantTypeConnection {
    count: Int!
    edges: [MssqlAvailabilityGroupDescendantTypeEdge!]!
    nodes: [MssqlAvailabilityGroupDescendantType!]!
    pageInfo: PageInfo!
}

type MssqlAvailabilityGroupDescendantTypeEdge {
    cursor: String!
    node: MssqlAvailabilityGroupDescendantType!
}

type MssqlAvailabilityGroupLogicalChildTypeConnection {
    count: Int!
    edges: [MssqlAvailabilityGroupLogicalChildTypeEdge!]!
    nodes: [MssqlAvailabilityGroupLogicalChildType!]!
    pageInfo: PageInfo!
}

type MssqlAvailabilityGroupLogicalChildTypeEdge {
    cursor: String!
    node: MssqlAvailabilityGroupLogicalChildType!
}

type MssqlDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & MssqlAvailabilityGroupDescendantType & MssqlAvailabilityGroupLogicalChildType & MssqlInstanceDescendantType & MssqlInstanceLogicalChildType & MssqlTopLevelDescendantType & PhysicalHostDescendantType & WindowsClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type MssqlDatabaseConnection {
    count: Int!
    edges: [MssqlDatabaseEdge!]!
    nodes: [MssqlDatabase!]!
    pageInfo: PageInfo!
}

type MssqlDatabaseEdge {
    cursor: String!
    node: MssqlDatabase!
}

type MssqlInstance implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType & WindowsClusterDescendantType & WindowsClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlInstanceDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlInstanceLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type MssqlInstanceDescendantTypeConnection {
    count: Int!
    edges: [MssqlInstanceDescendantTypeEdge!]!
    nodes: [MssqlInstanceDescendantType!]!
    pageInfo: PageInfo!
}

type MssqlInstanceDescendantTypeEdge {
    cursor: String!
    node: MssqlInstanceDescendantType!
}

type MssqlInstanceLogicalChildTypeConnection {
    count: Int!
    edges: [MssqlInstanceLogicalChildTypeEdge!]!
    nodes: [MssqlInstanceLogicalChildType!]!
    pageInfo: PageInfo!
}

type MssqlInstanceLogicalChildTypeEdge {
    cursor: String!
    node: MssqlInstanceLogicalChildType!
}

type MssqlTopLevelDescendantTypeConnection {
    count: Int!
    edges: [MssqlTopLevelDescendantTypeEdge!]!
    nodes: [MssqlTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type MssqlTopLevelDescendantTypeEdge {
    cursor: String!
    node: MssqlTopLevelDescendantType!
}

type Mutation {
    "Acknowledges and resets cluster status"
    ackAndResetStatus(
        "Cluster state to be acknowledged and reset"
        AckClusterStatus: AckClusterStatus!,
        "Cluster uuid"
        clusterUuid: UUID!
    ): Boolean!
    activateUser(ids: [String!]!): [String!]!
    "Add Certificate"
    addCertificate(
        "Certificate"
        certificate: String!,
        "CSR id"
        csrId: Long,
        "Certificate description"
        description: String,
        "Certificate name"
        name: String!,
        "Certificate private key"
        privateKey: String
    ): Long!
    "Add ldap config"
    addLdapConfig(adDomain: String!, clusterUuid: String!, ldapName: String!, password: String!, userName: String!): UpdateLdapConfigReply!
    addO365Org(exocomputeClusterId: String!, o365AppTypes: [String!]!, stateToken: String!, tenantId: String!): AddO365OrgResponse!
    "Add policies to objects."
    addPolicyObjects(objectIds: [String!]!, policyIds: [String!]!): String!
    addRoleAssignments(adGroupIds: [String!], roleIds: [String!]!, userIds: [String!]): Boolean!
    addSapHanaSystem(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Add a SAP HANA system to the Rubrik cluster. Contains parameters like username, list of hosts, password required while adding a SAP HANA system."
        sapHanaSystem: SapHanaSystemConfigInput!
    ): SapHanaAddSystemResponse!
    addSyslogConfiguration(
        "Host name for your SMTP configuration"
        hostName: String!,
        "Network type to use"
        networkProtocolType: NetworkProtocolTypeEnum!,
        "Port number for your SMTP configuration"
        port: Int!,
        "Syslog facility to filter for syslog"
        syslogFacility: SyslogFacilityTypeEnum!,
        "Syslog severity to filter for syslog"
        syslogSeverity: SyslogSeverityTypeEnum!,
        "Trusted certificate to use for your SMTP configuration"
        trustedCerts: String!,
        "Use TLS or not"
        useTLS: Boolean!
    ): Boolean!
    "Add Vm App consistent specs info"
    addVmAppConsistentSpecs(
        "Whether to cancel backup if pre snapshot script failed to execute on VM"
        cancelBackupIfPreScriptFails: Boolean!,
        "Object type for enabling app consistent protection"
        objectType: CloudNativeVmAppConsistentObjectType!,
        "Path of post snapshot script in VM"
        postSnapshotScriptPath: String,
        "Timeout (in seconds) for post snapshot script to run in VM"
        postSnapshotScriptTimeoutInSeconds: Int,
        "Path of pre snapshot script in VM"
        preSnapshotScriptPath: String,
        "Timeout (in seconds) for pre snapshot script to run in VM"
        preSnapshotScriptTimeoutInSeconds: Int,
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): AddVmAppConsistentSpecsReply!
    "Archive a crawl"
    archiveCrawl(crawlId: String!): String!
    assignRetentionSLAToSnappables(
        "Provide optional snappable type under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. This allows an SLA to be set for one/more specific snappable types under the object, instead of applying the SLA for all the snappable types. For example, an AWS account object can potentially have 2 different snappable types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA only gets applied to snappables of the selected type under that account. If the SLA must be applicable for all the snappable types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA to a snappable or to an object that does not support multiple snappable types."
        applicableSnappableType: SnappableLevelHierarchyTypeEnum,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!
    ): SlaAssignResult!
    assignRetentionSLAToSnapshots(
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "List of UUIDs of objects"
        snapshotFids: [UUID!]!
    ): SlaAssignResult!
    assignSla(
        "Provide optional snappable type under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. This allows an SLA to be set for one/more specific snappable types under the object, instead of applying the SLA for all the snappable types. For example, an AWS account object can potentially have 2 different snappable types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA only gets applied to snappables of the selected type under that account. If the SLA must be applicable for all the snappable types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA to a snappable or to an object that does not support multiple snappable types."
        applicableSnappableType: SnappableLevelHierarchyTypeEnum,
        "Choose what to do with existing snapshot in case of do not protect slas'"
        existingSnapshotRetention: ExistingSnapshotRetentionEnum,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        "Boolean value to indicate whether to apply changes made to the SLA to existing snapshots. If not specified, this defaults to true."
        shouldApplyToExistingSnapshots: Boolean
    ): SlaAssignResult!
    assignSlasForSnappableHierarchies(
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
        "Choose what to do with existing snapshot in case of do not protect slas'"
        existingSnapshotRetention: ExistingSnapshotRetentionEnum,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        "Boolean value to indicate whether to apply changes made to the SLA to existing snapshots. If not specified, this defaults to true."
        shouldApplyToExistingSnapshots: Boolean
    ): [SlaAssignResult!]!
    "This endpoint is deprecated."
    awsCloudAccountInitiate(
        "Arguments for initiate aws cloud accounts for creation."
        awsCloudAccountInitiateArg: AwsCloudAccountInitiateInput!
    ): AwsCloudAccountInitiate! @deprecated(reason : "Please use validateAndCreateAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsCloudAccountUpdateFeature(
        "The id of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!
    ): AwsCloudAccountUpdateFeatureResponse! @deprecated(reason : "Please use initiateFeatureUpdateForAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsCloudAccountValidate(
        "Arguments for validate aws cloud accounts."
        awsCloudAccountValidateArg: AwsCloudAccountValidateInput!
    ): AwsCloudAccountValidateResponse! @deprecated(reason : "Please use validateAndCreateAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsNativeProtectionAccountAdd(
        "Arguments to add account for native protection."
        awsNativeProtectionAccountAddArg: AwsNativeProtectionAccountAddRequest!
    ): AwsNativeProtectionAccountAddResponse! @deprecated(reason : "Please use validateAndCreateAwsCloudAccount and finalizeAwsCloudAccountProtection instead.")
    "Add the Azure Subscriptions cloud account for given feature."
    azureCloudAccountAdd(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "List of Azure Regions."
        regions: [AzureCloudAccountRegionEnum!]!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of subscriptions to be added."
        subscriptions: [AzureSubscriptionInput!]!,
        "Domain Name of the Azure tenant."
        tenantDomainName: String!
    ): AzureCloudAccountAddResponse!
    "Add the Azure Subscription cloud account for given feature without OAuth."
    azureCloudAccountAddWithoutOAuth(
        "Azure cloud type."
        azureCloudType: AzureCloudTypeEnum!,
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Azure role policy version."
        policyVersion: Int!,
        "List of Azure Regions."
        regions: [AzureCloudAccountRegionEnum!]!,
        "List of subscriptions to be added."
        subscriptions: [AzureSubscriptionInput!]!,
        "Domain Name of the Azure tenant."
        tenantDomainName: String!
    ): AzureCloudAccountAddWithoutOAuthResponse!
    "Delete the Azure Subscriptions cloud account for given feature."
    azureCloudAccountDelete(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of subscription Ids."
        subscriptionIds: [UUID!]!
    ): AzureCloudAccountDeleteResponse!
    "Delete the Azure Subscriptions cloud account for given feature without OAuth."
    azureCloudAccountDeleteWithoutOAuth(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "List of subscription Ids."
        subscriptionIds: [UUID!]!
    ): AzureCloudAccountDeleteWithoutOAuthResponse!
    "Complete the Azure OAuth flow and pass the authorization code."
    azureCloudAccountOAuthComplete(
        "Client ID of the Application. Can be empty if using rubrik app or the custom app is already configured for the tenant."
        appId: String,
        "Client secret key of the Application. Can be empty if using rubrik app or the custom app is already configured for the tenant."
        appSecretKey: String,
        "Authorization code received after the oauth consent flow."
        authorizationCode: String!,
        "Azure cloud type."
        azureCloudType: AzureCloudTypeEnum,
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Redirect URL used in the oauth flow."
        redirectUrl: String!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "Whether to skip permission checks of Azure subscriptions required for addition"
        skipPermissionChecks: Boolean!,
        "Domain Name of the Azure tenant."
        tenantDomainName: String!
    ): AzureCloudAccountOAuthCompleteResponse!
    "Initiate a session before doing Azure OAuth flow. Returns clientId of default app if tenant domain name is not specified. Returns clientId of the custom app configured for the tenant, if the custom app is not configured returns the clientId of default app."
    azureCloudAccountOAuthInitiate(
        "Azure cloud type."
        azureCloudType: AzureCloudTypeEnum,
        "Domain Name of the Azure tenant."
        tenantDomainName: String
    ): AzureCloudAccountOAuthInitiateResponse!
    "Update names of the Azure Subscriptions cloud account and regionsfor given feature."
    azureCloudAccountUpdate(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Regions to be added for the features."
        regionsToAdd: [AzureCloudAccountRegionEnum!],
        "Regions to be removed for the features."
        regionsToRemove: [AzureCloudAccountRegionEnum!],
        "Subscriptions to update (id and updated name)"
        subscriptions: [AzureCloudAccountSubscriptionInput!]!
    ): AzureCloudAccountUpdateResponse!
    "Update permissions of the Azure Subscriptions cloud account for given feature."
    azureCloudAccountUpgrade(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of subscription Ids."
        subscriptionIds: [UUID!]!
    ): AzureCloudAccountUpgradeResponse!
    "Create Azure Exocompute Configs"
    azureExocomputeAdd(
        "List of exocompute configs to add."
        azureExocomputeAddRequests: [AzureExocomputeAddConfigInputType!]!,
        "The id of the cloud account"
        cloudAccountUuid: UUID!
    ): AzureExocomputeConfigsCreateResponse!
    "Deletes Azure Exocompute configs."
    azureExocomputeConfigsDelete(
        "List of Azure exocompute config UUIDs."
        azureExocomputeConfigIdsArg: [UUID!]!
    ): AzureExocomputeConfigsDeleteResponse!
    azureOAuthConsentComplete(azureAppID: String, azureAppSecret: String, azureCloudType: O365AzureCloudTypeEnum!, code: String!, redirectUrl: String!, stateToken: String!, tenantId: String!): RequestStatus!
    azureOAuthConsentKickoff: AzureOAuthConsentKickoffResp!
    "Set credentials of the customer application for the received tenant domain name. If the tenant domain name is empty, set it for all the tenants of the customer."
    azureSetCustomerAppCredentials(
        "Client ID of the Application."
        appId: String!,
        "Name of the application."
        appName: String,
        "Client secret key of the Application."
        appSecretKey: String!,
        "ID of the home tenant of the application."
        appTenantId: String,
        "Azure cloud type."
        azureCloudType: AzureCloudTypeEnum!,
        "Domain Name of the Azure tenant."
        tenantDomainName: String
    ): Boolean!
    backupO365Mailbox(mailboxId: UUID!): CreateOnDemandJobReply!
    backupO365Onedrive(onedriveUUID: UUID!): CreateOnDemandJobReply!
    backupO365SharepointDrive(sharepointDriveUUID: UUID!): CreateOnDemandJobReply!
    backupO365Team(teamUUID: UUID!): CreateOnDemandJobReply!
    batchDeassignRoleFromUserGroups(userGroupToRoles: [UserGroupToRolesInput!]!): Boolean!
    blueprintFailoverReportGenerate(failoverReportGeneratorJobConfig: BlueprintFailoverReportGeneratorJobInfo!): CreateOnDemandJobReply!
    bulkCreateFilesetTemplates(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Provide an array containing a separate object for each fileset template definition."
        definitions: [FilesetTemplateCreateInput!]!
    ): FilesetTemplateDetailListResponse!
    bulkCreateFilesets(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "For each fileset, specify a template id along with either host id or share id. If a share id is provided, the host id will be inferred from the host share."
        definitions: [FilesetCreateInput!]!
    ): FilesetDetailListResponse!
    bulkDeleteFilesetTemplates(
        "Provide an array with the ID of each fileset template to remove."
        ids: [String!]!,
        "Flag to indicate whether to convert snapshots of filesets of the deleted templates to relics or to delete them. Applies to all templates being deleted. Default is true."
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    bulkDeleteFilesets(
        "Provide a comma-separated list of fileset IDs."
        ids: [String!]!,
        "Flag to indicate whether to convert snapshots of all deleted filesets to relics or to delete them. Applies to all filesets. Default is true."
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    bulkDeleteHosts(
        "Provide the ID of each host to deregister."
        ids: [String!]!
    ): ResponseSuccess!
    bulkEditFilesetTemplates(
        "Provide an array containing a separate object for each fileset template being modified."
        definitions: [FilesetTemplatePatchInput!]!
    ): FilesetTemplateDetailListResponse!
    bulkEditHosts(
        "Properties to update for each host."
        hostUpdateProperties: [HostUpdateIdInput!]!
    ): InternalBulkUpdateHostResponse!
    bulkRegisterHosts(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Array containing a registration definition for each host."
        hosts: [HostRegisterInput!]!
    ): HostDetailListResponse!
    cancelActivitySeries(
        "The id of the activity series"
        activitySeriesId: UUID!,
        "The id of the cluster"
        clusterUuid: UUID!
    ): Boolean!
    cancelBlueprintFailover(taskchainId: UUID!): Result!
    "Cancels download package job of a cluster"
    cancelDownloadPackage(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CancelJobReply!
    "Cancels scheduled upgrade job of a cluster"
    cancelScheduledUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CancelJobReply!
    cancelTaskchain(taskchainId: String!): RequestStatus!
    changePassword(
        "User credentials required to change a user's password."
        input: ChangePasswordInput!
    ): Boolean!
    cleanupBlueprintFailover(cleanupJobconfig: CleanupFailoverJobInfo!): CreateOnDemandJobReply!
    "Check RBA connectivity for the VMs"
    cloudNativeCheckRBAConnectivity(
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): CheckRBAConnectivityReply!
    "Download files from cloudnative snapshot"
    cloudNativeDownloadFiles(
        "Create the download location"
        createDownloadLoaction: Boolean!,
        "Location where the files would be downloaded"
        downloadLocation: String!,
        "File/Directory(s) to download"
        filePaths: [String!]!,
        "Snapshot UUID"
        snapshotId: UUID!
    ): DownloadFilesReply!
    createAppBlueprint(children: [AppBlueprintChildInput!]!, name: String!, primaryClusterUuid: UUID!): Blueprint!
    createAppBlueprintDownloadSnapshotJobFromCloud(appSnapshotFid: UUID!): Result!
    createAppBlueprintExport(
        exportJobConfig: AppBlueprintExportSnapshotJobConfig!,
        "The Polaris UUID for the object."
        fid: UUID!
    ): Result!
    createAppBlueprintInstantRecovery(
        "The Polaris UUID for the object."
        fid: UUID!,
        instantRecoveryJobConfig: InstantRecoveryJobConfig
    ): Result!
    createAppBlueprintMount(
        "The Polaris UUID for the object."
        fid: UUID!,
        mountJobConfig: AppBlueprintMountSnapshotJobConfig!
    ): Result!
    createAutomaticAwsTargetMapping(automaticAwsTargetMappingCreateRequest: AutomaticAwsTargetMappingCreateRequest!): TargetMapping!
    createAutomaticAzureTargetMapping(automaticAzureTargetMappingCreateRequest: AutomaticAzureTargetMappingCreateRequest!): TargetMapping!
    createAwsAccount(
        "Request arg for creating a new AWS account"
        awsAccountCreateRequest: AwsAccountCreateRequest!
    ): CloudAccount!
    createAwsComputeSetting(
        "Request for creating a new Aws Compute Setting"
        awsComputeSettingsCreateRequest: AwsComputeSettingsCreateRequest!
    ): AwsComputeSettings!
    "Create AWS Exocompute configs."
    createAwsExocomputeConfigs(
        "Input to create AWS exocompute configurations."
        input: CreateAwsExocomputeConfigsInput!
    ): CreateAwsExocomputeConfigsReply!
    createAwsTarget(
        "Request for creating a new AWS target"
        awsTargetCreateRequest: AwsTargetCreateRequest!
    ): Target!
    createAzureAccount(
        "Request arg for creating a new Azure account"
        azureAccountCreateRequest: AzureAccountCreateRequest!
    ): CloudAccount!
    "Create a disk based azure cluster in Azure."
    createAzureDiskCluster(
        "CreateAzureDiskClusterArg params for Azure."
        input: CreateAzureDiskClusterInput!
    ): AzureDiskClusterCreateReply!
    "Create a disk based cluster in Azure."
    createAzureDiskClusterAsync(
        "CreateAzureDiskClusterArg params for Azure."
        input: CreateAzureDiskClusterInput!
    ): CcProvisionJobReply!
    "Trigger azure native create disk snapshot job for given disk IDs"
    createAzureNativeDiskSnapshots(
        "List of Disk IDs"
        diskIds: [UUID!]!,
        "Retention SLA ID of the on-demand snapshot"
        retentionSlaId: String
    ): CreateAzureNativeDiskSnapshotsReply!
    "Trigger azure native create virtual machine snapshot job for given vm IDs"
    createAzureNativeVirtualMachineSnapshots(
        "Retention SLA ID of the on-demand snapshot"
        retentionSlaId: String,
        "List of Virtual Machine IDs"
        vmIds: [UUID!]!
    ): CreateAzureNativeVirtualMachineSnapshotsReply!
    createAzureTarget(
        "Request for creating a new Azure target"
        azureTargetCreateRequest: AzureTargetCreateRequest!
    ): Target!
    createBlueprint(
        children: [AppBlueprintChildInput!]!,
        name: String!,
        "The id of the source location"
        sourceLocationId: String!,
        "The type of the source location"
        sourceLocationType: BlueprintLocationTypeEnum! = CDM,
        "The status of the blueprint"
        status: BlueprintStatusEnum! = Uncompleted,
        "The id of the intended remote target location"
        targetLocationId: String,
        "The type of the intended remote target location"
        targetLocationType: BlueprintLocationTypeEnum = CDM
    ): BlueprintNew!
    "create a list of blueprint recovery specs with a list of child snappable/snapshot recovery specs"
    createBlueprintRecoverySpec(
        "the id of the blueprint"
        blueprintId: UUID!,
        "configurations of the recovery specs"
        recoveryConfigs: [AppBlueprintRecoverySpecCreateReqInputType!]!,
        "the type of the recovery specs (AWS_EC2, VMWARE_VM)"
        specType: RecoverySpecTypeEnum!
    ): [BlueprintRecoverySpec!]!
    createBlueprintSnapshot(
        BaseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfig,
        "The Polaris UUID for the object."
        fid: UUID!
    ): Result!
    createCloudNativeAwsStorageSetting(input: CreateCloudNativeAwsStorageSettingInput!): CreateCloudNativeAwsStorageSettingReply!
    "Create cloud native label rule"
    createCloudNativeLabelRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Label key-value pair for label rule"
        label: LabelType!,
        "Type of managed object on which label rule will be applied"
        objectType: CloudNativeLabelObjectType!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA"
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!
    ): CreateCloudNativeLabelRuleReply!
    "Create cloud native tag rule"
    createCloudNativeTagRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Type of managed object on which tag rule will be applied"
        objectType: CloudNativeTagObjectType!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA"
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!,
        "Tag key-value pair for tag rule"
        tag: TagType!
    ): CreateCloudNativeTagRuleReply!
    "Create a new custom analyzer"
    createCustomAnalyzer(analyzer: AnalyzerInput!): Analyzer!
    createCustomReport(config: CustomReportCreate!): CustomReport!
    createFailoverCluster(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Create configuration parameters for a failover cluster."
        config: FailoverClusterConfigInput!
    ): FailoverClusterDetail!
    "Create a failover cluster app."
    createFailoverClusterApp(
        "Create configuration parameters for a failover cluster app."
        config: FailoverClusterAppConfigInput!
    ): FailoverClusterAppSummary!
    createFilesetSnapshot(
        "Configuration for the on-demand backup."
        config: BaseOnDemandSnapshotConfigInput!,
        "ID of the Fileset."
        id: String!
    ): AsyncRequestStatus!
    createGlobalSla(globalSlaCreateRequest: GlobalSlaCreateRequest!): GlobalSla!
    "Add a Kubernetes cluster."
    createK8sCluster(
        "Request for creating a new K8s cluster."
        k8sClusterCreateRequest: K8sClusterCreateInput!
    ): OnboardingSetupReply!
    createManualTargetMapping(manualTargetMappingCreateRequest: ManualTargetMappingCreateRequest!): TargetMapping!
    createNfsTarget(
        "Request for creating a new NFS target"
        nfsTargetCreateRequest: NfsTargetCreateRequest!
    ): Target!
    createO365AppComplete(o365AppClientId: String!, stateToken: String!, tenantId: String!): RequestStatus!
    createO365AppKickoff(o365AppType: String!, o365SubscriptionName: String!): CreateO365AppKickoffResp!
    createOrg(name: String!): UUID!
    "Create a classification policy"
    createPolicy(policy: ClassificationPolicyInput!): ClassificationPolicyDetail!
    createReport(reportConfig: ReportConfigInput!): Int!
    createRole(description: String!, name: String!, permissions: [PermissionInput!]!): UUID!
    createSapHanaDatabaseSnapshot(
        "Configuration for the on demand backup."
        config: BaseOnDemandSnapshotConfigInput!,
        "ID of the Fileset."
        id: String!
    ): AsyncRequestStatus!
    createScheduledReport(scheduledReport: ScheduledReportCreate!): ScheduledReport!
    createServiceAccount(
        "Description of the service account"
        description: String,
        "Name of the service account"
        name: String!,
        "IDs of roles to be assigned to the service account"
        roleIds: [String!]!
    ): CreateServiceAccountReply!
    createUser(email: String!, roleIds: [String!]!): String!
    createUserWithPassword(
        "User credentials required to create a new user."
        input: CreateUserWithPasswordInput!
    ): String!
    "Deactivate a custom analyzer"
    deactivateCustomAnalyzer(analyzerId: String!): String!
    "Deactivate a classification policy"
    deactivatePolicy(policyId: String!, runAsync: Boolean!): [String!]!
    deactivateUser(ids: [String!]!): [String!]!
    "Delete account settings value."
    deleteAccountSettingValue(
        "Name of component that uses ASP in account setting table"
        aspComponent: ComponentEnum!,
        "Name of parameter (ASP) in account setting table"
        aspName: String!
    ): Boolean!
    deleteAppBlueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Boolean!
    deleteAppBlueprintSnapshot(
        "The Polaris UUID for the object."
        fid: UUID!,
        location: String!
    ): Result!
    deleteAppBlueprintSnapshots(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Result!
    deleteAwsComputeSetting(
        "Id of aws compute setting."
        awsComputeSettingId: UUID!
    ): DeleteAwsCloudComputeSettingReply!
    "Deletes AWS Exocompute configs."
    deleteAwsExocomputeConfigs(
        "List of AWS exocompute configuration IDs."
        input: DeleteAwsExocomputeConfigsInput!
    ): DeleteAwsExocomputeConfigsReply!
    "Delete a disk based cluster in Azure."
    deleteAzureDiskCluster(
        "DeleteAzureDiskClusterInput params for Azure."
        input: DeleteAzureDiskClusterInput!
    ): DeleteAzureDiskClusterReply!
    "Deletes an azure subscription."
    deleteAzureNativeSubscription(
        "If the snapshots on Azure should be deleted along with the subscription."
        shouldDeleteNativeSnapshots: Boolean!,
        "Subscription ID"
        subscriptionId: UUID!
    ): DeleteSubscriptionReply!
    deleteBlueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Boolean!
    "Delete Certificate"
    deleteCertificate(
        "Certificate id"
        certificateId: Long!
    ): Boolean!
    "Delete cloud native label rule"
    deleteCloudNativeLabelRule(
        "UUID for the tag or label rule"
        ruleId: UUID!
    ): String!
    "Delete cloud native tag rule"
    deleteCloudNativeTagRule(
        "UUID for the tag or label rule"
        ruleId: UUID!
    ): String!
    deleteCustomReport(id: Int!): Int!
    deleteEventDigest(recipientUserIDs: [String!]!): Boolean!
    deleteFailoverCluster(
        "ID of the failover cluster."
        id: String!,
        """

        v5.2-v5.3: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    "Delete failover cluster application."
    deleteFailoverClusterApp(
        "ID of the failover cluster app."
        id: String!,
        """

        v5.2-v5.3: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    "Delete failover cluster applications."
    deleteFailoverClusterApps(
        "The ID of each failover cluster application to delete."
        ids: [String!]!,
        """

        v5.3: Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0: Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    deleteFailoverClusters(
        "The ID of each failover cluster to delete."
        ids: [String!]!,
        """

        v5.3: Specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0: Specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    deleteFilesetSnapshots(
        "ID of the fileset."
        id: String!
    ): ResponseSuccess!
    deleteGlobalSla(
        "Corresponds to global SLA forever UUID in Polaris tables"
        globalSlaFid: UUID!
    ): SlaResult!
    deleteIdentityProvider: IdentityProvider!
    deleteLdapPrincipals(principalIds: [String!]!): Boolean!
    deleteO365AzureApp(o365AppClientId: String!, o365AppType: String!): RequestStatus!
    deleteO365Org(orgId: UUID!): CreateOnDemandJobReply!
    deleteO365ServiceAccount(orgId: UUID!): RequestStatus!
    "Deletes the polaris on-demand snapshot by id"
    deletePolarisSnapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): Boolean!
    "delete the recovery specs with the given app blueprint"
    deleteRecoverySpec(
        "the id of the blueprint"
        blueprintId: UUID!
    ): DeleteBlueprintRecoverySpecReply!
    deleteReport(reportID: Int!): Boolean!
    deleteRole(roleId: String!): Boolean!
    "Delete SMTP configuration value."
    deleteSMTPConfiguration: Boolean!
    deleteSapHanaDatabaseSnapshot(
        "ID assigned to a SAP HANA database full snapshot."
        id: String!
    ): ResponseSuccess!
    deleteSapHanaSystem(
        "The ID of the SAP HANA system."
        id: String!
    ): AsyncRequestStatus!
    deleteScheduledReport(id: Int!): Int!
    deleteServiceAccountsFromAccount(
        "List of service account IDs to be deleted"
        ids: [String!]!
    ): Boolean!
    deleteSnapshotsOfUnmanagedObjects(
        "List of UUIDs of objects"
        objectIds: [UUID!]!
    ): RequestSuccess!
    deleteSyslogConfiguration(
        "Syslog ids to delete"
        ids: [String!]!
    ): Boolean!
    deleteTarget(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): TargetDeleteResult!
    deleteTargetMapping(targetMappingDeleteRequest: TargetMappingDeleteRequest!): TargetMappingDeletionResult!
    deleteUnmanagedSnapshots(
        "List of UUIDs of snapshots"
        snapshotIds: [UUID!]!
    ): RequestSuccess!
    deleteUsersFromAccount(ids: [String!]!): Boolean!
    downloadFile(fileType: FileTypeEnum!, reportConfig: ReportConfigInput, reportID: Int!): reportGenerateReply!
    downloadFilesetSnapshot(
        "ID of snapshot."
        id: String!
    ): AsyncRequestStatus!
    "Schedule a download CSV job for cross object files."
    downloadObjectFilesCsv(
        "Request for scheduling a download CSV job for cross object files."
        DownloadObjectFilesCsvInput: DownloadObjectFilesCsvInput!
    ): DownloadCsvReply!
    "Schedule a download CSV job for objects list."
    downloadObjectsListCsv(
        "Request for scheduling a download CSV job for objects list."
        DownloadObjectsListCsvInput: DownloadObjectsListCsvInput!
    ): DownloadCsvReply!
    downloadReportCSVAsync(config: CustomReportCreate, id: Int!): AsyncDownloadReply!
    downloadReportPDFAsync(config: CustomReportCreate, id: Int!): AsyncDownloadReply!
    "Download file results csv"
    downloadResultsCsv(crawlId: String!, downloadFilter: DownloadResultsCsvFiltersInput): DownloadResultsCsvReply!
    "Download snapshot policy results csv"
    downloadSnapshotResultsCsv(downloadFilter: DownloadResultsCsvFiltersInput, snappableFid: String!, snapshotFid: String!): DownloadCsvReply!
    "Schedule a download CSV job for a user's activity."
    downloadUserActivityCsv(
        "Request for scheduling a download CSV job for a user's activity."
        DownloadUserActivityCsvInput: DownloadUserActivityCsvInput!
    ): DownloadCsvReply!
    "Schedule a download CSV job for user activity on a specific file."
    downloadUserFileActivityCsv(
        "Request for scheduling a download CSV job for a user activity on a specific file."
        DownloadUserFileActivityCsvInput: DownloadUserFileActivityCsvInput!
    ): DownloadCsvReply!
    editAutomaticAwsTargetMapping(automaticAwsTargetMappingEditRequest: AutomaticAwsTargetMappingEditRequest!): TargetMapping!
    editAutomaticAzureTargetMapping(automaticAzureTargetMappingEditRequest: AutomaticAzureTargetMappingEditRequest!): TargetMapping!
    editAwsAccount(
        "Request for editing an existing AWS account"
        awsAccountEditRequest: AwsAccountEditRequest!
    ): CloudAccount!
    editAwsTarget(
        "Request for updating an existing AWS target"
        awsTargetEditRequest: AwsTargetEditRequest!
    ): Target!
    editAzureAccount(
        "Request for editing an existing Azure account"
        azureAccountEditRequest: AzureAccountEditRequest!
    ): CloudAccount!
    editAzureTarget(
        "Request for updating an existing Azure target"
        azureTargetEditRequest: AzureTargetEditRequest!
    ): Target!
    "Edit Certificate"
    editCertificate(
        "Certificate"
        certificate: String,
        "Certificate id"
        certificateId: Long!,
        "Certificate description"
        description: String,
        "Certificate name"
        name: String
    ): Boolean!
    editClusterDefaultAddress(
        clusterDefaultAddress: String,
        "The id of the cluster"
        clusterUuid: UUID!
    ): Cluster!
    editClusterLocation(
        clusterLocation: ClusterLocationEdit!,
        "The id of the cluster"
        clusterUuid: UUID!
    ): Cluster!
    editCustomReport(config: CustomReportCreate!, id: Int!): CustomReport!
    editGlobalSla(globalSlaEditRequest: GlobalSlaEditRequest!): GlobalSla!
    editManualTargetMapping(manualTargetMappingEditRequest: ManualTargetMappingEditRequest!): TargetMapping!
    editNfsTarget(
        "Request for updating an existing NFS target"
        nfsTargetEditRequest: NfsTargetEditRequest!
    ): Target!
    editSapHanaSystem(
        "The ID of the SAP HANA system."
        id: String!,
        "An object that contains the updated SLA Domain ID for the SAP HANA system."
        updateProperties: SapHanaSystemPatchInput!
    ): SapHanaPatchSystemResponse!
    editScheduledReport(id: Int!, scheduledReport: ScheduledReportCreate!): ScheduledReport!
    "Enable/disable auto fmd upload on given cluster"
    enableAutomaticFmdUpload(
        "The id of the cluster"
        clusterUuid: UUID!,
        "enable or disable lambda service"
        enabled: Boolean!
    ): EnableAutomaticFmdUploadReply!
    "Enable/ Disable App consistency for a VM"
    enableDisableAppConsistency(
        "Whether to enable app consistency on VMs"
        enable: Boolean!,
        "Object type for enabling app consistent protection"
        objectType: CloudNativeVmAppConsistentObjectType!,
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): EnableDisableAppConsistencyReply!
    "Enable/disable lambda service for given snappable on given cluster"
    enableLambdaForSnappable(
        "enable or disable diff fmd upload"
        enableDiffFmd: Boolean!,
        "enable or disable full fmd upload"
        enableFullFmd: Boolean!,
        "the fid of the snappable"
        snappableId: UUID!
    ): EnableLambdaForSnappableReply!
    enableO365SharePoint(exocomputeClusterId: String!): RequestStatus!
    enableO365Teams(exocomputeClusterId: String!): RequestStatus!
    "Mark AWS native EBS volumes to be excluded from EC2 Instance snapshot."
    excludeAwsNativeEbsVolumesFromSnapshot(
        "Input to mark EBS volumes to be excluded for EC2 snapshot."
        input: ExcludeAwsNativeEbsVolumeFromSnapshotInput!
    ): String!
    excludeDisksFromSnapshot(
        "Mapping from disk ID to excluded flag"
        diskIdToIsExcluded: [DiskIdToIsExcluded!]!,
        "Virtual Machine ID"
        vmId: UUID!
    ): String!
    "Trigger azure native export disk job for given snapshot"
    exportAzureNativeDisk(
        "Availability Zone in which to export the disk, empty for regions types which do not support availability zones"
        destinationAvailabilityZone: String,
        "Region in which to export the disk"
        destinationRegionName: AzureNativeRegionEnum!,
        "Subscription ID in which to export the disk. If it is empty it means disk is being exported to same subscription"
        destinationSubscriptionId: UUID,
        "Name of the exported disk"
        diskName: String!,
        "Size of the exported disk in GiB"
        diskSize: Int!,
        "Type of the exported disk"
        diskStorageTier: AzureNativeManagedDiskTypeEnum!,
        "Whether to only run export job or export and replace job"
        replaceAttached: Boolean!,
        "Name of the resource group to be associated with exported disk"
        resourceGroupName: String!,
        "Whether to export tags from the snapshot"
        shouldExportTags: Boolean!,
        "Snapshot ID"
        snapshotId: UUID!,
        "Whether to recover from replica of source snapshot or not."
        useReplica: Boolean
    ): ExportDiskSnapshotReply!
    "Trigger azure native export virtual machine job for given snapshot"
    exportAzureNativeVirtualMachine(
        "Whether to enable accelerated networking on the exported VM."
        acceleratedNetworking: Boolean,
        "Azure ID of the availability set in which to export the VM, if specified, it must be in the destination region."
        availabilitySetNativeId: String,
        "Availability Zone in which to export the virtual machine, empty for regions/virtual machine types which do not support availability zones"
        destinationAvailabilityZone: String,
        "Region in which to export the virtual machine"
        destinationRegionName: AzureNativeRegionEnum!,
        "Subscription ID in which to export the virtual machine. If it is empty it means disk is being exported to same subscription"
        destinationSubscriptionId: UUID,
        "Azure ID of the network security group to be attached to the exported virtual machine. If specified, it must be in the destination region"
        networkSecurityGroupNativeId: String,
        "Name of the resource group to be associated with exported virtual machine"
        resourceGroupName: String!,
        "Whether to export tags from the snapshot"
        shouldExportTags: Boolean!,
        "Whether to power off the virtual machine after exporting"
        shouldPowerOff: Boolean!,
        "Snapshot ID"
        snapshotId: UUID!,
        "Azure ID of the subnet in which to launch the virtual machine. It must be in the destination region"
        subnetNativeId: String!,
        "Whether to recover from replica of source snapshot or not."
        useReplica: Boolean,
        "Name of the exported virtual machine"
        vmName: String!,
        "Size of the exported virtual machine"
        vmSize: String!
    ): ExportVMReply!
    exportO365Mailbox(exportConfig: ExportO365MailboxInput!): CreateOnDemandJobReply!
    filesetAddHost(
        "host name"
        hostName: String!,
        snappableFid: UUID!
    ): RequestSuccess!
    filesetDownloadSnapshotFiles(
        "Configuration information for a job to download files and folders from a fileset backup."
        config: FilesetDownloadFilesJobConfigInput!,
        deltaTypeFilter: [DeltaTypeEnum!],
        "ID assigned to a fileset backup object."
        id: String!,
        nextSnapshotFid: UUID
    ): AsyncRequestStatus!
    filesetExportSnapshotFiles(
        "The configuration of a job that exports one or more files or folders from a fileset backup."
        config: FilesetExportFilesJobConfigInput!,
        deltaTypeFilter: [DeltaTypeEnum!],
        "ID of snapshot."
        id: String!,
        nextSnapshotFid: UUID,
        "os type"
        osType: GuestOsTypeEnum!,
        "share type"
        shareType: ShareTypeEnum! = NoShareType
    ): AsyncRequestStatus!
    filesetRecoverFiles(
        "Configuration for job to restore one or more files or folders from a fileset backup."
        config: FilesetRestoreFilesJobConfigInput!,
        deltaTypeFilter: [DeltaTypeEnum!],
        nextSnapshotFid: UUID,
        "os type"
        osType: GuestOsTypeEnum!,
        "List of restore path pairs"
        restorePathPairList: [OldRestorePathPairInput!]!,
        "share type"
        shareType: ShareTypeEnum! = NoShareType,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): AsyncRequestStatus!
    "Process and finalize deletion of cloud account is the last step in deletion of a feature from cloud account. This endpoint is a MUST for deletion of disconnected features."
    finalizeAwsCloudAccountDeletion(
        "Args to process aws cloud accounts for deletion."
        input: FinalizeAwsCloudAccountDeletionInput!
    ): FinalizeAwsCloudAccountDeletionReply!
    "Process cloud account. This is the second step after validate and create in addition of a feature for cloud account.The CloudFormation stack should be created after this step using the CloudFormation URL provided in the first step."
    finalizeAwsCloudAccountProtection(
        "Arguments for process cloud accounts."
        input: FinalizeAwsCloudAccountProtectionInput!
    ): FinalizeAwsCloudAccountProtectionReply!
    "Adds a new cloud account for the GCP project which is not already added"
    gcpCloudAccountAddManualAuthProject(
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!,
        "The native project ID of the GCP project."
        gcpNativeProjectId: String!,
        "The project name of the GCP project."
        gcpProjectName: String!,
        "The project number of the GCP project."
        gcpProjectNumber: Long!,
        "[Optional] The name of the organization containing the project."
        organizationName: String,
        "[Optional] JWT config of the service account."
        serviceAccountJwtConfigOptional: String
    ): Boolean!
    "Add cloud account for Gcp Projects for the given features."
    gcpCloudAccountAddProjects(
        "List of cloud account project native Ids."
        cloudAccountsProjectIds: [String!]!,
        "List of Gcp project native Ids to be added for native protection."
        nativeProtectionProjectIds: [String!]!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of Gcp shared VPC host project native Ids."
        sharedVpcHostProjectIds: [String!]!
    ): GcpCloudAccountAddProjectsResponse!
    "Delete cloud account for the given Gcp Project UUIDs and feature."
    gcpCloudAccountDeleteProjects(
        "List of cloud account project native Uuids."
        cloudAccountsProjectUuids: [UUID!]!,
        "List of Gcp project native Uuids to be added for native protection."
        nativeProtectionProjectUuids: [UUID!]!,
        "Optional Session ID of the current OAuth session."
        sessionId: String,
        "List of Gcp shared VPC host project native Uuids."
        sharedVpcHostProjectUuids: [UUID!]!,
        "Flag that denotes if cleanup of GCP resources should be skipped. If this flag is set, then the session ID is ignored."
        skipResourceDeletion: Boolean!
    ): [GcpCloudAccountProjectDeleteStatus!]!
    "Complete the OAuth flow and pass the authorization code."
    gcpCloudAccountOAuthComplete(
        "Authorization code received after the oauth consent flow."
        authorizationCode: String!,
        "Redirect URL used in the oauth flow."
        redirectUrl: String!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): GcpCloudAccountOAuthCompleteResponse!
    "Initiate a session before doing Gcp OAuth flow."
    gcpCloudAccountOAuthInitiate(
        "Customer Url."
        customerUrl: String!
    ): GcpCloudAccountOAuthInitiateResponse!
    "Upgrade cloud account for the given Gcp Project UUIDs and feature."
    gcpCloudAccountUpgradeProjects(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "List of Gcp project UUIDs."
        projectUuids: [UUID!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpCloudAccountProjectUpgradeStatus!]!
    "Triggers GCPNative disable project job for the given project ID"
    gcpNativeDisableProject(
        "UUID of the Project"
        projectId: UUID!,
        "Whether to delete the native snapshots while disabling the project"
        shouldDeleteNativeSnapshots: Boolean!
    ): DisableProjectReply!
    gcpNativeExcludeDisksFromInstanceSnapshot(
        "Mapping from disk ID to excluded flag"
        diskIdToIsExcluded: [DiskIdToIsExcluded!]!,
        "GCP GCE instance ID"
        instanceId: UUID!
    ): String!
    "Trigger GCP native export disk job for the given disk snapshot"
    gcpNativeExportDisk(
        "Encryption type for created disk(s)"
        diskEncryptionType: DiskEncryptionType!,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKey"
        kmsCryptoKey: kmsCryptoKey,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKeyResourceId"
        kmsCryptoKeyResourceId: String,
        "Whether the exported disk should replace source disk from attached instance"
        replaceAttached: Boolean!,
        "The zones where the regional exported disk should be replicated"
        replicaZones: [String!],
        "Whether to allow Rubrik labels on Rubrik created/manipulated resources"
        shouldAddRubrikLabels: Boolean!,
        "The labels will be copied to the Rubrik created/manipulated resource from the source resource that were there at the time of taking the snapshot"
        shouldCopyLabels: Boolean!,
        "UUID of snapshot"
        snapshotId: UUID!,
        "The disk name of the to-be-created disk."
        targetDiskName: String!,
        "Size of the exported disk in GB"
        targetDiskSizeGb: Int!,
        "The disk type of the to-be-created disk."
        targetDiskType: String!,
        "The region of the to-be-created disk."
        targetRegion: String!,
        "The zone of the to-be-created disk."
        targetZone: String
    ): ExportDiskReply!
    "Trigger GCP native export instance job for the given instance snapshot"
    gcpNativeExportGceInstance(
        "Encryption type for created disk(s)"
        diskEncryptionType: DiskEncryptionType!,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKey"
        kmsCryptoKey: kmsCryptoKey,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKeyResourceId"
        kmsCryptoKeyResourceId: String,
        "Native ID of the shared VPC host project for the current service project"
        sharedVPCHostProjectNativeID: String,
        "Whether to allow Rubrik labels on Rubrik created/manipulated resources"
        shouldAddRubrikLabels: Boolean!,
        "The labels will be copied to the Rubrik created/manipulated resource from the source resource that were there at the time of taking the snapshot"
        shouldCopyLabels: Boolean!,
        "The to-be-created instance will be created in a powered-off state"
        shouldPowerOff: Boolean!,
        "UUID of snapshot"
        snapshotId: UUID!,
        "The instance name of the to-be-created instance."
        targetInstanceName: String!,
        "The machine type of the to-be-created instance."
        targetMachineType: String!,
        "The network tags of the to-be-created instance."
        targetNetworkTags: [String!],
        "The subnet name of the to-be-created instance."
        targetSubnetName: String!,
        "The zone of the to-be-created instance."
        targetZone: String!
    ): ExportGCEInstanceReply!
    "Trigger GCP native refresh project job for the given project IDs"
    gcpNativeRefreshProjects(
        "List of Project IDs"
        projectIds: [UUID!]!
    ): RefreshGCPNativeProjectsReply!
    "Triggers GCPNative restore instance job for the given snapshot ID"
    gcpNativeRestoreGceInstance(
        "Whether to allow Rubrik labels on Rubrik created/manipulated resources"
        shouldAddRubrikLabels: Boolean!,
        "Whether to restore labels of the instance from snapshot"
        shouldRestoreLabels: Boolean!,
        "Whether the restored instance should be started"
        shouldStartRestoredInstance: Boolean!,
        "UUID of snapshot"
        snapshotId: UUID!
    ): RestoreGCEInstanceReply!
    "Sets the default service account auth key"
    gcpSetDefaultServiceAccountJwtConfig(
        "The JWT config for a service account in customer project."
        serviceAccountJWTConfig: String!,
        "The name of the service account"
        serviceAccountName: String!
    ): Boolean!
    "Generate CSR"
    generateCSR(
        "City for your CSR"
        city: String,
        "Country for your CSR"
        country: String,
        "Email for your CSR"
        email: String,
        "Hostnames for your CSR"
        hostnames: [String!]!,
        "Name for your CSR"
        name: String!,
        "Organization for your CSR"
        organization: String,
        "Organization unit for your CSR"
        organizationUnit: String,
        "State for your CSR"
        state: String,
        "Surname for your CSR"
        surname: String,
        "User id for your CSR"
        userId: String
    ): Csr!
    getDownloadUrl(downloadId: Long!): UserDownloadUrl!
    "Initiate manual update features to latest version."
    initiateFeatureUpdateForAwsCloudAccount(
        "Input to initiate feature update for AWS cloud account."
        input: InitiateFeatureUpdateForAwsCloudAccountInput!
    ): InitiateFeatureUpdateForAwsCloudAccountReply!
    insertCustomerO365App(o365AppClientId: String!, o365AppClientSecret: String!, o365AppType: String!, o365SubscriptionName: String!): RequestStatus!
    "List CIDRs for compute setting."
    listCidrsForComputeSetting(
        "Optional List of Cluster UUIDs."
        clusterIdsArg: [UUID!]
    ): ListCidrsForComputeSetting!
    "Login to Rubrik support portal using username and password"
    loginToRubrikSupportPortal(
        "Support portal hostname"
        hostname: String! = "rubrik.force.com",
        "Support portal organization ID"
        organizationId: String! = "00D40000000N3x2",
        "Support portal password to login"
        password: String!,
        "Support portal username to login"
        username: String!
    ): SupportPortalLoginReply!
    "Logout from Rubrik support portal using username"
    logoutFromRubrikSupportPortal: SupportPortalLogoutReply!
    "Mutate LDAP Integration"
    mutateLdapIntegration(
        "BaseDn for your LDAP integration"
        baseDn: String,
        "BindUserName for your LDAP integration"
        bindUserName: String!,
        "BindUserPassword for your LDAP integration"
        bindUserPassword: String!,
        "dynamic dns name for your LDAP integration"
        dynamicDnsName: String,
        "group member attribute for your LDAP integration"
        groupMemberAttr: String,
        "group membership attribute for your LDAP integration"
        groupMembershipAttr: String,
        "group search filter for your LDAP integration"
        groupSearchFilter: String,
        "ID for your LDAP integration"
        id: UUID,
        "LdapServers for your LDAP integration"
        ldapServers: [LdapServerInput!],
        "Name for your LDAP integration"
        name: String!,
        "TrustedCerts for your LDAP integration"
        trustedCerts: String,
        "user name attribute for your LDAP integration"
        userNameAttr: String,
        "user search filter for your LDAP integration"
        userSearchFilter: String
    ): String!
    mutateRole(description: String!, name: String!, permissions: [PermissionInput!]!, protectableClusters: [String!]!, roleId: String): UUID!
    o365SaaSSetupComplete(o365AppTypes: [String!]!, regionName: String!, stateToken: String!, tenantId: String!): AddO365OrgResponse!
    o365SaaSSetupKickoff: O365SaaSSetupKickoffResp!
    o365SetupKickoff: O365SetupKickoffResp!
    "Open a support tunnel in cluster"
    openSupportTunnel(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Close existing tunnel if any, before attempting to open the tunnel"
        force: Boolean! = false,
        "Activity timeout of support tunnel"
        timeout: Int! = 0
    ): OpenSupportTunnelReply!
    pauseTarget(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): TargetPauseResult!
    "Initiate deletion of cloud account. This is the first step to delete AWS cloud account. It generated template for deletion of cloud account and does not change any state of account."
    prepareAwsCloudAccountDeletion(
        "Args for initiate aws cloud accounts for deletion."
        input: PrepareAwsCloudAccountDeletionInput!
    ): PrepareAwsCloudAccountDeletionReply!
    "Trigger azure native refresh subscription job for the given subscription IDs"
    refreshAzureNativeSubscriptions(
        "List of Subscription IDs"
        subscriptionIds: [UUID!]!
    ): RefreshAzureNativeSubscriptionsReply!
    refreshGlobalManagerConnectivityStatus(
        "The id of the cluster"
        clusterUuid: UUID!
    ): GlobalManagerConnectivity!
    refreshHost(
        "ID assigned to a host object."
        id: String!
    ): HostDetail!
    "Refresh resources of a Kubernetes cluster."
    refreshK8sCluster(
        "Request for refreshing resources in a K8s cluster."
        k8sClusterRefreshRequest: K8sClusterRefreshInput!
    ): CreateOnDemandJobReply!
    refreshO365Org(orgId: UUID!): CreateOnDemandJobReply!
    refreshSapHanaSystem(
        "The ID of the SAP HANA system."
        id: String!
    ): AsyncRequestStatus!
    removeCdmCluster(
        "Cluster UUID of cdm cluster"
        clusterUUID: String!,
        "Number of days after which data from polaris is removed"
        expireInDays: Long,
        isForce: Boolean!
    ): Boolean!
    "Remove LDAP Integration"
    removeLdapIntegration(
        "ID for your LDAP integration"
        id: UUID!
    ): Boolean!
    "Remove policies from objects."
    removePolicyObjects(objectIds: [String!]!, policyIds: [String!]!, runAsync: Boolean!): [String!]!
    "Trigger azure native restore virtual machine job for given snapshot"
    restoreAzureNativeVirtualMachine(
        "Whether to power on virtual machine after restoring"
        shouldPowerOn: Boolean!,
        "Whether to restore tags from the snapshot"
        shouldRestoreTags: Boolean!,
        "Snapshot ID"
        snapshotId: UUID!
    ): RestoreVMReply!
    "Restore Kubernetes Namespace Snapshot."
    restoreK8sNamespace(
        "Request to restore K8s Namespace Snapshot."
        k8sNamespaceRestoreRequest: K8sNamespaceRestore!
    ): CreateOnDemandJobReply!
    restoreO365Mailbox(restoreConfig: RestoreO365MailboxInput!): CreateOnDemandJobReply!
    restoreO365Onedrive(destOnedriveUUID: UUID!, filesToRestore: [FileInfo!]!, foldersToRestore: [FolderInfo!]!, restoreFolderPath: String!, sourceOnedriveUUID: UUID!): CreateOnDemandJobReply!
    restoreO365SharepointDrive(destSharepointDriveUUID: UUID!, filesToRestore: [FileInfo!]!, foldersToRestore: [FolderInfo!]!, restoreFolderPath: String!, sourceSharepointDriveUUID: UUID!): CreateOnDemandJobReply!
    restoreO365Snappable(destSnappableUUID: UUID!, snappableRestoreConfig: SnappableRestoreConfig!, snappableType: SnappableTypeEnum!, sourceSnappableUUID: UUID!): CreateOnDemandJobReply!
    restoreO365TeamsFiles(destTeamsChannelInfo: TeamsChannelInfo, filesToRestore: [FileInfo!]!, foldersToRestore: [FolderInfo!]!, shouldCreateDestChannel: Boolean!): CreateOnDemandJobReply!
    resumeTarget(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): TargetResumeResult!
    "Resumes previously failed upgrade"
    resumeUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}"
    ): StartUpgradeReply!
    "Initiates a retry of a failed job."
    retryBackup(backupObjects: [BackupObject!]!, backupRunConfig: BackupRunConfig): RetryBackupResp!
    "Retry the previous failed download package CDM job"
    retryDownloadPackageJob(
        "Cluster uuid"
        clusterUuid: UUID!
    ): DownloadPackageReply!
    "Rolls back the cluster to starting version of previously failed upgrade"
    rollbackUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}"
    ): StartUpgradeReply!
    rotateServiceAccountSecret(
        "ID of the service account"
        id: String!
    ): RotateServiceAccountSecretReply!
    runCustomAnalyzer(runCustomAnalyzerRequest: RunCustomAnalyzerInput!): RunCustomAnalyzerReply!
    saveEventDigest(eventDigestConfig: EventDigestConfig!, frequency: Int, includeAudits: Boolean, includeEvents: Boolean, isImmediate: Boolean, name: String, recipientUserIDs: [String!]!): [EventDigest!]!
    "Schedule an upgrade job in batch"
    scheduleUpgradeBatchJob(
        "Upgrade action"
        action: ActionEnum!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Upgrade mode"
        mode: String!,
        "ISO8601 Timestamp string"
        scheduleAt: DateTime!,
        "CDM upgrade tarball version"
        version: String!
    ): [UpgradeJobReplyWithUuid!]!
    "Schedule an upgrade job"
    scheduleUpgradeJob(
        "Upgrade action"
        action: ActionEnum!,
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "Upgrade mode"
        mode: String!,
        "ISO8601 Timestamp string"
        scheduleAt: DateTime!,
        "CDM upgrade tarball version"
        version: String!
    ): UpgradeJobReply!
    "Seed account with enabled policies."
    seedEnabledPolicies: SeedEnabledPoliciesReply!
    "DEPRECATED (use seedEnabledPolicies instead) Seed account with initial policies."
    seedInitialPolicies: SeedInitialPoliciesReply!
    sendEmailNow(recipients: [String!]!, reportConfig: ReportConfigInput, reportID: Int!): reportGenerateReply!
    sendScheduledReport(id: Int!, recipients: [String!]!): Boolean!
    sendScheduledReportAsync(id: Int!, recipients: [String!]!): AsyncDownloadReply!
    sendTestSMTPEmail(
        "Email to use as from for your SMTP configuration"
        defaultFromEmail: String,
        "Host name for your SMTP configuration"
        hostName: String,
        "Password for your SMTP configuration"
        password: String,
        "Port number for your SMTP configuration"
        port: Int,
        "Recipient for test email"
        recipient: String!,
        "Security type to use "
        securityType: SMTPSecurityTypeEnum,
        "Trusted certificate to use for your SMTP configuration"
        trustedCerts: String,
        "Whether to use existing config or passed in config"
        useExisting: Boolean!,
        "User name for your SMTP configuration"
        userName: String
    ): Boolean!
    sendTestSyslog(
        "Syslog config to use"
        config: SyslogConfigInputType
    ): Boolean!
    "Set federated login status."
    setFederatedLoginStatus(
        "Federated login status configuration."
        federatedLoginStatusArg: FederatedLoginStatusInput!
    ): Boolean!
    setIdentityProvider(
        "Entity id of your IdP"
        entityId: String!,
        "Sign-in URL id of your IdP"
        signInUrl: String!,
        "Signing certificate of your IdP"
        signingCertificate: String!
    ): IdentityProvider!
    setIpWhitelistEnabled(enabled: Boolean!): Boolean!
    setO365ServiceAccount(appPassword: String!, orgId: UUID!, username: String!): RequestStatus!
    setSMTPConfiguration(
        "Email to use as from for your SMTP configuration"
        defaultFromEmail: String!,
        "Host name for your SMTP configuration"
        hostName: String!,
        "Password for your SMTP configuration"
        password: String!,
        "Port number for your SMTP configuration"
        port: Int!,
        "Security type to use "
        securityType: SMTPSecurityTypeEnum!,
        "Trusted certificate to use for your SMTP configuration"
        trustedCerts: String!,
        "User name for your SMTP configuration"
        userName: String!
    ): Boolean!
    "Enable/disable alerts for given snappable on given cluster"
    setSnappableAlertSetting(
        "The id of the cluster"
        clusterUuid: UUID!,
        "enable or disable lambda service"
        enabled: Boolean!,
        "the fid of the snappable"
        snappableId: UUID!
    ): SetSnappableAlertSettingReply!
    "Set user specific setting."
    setUserSetting(
        "User setting to add for specific user"
        userSetting: UserSettingInputType
    ): UserSetting!
    setupAzureO365Exocompute(exocomputeConfig: AzureO365ExocomputeConfig!, subscriptionId: UUID!, tenantId: String!): SetupAzureO365ExocomputeResp!
    "Snapshot Kubernetes Namespace."
    snapshotK8sNamespace(
        "Request for snapshot of K8s Namespace."
        k8sNamespaceSnapshotRequest: K8sNamespaceSnapshot!
    ): CreateOnDemandJobReply!
    "Trigger job to disable AWS native account and disable protection."
    startAwsNativeAccountDisableJob(
        "Input for AWS native account disable job."
        input: StartAwsNativeAccountDisableJobInput!
    ): AsyncJobStatus!
    "Trigger an on demand create snapshot job for AWS EC2 Instances."
    startAwsNativeEc2InstanceSnapshotsJob(
        "Input for create AWS EC2 Instance snapshots job."
        input: StartAwsNativeEc2InstanceSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Create snapshots of RDS Instances with given IDs"
    startAwsNativeRdsInstanceSnapshotsJob(
        "Input to trigger job to create AWS RDS Instance snapshots."
        input: StartAwsNativeRdsInstanceSnapshotsInput!
    ): BatchAsyncJobStatus!
    startBlueprintFailover(failoverJobConfig: BlueprintFailoverJobConfig!): CreateOnDemandJobReply!
    "Start failover jobs for multiple blueprints."
    startBlueprintsFailover(failoverJobConfigs: [BlueprintFailoverJobConfig!]!): CreateOnDemandJobReply!
    "Create index of cloudnative snapshots"
    startCloudNativeSnapshotsIndexJob(
        "Input for create snapshots index job."
        input: StartCloudNativeSnapshotsIndexJobInput!
    ): BatchAsyncJobStatus!
    "Start a crawl"
    startCrawl(analyzerGroups: [AnalyzerGroupInput!]!, extWhiteList: [String!], name: String!, resources: [ResourceInput!]!): StartCrawlReply!
    "Trigger job to create snapshots of EBS Volumes with given IDs"
    startCreateAwsNativeEbsVolumeSnapshotsJob(
        "Input for create AWS EBS volume create snapshots job."
        input: StartAwsNativeEbsVolumeSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Starts CDM job to download installer package in batch"
    startDownloadPackageBatchJob(
        "CDM download package version"
        downloadVersion: String,
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "MD5CheckSum of CDM installer package"
        md5checksum: String!,
        "CDM upgrade package URL"
        packageUrl: String!,
        "Size, in bytes of CDM package"
        size: Long
    ): [DownloadPackageReplyWithUuid!]!
    "Starts CDM job to download installer package"
    startDownloadPackageJob(
        "Cluster uuid"
        clusterUuid: UUID!,
        "CDM download package version"
        downloadVersion: String,
        "MD5CheckSum of CDM installer package"
        md5checksum: String!,
        "CDM upgrade package URL"
        packageUrl: String!,
        "Size, in bytes of CDM package"
        size: Long
    ): DownloadPackageReply!
    startEc2InstanceSnapshotExportJob(
        "Input to trigger export AWS native EC2 Instance snapshot job."
        input: StartAwsNativeEc2InstanceSnapshotExportJobInput!
    ): AsyncJobStatus!
    startExportAwsNativeEbsVolumeSnapshotJob(
        "Input to trigger export AWS native EBS volume snapshot job."
        input: StartAwsNativeEbsVolumeSnapshotExportJobInput!
    ): AsyncJobStatus!
    "Export of RDS Instance with given identifier"
    startExportRdsInstanceJob(
        "Input to trigger export AWS native RDS Instance job."
        input: StartExportRdsInstanceJobInput!
    ): AsyncJobStatus!
    "Starts an on demand periodic upgrade prechecks job in CDM cluster"
    startPeriodicUpgradePrechecksOnDemandJob(
        "Cluster uuid"
        clusterUuid: UUID!
    ): PrechecksJobReply!
    "Trigger an on demand job to refresh AWS accounts."
    startRefreshAwsNativeAccountsJob(
        "Input for refresh AWS native accounts job."
        input: StartAwsNativeAccountsRefreshJobInput!
    ): BatchAsyncJobStatus!
    "Trigger an on demand restore snapshot job for AWS EC2 Instance."
    startRestoreAwsNativeEc2InstanceSnapshotJob(
        "Input for restore AWS EC2 Instance snapshot job."
        input: StartRestoreAwsNativeEc2InstanceSnapshotJobInput!
    ): AsyncJobStatus!
    "Starts the upgrade with given tarball path"
    startUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "Upgrade mode"
        mode: String!,
        "CDM upgrade tarball version"
        version: String!
    ): StartUpgradeReply!
    "Starts cdm upgrades instantly, monitors the upgrade until terminal state is reached"
    startUpgradeBatchJob(
        "Upgrade action"
        action: ActionEnum!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Upgrade mode"
        mode: String!,
        "CDM upgrade tarball version"
        version: String!
    ): [UpgradeJobReplyWithUuid!]!
    "Starts cdm upgrade instantly, monitors the upgrade until terminal state is reached"
    startUpgradeJob(
        "Upgrade action"
        action: ActionEnum!,
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "Upgrade mode"
        mode: String!,
        "CDM upgrade tarball version"
        version: String!
    ): UpgradeJobReply!
    "Triggers on-demand snapshot for the given Snappables."
    takeOnDemandSnapshot(
        "The SLA ID."
        slaId: String!,
        "List of Snappable IDs"
        snappableIds: [UUID!]!
    ): TakeOnDemandSnapshotReply!
    toggleFeatureEnabled(enableFeature: Boolean!, featureName: FeatureNameEnum!): Boolean!
    toggleVMwareManagementEnabled(enableVmwareManagement: Boolean!): Boolean!
    "Trigger detect ransomware job for given snapshot"
    triggerRansomwareDetection(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to previous snapshot ID of the target snapshot"
        previousSnapshotId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): TriggerRansomwareDetectionReply!
    updateAccountOwner(userId: String!): Boolean!
    "This endpoint is deprecated."
    updateAccountSettings(
        "Flag to represent if email notification is enabled"
        isEmailNotificationEnabled: Boolean,
        "Flag to represent if the EULA has been accepted"
        isEulaAccepted: Boolean
    ): AccountSetting!
    updateAppBlueprint(
        children: [AppBlueprintChildInput!]!,
        "The Polaris UUID for the object."
        fid: UUID!,
        name: String!,
        primaryClusterUuid: UUID!
    ): Blueprint!
    "Updates regions, stack ARN, and role ARN for a feature for a given cloud account."
    updateAwsCloudAccount(
        "Arguments to save cloud account's role ARN, stack ARN and regions."
        input: UpdateAwsCloudAccountInput!
    ): UpdateAwsCloudAccountReply!
    updateAwsComputeSetting(
        "Request arguments for updating a Aws Compute Setting"
        awsComputeSettingsUpdateRequest: AwsComputeSettingsEditRequest!
    ): AwsComputeSettings!
    updateBlueprint(
        children: [AppBlueprintChildInput!]!,
        "The Polaris UUID for the object."
        fid: UUID!,
        name: String!,
        "The id of the source location"
        sourceLocationId: String!,
        "The type of the source location"
        sourceLocationType: BlueprintLocationTypeEnum! = CDM,
        "The status of the blueprint"
        status: BlueprintStatusEnum! = Uncompleted,
        "The id of the intended remote target location"
        targetLocationId: String,
        "The type of the intended remote target location"
        targetLocationType: BlueprintLocationTypeEnum = CDM,
        "The version of the blueprint"
        version: Int!
    ): BlueprintNew!
    updateCloudNativeAwsStorageSetting(input: UpdateCloudNativeAwsStorageSettingInput!): UpdateCloudNativeAwsStorageSettingReply!
    "Update indexing status for cloudnative snappables"
    updateCloudNativeIndexingStatus(
        "Is indexing enabled or disabled for snappables"
        isIndexingEnabled: Boolean!,
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): UpdateCloudNativeIndexingStatusReply!
    "Update cloud native label rule"
    updateCloudNativeLabelRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "UUID for the tag or label rule"
        ruleId: UUID!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA"
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!
    ): String!
    "Update cloud native tag rule"
    updateCloudNativeTagRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "UUID for the tag or label rule"
        ruleId: UUID!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA"
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!
    ): String!
    "Update a custom analyzer"
    updateCustomAnalyzer(analyzer: AnalyzerInput!): Analyzer!
    "Update Eula Acceptance details"
    updateEulaAccepted: Boolean!
    updateFailoverCluster(
        "ID of failover cluster."
        id: String!,
        "Properties to update."
        updateProperties: FailoverClusterConfigInput!
    ): FailoverClusterDetail!
    "Update the failover cluster app with specified properties."
    updateFailoverClusterApp(
        "ID of failover cluster app."
        id: String!,
        "Properties to update."
        updateProperties: FailoverClusterAppConfigInput!
    ): FailoverClusterAppSummary!
    updateHostCertificate(
        "ID of the host."
        id: String!
    ): HostDetail!
    updateIpWhitelist(ipCidrs: [String!]!, whitelistMode: WhitelistModeEnum!): Boolean!
    updateLambdaSettings(
        "Probability threshold for anomaly detector"
        anomalyThreshold: Float,
        "Flag to represent if alert on anomaly snappable is enabled"
        isAnomalyAlertEnabled: Boolean,
        "Probability threshold for ransomware detector"
        ransomwareThreshold: Float
    ): LambdaSettings!
    "Update ldap config"
    updateLdapConfig(adDomain: String!, clusterUuid: String!, ldapId: Long!, ldapName: String!, password: String!, userName: String!): UpdateLdapConfigReply!
    "Update a classification policy"
    updatePolicy(policy: ClassificationPolicyInput!): ClassificationPolicyDetail!
    "Update previewer cluster config"
    updatePreviewerClusterConfig(previewerClusterConfig: PreviewerClusterConfigInput!): Cluster!
    updateReport(reportConfig: ReportConfigInput!, reportID: Int!): Boolean!
    updateRole(description: String!, name: String!, permissions: [PermissionInput!]!, roleId: String!): Boolean!
    updateRoleAssignments(adGroupIds: [String!], roleIds: [String!]!, userIds: [String!]): Boolean!
    updateServiceAccount(
        "Description of the service account"
        description: String,
        "ID of the service account"
        id: String!
    ): Client!
    "API to open or close a support tunnel. nodeId must be the id of the current node, isTunnelEnabled is to open or close the tunnel, and inactivityTimeoutInSeconds is to set the timeout (if not provided, defaults to 4 days)"
    updateSupportTunnel(
        "The id of the cluster"
        clusterUuid: UUID!,
        inactivityTimeoutInSeconds: Long,
        isTunnelEnabled: Boolean!,
        nodeId: String!
    ): SupportTunnelInfoResp!
    "Update whitelisted analyzers for a path"
    updateWhitelistedAnalyzers(analyzerIds: [String!]!, runAsync: Boolean!, snappableFid: String!, snapshotFid: String!, stdPath: String!): String!
    "Create (or update if already exists) the account settings value."
    upsertAccountSettingValue(
        "Name of component that uses ASP in account setting table"
        aspComponent: ComponentEnum!,
        "Name of parameter (ASP) in account setting table"
        aspName: String!,
        "Value of ASP in account setting table"
        aspValue: String!
    ): ASPValue!
    vSphereVMBatchLiveMount(
        clusterUuid: UUID!,
        "Configuration object containing an array of virtual machine IDs, a way to indicate the snapshot to be chosen and mount configs."
        config: BatchMountSnapshotJobConfigInput!
    ): BatchAsyncRequestStatus!
    "Create a vSphere Export from a snapshot or a point-in-time"
    vSphereVMExportSnapshotV2(
        "Configuration for the Export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available."
        config: ExportSnapshotJobConfigV2Input!,
        "ID of a VM."
        id: String!
    ): AsyncRequestStatus!
    "Instantly recover a vSphere virtual machine from a snapshot or point-in-time"
    vSphereVMInitiateInstantRecoveryV2(
        "Configuration for the Instant Recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an instant recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an instant recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT instant recovery that uses the most recent time or snapshot available."
        config: InstantRecoveryJobConfigV2Input!,
        "ID of a VM."
        id: String!
    ): AsyncRequestStatus!
    "Create a vSphere Live Mount from a snapshot or point-in-time"
    vSphereVMInitiateLiveMountV2(
        "Configuration for the Live Mount request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers a live mount using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers a live mount using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT live mount that uses the most recent time or snapshot available."
        config: MountSnapshotJobConfigV2Input!,
        "ID of a VM."
        id: String!
    ): AsyncRequestStatus!
    "Validate and create AWS cloud account. If validation fails, no error is returned and the cause is present in the \"message\" field of return object or within admin/child accounts of return object. In case validation succeeds, it initiates creation of AWS cloud account. This is the first step to set up native protection."
    validateAndCreateAwsCloudAccount(
        "Arguments for validate input and create aws cloud accounts."
        input: ValidateAndCreateAwsCloudAccountInput!
    ): ValidateAndCreateAwsCloudAccountReply!
    "validate the recovery specs with the given app blueprint snappable or snapshot fid"
    validateBlueprintRecoverySpec(
        "the id of the blueprint"
        blueprintId: UUID!,
        "Flag to represent if it should validate snapshot recovery spec"
        validateSnapshotRecoverySpec: Boolean
    ): RecoverySpecValidityCheckReply!
    "Validate the resource mapping of the given blueprint's child snappables for the given recovery point."
    validateBlueprintResourceMapping(
        "Resource mapping validation config."
        input: ValidateBlueprintResourceMappingInput!
    ): ValidateBlueprintResourceMappingReply!
    vpshereVMRecoveryPointMount(createDatastoreOnly: Boolean, datastoreName: String, disableNetwork: Boolean, hostID: String, keepMacAddresses: Boolean, powerOn: Boolean, recoveryPoint: String, removeNetworkDevices: Boolean, shouldRecoverTags: Boolean, snappableFid: UUID!, snapshotFid: UUID, unregsiterVm: Boolean, vlan: Int, vmName: String): vSphereAsyncRequestStatus!
    vsphereCreateVCenter(caCert: String, clusterUuid: UUID!, conflictResolutionAuthz: ConflictResolutionAuthzEnum!, hostname: String!, password: String!, username: String!): vSphereAsyncRequestStatus!
    vsphereDeleteVCenter(vcenterId: UUID!): vSphereAsyncRequestStatus!
    vsphereEditVCenter(caCert: String, conflictResolutionAuthz: ConflictResolutionAuthzEnum!, hostname: String!, password: String!, username: String!, vcenterId: UUID!): RequestSuccess!
    vsphereExcludeVMDisks(virtualDiskUpdate: [VmDiskUpdateInput!]!): RequestSuccess!
    vsphereExportSnapshotToStandaloneHost(
        datastoreName: String!,
        disableNetwork: Boolean,
        hostIpAddress: String!,
        hostPassword: String!,
        hostUsername: String!,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        vmName: String
    ): vSphereAsyncRequestStatus!
    vsphereOnDemandSnapshot(
        "The SLA id of the snappable"
        slaID: String,
        snappableFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereRefreshVCenter(vcenterId: UUID!): vSphereAsyncRequestStatus!
    vsphereVMDeleteLiveMount(force: Boolean, livemountId: UUID!): vSphereAsyncRequestStatus!
    vsphereVMDeleteSnapshot(
        location: String!,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): RequestSuccess!
    vsphereVMDownloadSnapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereVMDownloadSnapshotFiles(
        deltaTypeFilter: [DeltaTypeEnum!],
        nextSnapshotFid: UUID,
        "paths of files"
        paths: [String!]!,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereVMExportSnapshot(
        datastoreId: UUID!,
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        unregsiterVm: Boolean,
        vmName: String
    ): vSphereAsyncRequestStatus!
    vsphereVMInitiateDiskMount(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        targetVmID: String,
        vlan: Int,
        vmdkIDs: [String!]!
    ): vSphereAsyncRequestStatus!
    vsphereVMInitiateInstantRecovery(
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        preserveMOID: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        vlan: Int,
        vmName: String
    ): vSphereAsyncRequestStatus!
    vsphereVMInitiateLiveMount(
        createDatastoreOnly: Boolean,
        datastoreName: String,
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        vlan: Int,
        vmName: String
    ): vSphereAsyncRequestStatus!
    "Retrieve a list of the datastores for a specified ESXi host"
    vsphereVMListESXiDatastores(clusterUuid: UUID!, ipAddress: String!, password: String!, username: String!): DatastoreListResponse!
    vsphereVMMountRelocate(datastoreId: UUID!, livemountId: UUID!): vSphereAsyncRequestStatus!
    vsphereVMPowerOnOffLiveMount(livemountId: UUID!, powerStatus: Boolean!): VmwareVmMountDetailV1!
    vsphereVMRecoverFiles(
        "vm restore parameters"
        restoreConfig: RestoreConfig!,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereVMRecoverFilesNew(
        clusterUuid: UUID!,
        "Configuration for the restore request."
        config: RestoreFilesJobConfigInput!,
        "ID of a snapshot."
        id: String!
    ): AsyncRequestStatus!
    vsphereVMRegisterAgent(snappableFid: UUID!): RequestSuccess!
    vsphereVMUpdate(
        isArrayIntegrationEnabled: Boolean,
        postBackupScript: PostBackupScriptInputType,
        postSnapScript: PostSnapScriptInputType,
        preBackupScript: PreBackupScriptInputType,
        snappableFid: UUID!,
        "The snapshot consistency mandate of the snappable."
        snapshotConsistencyMandate: String
    ): RequestSuccess!
    "Warm cache for search in cloud native snappables"
    warmCloudNativeIndexCache(
        "Snappable ID"
        snappableId: UUID!
    ): Boolean!
    warmSearchCache(snappableFid: UUID!): Boolean!
}

"""

Supported in v5.0+
"""
type NasBaseConfig {
    """

    Supported in v5.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v5.0+
    API endpoint to access NAS API 'FLASHBLADE'.
    """
    apiEndpoint: String
    """

    Supported in v5.0+
    Hostname or IP used in the NAS API calls.
    """
    apiHostname: String
    """

    Supported in v5.0+
    v5.0-v5.3: username to access NAS API
    v6.0: Username to access NAS API.
    """
    apiUsername: String
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isIsilonChangelistEnabled: Boolean
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isNetAppSnapDiffEnabled: Boolean
    """

    Supported in v5.3+
    Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
    """
    isShareAutoDiscoveryEnabled: Boolean
    """

    Supported in v5.1
    If snapdiff is enabled on NetApp NAS host
    """
    isSnapdiffEnabled: Boolean
    """

    Supported in v5.0+
    Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'.
    """
    vendorType: String!
    """

    Supported in v5.0+
    Name of the Isilon zone that data IP belongs to.
    """
    zoneName: String
}

"Represents a GCP native network host project"
type NetworkHostProject {
    name: String!
    nativeId: String!
    projectId: String!
}

"List of status for each node"
type NodeStatus {
    brikId: String!
    id: String!
    ipAddress: String
    status: String!
    supportTunnel: SupportTunnelInfoResp
}

"Response type for getting information on every node in a cluster"
type NodeStatusListResp {
    data: [NodeStatus!]!
    hasMore: Boolean
    id: String!
    total: Long
}

type NutanixCluster implements CdmHierarchyObject & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NutanixClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NutanixClusterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type NutanixClusterConnection {
    count: Int!
    edges: [NutanixClusterEdge!]!
    nodes: [NutanixCluster!]!
    pageInfo: PageInfo!
}

type NutanixClusterDescendantTypeConnection {
    count: Int!
    edges: [NutanixClusterDescendantTypeEdge!]!
    nodes: [NutanixClusterDescendantType!]!
    pageInfo: PageInfo!
}

type NutanixClusterDescendantTypeEdge {
    cursor: String!
    node: NutanixClusterDescendantType!
}

type NutanixClusterEdge {
    cursor: String!
    node: NutanixCluster!
}

type NutanixClusterLogicalChildTypeConnection {
    count: Int!
    edges: [NutanixClusterLogicalChildTypeEdge!]!
    nodes: [NutanixClusterLogicalChildType!]!
    pageInfo: PageInfo!
}

type NutanixClusterLogicalChildTypeEdge {
    cursor: String!
    node: NutanixClusterLogicalChildType!
}

type NutanixVm implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & NutanixClusterDescendantType & NutanixClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type NutanixVmConnection {
    count: Int!
    edges: [NutanixVmEdge!]!
    nodes: [NutanixVm!]!
    pageInfo: PageInfo!
}

type NutanixVmEdge {
    cursor: String!
    node: NutanixVm!
}

type O365App implements O365AppObject {
    addedAt: DateTime!
    appId: String!
    appOwner: String!
    appType: String!
    isAuthenticated: Boolean!
    subscription: String!
}

type O365AppConnection {
    count: Int!
    edges: [O365AppEdge!]!
    nodes: [O365App!]!
    pageInfo: PageInfo!
}

type O365AppEdge {
    cursor: String!
    node: O365App!
}

type O365Calendar implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

type O365CalendarEvent implements O365ExchangeObject {
    attendees: [String!]!
    endDateTime: DateTime
    eventType: CalendarEventTypeEnum!
    id: String!
    name: String
    organizer: String
    parentFolderId: String
    snapshotId: UUID
    startDateTime: DateTime
    versionStartSnapshotId: UUID
}

type O365CalendarFolder implements O365ExchangeObject {
    id: String!
    name: String
    parentFolderId: String
    snapshotId: UUID
}

type O365Email implements O365ExchangeObject {
    from: String
    id: String!
    parentFolderId: String
    receivedDateTime: DateTime
    sentDateTime: DateTime
    snapshotId: UUID
    snapshotNum: Int
    subject: String
    toRecipients: [String!]!
}

type O365ExchangeObjectConnection {
    count: Int!
    edges: [O365ExchangeObjectEdge!]!
    nodes: [O365ExchangeObject!]!
    pageInfo: PageInfo!
}

type O365ExchangeObjectEdge {
    cursor: String!
    node: O365ExchangeObject!
}

type O365Folder implements O365ExchangeObject {
    id: String!
    name: String
    parentFolderId: String
    snapshotId: UUID
    snapshotNum: Int
}

type O365Mailbox implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    userPrincipalName: String!
}

type O365MailboxConnection {
    count: Int!
    edges: [O365MailboxEdge!]!
    nodes: [O365Mailbox!]!
    pageInfo: PageInfo!
}

type O365MailboxEdge {
    cursor: String!
    node: O365Mailbox!
}

type O365Onedrive implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    totalStorageInBytes: Long!
    usedStorageInBytes: Long!
    userID: String!
    userName: String!
    userPrincipalName: String!
}

type O365OnedriveConnection {
    count: Int!
    edges: [O365OnedriveEdge!]!
    nodes: [O365Onedrive!]!
    pageInfo: PageInfo!
}

type O365OnedriveEdge {
    cursor: String!
    node: O365Onedrive!
}

type O365OnedriveFile implements O365OnedriveObject {
    channelFolderName: String
    channelId: String
    channelName: String
    createTime: DateTime
    fileType: String
    id: String!
    modifiedTime: DateTime
    name: String
    parentFolderId: String
    size: Long
    snapshotId: UUID
    snapshotNum: Int
    snapshotTime: DateTime
}

type O365OnedriveFolder implements O365OnedriveObject {
    channelFolderName: String
    channelId: String
    channelName: String
    createTime: DateTime
    id: String!
    itemCount: Int
    modifiedTime: DateTime
    name: String
    parentFolderId: String
    size: Long
    snapshotId: UUID
    snapshotNum: Int
    snapshotTime: DateTime
}

type O365OnedriveObjectConnection {
    count: Int!
    edges: [O365OnedriveObjectEdge!]!
    nodes: [O365OnedriveObject!]!
    pageInfo: PageInfo!
}

type O365OnedriveObjectEdge {
    cursor: String!
    node: O365OnedriveObject!
}

type O365Org implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "List of direct children of O365Org"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365UserConnection!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    exocomputeId: String!
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    past1DayMailboxComplianceCount: Int!
    past1DayMailboxOutOfComplianceCount: Int!
    past1DayOnedriveComplianceCount: Int!
    past1DayOnedriveOutOfComplianceCount: Int!
    past1DaySharepointComplianceCount: Int!
    past1DaySharepointOutOfComplianceCount: Int!
    past1DayTeamsComplianceCount: Int!
    past1DayTeamsOutOfComplianceCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "List of all descendants of O365Org"
    searchDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365OrgDescendantConnection!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: OrgStatusEnum!
    "Number of O365 Users with no SLA assigned"
    unprotectedUsersCount: Int!
}

type O365OrgConnection {
    count: Int!
    edges: [O365OrgEdge!]!
    nodes: [O365Org!]!
    pageInfo: PageInfo!
}

type O365OrgDescendantConnection {
    count: Int!
    edges: [O365OrgDescendantEdge!]!
    nodes: [O365OrgDescendant!]!
    pageInfo: PageInfo!
}

type O365OrgDescendantEdge {
    cursor: String!
    node: O365OrgDescendant!
}

type O365OrgEdge {
    cursor: String!
    node: O365Org!
}

type O365PhysicalDataSizeTimeStamp {
    physicalDataSizeInBytes: Long!
    timestamp: DateTime
}

"O365 SaaS setup kickoff response"
type O365SaaSSetupKickoffResp {
    appClientIdsPerType: [AppIDForType!]!
    csrfToken: String!
}

type O365ServiceAccountStatusResp {
    status: O365ServiceAccountStatusEnum!
    username: String!
}

"O365 setup kickoff response"
type O365SetupKickoffResp {
    appClientId: String!
    appClientIdsPerType: [AppIDForType!]!
    csrfToken: String!
}

type O365SharepointDrive implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    listNaturalId: String!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    objectId: String!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    title: String!
    totalStorageInBytes: Long!
    usedStorageInBytes: Long!
}

type O365SharepointDriveConnection {
    count: Int!
    edges: [O365SharepointDriveEdge!]!
    nodes: [O365SharepointDrive!]!
    pageInfo: PageInfo!
}

type O365SharepointDriveEdge {
    cursor: String!
    node: O365SharepointDrive!
}

type O365SharepointObjectConnection {
    count: Int!
    edges: [O365SharepointObjectEdge!]!
    nodes: [O365SharepointObject!]!
    pageInfo: PageInfo!
}

type O365SharepointObjectEdge {
    cursor: String!
    node: O365SharepointObject!
}

type O365Site implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hierarchyLevel: Int!
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    objectId: String!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    title: String!
    url: String!
}

type O365SiteConnection {
    count: Int!
    edges: [O365SiteEdge!]!
    nodes: [O365Site!]!
    pageInfo: PageInfo!
}

type O365SiteEdge {
    cursor: String!
    node: O365Site!
}

type O365TeamChildSnapshotIDs {
    mailboxSnapshotId: String
    spDriveSnapshotId: String
}

type O365Teams implements HierarchyObject & HierarchySnappable & O365OrgDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    membersCount: Int!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    orgID: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    teamName: String!
}

type O365TeamsChannel implements O365TeamsChannelObject {
    folderId: String
    folderName: String
    id: String
    name: String
}

type O365TeamsChannelConnection {
    count: Int!
    edges: [O365TeamsChannelEdge!]!
    nodes: [O365TeamsChannel!]!
    pageInfo: PageInfo!
}

type O365TeamsChannelEdge {
    cursor: String!
    node: O365TeamsChannel!
}

type O365TeamsChat implements O365TeamsMessageObject {
    from: String
    id: String
    sentDateTime: DateTime
    snapshotId: UUID
    snapshotNum: Int
    toRecipients: [String!]!
}

type O365TeamsConnection {
    count: Int!
    edges: [O365TeamsEdge!]!
    nodes: [O365Teams!]!
    pageInfo: PageInfo!
}

type O365TeamsConversation implements O365TeamsMessageObject {
    from: String
    id: String
    sentDateTime: DateTime
    snapshotId: UUID
    snapshotNum: Int
    toRecipients: [String!]!
}

type O365TeamsEdge {
    cursor: String!
    node: O365Teams!
}

type O365TeamsMessageObjectConnection {
    count: Int!
    edges: [O365TeamsMessageObjectEdge!]!
    nodes: [O365TeamsMessageObject!]!
    pageInfo: PageInfo!
}

type O365TeamsMessageObjectEdge {
    cursor: String!
    node: O365TeamsMessageObject!
}

type O365User implements HierarchyObject & O365OrgDescendant & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "List of direct children of O365User"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365UserDescendantConnection!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    emailAddress: String
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type O365UserConnection {
    count: Int!
    edges: [O365UserEdge!]!
    nodes: [O365User!]!
    pageInfo: PageInfo!
}

type O365UserDescendantConnection {
    count: Int!
    edges: [O365UserDescendantEdge!]!
    nodes: [O365UserDescendant!]!
    pageInfo: PageInfo!
}

type O365UserDescendantEdge {
    cursor: String!
    node: O365UserDescendant!
}

type O365UserEdge {
    cursor: String!
    node: O365User!
}

type ObjectIdsForHierarchyType {
    objectIds: [String!]!
    snappableType: SnappableLevelHierarchyTypeEnum!
}

type ObjectSpecificConfigs {
    awsRdsConfig: AwsRdsConfig
    sapHanaConfig: SapHanaConfig
    vmwareVmConfig: VmwareVmConfig
}

type ObjectStatus {
    id: String!
    latestSnapshotResult: SnapshotResult
    policyStatuses: [PolicyStatus!]!
}

type ObjectType {
    enumValue: ObjectTypeEnum!
}

"Create Kubernetes Cluster Response."
type OnboardingSetupReply {
    clusterId: String!
    yamlUrl: String!
}

type OpenSupportTunnelReply {
    currentPort: String!
    inactivityTimeout: String!
    isTunnelOpen: String!
    nodeId: String!
}

"An option group on AWS."
type OptionGroup {
    arn: String!
    engine: String!
    majorEngineVersion: String!
    name: String!
    vpcId: String!
}

type OracleDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & OracleHostDescendantType & OracleHostLogicalChildType & OracleRacDescendantType & OracleRacLogicalChildType & OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type OracleDatabaseConnection {
    count: Int!
    edges: [OracleDatabaseEdge!]!
    nodes: [OracleDatabase!]!
    pageInfo: PageInfo!
}

type OracleDatabaseEdge {
    cursor: String!
    node: OracleDatabase!
}

type OracleHost implements CdmHierarchyObject & HierarchyObject & OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleHostDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleHostLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type OracleHostDescendantTypeConnection {
    count: Int!
    edges: [OracleHostDescendantTypeEdge!]!
    nodes: [OracleHostDescendantType!]!
    pageInfo: PageInfo!
}

type OracleHostDescendantTypeEdge {
    cursor: String!
    node: OracleHostDescendantType!
}

type OracleHostLogicalChildTypeConnection {
    count: Int!
    edges: [OracleHostLogicalChildTypeEdge!]!
    nodes: [OracleHostLogicalChildType!]!
    pageInfo: PageInfo!
}

type OracleHostLogicalChildTypeEdge {
    cursor: String!
    node: OracleHostLogicalChildType!
}

type OracleRac implements CdmHierarchyObject & HierarchyObject & OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleRacDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleRacLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type OracleRacDescendantTypeConnection {
    count: Int!
    edges: [OracleRacDescendantTypeEdge!]!
    nodes: [OracleRacDescendantType!]!
    pageInfo: PageInfo!
}

type OracleRacDescendantTypeEdge {
    cursor: String!
    node: OracleRacDescendantType!
}

type OracleRacLogicalChildTypeConnection {
    count: Int!
    edges: [OracleRacLogicalChildTypeEdge!]!
    nodes: [OracleRacLogicalChildType!]!
    pageInfo: PageInfo!
}

type OracleRacLogicalChildTypeEdge {
    cursor: String!
    node: OracleRacLogicalChildType!
}

type OracleTopLevelDescendantTypeConnection {
    count: Int!
    edges: [OracleTopLevelDescendantTypeEdge!]!
    nodes: [OracleTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type OracleTopLevelDescendantTypeEdge {
    cursor: String!
    node: OracleTopLevelDescendantType!
}

type PageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type PathNode {
    fid: UUID!
    name: String!
    objectType: HierarchyObjectTypeEnum!
}

type PathSecInfo {
    owner: String!
    path: String!
    permissions: [SDDLPermission!]!
}

type PendingActionType {
    pendingActionGroupType: PendingActionGroupTypeEnum!
    pendingActionSubGroupType: PendingActionSubGroupTypeEnum!
    pendingActionSyncType: PendingActionSyncTypeEnum!
}

"Detailed information about objects passing through the Radar pipeline."
type PendingEvaluationResults {
    "Unique UUID of the cluster."
    clusterUuid: String!
    "Date that this object was created in Radar."
    createdAt: DateTime
    "Information about this object within the Radar pipeline."
    info: String!
    "Determines whether a result is still pending in the Radar pipeline."
    isCompleted: Boolean!
    "Internally used ID to manage permissions of this object."
    managedId: String!
    "Internally used ID to specify snappable."
    snappableId: String!
    "Snappable name."
    snappableName: String!
    "Type of snappable."
    snappableType: String!
    "Date that this snapshot was performed."
    snapshotDate: DateTime
    "Internally used ID to specify snapshot."
    snapshotId: String!
    "Date that this object was last updated in Radar."
    updatedAt: DateTime
}

"Count and detailed information about items pending in Radar pipeline."
type PendingEvaluationResultsReply {
    count: Long!
    pendingEvaluationResults: [PendingEvaluationResults!]!
}

type PendingSnapshotDeletion {
    snapshotFid: UUID!
    status: PendingActionStatusEnum!
}

type PendingSnapshotsOfObjectDeletion {
    objectFid: UUID!
    status: PendingActionStatusEnum!
}

type Permission {
    objectsForHierarchyTypes: [ObjectIdsForHierarchyType!]!
    operation: OperationEnum!
}

type PhysicalHost implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    connectionStatus: HostConnectionStatus
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PhysicalHostDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    ipAddresses: [String!]!
    isArchived: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    osName: String
    "The OS Type of this Physical Host"
    osType: GuestOsTypeEnum
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PhysicalHostPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type PhysicalHostConnection {
    count: Int!
    edges: [PhysicalHostEdge!]!
    nodes: [PhysicalHost!]!
    pageInfo: PageInfo!
}

type PhysicalHostDescendantTypeConnection {
    count: Int!
    edges: [PhysicalHostDescendantTypeEdge!]!
    nodes: [PhysicalHostDescendantType!]!
    pageInfo: PageInfo!
}

type PhysicalHostDescendantTypeEdge {
    cursor: String!
    node: PhysicalHostDescendantType!
}

type PhysicalHostEdge {
    cursor: String!
    node: PhysicalHost!
}

type PhysicalHostPhysicalChildTypeConnection {
    count: Int!
    edges: [PhysicalHostPhysicalChildTypeEdge!]!
    nodes: [PhysicalHostPhysicalChildType!]!
    pageInfo: PageInfo!
}

type PhysicalHostPhysicalChildTypeEdge {
    cursor: String!
    node: PhysicalHostPhysicalChildType!
}

type PolarisHierarchyObjectConnection {
    count: Int!
    edges: [PolarisHierarchyObjectEdge!]!
    nodes: [PolarisHierarchyObject!]!
    pageInfo: PageInfo!
}

type PolarisHierarchyObjectEdge {
    cursor: String!
    node: PolarisHierarchyObject!
}

type PolarisHierarchySnappableObject {
    id: String!
    name: String!
}

type PolarisInventorySubHierarchyRoot {
    "List of children"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)"
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
}

"Specific info for AWS Target created on Polaris"
type PolarisManagedAwsTarget implements Target {
    bucket: String!
    cloudAccount: CloudAccount!
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    "The cluster to which this target belongs"
    cluster: Cluster!
    computeSettings: AwsComputeSettings
    encryptionType: TargetEncryptionTypeEnum!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String!
    "The name of this Target"
    name: String!
    proxySettings: ProxySettings
    region: AwsRegionEnum!
    storageClass: AwsStorageClassTypeEnum!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Specific info for Azure Target created on Polaris"
type PolarisManagedAzureTarget implements Target {
    accessKey: String!
    cloudAccount: CloudAccount!
    "The cluster to which this target belongs"
    cluster: Cluster!
    computeSettings: AzureComputeSettings
    containerName: String!
    "The id of this Target"
    id: String!
    instanceType: InstanceTypeEnum!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    "The name of this Target"
    name: String!
    proxySettings: ProxySettings
    storageAccountName: String!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Specific info for Nfs Target created on Polaris"
type PolarisManagedNfsTarget implements Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    destinationFolder: String!
    exportDir: String!
    fileLockPeriodInSeconds: Int!
    host: String!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    "The name of this Target"
    name: String!
    nfsAuthType: AuthTypeEnum!
    nfsVersion: Int!
    otherNfsOptions: String!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"SLA Sync status for a given cluster"
type PolarisSLASyncStatus {
    SLASyncStatus: PolarisSLASyncStatusEnum!
    clusterUuid: String!
}

type PolarisSnapshot implements GenericSnapshot {
    consistencyLevel: SnapshotConsistencyLevelEnum!
    date: DateTime!
    expirationDate: DateTime
    expiryHint: Boolean!
    "Whether or not the snapshot has an unexpired archived copy"
    hasUnexpiredArchivedCopy: Boolean!
    "Whether or not the snapshot has an unexpired replica"
    hasUnexpiredReplica: Boolean!
    id: UUID!
    indexTime: DateTime
    indexingAttempts: Long!
    isArchived: Boolean!
    isCorrupted: Boolean!
    isDeletedFromSource: Boolean!
    isDownloadedSnapshot: Boolean
    "Whether or not the snapshot is expired"
    isExpired: Boolean!
    "Whether or not the snapshot is indexed."
    isIndexed: Boolean!
    isOnDemandSnapshot: Boolean!
    isReplicated: Boolean!
    isUnindexable: Boolean!
    parentSnapshotId: String
    replicationLocations: [DataLocation!]
    sequenceNumber: Int!
    slaDomain: SlaDomain
    snappableId: String!
    unexpiredArchivedSnapshotCount: Int!
    unexpiredReplicaCount: Int!
}

type PolarisSnapshotConnection {
    count: Int!
    edges: [PolarisSnapshotEdge!]!
    nodes: [PolarisSnapshot!]!
    pageInfo: PageInfo!
}

type PolarisSnapshotEdge {
    cursor: String!
    node: PolarisSnapshot!
}

"Polaris Snapshot data with groupby info applied to it."
type PolarisSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: PolarisSnapshotGroupByInfo!
    "Paginated snapshot data."
    polarisSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection!
    "Further provide groupings for the data."
    polarisSnapshotGroupBy(
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!
    ): [PolarisSnapshotGroupBy!]!
}

type PolarisSnapshotGroupByConnection {
    count: Int!
    edges: [PolarisSnapshotGroupByEdge!]!
    nodes: [PolarisSnapshotGroupBy!]!
    pageInfo: PageInfo!
}

type PolarisSnapshotGroupByEdge {
    cursor: String!
    node: PolarisSnapshotGroupBy!
}

"Polaris Snapshot data with groupby info applied to it."
type PolarisSnapshotGroupByNew {
    "The data groupby info."
    groupByInfo: PolarisSnapshotGroupByInfo!
    "Paginated snapshot data."
    polarisSnapshotConnection: PolarisSnapshotConnection!
}

type PolarisSnapshotGroupByNewConnection {
    count: Int!
    edges: [PolarisSnapshotGroupByNewEdge!]!
    nodes: [PolarisSnapshotGroupByNew!]!
    pageInfo: PageInfo!
}

type PolarisSnapshotGroupByNewEdge {
    cursor: String!
    node: PolarisSnapshotGroupByNew!
}

"Status of various CDM-to-Polaris data syncing jobs."
type PolarisSyncStatus {
    "Last success time of the cluster syncing job."
    clusterSyncLastSuccessTime: DateTime
    "Last success time of the events syncing job."
    eventsSyncLastSuccessTime: DateTime
    "Last success time of the job-monitoring dashboard syncing job."
    jobMonitoringSyncLastSuccessTime: DateTime
    "Last success time of the object metadata syncing job."
    objectMetadataSyncLastSuccessTime: DateTime
    "Last success time of the reports syncing job."
    reportsSyncLastSuccessTime: DateTime
}

type PolicyObj {
    allAnalyzerMappings(stdPath: String!): [AnalyzerMapping!]!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListFileResultFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        timezone: String!
    ): FileResultConnection!
    folderChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrowseDirectoryFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        stdPath: String!,
        timezone: String!
    ): FileResultConnection!
    id: String!
    objectStatus: ObjectStatus!
    osType: DataGovOsTypeEnum!
    policySummaries: [ClassificationPolicySummary!]!
    rootFileResult: FileResult!
    shareType: DataGovShareTypeEnum!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTimestamp: Long!
    timeContext: String!
    whitelistedAnalyzerList(stdPath: String!): [WhitelistedAnalyzer!]!
}

type PolicyObjConnection {
    count: Int!
    edges: [PolicyObjEdge!]!
    nodes: [PolicyObj!]!
    pageInfo: PageInfo!
}

type PolicyObjEdge {
    cursor: String!
    node: PolicyObj!
}

type PolicyObjectUsage {
    hierarchyObject: HierarchyObject!
    policies: [ClassificationPolicySummary!]!
}

type PolicyObjectUsageConnection {
    count: Int!
    edges: [PolicyObjectUsageEdge!]!
    nodes: [PolicyObjectUsage!]!
    pageInfo: PageInfo!
}

type PolicyObjectUsageEdge {
    cursor: String!
    node: PolicyObjectUsage!
}

type PolicyStatus {
    policyId: String!
    status: ObjectPolicyStatus!
}

"Describes a script that is run before / after snapshot or backup"
type PrePostScript {
    failureHandling: PrePostScriptFailureHandlingEnum!
    scriptPath: String!
    timeoutMs: Int!
}

type PrecheckFailure {
    cause: String!
    precheckName: String!
    remedy: String!
    upgradeBlocker: Boolean!
}

type PrecheckStatusNextRunInfo {
    jobInstanceId: String!
    startTime: Long!
    status: String!
}

type PrechecksJobReply {
    jobId: String!
}

type PrechecksStatusReply {
    endTime: Long!
    failureResults: [PrecheckFailure!]!
    nextRunInfo: PrecheckStatusNextRunInfo
    numPrechecks: Int!
    runPeriodInMinutes: Int!
}

"Initiate and prepare deletion of aws cloud account."
type PrepareAwsCloudAccountDeletionReply {
    "CloudFormation URL to delete the stack."
    cloudFormationUrl: String!
    "List of feature versions."
    featureRegionMap: [AwsCloudAccountFeatureVersion!]!
}

type PreviewerClusterConfig {
    clusterId: String!
    enabled: Boolean!
}

"Ldap Principal"
type Principal {
    authDomainId: String!
    description: String
    email: String
    id: String!
    name: String!
    principalType: PrincipalTypeEnum!
}

type PrincipalConnection {
    count: Int!
    edges: [PrincipalEdge!]!
    nodes: [Principal!]!
    pageInfo: PageInfo!
}

type PrincipalEdge {
    cursor: String!
    node: Principal!
}

"Count of processed Radar snappables"
type ProcessedRadarSnappableCountReply {
    count: Long!
}

"Metadata for rendering protected objects."
type ProtectedObjects implements ProtectedObjectSummary {
    effectiveSlaOpt: String
    id: String!
    isArchived: Boolean!
    name: String!
    objectType: ManagedObjectType
}

type ProtectedObjectsConnection {
    count: Int!
    edges: [ProtectedObjectsEdge!]!
    nodes: [ProtectedObjects!]!
    pageInfo: PageInfo!
}

type ProtectedObjectsEdge {
    cursor: String!
    node: ProtectedObjects!
}

"Count and snappable type representing protected Radar snappables"
type ProtectedRadarSnappable {
    count: Long!
    snappableType: String!
}

"Count of protected Radar snappables"
type ProtectedRadarSnappableCountReply {
    snappableCounts: [ProtectedRadarSnappable!]!
}

type ProtectionStatus {
    enumValue: ProtectionStatusEnum!
}

type ProtectionTaskDetailsTableFilter {
    cluster_location: [FilterOption!]!
    cluster_type: [FilterOption!]!
    object_type: [FilterOption!]!
    replication_source: [FilterOption!]!
    status: [FilterOption!]!
    task_category: [FilterOption!]!
    task_type: [FilterOption!]!
}

"Proxy Settings for Target"
type ProxySettings {
    portNumber: Int!
    protocol: String!
    proxyServer: String!
    username: String!
}

type QuarterlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfQuarter: DayOfQuarterEnum!
    quarterStartMonth: MonthEnum!
}

type Query {
    AwsCloudAccountListKMSKeys(
        "The id of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!
    ): AwsCloudAccountListKMSKeysResponse!
    AwsCloudAccountListSecurityGroups(
        "The id of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!,
        "vpc native id"
        vpcID: String!
    ): AwsCloudAccountListSecurityGroupsResponse!
    AwsCloudAccountListSubnets(
        "The id of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!,
        "vpc native id"
        vpcID: String!
    ): AwsCloudAccountListSubnetsResponse!
    AwsCloudAccountListVpcs(
        "The id of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!
    ): AwsCloudAccountListVpcResponse!
    "Gets the account owner."
    accountOwner: User!
    "This endpoint is deprecated."
    accountSettings: AccountSetting!
    activeCustomAnalyzerConnection: AnalyzerConnection!
    activitySeries(
        "The id of the activity series"
        activitySeriesId: UUID!,
        "The uuid of the cluster"
        clusterUuid: UUID
    ): ActivitySeries!
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort activity series by field"
        sortBy: ActivitySeriesSortByEnum = LastUpdated,
        "activity sort order"
        sortOrder: SortOrderEnum = Desc
    ): ActivitySeriesConnection!
    activitySeriesGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group activity series by a field"
        groupBy: ActivitySeriesGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): ActivitySeriesGroupByConnection!
    "Return AD objects"
    adObjectsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        commonNames: [String!],
        "Returns the first n elements from the list."
        first: Int,
        objectCategories: [String!],
        objectSids: [String!]
    ): ADObjectConnection!
    "List of availability zones in the specified region on the specified AWS account."
    allAvailabilityZonesByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [String!]!
    "List of all AWS cloud account configurations with the given search query."
    allAwsCloudAccountConfigs(
        "Arguments for get cloud accounts."
        awsCloudAccountsArg: AwsCloudAccountsInput!
    ): [AwsFeatureConfig!]!
    "List all active AWS cloud accounts."
    allAwsCloudAccounts(
        "Arguments for get cloud accounts."
        awsCloudAccountsArg: AwsCloudAccountsInput!
    ): [AwsCloudAccountSelectorType!]!
    "List of AWS Exocompute configurations filtered on cloud account ID or name prefix."
    allAwsExocomputeConfigs(
        "Search query provided by user on exocompute list page. It will search for exocompute configurations whose account name or account native ID is prefixed by search query."
        awsNativeAccountIdOrNamePrefix: String!
    ): [AwsExocomputeConfig!]!
    "Get CDM versions a ServicePrincipal in Azure."
    allAzureCdmVersions(
        "CDM version request params for Azure."
        cdmVersionRequest: cdmVersionRequest!
    ): [String!]!
    "Get all available Nsgs for Azure."
    allAzureNsgs(
        "Nsg request params for Azure."
        nsgRequest: nsgRequest!
    ): [String!]!
    "Get all available locations for Azure."
    allAzureRegions(
        "Authorization for an Azure account."
        servicePrincipal: servicePrincipal!
    ): [String!]!
    "Get resource groups for a service principal in Azure."
    allAzureResourceGroups(
        "Authorization for an Azure account."
        servicePrincipal: servicePrincipal!
    ): [String!]!
    "Get subnets for a given account in Azure."
    allAzureSubnets(
        "Subnet request params for Azure."
        subnetRequest: subnetRequest!
    ): [String!]!
    "Get vnets for a given account in Azure."
    allAzureVnets(
        "Vnet request params for Azure."
        vnetRequest: vnetRequest!
    ): [String!]!
    allClusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Global SLAs used by a cluster."
    allClusterGlobalSlas(
        "CDM Cluster UUID"
        cdmClusterUUID: String!
    ): [SlaInfo!]!
    "All replication targets for a cluster."
    allClusterReplicationTargets(
        "UUID of the cluster."
        clusterUuid: UUID!
    ): [ClusterReplicationTarget!]!
    "All DB parameter groups in given region."
    allDbParameterGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        dbEngine: AwsNativeRdsDbEngineEnum!,
        dbEngineVersion: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [DbParameterGroup!]!
    "All db subnet groups in given region."
    allDbSubnetGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [SubnetGroup!]!
    "List of key pairs for a given region."
    allEc2KeyPairsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [String!]!
    "List user activity for a specific file on a specific snapshot."
    allFileActivities(
        "Sorts to apply when listing a file's user activities."
        FileActivitiesSort: FileActivitiesSort!,
        "Request for getting user activity for a specific path on a specific snapshot."
        ListFileActivitiesInput: ListFileActivitiesInput!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): UserActivityResultConnection!
    allHostedAzureRegions: AzureRegionsResp!
    "List of encryption keys in the specified region on the specified AWS account."
    allKmsEncryptionKeysByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [KMSEncryptionKeyType!]!
    "All option groups in given region."
    allOptionGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        dbEngine: AwsNativeRdsDbEngineEnum!,
        dbEngineVersion: String!,
        majorEngineVersion: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [OptionGroup!]!
    allReportConfigs(dataView: DataViewTypeEnum): [ReportConfig!]!
    "List of all S3 buckets across regions for the AWS account."
    allS3BucketsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!
    ): [String!]!
    allUsersOnAccountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        emailFilter: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        roleIdsFilter: [UUID!],
        sortBy: UserFieldEnum = Email,
        "sort order"
        sortOrder: SortOrderEnum
    ): UserConnection!
    "List of all Virtual Private Clouds (VPCs) in the AWS account by region."
    allVpcsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [AwsVpc!]!
    "List of Virtual Private Clouds (VPCs) in the AWS account."
    allVpcsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID
    ): [AwsVpc!]!
    analyzerGroupConnection: AnalyzerGroupConnection!
    "Returns which policies are using each analyzer"
    analyzerUsageConnection: AnalyzerUsageConnection!
    anomalyResult(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): AnomalyResult!
    anomalyResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter anomaly results by input"
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort anomaly results by field"
        sortBy: AnomalyResultSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum,
        timezoneOffset: Float = 0.0
    ): AnomalyResultConnection!
    anomalyResultGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter anomaly results by input"
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group anomaly results by field"
        groupBy: AnomalyResultGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): AnomalyResultGroupByConnection!
    anomalyResultOpt(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): AnomalyResult
    appBlueprintOngoingFailoverTaskchainUuids(fids: [UUID!]!): GetAppBlueprintOngoingFailoverTaskchainUuidsRsp!
    appBlueprintSnapshotImageInfos(appSnapshotFids: [UUID!]!): GetAppBlueprintSnapshotCloudImagesRsp!
    appflowsSummary: AppflowsSummary!
    "Get AWS cloud account by ID."
    awsCloudAccountSelector(
        "Arguments for get cloud account."
        awsCloudAccountArg: AwsCloudAccountSelectorInput!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!
    ): AwsCloudAccountSelectorType!
    awsComputeSettings(
        "Corresponds to Compute Setting Id in Polaris tables"
        computeSettingId: UUID!
    ): AwsComputeSettings!
    awsComputeSettingsList(
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of compute settings"
        filter: [AwsCloudComputeSettingFilterInput!],
        "Specification on how to sort a list of compute settings"
        sortBy: AwsCloudComputeSettingSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [AwsComputeSettings!]!
    "AWS Native account."
    awsNativeAccount(
        "The Rubrik ID for the AWS Native account."
        awsNativeAccountRubrikId: UUID!,
        "Cloud native protection feature."
        awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum!
    ): AwsNativeAccount!
    "Paginated list of all AWS native accounts."
    awsNativeAccounts(
        accountFilters: AwsNativeAccountFilters,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        authorizedOperationFilter: OperationEnum,
        "Cloud native protection feature."
        awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum!,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS accounts."
        sortBy: AwsNativeAccountSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeAccountConnection!
    "AWS EBS Volume by ID."
    awsNativeEbsVolume(
        "Rubrik ID for the AWS EBS Volume object."
        ebsVolumeRubrikId: UUID!
    ): AwsNativeEbsVolume!
    "Paginated list of all AWS EBS Volumes"
    awsNativeEbsVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ebsVolumeFilters: AwsNativeEbsVolumeFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEbsVolumeConnection!
    "Paginated list of all AWS EBS Volumes by name or substring of name."
    awsNativeEbsVolumesByName(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "The native name for the AWS EBS Volume object."
        ebsVolumeName: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEbsVolumeConnection!
    "AWS EC2 Instance by ID."
    awsNativeEc2Instance(
        "Rubrik ID for the AWS EC2 Instance."
        ec2InstanceRubrikId: UUID!
    ): AwsNativeEc2Instance!
    "Paginated list of all AWS EC2 Instances"
    awsNativeEc2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ec2InstanceFilters: AwsNativeEc2InstanceFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEc2InstanceConnection!
    "Paginated list of all AWS EC2 Instances by name or substring of name."
    awsNativeEc2InstancesByName(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Native name for the AWS EC2 Instance object."
        ec2InstanceName: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEc2InstanceConnection!
    "Default values for the export operation of the RDS DB instance in the AWS account."
    awsNativeRdsExportDefaults(
        "Whether the export of the instance is manual or point-in-time."
        isPointInTime: Boolean!,
        "The Rubrik ID for the AWS RDS Instance object."
        rdsInstanceRubrikId: UUID!,
        "UUID of the snapshot if the export is manual."
        snapshotId: String
    ): RdsInstanceExportDefaults!
    "AWS RDS Instance object, selected using its Rubrik ID."
    awsNativeRdsInstance(
        "The Rubrik ID for the AWS RDS Instance object."
        rdsInstanceRubrikId: UUID!
    ): AwsNativeRdsInstance!
    "Paginated list of AWS RDS Instance objects."
    awsNativeRdsInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        rdsInstanceFilters: AwsNativeRdsInstanceFilters,
        "Sort fields for list of AWS RDS instances."
        sortBy: AwsNativeRdsInstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeRdsInstanceConnection!
    "Point-in-Time (PiT) restore window of the RDS instance in the AWS account."
    awsNativeRdsPointInTimeRestoreWindow(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): AwsNativeRdsPointInTimeRestoreWindow!
    "Check the permissions on Azure subscriptions and pass the missing permissions."
    azureCheckPermissionsOnSubscription(
        "The cloud account action"
        cloudAccountAction: CloudAccountActionEnum!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of subscription Ids."
        subscriptionIds: [UUID!]!
    ): [AzureCheckPermissionsOnSubscriptionResponse!]!
    "List permissions and version required to enable the given feature for Azure subscription."
    azureCloudAccountPermissionConfig(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!
    ): AzureCloudAccountPermissionConfigResponse!
    "Get the details of the Azure tenant and all subscriptions in it configured for a feature"
    azureCloudAccountTenant(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Search text for subscription name and native id."
        subscriptionSearchText: String!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatusEnum!]!,
        "Tenant ID of the Azure tenant."
        tenantId: UUID!
    ): AzureCloudAccountTenant!
    "List all the tenant domain names of all the tenantswhich are ever configured for any feature."
    azureCloudAccountTenantDomainNames: [String!]!
    "List all the Azure tenants and the subscriptions in them configured for a feature filtered based on feature status, subscription native id and name."
    azureCloudAccountTenants(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Should the details of subscriptions in the tenants be included in response."
        includeSubscriptionDetails: Boolean!
    ): [AzureCloudAccountTenant!]!
    "List Azure Exocompute configurations with given search query."
    azureExocomputeConfigs(
        "Search query provided by user on exocompute list page. It will search for exocompute configs whose account name or account native ID is prefixed by search query."
        AzureExocomputeSearchQueryArg: String!,
        "List cloud account IDs"
        cloudAccountIDs: [UUID!]
    ): AzureExocomputeConfigsResponse!
    "Lists availability sets in the specified region, resource group and subscription."
    azureNativeAvailabilitySets(
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Resource Group Name"
        resourceGroupName: String!,
        "Subscription ID"
        subscriptionId: UUID!
    ): [AzureNativeAvailabilitySet!]!
    "Lists supported disk types when exporting a particular snapshot."
    azureNativeExportCompatibleDiskTypes(
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Subscription ID"
        subscriptionId: UUID!
    ): [AzureNativeDiskTypesForAvailabilityZone!]!
    "Lists supported VM sizes when exporting a particular snapshot."
    azureNativeExportCompatibleVMSizes(
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Subscription ID"
        subscriptionId: UUID!,
        "Snapshot ID"
        vmSnapshotId: UUID!
    ): [AzureNativeVMSizesForAvailabilityZone!]!
    "Get details of an Azure Managed Disk"
    azureNativeManagedDisk(
        "The Polaris UUID for the object."
        fid: UUID!
    ): AzureNativeManagedDisk!
    "Get list of Azure Managed Disks"
    azureNativeManagedDiskConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        diskFilters: AzureNativeDiskFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure disks."
        sortBy: AzureNativeDiskSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AzureNativeManagedDiskConnection!
    "Get details of an Azure Resource Group"
    azureNativeResourceGroup(
        "VM Resource group ID or Disk resource group ID"
        resourceGroupId: UUID!
    ): AzureNativeResourceGroup!
    "Lists Azure resource groups"
    azureNativeResourceGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for listing Azure resource groups"
        commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for listing Azure resource groups."
        sortBy: AzureNativeCommonResourceGroupSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AzureNativeResourceGroupConnection!
    "Lists security groups in the specified regionand subscription."
    azureNativeSecurityGroups(
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Subscription ID"
        subscriptionId: UUID!
    ): [AzureNativeSecurityGroup!]!
    "Lists all VM sizes in the protected subscriptions."
    azureNativeStoredVmSizes(
        "Subscription ID"
        subscriptionId: UUID
    ): [String!]!
    "Lists all virtual networks in the protected subscriptions."
    azureNativeStoredVnets(
        "Subscription ID"
        subscriptionId: UUID
    ): [AzureNativeVnet!]!
    "Lists subnets in the specified region andsubscription."
    azureNativeSubnets(
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Subscription ID"
        subscriptionId: UUID!
    ): [AzureNativeSubnet!]!
    "Get details of an Azure Subscription"
    azureNativeSubscription(
        "The Polaris UUID for the object."
        fid: UUID!
    ): AzureNativeSubscription!
    "Get list of Azure subscriptions"
    azureNativeSubscriptionConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters according to the operation given."
        authorizedOperationFilter: OperationEnum,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure subscriptions."
        sortBy: AzureNativeSubscriptionSortFieldsEnum,
        sortOrder: HierarchySortOrder,
        subscriptionFilters: AzureNativeSubscriptionFilters
    ): AzureNativeSubscriptionConnection!
    "Get details of an Azure Virtual Machine"
    azureNativeVirtualMachine(
        "The Polaris UUID for the object."
        fid: UUID!
    ): AzureNativeVirtualMachine!
    "Get list of Azure Virtual Machines"
    azureNativeVirtualMachineConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure virtual machines."
        sortBy: AzureNativeVirtualMachineSortFieldsEnum,
        sortOrder: HierarchySortOrder,
        virtualMachineFilters: AzureNativeVirtualMachineFilters
    ): AzureNativeVirtualMachineConnection!
    azureO365CheckNSGOutboundRules(resourceGroupName: String!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSecurityGroupResp!
    azureO365CheckNetworkSubnet(resourceGroupName: String!, strict_addr_check: Boolean!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSubnetResp!
    azureO365CheckResourceGroupName(groupName: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckStorageAccountAccessibility(groupName: String!, storage_account_name: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckStorageAccountName(storage_account_name: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckSubscriptionQuota(regionName: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckVirtualNetworkName(groupName: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureResourceAvailabilityResp!
    azureO365Exocompute(exocomputeClusterId: String!, orgId: UUID!): GetAzureO365ExocomputeResp!
    azureO365GetAzureHostType: GetAzureHostTypeResp!
    azureO365GetNetworkSubnetUnusedAddr(resourceGroupName: String!, strict_addr_check: Boolean!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSubnetUnusedAddrResp!
    azureO365ValidateUserRoles(subscriptionId: UUID!, tenantId: String!): AzureUserRoleResp!
    azureRegions(subscriptionId: UUID!, tenantId: String!): RegionConnection!
    azureResourceGroups(subscriptionId: UUID!, tenantId: String!): ResourceGroupConnection!
    azureStorageAccounts(regionName: String!, subscriptionId: UUID!, tenantId: String!): StorageAccountConnection!
    azureSubnets(subscriptionId: UUID!, tenantId: String!, vNetId: String!): SubnetConnection!
    azureSubscriptions(tenantId: String!): AzureSubscriptionConnection!
    azureVNets(regionName: String!, subscriptionId: UUID!, tenantId: String!): VNetConnection!
    blueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Blueprint!
    blueprintConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): BlueprintConnection!
    blueprintNew(
        "The Polaris UUID for the object."
        fid: UUID!
    ): BlueprintNew!
    blueprintNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): BlueprintNewConnection!
    "list the recovery specs associated with the given blueprint"
    blueprintRecoverySpecs(
        "the id of the blueprint"
        blueprintId: UUID!,
        "ignore invalid recovery specs or raise an error"
        ignoreErrors: Boolean,
        "validate the recovery specs if true"
        validate: Boolean
    ): BlueprintRecoverySpecs!
    "describes the Blueprint resource specs"
    blueprintResourceSpec(
        "the id of the blueprint"
        blueprintId: UUID!
    ): [ResourceSpec!]!
    browseCalendar(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "List all files and directories in a given pathwith the given prefix in name"
    browseCloudNativeSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run"
        path: String!,
        "Name prefix for searching for files within a snapshot"
        searchPrefix: String,
        "Id of the snapshot to be searched/browsed"
        snapshotFid: UUID!
    ): SnapshotFileConnection!
    "Browse diff fmd under given path"
    browseDiffFmd(
        "root path to browse changes of fmd"
        browseDiffPath: String!,
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): DiffFMDReply!
    browseFilesetSnapshot(
        "ID of snapshot."
        id: String!,
        "Maximum number of entries in the response."
        limit: Int,
        "Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries."
        offset: Int,
        "The absolute path of the starting point for the directory listing."
        path: String!
    ): BrowseResponseListResponse!
    browseFolder(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    browseOnedrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        onedriveSearchFilter: OnedriveSearchFilter,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    browseSharepointDrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Returns a list files whose name is prefixed by the query in the given snapshot"
    browseSnapshotFileConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run"
        path: String!,
        "Prefix arg for searching for files within a snapshot"
        searchPrefix: String,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): SnapshotFileConnection!
    browseTeamsChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365TeamsChannelConnection!
    browseTeamsDrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!,
        teamsDriveSearchFilter: OnedriveSearchFilter
    ): O365OnedriveObjectConnection!
    cdmHierarchySnappableNew(snappableFid: UUID!): CdmHierarchySnappableNew!
    cdmHierarchySnappablesNew(fids: [UUID!]!): [CdmHierarchySnappableNew!]!
    cdmInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): CdmInventorySubHierarchyRoot!
    "Browse Certificates"
    certificateConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Search for a Certificate"
        searchTerm: String,
        "Sort"
        sortBy: CertMgmtSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): CertificateConnection!
    "Check if label rule name is unique or not"
    checkCloudNativeLabelRuleNameUniqueness(
        "Type of managed object on which label rule will be applied"
        objectType: CloudNativeLabelObjectType!,
        "Name for the rule"
        ruleName: String!
    ): IsCloudNativeTagRuleNameUniqueReply!
    "Check if tag rule name is unique or not"
    checkCloudNativeTagRuleNameUniqueness(
        "Type of managed object on which tag rule will be applied"
        objectType: CloudNativeTagObjectType!,
        "Name for the rule"
        ruleName: String!
    ): IsCloudNativeTagRuleNameUniqueReply!
    "check the child vm guestOS for given app blueprint"
    checkGuestOsForAppBlueprint(
        "the id of the blueprint"
        blueprintId: UUID!
    ): CheckGuestOsReply!
    cloudAccount(
        "Corresponds to Cloud Account Id in Polaris tables"
        cloudAccountId: UUID!
    ): CloudAccount!
    cloudAccountList(
        "Filters and shows cloud accounts for a specific use-cases or features. Default value: [ARCHIVAL]"
        features: [CloudAccountFeatureEnum!],
        filter: [CloudAccountFilterInput!],
        sortBy: CloudAccountSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [CloudAccount!]!
    "Queries whether Polaris has the required permissions for a particular feature."
    cloudNativeCheckRequiredPermissionsForFeature(
        "Cloud native account ID"
        cloudNativeAccountId: String!,
        "Feature for which required permissions have to be checked."
        featurePermissionCheck: CloudNativeFeatureForPermissionsCheck!
    ): Boolean!
    "Fetches the URLs for the windows, linux and debian RBA installers"
    cloudNativeGetRBAInstallers: CreateRBAInstallerReply!
    "Returns a list of cloud native label keys matched by substring"
    cloudNativeLabelKeys(
        "key substring for which you want to search keys"
        keySubStr: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which label rule will be applied"
        objectType: CloudNativeLabelObjectType!
    ): [String!]!
    "Returns a list of cloud native label values matched by substring"
    cloudNativeLabelValues(
        "key value used only when searching for values"
        key: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which label rule will be applied"
        objectType: CloudNativeLabelObjectType!,
        "value substring for which you want to search values"
        valueSubStr: String!
    ): [String!]!
    "Returns a list of cloud native tag keys matched by substring"
    cloudNativeTagKeys(
        "key substring for which you want to search keys"
        keySubStr: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which tag rule will be applied"
        objectType: CloudNativeTagObjectType!
    ): [String!]!
    "Returns a list of cloud native tag values matched by substring"
    cloudNativeTagValues(
        "key value used only when searching for values"
        key: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which tag rule will be applied"
        objectType: CloudNativeTagObjectType!,
        "value substring for which you want to search values"
        valueSubStr: String!
    ): [String!]!
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    clusterGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: ClusterGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): ClusterGroupByConnection!
    clusterGroupByUpgradeInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: UpgradeInfoGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0,
        upgradeFilter: CdmUpgradeInfoFilterInput
    ): UpgradeInfoGroupByConnection!
    clusterSlaDomainConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterSlaDomainConnection!
    clusterSlaDomainFilterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterSlaDomainForFilterConnection!
    clusterTypeList: [GroupCount!]!
    clusterWithUpgradesInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort upgradeInfo by field"
        sortBy: UpgradeInfoSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc,
        upgradeFilter: CdmUpgradeInfoFilterInput
    ): ClusterConnection!
    connectedClusterList(
        "Specification to filter cluster based on type"
        clusterFilterArg: ClusterTypeEnum
    ): [DataLocationSupportedCluster!]!
    countOfObjectsProtectedBySlas(
        filter: [Filter!],
        "Corresponds to optional object root forever UUID, none value is assumed to be the global hierarchy root"
        rootOptionalFid: UUID,
        "Provide list of Global SLA ids"
        slaIds: [UUID!]!,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CountOfObjectsProtectedBySLAsResult!
    "Return details for one crawl"
    crawl(crawlId: String!): Crawl!
    "Return crawls for an account"
    crawlConnection: CrawlConnection!
    "Browse CSRs"
    csrConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Search for a CSR"
        searchTerm: String,
        "Sort"
        sortBy: CertMgmtSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): CsrConnection!
    currentIpAddress: String!
    currentUser: User!
    customAnalyzer(analyzerId: String!): Analyzer!
    "Return hits grouped by analyzer and policy"
    dashboardSummary(getWhitelistedResults: Boolean!): GetDashboardSummaryReply!
    dataViewMetadata: [dataViewMetadata!]!
    "Return permissions associated with a path"
    datagovSecDesc(
        "Skip converting SIDs in response to friendly names"
        skipResolveSids: Boolean,
        snappableFid: String!,
        snapshotFid: String!,
        stdPath: String!
    ): QuerySDDLReply!
    "Polaris deployment version."
    deploymentVersion: String!
    "Return timeline data for all policies of an account"
    discoveryTimeline(endDay: String!, getWhitelistedResults: Boolean!, startDay: String!, timezone: String!): GetPoliciesTimelineReply!
    downloadActiveSlaWithReplicationCsv(
        "CDM Cluster UUID"
        cdmClusterUUID: String!,
        "Include Archived SLA"
        includeArchived: Boolean!
    ): DownloadActiveSlaWithReplicationCsvReply!
    "Download cdm upgrades table pdf"
    downloadCdmUpgradesPdf(
        "Filters for cdm upgrades page for pdf generation"
        downloadFilter: DownloadCdmUpgradesPdfFiltersInput
    ): DownloadCdmUpgradesPdfReply!
    "Get Status of download package job"
    downloadPackageStatus(
        "Cluster uuid"
        clusterUuid: UUID!
    ): DownloadPackageStatusReply!
    downloadReportLink(config: CustomReportCreate, id: Int!): DownloadLink!
    downloadReportPDFLink(config: CustomReportCreate, id: Int!): DownloadLink!
    downloadedVersionList: [GroupCount!]!
    dummyFieldWithAdminOnlyTag: Boolean!
    ec2Blueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Ec2Blueprint!
    eventDigest(recipientUserIDs: [String!]!): [EventDigest!]!
    "failover"
    failover(
        "failover ID"
        failoverId: String!
    ): Failover
    failoverAllSourceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): FailoverSourceConnection!
    failoverAllTargetSiteConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): FailoverTargetSiteConnection!
    "Get details of the given failover cluster app."
    failoverClusterApp(
        "The Polaris UUID for the object."
        fid: UUID!
    ): FailoverClusterApp!
    "Get a summary of all failover cluster apps."
    failoverClusterApps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host failover cluster root type"
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): FailoverClusterAppConnection!
    "Get a summary of all failover cluster top level descendants."
    failoverClusterTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host failover cluster root type"
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterTopLevelDescendantTypeConnection!
    failoverConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter appflows failover jobs by input"
        filter: FailoverFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort appflows failover jobs by field"
        sortBy: FailoverSortByEnum = AppBlueprintName,
        "failover jobs sort order"
        sortOrder: SortOrderEnum = Desc,
        timezoneOffset: Float = 0.0
    ): FailoverConnection!
    failoverGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter appflows failover jobs by input"
        filter: FailoverFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group appflows failover jobs by a field"
        groupBy: FailoverGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): FailoverGroupByConnection!
    failoverJobReports(
        "The Polaris UUID for the object."
        fid: UUID!
    ): [FailoverJobReport!]!
    "Evaluate a single feature flag and get the result"
    featureFlag(
        "List of flag names to evaluate"
        entityContext: [FeatureFlagContextField!],
        "The type of entity context to evaluate against. The value of this arg determines how the entity ID is inferred."
        entityType: FeatureFlagEntityTypeEnum!,
        "Name of flag to evaluate"
        flagName: FeatureFlagNameEnum!
    ): FeatureFlag!
    "Evaluate all known feature flags."
    featureFlagAll(
        "List of flag names to evaluate"
        entityContext: [FeatureFlagContextField!],
        "The type of entity context to evaluate against. The value of this arg determines how the entity ID is inferred."
        entityType: FeatureFlagEntityTypeEnum!
    ): FeatureFlagAll!
    "Get names of feature flags that surfaced in APIs"
    featureFlagNames: [String!]!
    "Status of the federated login."
    federatedLoginStatus: FederatedLoginStatus!
    filesetSnapshot(
        "ID of snapshot."
        id: String!,
        "Whether or not to fetch verbose fileset snapshot information. The performance of this endpoint will decrease if set to true."
        verbose: Boolean
    ): FilesetSnapshotDetail!
    filesetTemplate(
        "The Polaris UUID for the object."
        fid: UUID!
    ): FilesetTemplate!
    filesetTemplateConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host root type"
        hostRoot: HostRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): FilesetTemplateConnection!
    "Check Gcp Projects permissions for addition."
    gcpCloudAccountCheckProjectPermissionsForAddition(
        "List of Gcp project native Ids."
        projectIds: [String!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpCloudAccountMissingPermissionsForAddition!]!
    "List permissions required to enable the given feature"
    gcpCloudAccountListPermissions(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!
    ): [GcpPermission!]!
    "Get the details of the Gcp project configured for a feature"
    gcpCloudAccountListProjects(
        "Cloud Account Feature."
        feature: CloudAccountFeatureEnum!,
        "Search text for project name, native id and number."
        projectSearchText: String!,
        "List of project status filters to apply."
        projectStatusFilters: [CloudAccountStatusEnum!]!
    ): [GcpCloudAccountProjectDetail!]!
    "List Gcp Projects to add after successful authorization."
    gcpCloudAccountListProjectsForOAuth(
        "Whether to check permission of projects required for addition"
        checkPermissions: Boolean!,
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpListProjectsForOAuthResponse!]!
    "Returns the service account corresponding to global credentials. Return empty string if global credentials are absent"
    gcpGetDefaultCredentialsServiceAccount: String!
    "Lists compatible machine types for instance."
    gcpNativeCompatibleMachineTypesList(
        "UUID of snapshot"
        snapshotId: UUID!,
        "The zone of the to-be-created instance."
        targetZone: String!
    ): [String!]!
    "Get details of a GCP Disk"
    gcpNativeDisk(
        "The Polaris UUID for the object."
        fid: UUID!
    ): GcpNativeDisk!
    "Get list of GCP disks"
    gcpNativeDiskConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        diskFilters: GcpNativeDiskFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of GCP disks."
        sortBy: GcpNativeDiskSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GcpNativeDiskConnection!
    "Get details of a GCE Instance"
    gcpNativeGceInstance(
        "The Polaris UUID for the object."
        fid: UUID!
    ): GcpNativeGCEInstance!
    "Get list of GCE instances"
    gcpNativeGceInstanceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        gceInstanceFilters: GcpNativeGceInstanceFilters,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of GCP GCE instances."
        sortBy: GcpNativeGCEInstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GcpNativeGCEInstanceConnection!
    "lists GCP KMS Crypto keys accessible in the provided region"
    gcpNativeListAvailableKMSCryptoKeys(
        "UUID of the Project"
        projectId: UUID!,
        "native name of GCP region"
        regionName: String!
    ): [KMSCryptoKey!]!
    "Lists networks available in a GCP project along with subnetworks and firewall rules."
    gcpNativeNetworksList(
        "UUID of the Project"
        projectId: UUID!
    ): [GcpNativeNetwork!]!
    "Get details of a GCP Project"
    gcpNativeProject(
        "The Polaris UUID for the object."
        fid: UUID!
    ): GcpNativeProject!
    "Get list of GCP projects"
    gcpNativeProjectConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        authorizedOperationFilter: OperationEnum,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        projectFilters: GcpNativeProjectFilters,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        "Sort fields for list of GCP projects."
        sortBy: GcpNativeProjectSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GcpNativeProjectConnection!
    "lists all the GCP projects with accessible networks in this service project"
    gcpNativeProjectsWithAccessibleNetworks(
        "UUID of the Project"
        projectId: UUID!
    ): [NetworkHostProject!]!
    "Lists regions available to a GCP project along with zones"
    gcpNativeRegionsList(
        "UUID of the Project"
        projectId: UUID!
    ): [GcpNativeRegion!]!
    "lists distinct regions and zones of the GCP disks stored with Polaris"
    gcpNativeStoredDiskLocations(
        "UUID of the Project (Optional)"
        projectId: UUID
    ): ListStoredDiskLocationsReply!
    "lists all the distinct machine types of the GCP instances stored with Polaris"
    gcpNativeStoredMachineTypes: [String!]!
    "lists all the distinct machine types of the GCP instances stored with Polaris"
    gcpNativeStoredMachineTypesInProject(
        "UUID of the Project"
        projectId: UUID!
    ): [String!]!
    "lists all the distinct network names of the GCP instances stored with Polaris"
    gcpNativeStoredNetworkNames: [String!]!
    "lists all the distinct network names of the GCP instances stored with Polaris"
    gcpNativeStoredNetworkNamesInProject(
        "UUID of the Project"
        projectId: UUID!
    ): [String!]!
    "lists all the distinct regions of the GCP instances stored with Polaris"
    gcpNativeStoredRegions: [String!]!
    "lists all the distinct regions of the GCP instances stored with Polaris"
    gcpNativeStoredRegionsInProject(
        "UUID of the Project"
        projectId: UUID!
    ): [String!]!
    geoLocationList: [GroupCount!]!
    "Obtain account settings value."
    getAccountSettingValue(
        "Name of component that uses ASP in account setting table"
        aspComponent: ComponentEnum!,
        "Name of parameter (ASP) in account setting table"
        aspName: String!
    ): ASPValue!
    getAllRolesInOrgConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        nameFilter: String,
        sortBy: RoleFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): RoleConnection!
    getAllTemplatesInOrgConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        nameFilter: String
    ): RoleTemplateConnection!
    getAllUsersOnAccount(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): [User!]!
    getAuthorizationsForGlobalResource: [OperationEnum!]!
    getAuthorizationsForObject(
        "The Polaris UUID for the object."
        fid: UUID!
    ): [OperationEnum!]!
    "Get CDM release details from support portal for a given list of clusters."
    getCdmReleaseDetailsForClusterFromSupportPortal(
        "Should fetch version details"
        fetchLinks: Boolean! = false,
        "Filter to include only those releases released after source version"
        filterAfterSource: Boolean! = false,
        "Should filter upgradeable versions"
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions"
        filterVersion: String! = "",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Should show all versions"
        shouldShowAll: Boolean! = true,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get CDM release details from support portal for a given list of clusters specific to a target version."
    getCdmReleaseDetailsForVersionFromSupportPortal(
        "Should fetch version details"
        fetchLinks: Boolean! = false,
        "Filter to include only those releases released after source version"
        filterAfterSource: Boolean! = false,
        "Should filter upgradeable versions"
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions"
        filterVersion: String! = "",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Should show all versions"
        shouldShowAll: Boolean! = true,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get available versions on support portal for a cluster"
    getCdmReleaseDetailsFromSupportPortal(
        "Should fetch version details"
        fetchLinks: Boolean! = false,
        "Filter to include only those releases released after source version"
        filterAfterSource: Boolean! = false,
        "Should filter upgradeable versions"
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions"
        filterVersion: String! = "",
        "Number of nodes in the cluster"
        nodeCount: Long! = 4,
        "Platform type of the cluster"
        platform: String! = "",
        "Should show all versions"
        shouldShowAll: Boolean! = true,
        "sort order"
        sortOrder: SortOrderEnum,
        "Source version of the cluster"
        sourceVersion: String! = ""
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "List of snapshots for which file recovery is available"
    getCloudNativeFileRecoveryEligibleSnapshots(
        "Snappable ID"
        snappableId: UUID!
    ): [String!]!
    "Get cloud native label rules"
    getCloudNativeLabelRules(
        "Fields and values according to which rules will be filtered"
        filters: [CloudNativeFilter!],
        "Type of managed object on which label rule will be applied"
        objectType: CloudNativeLabelObjectType!,
        sortBy: CloudNativeTagRuleSortByFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GetCloudNativeLabelRulesReply!
    "Get cloud native tag rules"
    getCloudNativeTagRules(
        "Fields and values according to which rules will be filtered"
        filters: [CloudNativeFilter!],
        "Type of managed object on which tag rule will be applied"
        objectType: CloudNativeTagObjectType!,
        sortBy: CloudNativeTagRuleSortByFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GetCloudNativeTagRulesReply!
    getClusterNodes(
        "The id of the cluster"
        clusterUuid: UUID!
    ): NodeStatusListResp!
    getGroupCountByCdmClusterStatus: GroupCountListWithTotal!
    getGroupCountByPrechecksStatus: [GroupCount!]!
    getGroupCountByUpgradeJobStatus: [GroupCount!]!
    getGroupCountByVersionStatus: [GroupCount!]!
    getHostDiagnosis(
        "ID assigned to the host object."
        id: String!
    ): HostDiagnosisSummary!
    getKorgTaskchainStatus(taskchainId: String!): GetTaskchainStatusReply!
    getO365ServiceStatus(orgID: UUID): GetO365ServiceStatusResp!
    getO365StorageStats(orgID: UUID): GetO365StorageStatsResp!
    getPermissions(roleId: String!): [Permission!]!
    getRolesByIds(roleIds: [String!]!): [Role!]!
    "Get whether alerts for a given snappable are enabled"
    getSnappableAlertSetting(
        "The id of the cluster"
        clusterUuid: UUID!,
        "the fid of the snappable"
        snappableId: UUID!
    ): GetSnappableAlertSettingReply!
    getSupportTunnelStatus(
        "The id of the cluster"
        clusterUuid: UUID!,
        nodeId: String!
    ): SupportTunnelInfoResp!
    getTaskchainInfo(
        "Job type"
        jobType: String!,
        "Taskchain uuid"
        taskchainId: String!
    ): GetTaskchainInfoReply!
    getUserDownloads(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): [UserDownload!]!
    globalSearchResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HierarchyObjectConnection!
    globalSla(
        "Corresponds to global SLA forever UUID in Polaris tables"
        globalSlaFid: UUID!,
        "Whether or not to show the Global SLA sync status on CDM"
        showSyncStatus: Boolean
    ): SlaDomain!
    globalSlaConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on what context filter input to use"
        contextFilterInput: [ContextFilterInputField!],
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Whether or not to show protected object count for an sla"
        showProtectedObjectCount: Boolean,
        "Whether or not to show the Global SLA sync status on CDM"
        showSyncStatus: Boolean,
        sortBy: SLAQuerySortByFieldEnum,
        sortOrder: SLAQuerySortByOrderEnum
    ): SlaDomainConnection!
    globalSlaFilterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on what context filter input to use"
        contextFilterInput: [ContextFilterInputField!],
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Whether or not to show protected object count for an sla"
        showProtectedObjectCount: Boolean,
        "Whether or not to show the Global SLA sync status on CDM"
        showSyncStatus: Boolean,
        sortBy: SLAQuerySortByFieldEnum,
        sortOrder: SLAQuerySortByOrderEnum
    ): GlobalSlaForFilterConnection!
    growthForecast(growthRequest: GrowthRequest!): GrowthResponse!
    hierarchyObject(
        "The Polaris UUID for the object."
        fid: UUID!
    ): HierarchyObject!
    hierarchyObjects(fids: [UUID!]!, filter: [Filter!]): [HierarchyObject!]!
    hierarchySnappables(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HierarchySnappableConnection!
    "Get details of the given host failover cluster."
    hostFailoverCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): HostFailoverCluster!
    "Get a summary of all host failover clusters."
    hostFailoverClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host failover cluster root type"
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HostFailoverClusterConnection!
    hostShare(
        "The Polaris UUID for the object."
        fid: UUID!
    ): HostShare!
    hostShareConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HostShareConnection!
    "Paginated list of the highest-level HyperV Objects accessible by the current user."
    hypervTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVTopLevelDescendantTypeConnection!
    "Paginated list of HyperV Virtual Machines."
    hypervVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HyperVVirtualMachineConnection!
    identityProviders: [IdentityProvider!]!
    installedVersionList: [InstalledVersionGroupCount!]!
    "list the available Instance Types"
    instanceTypeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "the fid of the snapshot"
        snapshotId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SnappableInstanceTypeConnection!
    inventoryRoot: InventoryRoot!
    inventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): InventorySubHierarchyRoot!
    "Link to downloadable investigation results in CSV format."
    investigationCsvDownloadLink(
        "The id of the cluster"
        clusterUuid: UUID!,
        "the fid of the snappable"
        snappableId: UUID!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): InvestigationCsvDownloadLinkReply!
    ipWhitelist: GetWhitelistReply!
    "Whether the given volume can be replaced where attached."
    isAwsNativeEbsVolumeSnapshotRestorable(
        "UUID of the snapshot"
        snapshotId: String!
    ): IsVolumeSnapshotRestorableReply!
    "Validates that the given DbInstance class, storage type, multi-az capability, encryption capability, iops value are supported for the given dbEngine, dbEngineVersion in the given availability zone."
    isAwsNativeRdsInstanceLaunchConfigurationValid(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB class of the exported RDS DB instance."
        dbClass: AwsNativeRdsDbInstanceClassEnum!,
        dbEngine: AwsNativeRdsDbEngineEnum!,
        dbEngineVersion: String!,
        "IOPs of the exported RDS DB instance."
        iops: Int,
        "Whether the exported RDS DB instance is multi-AZ or not."
        isMultiAz: Boolean!,
        "KMS Key ID of the exported RDS DB instance."
        kmsKeyId: String,
        "AZ in which the exported RDS DB instance must be launched."
        primaryAz: String,
        "Region in AWS."
        region: AwsNativeRegionEnum!,
        "Storage type of the exported RDS DB instance."
        storageType: AwsNativeRdsStorageTypeEnum
    ): Boolean!
    "Whether a S3 bucket name is available or not."
    isAwsS3BucketNameAvailable(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the S3 bucket."
        bucketName: String!
    ): Boolean!
    "Queries whether the given disk snapshot is restorable which is used to enable \"Replace disk where attached\" flag on Export Disk Snapshot UI"
    isAzureNativeManagedDiskSnapshotRestorable(
        "Snapshot ID"
        diskSnapshotId: UUID!,
        "Subscription ID"
        subscriptionId: UUID!
    ): Boolean!
    "List of snapshots with their file recovery feasibility status"
    isCloudNativeFileRecoveryFeasible(
        "List of snapshot IDs"
        snapshotIds: [UUID!]!
    ): ValidateCloudNativeFileRecoveryFeasibilityReply!
    "Is Logged into Rubrik support portal"
    isLoggedIntoRubrikSupportPortal: SupportPortalStatusReply!
    "Is Rubrik Suppport Portal reachable from this deployment"
    isSFDCReachable(
        "Support portal hostname"
        hostname: String! = "rubrik.force.com",
        "Support portal organization ID"
        organizationId: String! = "00D40000000N3x2"
    ): Boolean!
    "Is upgrade available for a particular cluster"
    isUpgradeAvailable(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CdmUpgradeAvailabilityReply!
    "Is upgrade recommended for a particular cluster"
    isUpgradeRecommended(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CdmUpgradeRecommendationReply!
    isVMwareManagementEnabled: Boolean!
    "Return details of one issue"
    issue(issueId: String!): Issue!
    "Return all issues filtered by status"
    issueConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        status: IssueStatusEnum!
    ): IssueConnection!
    k8sCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): K8sCluster!
    k8sClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): K8sClusterConnection!
    k8sNamespace(
        "The Polaris UUID for the object."
        fid: UUID!
    ): K8sNamespace!
    k8sNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Kubernetes cluster UUID."
        k8sClusterId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): K8sNamespaceConnection!
    lambdaSettings: LambdaSettings!
    "Browse LDAP authorized principals"
    ldapAuthorizedPrincipalConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Assigned role IDs for LDAP principal"
        roleIds: [UUID!],
        "Search Text for LDAP principal"
        searchText: String!,
        sortBy: LdapAuthorizedPrincipalFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): AuthorizedPrincipalConnection!
    "Browse LDAP Integrations"
    ldapIntegrationConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: LdapIntegrationFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): LdapIntegrationConnection!
    "Search LDAP Principals"
    ldapPrincipalConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "ID for your LDAP integration"
        id: UUID!,
        "Returns the last n elements from the list."
        last: Int,
        "Search Text for LDAP principal"
        searchText: String!,
        sortBy: LdapPrincipalFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): PrincipalConnection!
    linuxFileset(
        "The Polaris UUID for the object."
        fid: UUID!
    ): LinuxFileset!
    "List ids of running issues jobs"
    listIssuesJobStatus(queryIds: [String!]!): [String!]!
    listO365Apps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        o365AppFilters: [AppFilter!]!,
        o365AppSortByParam: AppSortByParam
    ): O365AppConnection!
    "A Managed Volume."
    managedVolume(
        "The Polaris UUID for the object."
        fid: UUID!
    ): ManagedVolume!
    "Paginated list of Managed Volumes."
    managedVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): ManagedVolumeConnection!
    "A Microsoft SQL Availability Group."
    mssqlAvailabilityGroup(
        "The Polaris UUID for the object."
        fid: UUID!
    ): MssqlAvailabilityGroup!
    "A Microsoft SQL Database."
    mssqlDatabase(
        "The Polaris UUID for the object."
        fid: UUID!
    ): MssqlDatabase!
    "Paginated list of Microsoft SQL Databases."
    mssqlDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): MssqlDatabaseConnection!
    "A Microsoft SQL Instance."
    mssqlInstance(
        "The Polaris UUID for the object."
        fid: UUID!
    ): MssqlInstance!
    "Paginated list of the highest-level Microsoft SQL Objects accessible by the current user."
    mssqlTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlTopLevelDescendantTypeConnection!
    "A Nutanix Cluster."
    nutanixCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NutanixCluster!
    "Paginated list of Nutanix Clusters."
    nutanixClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): NutanixClusterConnection!
    "Paginated list of the highest-level Nutanix Objects accessible by the current user."
    nutanixTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "A Nutanix Virtual Machine."
    nutanixVm(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NutanixVm!
    "Paginated list of Nutanix Virtual Machines."
    nutanixVms(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): NutanixVmConnection!
    o365Calendar(snappableFid: UUID!): O365Calendar!
    o365Mailbox(snappableFid: UUID!): O365Mailbox!
    "List of Mailboxes of O365Org"
    o365Mailboxes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365MailboxConnection!
    o365Onedrive(snappableFid: UUID!): O365Onedrive!
    "List of Onedrives of O365Org"
    o365Onedrives(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365OnedriveConnection!
    o365Org(
        "The Polaris UUID for the object."
        fid: UUID!
    ): O365Org!
    o365OrgAtSnappableLevel(
        "The Polaris UUID for the object."
        fid: UUID!,
        snappableType: SnappableTypeEnum!
    ): O365Org!
    o365Orgs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365OrgConnection!
    o365ServiceAccount(orgId: UUID!): O365ServiceAccountStatusResp!
    o365SharepointDrive(snappableFid: UUID!): O365SharepointDrive!
    "List of sharepoint drives (document libraries) in the O365Org"
    o365SharepointDrives(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SharepointDriveConnection!
    o365SharepointObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Polaris UUID for the object."
        fid: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SharepointObjectConnection!
    o365Site(snappableFid: UUID!): O365Site!
    "List of sites of O365Org"
    o365Sites(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SiteConnection!
    o365Team(snappableFid: UUID!): O365Teams!
    "List of Channels for the O365Team"
    o365TeamChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        excludeArchived: Boolean!,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        snappableFid: UUID!
    ): O365TeamsChannelConnection!
    "IDs of the child snapshots of the Team snapshot"
    o365TeamChildSnapshotIDs(snapshotFid: UUID!): O365TeamChildSnapshotIDs!
    "ID for the conversations folder in the Team's Group Mailbox"
    o365TeamConversationsFolderID(o365OrgId: UUID!, snappableFid: UUID!, snapshotFid: UUID!): String!
    "List of O365 Teams in the O365Org"
    o365Teams(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365TeamsConnection!
    o365User(
        "The Polaris UUID for the object."
        fid: UUID!
    ): O365User!
    objectFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        day: String!,
        filter: ListObjectFilesFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        timezone: String!
    ): FileResultConnection!
    "An Oracle Database."
    oracleDatabase(
        "The Polaris UUID for the object."
        fid: UUID!
    ): OracleDatabase!
    "Paginated list of Oracle Databases."
    oracleDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): OracleDatabaseConnection!
    "An Oracle Host."
    oracleHost(
        "The Polaris UUID for the object."
        fid: UUID!
    ): OracleHost!
    "An Oracle Real Application Cluster."
    oracleRac(
        "The Polaris UUID for the object."
        fid: UUID!
    ): OracleRac!
    "Paginated list of the highest-level Oracle Objects accessible by the current user."
    oracleTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleTopLevelDescendantTypeConnection!
    pendingAction(pendingActionId: String!): pendingAction!
    pendingActions(clusterFilter: UUID, historyOnly: Boolean, limit: Long, objectIds: [String!], pendingActionGroupTypeFilter: [PendingActionGroupTypeEnum!], pendingActionSubGroupTypeFilter: [PendingActionSubGroupTypeEnum!], sortedOrder: ChronologicalOrderEnum, statusFilter: [PendingActionStatusEnum!]): [pendingAction!]!
    "Get information about objects passing through the Radar pipeline."
    pendingRadarEvaluationResultsCount: PendingEvaluationResultsReply!
    physicalHost(
        "The Polaris UUID for the object."
        fid: UUID!
    ): PhysicalHost!
    physicalHostConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host root type"
        hostRoot: HostRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): PhysicalHostConnection!
    "Get the health metric for the radar pipeline covering the backup, indexing, and analysis jobs"
    pipelineHealthForTimeRange(
        "filtering beginning from this time"
        beginTime: DateTime!,
        "filtering ending on this time"
        endTime: DateTime
    ): GetPipelineHealthReply!
    polarisInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): PolarisInventorySubHierarchyRoot!
    "Returns the Polaris snapshot by id"
    polarisSnapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): PolarisSnapshot!
    "Return detailed policy information"
    policy(policyId: String!): ClassificationPolicyDetail!
    "Return active policies for an account"
    policyConnection(policyObjectFilter: PolicyObjectFilterEnum): ClassificationPolicyDetailConnection!
    "Return details for one policy obj"
    policyObj(snappableFid: String!, snapshotFid: String!): PolicyObj!
    "Return status for all objects at a specified timestamp"
    policyObjConnection(day: String!, timezone: String!): PolicyObjConnection!
    "Returns which policies are applied to each object"
    policyObjectUsageConnection(objectIds: [String!]!): PolicyObjectUsageConnection!
    "Gets status of last prechecks job"
    prechecksStatus(
        "Cluster uuid"
        clusterUuid: UUID!
    ): PrechecksStatusReply!
    "Get status of last completed prechecks Job along with details of currently running/scheduled next prechecks Job"
    prechecksStatusWithNextJobInfo(
        "Cluster uuid"
        clusterUuid: UUID!
    ): PrechecksStatusReply!
    "Get the number of snappables that have passed through the Radar pipeline in the past 24 hours."
    processedRadarSnappableCount: ProcessedRadarSnappableCountReply!
    "List of all objects protected by the sla"
    protectedObjectsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        objectTypeFilter: [String!],
        "Corresponds to optional object root forever UUID, none value is assumed to be the global hierarchy root"
        rootOptionalFid: UUID,
        "Provide list of Global SLA ids"
        slaIds: [UUID!]!,
        sortBy: HierarchySortByField,
        "sort order"
        sortOrder: SortOrderEnum
    ): ProtectedObjectsConnection!
    "Get the total number of snappables protected by Radar"
    protectedRadarSnappableCount: ProtectedRadarSnappableCountReply!
    "Get a per day summary of the radar analysis results from start day to end day."
    radarAnalysisSummary(
        "optional list of cluster uuids to filter on"
        clusterUuidFilter: [String!],
        "end day, formatted(ISO 8601) as YYYY-MM-DD"
        endDay: String!,
        "optional list of object types to filter on"
        objectTypeFilter: [String!],
        "optional list of sla fids to filter on."
        slaFidFilter: [String!],
        "start day, formatted(ISO 8601) as YYYY-MM-DD"
        startDay: String!,
        "timezone name(IANA)"
        timezone: String!
    ): RadarAnalysisSummaryReply!
    radarClusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Get the total number of times that Radar has scanned an object"
    radarSnappableScannedCount(
        "snappable Id of an object"
        snappableIdNotFid: String!
    ): RadarSnappableScannedCountReply!
    ransomwareResult(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): RansomwareResult!
    ransomwareResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter ransomware results by input"
        filter: RansomwareResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort ransomware results by field"
        sortBy: RansomwareResultSortByEnum,
        timezoneOffset: Float = 0.0
    ): RansomwareResultConnection!
    ransomwareResultGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter ransomware results by input"
        filter: RansomwareResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group ransomware results by field"
        groupBy: RansomwareResultGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): RansomwareResultGroupByConnection!
    ransomwareResultOpt(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): RansomwareResult
    "Details of the RDS instance in the AWS account."
    rdsInstanceDetailsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): RdsInstanceDetailsFromAws!
    report(id: Int!): CustomReport!
    reportConfig(reportID: Int!): ReportConfig!
    reportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter custom reports by input"
        filter: CustomReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort by field"
        sortBy: CustomReportSortByEnum = UpdateTime,
        "sort order"
        sortOrder: SortOrderEnum
    ): CustomReportConnection!
    reportData(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        """

        A list of aggregations to apply to the grouped rows, it must be used
        in conjunction with groupBy arg (except for count(*)). Supported
        aggregations are:
        hour, day, week, month, year for datetime columns
        sum, avg for integer columns
        count(*)
        """
        aggregations: [String!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        """

        A list of columns to include in the result. It can be omitted when
        requesting aggregations, and server will derive columns by
        concatenating groupBy and aggregation arguments.
        """
        columns: [String!]!,
        dataView: DataViewTypeEnum!,
        "A list of filters to filter result with"
        filters: [ReportFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        """

        A list of the names of the columns to group result by, it must be
        used in conjunction of aggregations.
        """
        groupBy: [String!],
        "Returns the last n elements from the list."
        last: Int,
        """

        SecondaryGroupBy used for when groupBy values need to be pivoted.
        """
        secondaryGroupBy: String,
        "Name of the column to sort result by"
        sortBy: String,
        "sort order"
        sortOrder: SortOrderEnum,
        "The timezone to return results in"
        timezone: String
    ): RowConnection!
    reportFromConfig(config: CustomReportCreate!): CustomReport!
    reportGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter custom reports by input"
        filter: CustomReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: CustomReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): CustomReportGroupByConnection!
    reportSchema(
        dataView: DataViewTypeEnum!,
        "The timezone to return results in"
        timezone: String
    ): ReportSchema!
    sapHanaDatabase(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaDatabase!
    sapHanaDatabaseConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SapHanaDatabaseConnection!
    sapHanaLogSnapshot(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaLogSnapshot!
    sapHanaLogSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana log snapshots by input"
        filter: SapHanaLogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana log snapshots by field"
        sortBy: SapHanaLogSnapshotSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaLogSnapshotConnection!
    sapHanaRecoverableRange(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaRecoverableRange!
    sapHanaRecoverableRangeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana recoverable ranges by input"
        filter: SapHanaRecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana recoverable ranges by field"
        sortBy: SapHanaRecoverableRangeSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaRecoverableRangeConnection!
    sapHanaSystem(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaSystem!
    sapHanaSystemConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SapHanaSystemConnection!
    scheduledReport(id: Int!): ScheduledReport
    scheduledReportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ScheduledReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    screenshotReport(
        "The ID of the report to be screenshotted"
        reportId: String!
    ): TakeScreenshotReply!
    searchCloudNativeSnappableVersionedFileConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Name or Path prefix arg for searching for files within a snappable"
        searchQuery: String!,
        "Snappable ID"
        snappableId: UUID!
    ): CloudNativeVersionedFileConnection!
    "Search file under given folder and with given prefix"
    searchFileByPrefix(
        "The id of the cluster"
        clusterUuid: UUID!,
        "filename prefix that should match"
        filenamePrefix: String!,
        "Snappable managed ID"
        managedId: String!,
        "root path to search file inside fmd"
        searchFolderPath: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): DiffFMDReply!
    searchHost(
        "ID of the host to search."
        id: String!,
        "The path query. Either path prefix or filename prefix."
        path: String!
    ): SearchResponseListResponse!
    searchSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input (with search by name)"
        filter: SnappableFilterInputWithSearch,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    searchSnappableVersionedFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        searchQuery: String!,
        snappableFid: UUID!
    ): VersionedFileConnection!
    "list the available Security Groups"
    securityGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        "the fid of the vpc"
        vpcId: UUID!
    ): SnappableSecurityGroupConnection!
    "Browse Service Accounts"
    serviceAccountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Assigned role IDs for service account"
        roleIds: [UUID!],
        "Search for a service account"
        searchText: String,
        "Sort"
        sortBy: ServiceAccountSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): ServiceAccountConnection!
    serviceProviderMetadataFields: GetSPExplicitReply!
    shareFileset(
        "The Polaris UUID for the object."
        fid: UUID!
    ): ShareFileset!
    "List of audit details for a given SLA"
    slaAuditDetail(
        "SLA ID for global SLAs and Internal ID for CDM SLAs"
        SlaId: UUID!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [SLAAuditDetailFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        timezone: String
    ): [SlaAuditDetail!]!
    slaConflictObjects(fids: [UUID!]!): [HierarchyObject!]!
    slaDomainWithWarnings(
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
        "Corresponds to global SLA forever UUID in Polaris tables"
        globalSlaFid: UUID!,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!
    ): SlaDomainWithWarnings!
    "Query sla list with warnings"
    slaDomainWithWarningsList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        sortBy: SLAQuerySortByFieldEnum,
        sortOrder: SLAQuerySortByOrderEnum
    ): [SlaDomainWithWarnings!]!
    "List of SLA summaries for the given ids"
    slaSummariesByIds(
        "Provide list of Global SLA ids"
        slaIds: [UUID!]!
    ): [SlaDomain!]!
    smtpConfiguration: GetSMTPConfigurationReply!
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input"
        filter: SnappableFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    snappableEmailSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableEventSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "calendar search filters"
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input for group by"
        filter: SnappableGroupByFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snappables by field"
        groupBy: SnappableGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "List of Snappable aggregations you want to fetch. Explicitly specifying the subset of aggregations you need will greatly speed up the query."
        requestedAggregations: [SnappableAggregationsEnum!],
        timezoneOffset: Float = 0.0
    ): SnappableGroupByConnection!
    snappableOnedriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        onedriveSearchFilter: OnedriveSearchFilter,
        orgId: UUID!,
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    "describes the snappable resource specs"
    snappableResourceSpecs(
        " the snappable identifiers"
        ids: [SnappableIdentifierInput!]!
    ): [ResourceSpec!]!
    snappableSharepointDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    snappableTeamsConversationSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        snappableFid: UUID!
    ): O365TeamsMessageObjectConnection!
    snappableTeamsDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        channelFolderName: String,
        channelId: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!,
        teamsDriveSearchFilter: OnedriveSearchFilter
    ): O365OnedriveObjectConnection!
    "Returns a single snapshot by id"
    snapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): CdmSnapshot!
    snapshotEmailSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    snapshotEventSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "calendar search filters"
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "Browse or search the given path for files and directories along with their deltas in a given snapshot"
    snapshotFileDeltaConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter snapshot delta based on delta types"
        filter: SnapshotDeltaFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run"
        path: String!,
        "Prefix arg for searching for files within a snapshot"
        searchPrefix: String,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): SnapshotFileDeltaConnection!
    "Returns list of snapshots for a snappable"
    snapshotOfASnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection!
    "Returns list of snapshots for a list of snappables"
    snapshotOfSnappablesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        snappableIds: [String!]!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection!
    snapshotOnedriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        onedriveSearchFilter: OnedriveSearchFilter,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Return snapshot results for a snappable"
    snapshotResultConnection(
        "End time of the range (in milliseconds since epoch)"
        endTimeMs: Long!,
        snappableFid: String!,
        "Begin time of the range (in milliseconds since epoch)"
        startTimeMs: Long!
    ): SnapshotResultConnection!
    snapshotSharepointDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Return groupBy results for SonarContentReport"
    sonarContentReportGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        day: String!,
        filters: SonarContentReportFilter,
        "Returns the first n elements from the list."
        first: Int,
        groupBy: SonarContentReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: SonarContentReportSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum,
        timezone: String!
    ): SonarContentReportTableRowConnection!
    "Return groupBy for SonarReport"
    sonarReportGroupByConnection(filter: [String!], sonarReportGroupBy: SonarReportGroupByEnum!, timeFilter: TimeFilterInput): SonarReportGroupByResultConnection!
    "Return rows for SonarReport table"
    sonarReportTableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        endTime: String,
        filter: [String!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: SonarReportSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SonarReportTableRowConnection!
    sonarUserGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListAccessGroupsFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): AccessGroupConnection!
    sonarUsers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListAccessUsersFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: ListAccessUsersSortInput
    ): AccessUserConnection!
    sourceBlueprintInfo(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SourceBlueprintInfo!
    "list the available Subnets"
    subnetConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the type for id of availability-zone (eg. us-east-1a)"
        availabilityZone: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        "the fid of the vpc"
        vpcId: UUID!
    ): SnappableSubnetConnection!
    syslogConfiguration: GetSyslogConfigurationReply!
    tableFilters: TableFilters!
    target(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): Target!
    targetList(
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of targets"
        filter: [TargetFilterInput!],
        "Specification on how to sort a list of targets"
        sortBy: TargetSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [Target!]!
    targetMapping(
        "Corresponds to ID of target mapping in Polaris"
        targetMappingId: UUID!
    ): TargetMapping!
    targetMappingList(
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of target mappings"
        filter: [TargetMappingFilterInput!],
        "Specification on how to sort a list of target mappings"
        sortBy: TargetMappingSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [TargetMapping!]!
    taskDetailConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskDetailFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task detail by field"
        sortBy: TaskDetailSortByEnum = EndTime,
        "task detail sort order"
        sortOrder: SortOrderEnum = Desc,
        timezoneOffset: Float = 0.0
    ): TaskDetailConnection!
    taskDetailGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskDetailFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group task detail by a field"
        groupBy: TaskDetailGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): TaskDetailGroupByConnection!
    taskSummaryConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskSummaryFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task summary by field"
        sortBy: TaskSummarySortByEnum = ObjectName,
        "sort order"
        sortOrder: SortOrderEnum,
        timezoneOffset: Float = 0.0
    ): TaskSummaryConnection!
    taskSummaryGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskSummaryFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group task summary by a field"
        groupBy: TaskSummaryGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): TaskSummaryGroupByConnection!
    teamChannelNameAvailable(channelName: String!, teamUUID: UUID!): Boolean!
    toggleableFeaturesEnabled: [FeatureNameEnum!]!
    uniqueVSphereVCenterCount(filter: [Filter!]): Int!
    "Gets the status for completed/running upgrade process"
    upgradeStatus(
        "Cluster uuid"
        clusterUuid: UUID!
    ): UpgradeStatusReply!
    userActivities(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListObjectFilesFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        "Time range specified in the user's local timezone."
        timeRange: UserTimeRangeInput,
        userId: String!
    ): FileResultConnection!
    userActivityTimeline(startDay: String!, timezone: String!, uniqueActivities: Boolean!, userId: String!): ActivityTimelineResultConnection!
    userAnalyzerAccess(limit: Int!, startDay: String!, timezone: String!, userId: String!): AnalyzerAccessUsageConnection!
    userAuditConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: UserAuditFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort user audit by field"
        sortBy: UserAuditSortByEnum = Time,
        "user audit sort order"
        sortOrder: SortOrderEnum = Desc
    ): UserAuditConnection!
    userAuditGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: UserAuditFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group audits by a field"
        groupBy: UserAuditGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "sort user audit by field"
        sortBy: UserAuditSortByEnum = Time,
        "user audit sort order"
        sortOrder: SortOrderEnum = Desc,
        timezoneOffset: Float = 0.0
    ): UserAuditGroupByConnection!
    userDetail(startDay: String!, timezone: String!, userId: String!): GetUserDetailReply!
    userFileActivityTimeline(nativePath: String!, resource: ResourceInput, startDay: String!, timeGranularity: TimeGranularityEnum!, timezone: String!, userId: String!): ActivityTimelineResultConnection!
    userGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        roleIdsFilter: [UUID!]
    ): [Group!]!
    userSettings: UserSettings!
    vSphereBlueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereBlueprint!
    vSphereComputeCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereComputeCluster!
    vSphereDatacenter(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereDatacenter!
    vSphereDatastoreConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereDatastoreConnection!
    vSphereFolder(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereFolder!
    vSphereHost(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereHost!
    vSphereHostConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereHostConnection!
    "Get a vSphere Live Mount by id"
    vSphereMount(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereMount!
    "vSphere Live Mount Connection"
    vSphereMountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter for VM live mounts"
        filter: VSphereMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VSphereMountSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): VSphereMountConnection!
    vSphereNetwork(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereNetwork!
    vSphereTag(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereTag!
    vSphereTagCategory(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereTagCategory!
    vSphereTopLevelDescendantsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    vSphereVCenter(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereVCenter!
    vSphereVCenterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereVCenterConnection!
    vSphereVMAsyncRequestStatus(
        clusterUuid: UUID!,
        "ID of an asynchronous request."
        id: String!
    ): AsyncRequestStatus!
    vSphereVmNew(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereVm!
    vSphereVmNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereVmConnection!
    "Validates the name used for RDS Instance during export operation. If false, it returns error of why validation fails, otherwise error message will be empty."
    validateAwsNativeRdsInstanceNameForExport(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): ValidateAwsNativeRdsInstanceNameForExportReply!
    "A vCloud Director."
    vcd(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Vcd!
    "A vCloud Director Catalog."
    vcdCatalog(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdCatalog!
    "A vCloud Director Organization."
    vcdOrg(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdOrg!
    "A vCloud Director Organization Virtual Data Center."
    vcdOrgVdc(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdOrgVdc!
    "Paginated list of the highest-level vCloud Director Objects accessible by the current user."
    vcdTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdTopLevelDescendantTypeConnection!
    "A vCloud Director vApp."
    vcdVapp(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdVapp!
    "Paginated list of vCloud Director vApps."
    vcdVapps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VcdVappConnection!
    "A vCloud Director VIM Server."
    vcdVimServer(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdVimServer!
    verifySLAWithReplicationToCluster(
        "Account name"
        account: String!,
        "CDM Cluster UUID"
        cdmClusterUUID: String!,
        "Include Archived SLA"
        includeArchived: Boolean!
    ): VerifySLAWithReplicationToClusterResp!
    volumeGroup(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VolumeGroup!
    volumeGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VolumeGroupConnection!
    "list the available Volume Types"
    volumeTypeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        " the device key"
        key: Int!,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "the fid of the snapshot"
        snapshotId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SnappableStorageVolumeTypeConnection!
    "list the available VPCs"
    vpcConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "MaxSuggestionCount is the number of suggestions expected"
        maxSuggestionCount: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VpcConnection!
    vsphereVMMissedRecoverableRange(afterTime: DateTime, beforeTime: DateTime, snappableFid: UUID!): RecoverableRangeResponse!
    vsphereVMRecoverableRange(afterTime: DateTime, beforeTime: DateTime, snappableFid: UUID!): RecoverableRangeResponse!
    vsphereVMRecoverableRangeInBatch(
        "The batch request, which includes the ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved, and optionally the date ranges as a filter."
        requestInfo: BatchVmwareVmRecoverableRangesRequestInput!
    ): BatchVmwareVmRecoverableRanges!
    vsphereVmwareCdpLiveInfo(
        "The ID of each CDP-enabled virtual machine for which live info is being retrieved."
        ids: [String!]!
    ): BatchVmwareCdpLiveInfo!
    "A Windows Cluster."
    windowsCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): WindowsCluster!
    windowsFileset(
        "The Polaris UUID for the object."
        fid: UUID!
    ): WindowsFileset!
}

type QuerySDDLReply {
    secInfo: [PathSecInfo!]!
}

type RPOLagInfo {
    actualInSecs: Long!
    expectedInSecs: Long!
    level: String!
}

"Summary of the radar analysis results"
type RadarAnalysisSummaryReply {
    analysisDetails: [DailyAnalysisDetails!]!
}

"Number of times Radar has scanned an object"
type RadarSnappableScannedCountReply {
    snappableScannedCounts: [SnappableScanned!]!
}

"Ransomware analysis report from lambda service"
type RansomwareResult {
    clusterUuid: UUID!
    encryptionProbability: Float!
    id: String!
    isEncrypted: Boolean!
    managedId: String!
    snappableId: String!
    snapshotData: DateTime!
    snapshotId: String!
}

type RansomwareResultConnection {
    count: Int!
    edges: [RansomwareResultEdge!]!
    nodes: [RansomwareResult!]!
    pageInfo: PageInfo!
}

type RansomwareResultEdge {
    cursor: String!
    node: RansomwareResult!
}

"Ransomware analysis data with groupby info applied to it"
type RansomwareResultGroupBy {
    "Groupby info."
    groupByInfo: RansomwareResultGroupByInfo!
    "Paginated ransomware result data"
    ransomwareResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort ransomware results by field"
        sortBy: RansomwareResultSortByEnum
    ): RansomwareResultConnection!
    "Further provide groupings for the data."
    ransomwareResultGroupBy(
        "group ransomware results by field"
        groupBy: RansomwareResultGroupByEnum!
    ): [RansomwareResultGroupBy!]!
}

type RansomwareResultGroupByConnection {
    count: Int!
    edges: [RansomwareResultGroupByEdge!]!
    nodes: [RansomwareResultGroupBy!]!
    pageInfo: PageInfo!
}

type RansomwareResultGroupByEdge {
    cursor: String!
    node: RansomwareResultGroupBy!
}

"RDS DB Instance details from AWS."
type RdsInstanceDetailsFromAws {
    allocatedStorageInGb: Long!
    backupRetentionPeriod: Long!
    dbEngine: String!
    dbInstanceClass: String!
    dbInstanceStatus: String!
    dbMaintenanceWindow: String!
    dbParameterGroupName: String!
    dbSubnetGroupName: String!
    engineVersion: String!
    iops: Long!
    isMultiAz: Boolean!
    kmsKeyId: String!
    optionGroupName: String!
    port: Long!
    primaryAz: String!
    rdsInstanceArn: String!
    storageType: String!
    vpcId: String!
}

"RDS Export defaults from AWS."
type RdsInstanceExportDefaults {
    allocatedStorageInGb: Long!
    dbEngine: AwsNativeRdsDbEngineEnum!
    dbEngineVersion: String!
    dbInstanceClass: AwsNativeRdsDbInstanceClassEnum!
    dbParameterGroupName: String!
    dbSubnetGroupName: String!
    iops: Int!
    isMultiAz: Boolean!
    kmsKeyId: String!
    optionGroupName: String!
    port: Long!
    primaryAz: String!
    storageType: AwsNativeRdsStorageTypeEnum!
    vpcId: String!
}

"Range to recover a snapshot from for a given VM"
type RecoverableRange {
    beginTime: String
    endTime: String
}

"Recoverable ranges for a given VM"
type RecoverableRangeResponse {
    data: [RecoverableRange!]!
    hasMore: Boolean
    total: Long
}

type RecoverySpecId {
    fid: String!
}

type RecoverySpecValidityCheckReply {
    errorMessage: String!
    rmStatus: String!
    success: Boolean!
}

type RecoveryTaskDetailsTableFilter {
    cluster_location: [FilterOption!]!
    cluster_type: [FilterOption!]!
    object_type: [FilterOption!]!
    replication_source: [FilterOption!]!
    status: [FilterOption!]!
    task_category: [FilterOption!]!
    task_type: [FilterOption!]!
}

"Subscription ID and the error encountered while scheduling refresh subscription job for the subscription"
type RefreshAzureNativeSubscriptionError {
    error: String!
    subscriptionId: String!
}

"Subscription ID and the Taskchain ID of the refresh subscription job scheduled for the subscription"
type RefreshAzureNativeSubscriptionTaskchainUuid {
    subscriptionId: String!
    taskchainUuid: String!
}

"The status of Refresh Azure Native Subscription request. For each subscription ID in the request: an entry in errors if failed,or in taskchainUuids if succeeded."
type RefreshAzureNativeSubscriptionsReply {
    errors: [RefreshAzureNativeSubscriptionError!]!
    taskchainUuids: [RefreshAzureNativeSubscriptionTaskchainUuid!]!
}

"Project ID and the error encountered while scheduling refresh project job for the project"
type RefreshGCPNativeProjectError {
    error: String!
    projectId: String!
}

"Project ID and the Taskchain ID of the refresh project job scheduled for the project"
type RefreshGCPNativeProjectTaskchainUuid {
    projectId: String!
    taskchainUuid: String!
}

"The status of Refresh GCP Native project request. For each project ID in the request: an entry in errors if failed,or in taskchainUuids if succeeded."
type RefreshGCPNativeProjectsReply {
    errors: [RefreshGCPNativeProjectError!]!
    taskchainUuids: [RefreshGCPNativeProjectTaskchainUuid!]!
}

"vCenter connection status"
type RefreshableObjectConnectionStatus {
    message: String
    status: VCenterConnectionStatusEnum!
}

type Region {
    displayName: String!
    id: String!
    name: String!
}

type RegionConnection {
    count: Int!
    edges: [RegionEdge!]!
    nodes: [Region!]!
    pageInfo: PageInfo!
}

type RegionEdge {
    cursor: String!
    node: Region!
}

"A relative range of time."
type RelativeTimeRange {
    "Number of units in the time range."
    magnitude: Int!
    "Unit of the time range"
    unit: TimeUnitEnum!
}

type ReplicationSource {
    id: String!
    sourceClusterAddress: String
    sourceClusterName: String!
    sourceClusterUuid: UUID!
    totalStorage: Long
}

type ReplicationSpec {
    replicationType: ReplicationTypeEnum!
    specificReplicationSpec: SpecificReplicationSpec
}

type ReplicationSpecV2 {
    awsRegion: String!
    "AWS location used as the replication target"
    awsTarget: AwsReplicationTarget!
    azureRegion: String!
    "Azure location used as the replication target"
    azureTarget: AzureReplicationTarget!
    "Cluster used as replication target"
    cluster: SlaReplicationCluster
    retentionDuration: SlaDuration
    targetMapping: TargetMapping
}

type ReplicationTarget {
    id: String!
    targetClusterAddress: String
    targetClusterName: String!
    targetClusterUuid: UUID!
    totalStorage: Long
}

type ReplicationToCloudLocationSpec {
    retentionDuration: SlaDuration
    targetMapping: TargetMapping
}

type ReplicationToCloudRegionSpec {
    cloudProvider: CloudProviderEnum!
    replicationTargetRegion: String!
    retention: Int!
    retentionUnit: RetentionUnitEnum!
}

type ReportConfig {
    aggregations: [String!]!
    "Chart selections for the report"
    chartConfigs: [ChartConfig!]!
    "Column selection for the report"
    columns: [String!]!
    "Type of report"
    dataViewType: DataViewTypeEnum!
    "Filter selection for the report"
    filters: [ConfigFilter!]!
    "GroupBy selection for the report"
    groupBy: configGroupBy!
    id: Long!
    "Report name"
    name: String!
    sortBy: String!
    sortOrder: SortOrderEnum
}

type ReportFilter {
    name: String!
    values: [String!]!
}

type ReportFilterDetail {
    dataType: DataTypeEnum!
    defaultValues: [DisplayableValue!]!
    displayName: String!
    name: String!
    type: FilterTypeEnum!
    values: [DisplayableValue!]!
}

type ReportFocus {
    enumValue: ReportFocusEnum!
}

type ReportGroupByDetail {
    aggregations: [DisplayableValue!]!
    allValues: [DisplayableValue!]!
    displayName: String!
    name: String!
    primaryGroupBy: String!
    secondaryAggregation: String
    secondaryGroupBy: String
}

type ReportSchema {
    aggregateColumns: [Column!]!
    allColumns: [Column!]!
    filters: [ReportFilterDetail!]!
    groupBys: [ReportGroupByDetail!]!
    sortBy: Column!
    sortOrder: SortOrderEnum!
    tableColumns: [Column!]!
}

"""

Supported in v5.0+
"""
type RequestErrorInfo {
    """

    Required. Supported in v5.0+
    v5.0: The error message for failed ids.
    v5.1+: The error message for failed IDs.
    """
    message: String!
}

type RequestStatus {
    success: Boolean!
}

type RequestSuccess {
    success: Boolean!
}

type ResourceGroup {
    id: String!
    name: String!
}

type ResourceGroupConnection {
    count: Int!
    edges: [ResourceGroupEdge!]!
    nodes: [ResourceGroup!]!
    pageInfo: PageInfo!
}

type ResourceGroupEdge {
    cursor: String!
    node: ResourceGroup!
}

"Information about the resource being validated."
type ResourceInfo {
    "Id of the resource."
    resourceId: String!
    "Type od the resource"
    resourceType: ResourceType!
}

"Empty response type"
type ResponseSuccess {
    "Whether request returned successfully"
    success: Boolean!
}

"Taskchain ID of the taskchain to restore the specified snapshot"
type RestoreGCEInstanceReply {
    taskchainUuid: String!
}

"Taskchain information for restore azure native virtual machine job"
type RestoreVMReply {
    taskchainUuid: String!
}

type Result {
    appFid: String!
    id: String!
    success: Boolean!
}

type RetryBackupClusterResp {
    clusterUuid: String!
    eventSeriesId: String!
}

type RetryBackupResp {
    clusterResp: [RetryBackupClusterResp!]!
}

type Role {
    description: String!
    id: String!
    isReadOnly: Boolean!
    name: String!
    permissions: [Permission!]!
    protectableClusters: [String!]!
}

type RoleConnection {
    count: Int!
    edges: [RoleEdge!]!
    nodes: [Role!]!
    pageInfo: PageInfo!
}

type RoleEdge {
    cursor: String!
    node: Role!
}

type RoleStatus {
    hasRole: Boolean!
}

type RoleTemplate {
    description: String!
    id: String!
    name: String!
    permissions: [Permission!]!
}

type RoleTemplateConnection {
    count: Int!
    edges: [RoleTemplateEdge!]!
    nodes: [RoleTemplate!]!
    pageInfo: PageInfo!
}

type RoleTemplateEdge {
    cursor: String!
    node: RoleTemplate!
}

"Updated service account details"
type RotateServiceAccountSecretReply {
    accessTokenUri: String!
    clientId: String!
    clientSecret: String!
    name: String!
}

type Row {
    metadata: [Metadata!]!
    values: [CellData!]!
}

type RowConnection {
    columns: [Column!]!
    count: Int!
    edges: [RowEdge!]!
    nodes: [Row!]!
    pageInfo: PageInfo!
}

type RowEdge {
    cursor: String!
    node: Row!
}

type RunCustomAnalyzerReply {
    matches: [CustomAnalyzerMatch!]!
}

type SDDLPermission {
    access: String!
    accessType: AceQualifierEnum!
    cn: String!
    dn: String!
    flags: [AceFlagsEnum!]!
    resolutionType: ResolutionTypeEnum!
}

"Summary for the no. of objects protected by sla."
type SLAIdToObjectCount {
    objectCount: Int!
    slaId: String!
}

"""

Supported in v5.3+
"""
type SapHanaAddSystemResponse {
    """

    Supported in v5.3+
    Status of the job scheduled to refresh the system.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    The ID of the added SAP HANA system.
    """
    id: String!
}

type SapHanaAppMetadata {
    backupId: Long
    backupPrefix: String
    baseBackupId: Long
    baseFullSnapshotId: String
    files: [SapHanaDataBackupFile!]
    isExternalBackup: Boolean
    isRubrikTriggeredOnDemandBackup: Boolean
    rubrikSnapshotEndTime: DateTime
    rubrikSnapshotStartTime: DateTime
    sapHanaEndTime: DateTime
    sapHanaStartTime: DateTime
    snapshotType: String
}

type SapHanaConfig {
    differentialFrequency: SlaDuration
    incrementalFrequency: SlaDuration
    logRetention: SlaDuration
}

type SapHanaDataBackupFile {
    backupFileSizeInBytes: Long!
    destinationPath: String!
    externalBackupId: String!
    redoLogPositionOpt: Long
    serviceType: String!
    sourceId: Long!
    sourceType: String!
}

"Additional information about backup data path"
type SapHanaDataPathSpecObject {
    name: String!
}

type SapHanaDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & SapHanaSystemDescendantType & SapHanaSystemPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    clusterUuid: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    dataPathSpec: SapHanaDataPathSpecObject
    dataPathType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    forceFull: Boolean!
    "The fid of the hierarchy object."
    id: UUID!
    info: SapHanaDatabaseInfoObject
    isRelic: Boolean!
    logSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana log snapshots by input"
        filter: SapHanaLogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana log snapshots by field"
        sortBy: SapHanaLogSnapshotSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaLogSnapshotConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    primaryClusterUuid: UUID!
    recoverableRangeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana recoverable ranges by input"
        filter: SapHanaRecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana recoverable ranges by field"
        sortBy: SapHanaRecoverableRangeSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaRecoverableRangeConnection!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    sapHanaSystem: SapHanaSystem!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    systemId: String!
}

type SapHanaDatabaseConnection {
    count: Int!
    edges: [SapHanaDatabaseEdge!]!
    nodes: [SapHanaDatabase!]!
    pageInfo: PageInfo!
}

type SapHanaDatabaseEdge {
    cursor: String!
    node: SapHanaDatabase!
}

"Additional information about backint and database configuration"
type SapHanaDatabaseInfoObject {
    approxDbSizeInMb: Long!
    backintPath: String!
    databaseType: String!
    logBackupIntervalSecs: Int!
    numChannels: Int!
    paramFilePath: String!
    status: String!
}

"""

Supported in v5.3+
"""
type SapHanaHost {
    """

    Supported in v5.3+
    The IP address or fully qualified domain name of the SAP HANA host.
    """
    hostName: String!
    hostType: SapHanaHostHostTypeEnum
    """

    Supported in v5.3+
    The ID of the SAP HANA system host.
    """
    hostUuid: String!
    """

    Supported in v5.3+
    The local name of the SAP HANA host.
    """
    sapHanaHostName: String
    """

    Required. Supported in v5.3+
    The status of the SAP HANA system host.
    """
    status: String!
}

"Information about sap hana hosts of the system"
type SapHanaHostObject {
    clusterUuid: UUID!
    host: PhysicalHost!
    hostName: String!
    hostType: String!
    hostUuid: String!
    status: String!
}

type SapHanaLogBackup {
    backupId: Long
    bytesTransferred: Long
    doesContainCatalogFile: Boolean
    endTime: DateTime
    files: [SapHanaLogBackupFiles!]
    startTime: DateTime
}

type SapHanaLogBackupFiles {
    backupId: Long
    backupSizeInBytes: Long
    destinationPath: String
    destinationType: String
    externalBackupId: String
    hostName: String
    logPositionInterval: SapHanaLogPositionInterval
    serviceTypeName: String
    sourceId: Long
    sourceTypeName: String
}

type SapHanaLogPositionInterval {
    newestLogPosition: Long
    oldestLogPosition: Long
}

type SapHanaLogSnapshot {
    "app metadata of log snapshots in SAP HANA"
    appMetadata: SapHanaLogSnapshotAppMetadata
    cdmId: String!
    clusterUuid: UUID!
    date: DateTime
    fid: String!
    internalTimestamp: Long!
    isArchived: Boolean!
    locationMap: String
    snappableId: String!
    snappableType: String!
}

type SapHanaLogSnapshotAppMetadata {
    backups: [SapHanaLogBackup!]
}

type SapHanaLogSnapshotConnection {
    count: Int!
    edges: [SapHanaLogSnapshotEdge!]!
    nodes: [SapHanaLogSnapshot!]!
    pageInfo: PageInfo!
}

type SapHanaLogSnapshotEdge {
    cursor: String!
    node: SapHanaLogSnapshot!
}

"""

Supported in v5.3+
"""
type SapHanaPatchSystemResponse {
    """

    Supported in v5.3+
    Status of the job scheduled to refresh the SAP HANA system.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Supported in v5.3+
    Summary of the updated SAP HANA system object.
    """
    systemSummary: SapHanaSystemSummary
}

type SapHanaRecoverableRange {
    baseFullSnapshotId: String
    cdmId: String!
    clusterUuid: UUID!
    dbId: String!
    endTime: DateTime
    fid: String!
    isArchived: Boolean!
    startTime: DateTime
}

type SapHanaRecoverableRangeConnection {
    count: Int!
    edges: [SapHanaRecoverableRangeEdge!]!
    nodes: [SapHanaRecoverableRange!]!
    pageInfo: PageInfo!
}

type SapHanaRecoverableRangeEdge {
    cursor: String!
    node: SapHanaRecoverableRange!
}

"""

Supported in v5.3+
"""
type SapHanaSslInfo {
    encryptionProvider: SapHanaSslInfoEncryptionProviderEnum
    """

    Supported in v5.3+
    The path where the encryption key for the SAP HANA system is stored.
    """
    keyStorePath: String!
}

type SapHanaSystem implements CdmHierarchyObject & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    clusterUuid: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): SapHanaSystemDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hosts: [SapHanaHostObject!]!
    "The fid of the hierarchy object."
    id: UUID!
    instanceNumber: String!
    lastRefreshTime: DateTime
    lastStatusUpdateTime: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): SapHanaSystemPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    sid: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: SapHanaSystemStatus!
    statusMessage: [String!]!
}

type SapHanaSystemConnection {
    count: Int!
    edges: [SapHanaSystemEdge!]!
    nodes: [SapHanaSystem!]!
    pageInfo: PageInfo!
}

type SapHanaSystemDescendantTypeConnection {
    count: Int!
    edges: [SapHanaSystemDescendantTypeEdge!]!
    nodes: [SapHanaSystemDescendantType!]!
    pageInfo: PageInfo!
}

type SapHanaSystemDescendantTypeEdge {
    cursor: String!
    node: SapHanaSystemDescendantType!
}

type SapHanaSystemEdge {
    cursor: String!
    node: SapHanaSystem!
}

"""

Supported in v5.3+
"""
type SapHanaSystemInfo {
    """

    Supported in v5.3+
    The version of the SAP HANA system.
    """
    hanaVersion: String!
    """

    Supported in v5.3+
    Indicates whether the SAP HANA system has replication enabled.
    """
    isSystemReplicationEnabled: Boolean!
}

type SapHanaSystemPhysicalChildTypeConnection {
    count: Int!
    edges: [SapHanaSystemPhysicalChildTypeEdge!]!
    nodes: [SapHanaSystemPhysicalChildType!]!
    pageInfo: PageInfo!
}

type SapHanaSystemPhysicalChildTypeEdge {
    cursor: String!
    node: SapHanaSystemPhysicalChildType!
}

"""

Supported in v5.3+
"""
type SapHanaSystemSummary {
    containerType: SapHanaSystemSummaryContainerTypeEnum
    """

    Required. Supported in v5.3+
    """
    hosts: [SapHanaHost!]!
    """

    Required. Supported in v5.3+
    The ID of the SAP HANA system.
    """
    id: String!
    """

    Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String!
    """

    Supported in v5.3+
    The UTC timestamp for when the SAP HANA system was last refreshed.
    """
    lastRefreshTime: DateTime
    """

    Supported in v5.3+
    The number of databases in the SAP HANA system.
    """
    numDbs: Int!
    """

    Required. Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String!
    slaAssignable: SlaAssignable
    """

    Supported in v5.3+
    """
    sslInfo: SapHanaSslInfo
    status: SapHanaSystemSummaryStatusEnum!
    """

    Supported in v5.3+
    The message associated with the current SAP HANA system status.
    """
    statusMessage: String
    """

    Supported in v5.3+
    """
    systemInfo: SapHanaSystemInfo
    """

    Required. Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String!
}

type ScaleRuntime {
    deadline: DateTime
    newCount: Int!
    oldCount: Int!
    taskchainUuid: String!
}

"Metadata for rendering a scheduled report."
type ScheduledReport {
    createdAt: DateTime!
    creator: User!
    dailyTime: LocalTime
    hasCSVAttachment: Boolean!
    hasPDFAttachment: Boolean!
    "ID of the scheduled report."
    id: Int!
    lastEditor: User!
    lastUpdatedAt: DateTime!
    monthlyDate: Int
    monthlyTime: LocalTime
    recipients: [User!]!
    "The custom report id corresponding to this scheduled report."
    reportId: Int!
    title: String!
    weeklyDays: [WeekDayEnum!]
    weeklyTime: LocalTime
}

type ScheduledReportConnection {
    count: Int!
    edges: [ScheduledReportEdge!]!
    nodes: [ScheduledReport!]!
    pageInfo: PageInfo!
}

type ScheduledReportEdge {
    cursor: String!
    node: ScheduledReport!
}

"""

Supported in v5.0+
"""
type SearchResponse {
    """

    Supported in v5.0+
    """
    fileVersions: [FileVersion!]!
    """

    Supported in v5.0+
    Just the filename without the whole path.
    """
    filename: String
    """

    Supported in v5.0+
    """
    path: String
}

"""

Supported in v5.0+
"""
type SearchResponseListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [SearchResponse!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

type SecurityGroup {
    id: String!
    name: String!
}

type SeedEnabledPoliciesReply {
    policies: [ClassificationPolicyDetail!]!
}

type SeedInitialPoliciesReply {
    policies: [ClassificationPolicyDetail!]!
}

"Service Account"
type ServiceAccount {
    clientId: String!
    description: String!
    lastLogin: DateTime
    name: String!
    roles: [Role!]!
}

type ServiceAccountConnection {
    count: Int!
    edges: [ServiceAccountEdge!]!
    nodes: [ServiceAccount!]!
    pageInfo: PageInfo!
}

type ServiceAccountEdge {
    cursor: String!
    node: ServiceAccount!
}

"Enable or disable radar alerts for a snappable"
type SetSnappableAlertSettingReply {
    enabled: Boolean!
}

type SetupAzureO365ExocomputeResp {
    clusterId: String!
    taskchainId: String!
}

type ShareFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostShareDescendantType & HostSharePhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hardlinkSupportEnabled: Boolean!
    host: PhysicalHost
    "The fid of the hierarchy object."
    id: UUID!
    isPassThrough: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    pathExceptions: [String!]!
    pathExcluded: [String!]!
    pathIncluded: [String!]!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "Share type of this fileset"
    shareType: ShareTypeEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    symlinkResolutionEnabled: Boolean!
}

type SlaAssignResult {
    success: Boolean!
}

"""

Supported in v5.0+
"""
type SlaAssignable {
    """

    Supported in v5.0+
    v5.0-v5.1: ID of the configured SLA domain
    v5.2+: The ID of the SLA Domain configured directly on the Rubrik object.
    """
    configuredSlaDomainId: String!
    """

    Supported in v5.0+
    v5.0-v5.1: name of the configured SLA domain
    v5.2+: The name of the SLA Domain configured directly on the Rubrik object.
    """
    configuredSlaDomainName: String!
    configuredSlaDomainType: ConfiguredSlaTypeEnum
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The ID of the Rubrik object.
    """
    id: String!
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the configured SLA domain is Retention Locked. When this value is 'true', the configured SLA domain is a Retention Lock SLA Domain.
    v5.2+: Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
    """
    isConfiguredSlaDomainRetentionLocked: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The name of the Rubrik object.
    """
    name: String!
    """

    Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The ID of the cluster that manages the Rubrik object.
    """
    primaryClusterId: String!
    """

    Supported in v5.2+
    The UTC time when the SLA Domain was last updated.
    """
    slaLastUpdateTime: DateTime
}

type SlaAuditDetail {
    applyToExistingSnapshots: Boolean!
    cluster: Cluster
    currentSlaSummary: SlaDomain
    previousSlaSummary: SlaDomain
    timestamp: DateTime
    userAction: String!
    userName: String!
}

type SlaDomainConnection {
    count: Int!
    edges: [SlaDomainEdge!]!
    nodes: [SlaDomain!]!
    pageInfo: PageInfo!
}

type SlaDomainEdge {
    cursor: String!
    node: SlaDomain!
}

"SLA Domain with warnings detail"
type SlaDomainWithWarnings {
    slaDomain: SlaDomain!
    warnings: [SlaWarning!]!
}

type SlaDuration {
    duration: Int!
    unit: RetentionUnitEnum!
}

"Type that contains SLA name and ID."
type SlaInfo {
    "ID of SLA."
    id: String!
    "Name of SLA."
    name: String!
}

type SlaLogFrequencyConfigResult {
    retention: SlaDuration
}

"Replication cluster specific information."
type SlaReplicationCluster {
    "Id of replication cluster."
    id: UUID!
    "Name of replication cluster."
    name: String!
}

type SlaResult {
    success: Boolean!
}

"Warning for SLA Assignment for each object"
type SlaWarning {
    code: AssignSLAWarningsEnum!
    objectIds: [String!]!
    severity: WarningSeverityEnum!
}

"An object that can be snapshotted."
type Snappable {
    archivalComplianceStatus: String
    archivalSnapshotLag: Int
    "The number of snapshots that have been archived."
    archiveSnapshots: Int
    "The amount of storage taken by archived snapshots."
    archiveStorage: Long
    awaitingFirstFull: Boolean
    "The cluster the snappable belongs to"
    cluster: Cluster
    "The current compliance status of the snappable."
    complianceStatus: ComplianceStatusEnum
    "The change from transferred bytes to physical bytes"
    dataReduction: Float
    fid: UUID
    "The id of the snappable."
    id: String!
    "The timestamp of the last taken snapshot."
    lastSnapshot: DateTime
    latestArchivalSnapshot: DateTime
    latestReplicationSnapshot: DateTime
    localOnDemandSnapshots: Int
    localSLASnapshots: Int
    "The number of snapshots locally present."
    localSnapshots: Int
    location: String!
    "Logical bytes taken by snapshots of this snappable."
    logicalBytes: Long
    logicalDataReduction: Float
    "The number of snapshots that were missed."
    missedSnapshots: Int
    "The name of the snappable."
    name: String!
    "The object type of the snappable."
    objectType: ObjectTypeEnum!
    "Physical bytes taken by snapshots of this snappable."
    physicalBytes: Long
    "The date and time when the snappable was last protected."
    protectedOn: DateTime
    "The protection status of the snappable."
    protectionStatus: ProtectionStatusEnum!
    "The time this snappable data was pulled from cdm."
    pullTime: DateTime!
    "The number of snapshots that have been replicated."
    replicaSnapshots: Int
    "The amount of storage taken by replicated snapshots."
    replicaStorage: Long
    replicationComplianceStatus: String
    replicationSnapshotLag: Int
    "The sla domain of the snappable."
    slaDomain: SlaDomain
    "The total number of snapshots present for the snapshot."
    totalSnapshots: Int
    "Bytes ingested over the network for this snappable."
    transferredBytes: Long
}

type SnappableAggregation {
    archiveStorage: Long!
    logicalBytes: Long!
    missedSnapshots: Int!
    physicalBytes: Long!
    replicaStorage: Long!
    totalSnapshots: Int!
}

type SnappableChart {
    focus: ReportFocusEnum!
    groupBy: [SnappableGroupByEnum!]
    name: String!
}

type SnappableConnection {
    aggregation: SnappableAggregation!
    count: Int!
    edges: [SnappableEdge!]!
    nodes: [Snappable!]!
    pageInfo: PageInfo!
}

type SnappableEdge {
    cursor: String!
    node: Snappable!
}

"Snappable data with groupby info applied to it."
type SnappableGroupBy {
    "The data groupby info."
    groupByInfo: SnappableGroupByInfo!
    "Paginated snappable data."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    "Further provide groupings for the data."
    snappableGroupBy(
        "group snappables by field"
        groupBy: SnappableGroupByEnum!
    ): [SnappableGroupBy!]!
}

type SnappableGroupByConnection {
    count: Int!
    edges: [SnappableGroupByEdge!]!
    nodes: [SnappableGroupBy!]!
    pageInfo: PageInfo!
}

type SnappableGroupByEdge {
    cursor: String!
    node: SnappableGroupBy!
}

type SnappableInstanceType {
    awsInstanceType: AwsInstanceType!
}

type SnappableInstanceTypeConnection {
    count: Int!
    edges: [SnappableInstanceTypeEdge!]!
    nodes: [SnappableInstanceType!]!
    pageInfo: PageInfo!
    suggestInstanceType: SnappableInstanceType
}

type SnappableInstanceTypeEdge {
    cursor: String!
    node: SnappableInstanceType!
}

"Count, snappable_id, snappable_type of how many times Radar has scanned an object"
type SnappableScanned {
    count: Long!
    snappableId: String!
    snappableType: String!
}

type SnappableSecurityGroup {
    description: String!
    id: String!
    name: String!
    ownerId: String!
    securityGroupId: String!
    "vpc of the security group"
    vpc: Vpc
}

type SnappableSecurityGroupConnection {
    count: Int!
    edges: [SnappableSecurityGroupEdge!]!
    nodes: [SnappableSecurityGroup!]!
    pageInfo: PageInfo!
}

type SnappableSecurityGroupEdge {
    cursor: String!
    node: SnappableSecurityGroup!
}

type SnappableStorageVolumeType {
    awsStorageVolumeType: AwsStorageVolumeType!
}

type SnappableStorageVolumeTypeConnection {
    count: Int!
    edges: [SnappableStorageVolumeTypeEdge!]!
    nodes: [SnappableStorageVolumeType!]!
    pageInfo: PageInfo!
}

type SnappableStorageVolumeTypeEdge {
    cursor: String!
    node: SnappableStorageVolumeType!
}

type SnappableSubnet {
    availabilityZone: String!
    cidrBlock: AddressBlockV4
    id: String!
    name: String!
    subnetId: String!
    "vpc of the subnet"
    vpc: Vpc
}

type SnappableSubnetConnection {
    count: Int!
    edges: [SnappableSubnetEdge!]!
    nodes: [SnappableSubnet!]!
    pageInfo: PageInfo!
}

type SnappableSubnetEdge {
    cursor: String!
    node: SnappableSubnet!
}

type SnappableTable {
    focus: ReportFocusEnum!
    groupBy: [SnappableGroupByEnum!]
    name: String!
    selectedColumns: [SnappableTableColumnEnum!]!
    sortBy: SnappableSortByEnum
    sortOrder: SortOrderEnum
}

type SnappableTypeSummary {
    count: Int!
    snappableType: HierarchyObjectTypeEnum!
}

type SnapshotDelta {
    deltaAmount: Long!
    deltaType: DeltaTypeEnum!
}

"A generic snapshot type"
type SnapshotDistribution {
    "The id of the snappable"
    id: UUID!
    "Number of on demand snapshots"
    onDemandCount: Long!
    "Number of retrieved snapshots"
    retrievedCount: Long!
    "Number of scheduled snapshots"
    scheduledCount: Long!
    "Total number of snapshots"
    totalCount: Long!
}

type SnapshotFile {
    absolutePath: String!
    displayPath: String!
    fileMode: FileModeEnum!
    filename: String!
    lastModified: DateTime!
    path: String!
    size: Long!
    statusMessage: String!
}

type SnapshotFileConnection {
    count: Int!
    edges: [SnapshotFileEdge!]!
    nodes: [SnapshotFile!]!
    pageInfo: PageInfo!
}

type SnapshotFileDelta {
    childrenDeltas: [SnapshotDelta!]!
    file: SnapshotFile!
    selfDeltas: [SnapshotDelta!]!
}

type SnapshotFileDeltaConnection {
    count: Int!
    currentSnapshot: CdmSnapshot!
    edges: [SnapshotFileDeltaEdge!]!
    nodes: [SnapshotFileDelta!]!
    pageInfo: PageInfo!
    previousSnapshot: CdmSnapshot
}

type SnapshotFileDeltaEdge {
    cursor: String!
    node: SnapshotFileDelta!
}

type SnapshotFileEdge {
    cursor: String!
    node: SnapshotFile!
}

"""

Supported in v5.2+
"""
type SnapshotLocationRetentionInfo {
    """

    Supported in v5.2+
    Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
    """
    expirationTime: DateTime
    """

    Required. Supported in v5.2+
    ID of the location.
    """
    id: String!
    """

    Supported in v5.2+
    A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
    """
    isExpirationDateCalculated: Boolean
    """

    Supported in v5.2+
    Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
    """
    isExpirationInformationUnavailable: Boolean
    """

    Supported in v5.2+
    Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
    """
    isSnapshotPresent: Boolean!
    """

    Required. Supported in v5.2+
    Name of the location.
    """
    name: String!
    """

    Supported in v5.2+
    The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
    """
    snapshotFrequency: String
}

type SnapshotResult {
    snapshotFid: String!
    snapshotTime: Long!
}

type SnapshotResultConnection {
    count: Int!
    edges: [SnapshotResultEdge!]!
    nodes: [SnapshotResult!]!
    pageInfo: PageInfo!
}

type SnapshotResultEdge {
    cursor: String!
    node: SnapshotResult!
}

"""

Supported in v5.2+
"""
type SnapshotRetentionInfo {
    """

    Supported in v5.2+
    List of snapshot retention information on the archival locations.
    """
    archivalInfos: [SnapshotLocationRetentionInfo!]!
    """

    Supported in v5.2+
    Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations.
    """
    cloudNativeLocationInfo: [SnapshotLocationRetentionInfo!]!
    """

    Supported in v5.2+
    Snapshot retention information on the local cluster.
    """
    localInfo: SnapshotLocationRetentionInfo
    """

    Supported in v5.2+
    List of snapshot retention information on the replicated locations.
    """
    replicationInfos: [SnapshotLocationRetentionInfo!]!
}

type SnapshotSchedule {
    daily: DailySnapshotSchedule
    hourly: HourlySnapshotSchedule
    minute: MinuteSnapshotSchedule
    monthly: MonthlySnapshotSchedule
    quarterly: QuarterlySnapshotSchedule
    weekly: WeeklySnapshotSchedule
    yearly: YearlySnapshotSchedule
}

type SonarContentReportChart {
    focus: ReportFocusEnum!
    groupBy: [SonarContentReportGroupByEnum!]
    name: String!
}

type SonarContentReportTable {
    focus: ReportFocusEnum!
    groupBy: [SonarContentReportGroupByEnum!]
    name: String!
    selectedColumns: [SonarContentReportTableColumnEnum!]!
    sortBy: SonarContentReportSortByEnum
    sortOrder: SortOrderEnum
}

type SonarContentReportTableRow {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerId: String!
    analyzerResults: [AnalyzerResult!]!
    cluster: String!
    fileName: String!
    filesWithHits: Int!
    hits: Hits
    id: String!
    location: String!
    objectName: String!
    objectType: HierarchyObjectTypeEnum!
    path: String!
    policyId: String!
    size: Long!
    slaDomainId: String!
    snappableFid: String!
    snapshotTimestamp: Long!
}

type SonarContentReportTableRowConnection {
    count: Int!
    edges: [SonarContentReportTableRowEdge!]!
    nodes: [SonarContentReportTableRow!]!
    pageInfo: PageInfo!
}

type SonarContentReportTableRowEdge {
    cursor: String!
    node: SonarContentReportTableRow!
}

type SonarReportChart {
    focus: ReportFocusEnum!
    groupBy: [SonarReportGroupByEnum!]
    name: String!
}

type SonarReportGroupByResult {
    count: Long!
    groupByValue: String!
    timeSeriesResults: [TimeSeriesResult!]!
}

type SonarReportGroupByResultConnection {
    count: Int!
    edges: [SonarReportGroupByResultEdge!]!
    nodes: [SonarReportGroupByResult!]!
    pageInfo: PageInfo!
}

type SonarReportGroupByResultEdge {
    cursor: String!
    node: SonarReportGroupByResult!
}

type SonarReportTable {
    focus: ReportFocusEnum!
    groupBy: [SonarReportGroupByEnum!]
    name: String!
    selectedColumns: [SonarReportTableColumnEnum!]!
    sortBy: SonarReportSortByEnum
    sortOrder: SortOrderEnum
}

type SonarReportTableRow {
    numHighRiskLocations: Int!
    numObjects: Int!
    numViolatedFiles: Int!
    policyId: String!
    policyName: String!
    policyStatus: SonarReportTablePolicyStatusEnum!
    violations: Int!
}

type SonarReportTableRowConnection {
    count: Int!
    edges: [SonarReportTableRowEdge!]!
    nodes: [SonarReportTableRow!]!
    pageInfo: PageInfo!
}

type SonarReportTableRowEdge {
    cursor: String!
    node: SonarReportTableRow!
}

type Source {
    stringValue: String!
}

type SourceBlueprintInfo {
    blueprintId: String!
    sourceChildInfos: [SourceChildInfo!]!
}

type SourceChildInfo {
    childInfo: ChildInfo!
    failoverChildId: String!
}

type SpecificReplicationSpec {
    bidirectionalSpec: BidirectionalReplicationSpec
    cloudLocationSpec: ReplicationToCloudLocationSpec
    cloudRegionSpec: ReplicationToCloudRegionSpec
    unidirectionalSpec: UnidirectionalReplicationSpec
}

type StartCrawlReply {
    crawlId: String!
}

type StartTimeAttributes {
    dayOfWeek: DayOfWeekOpt
    hour: Int!
    minute: Int!
}

type StartUpgradeReply {
    context: Context
}

type Status {
    stringValue: String!
}

type StorageAccount {
    accessTier: TierEnum!
    id: String!
    kind: String!
    name: String!
    regionName: String!
    resourceGroup: ResourceGroup
    sku: SkuEnum!
}

type StorageAccountConnection {
    count: Int!
    edges: [StorageAccountEdge!]!
    nodes: [StorageAccount!]!
    pageInfo: PageInfo!
}

type StorageAccountEdge {
    cursor: String!
    node: StorageAccount!
}

type Subnet {
    id: String!
    name: String!
    securityGroup: SecurityGroup
}

type SubnetConnection {
    count: Int!
    edges: [SubnetEdge!]!
    nodes: [Subnet!]!
    pageInfo: PageInfo!
}

type SubnetEdge {
    cursor: String!
    node: Subnet!
}

"A subnet group on AWS."
type SubnetGroup {
    arn: String!
    name: String!
    subnets: [AwsNativeSubnet!]!
    vpcId: String!
}

"Contains the success details about RBA connectivity taskchains"
type Success {
    snappableId: String!
    taskchainId: String!
}

type SupportPortalLoginReply {
    status: UpgradeStatus
}

type SupportPortalLogoutReply {
    status: UpgradeStatus
}

type SupportPortalStatusReply {
    isLoggedIn: Boolean!
    status: UpgradeStatus
    username: String!
}

"Response type for getting information about a support tunnel"
type SupportTunnelInfoResp {
    enabledTime: DateTime
    inactivityTimeoutInSeconds: Long
    isTunnelEnabled: Boolean!
    lastActivityTime: DateTime
    nodeId: String!
    port: Long
}

type SyslogConfig {
    id: Int!
    notificationConf: CommonNotificationConfig
    syslogConf: SyslogSetting
}

type SyslogSetting {
    facility: SyslogFacilityTypeEnum!
    severity: SyslogSeverityTypeEnum!
}

type TableFilters {
    ProtectionTaskDetailsTable: ProtectionTaskDetailsTableFilter!
    RecoveryTaskDetailsTable: RecoveryTaskDetailsTableFilter!
}

type Tag {
    key: String!
    value: String!
}

"Represents the sla id and name"
type TagRuleEffectiveSla {
    id: String!
    name: String!
}

"Tag represents a tag key value pair"
type TagRuleTag {
    matchAllValues: Boolean!
    tagKey: String!
    tagValue: String!
}

"Represents the error in response to triggering the on-demand snapshot of the snappable"
type TakeOnDemandSnapshotError {
    error: String!
    snappableId: String!
}

"Represents the response to the take on-demand snapshot operation. For each snappable ID that the on-demand snapshot was triggered, it either ends up being in the taskchainUuids or the errors map depending on if the operation succeeded or failed respectively."
type TakeOnDemandSnapshotReply {
    errors: [TakeOnDemandSnapshotError!]!
    taskchainUuids: [TakeOnDemandSnapshotTaskchainUuid!]!
}

"Represents the taskchain UUID in response to triggering the on-demand snapshot of snappable"
type TakeOnDemandSnapshotTaskchainUuid {
    snappableId: String!
    taskchainUuid: String!
}

type TakeScreenshotReply {
    screenshots: [String!]!
}

"Result of the delete target operation"
type TargetDeleteResult {
    success: Boolean!
}

"Target Mapping info"
type TargetMapping {
    groupType: ArchivalGroupTypeEnum!
    id: UUID!
    name: String!
    targetTemplate: TargetTemplate
    targetType: TargetTypeEnum!
    targets: [Target!]
}

type TargetMappingDeletionResult {
    success: Boolean!
}

type TargetPauseResult {
    success: Boolean!
}

type TargetResumeResult {
    success: Boolean!
}

type TargetSite {
    stringValue: String!
}

"A task details."
type TaskDetail {
    archivalTarget: String
    clusterLocation: String!
    clusterName: String!
    clusterType: String!
    clusterUuid: UUID!
    dataReduction: Float
    dataTransferred: Long
    dedupRatio: Float
    directArchive: String
    duration: Long!
    endTime: DateTime!
    failureReason: String
    id: Long!
    location: String!
    logicalBytes: Long
    logicalDataReduction: Float
    logicalDedupRatio: Float
    objectFid: String!
    objectName: String!
    objectType: String!
    physicalBytes: Long
    protectedVolume: String
    recoveryPoint: String
    recoveryPointType: String
    replicationSource: String
    replicationTarget: String
    reportJobInstanceId: String!
    slaDomainId: String!
    slaDomainName: String!
    snapshotConsistency: String
    startTime: DateTime!
    status: String!
    taskCategory: String!
    taskType: String!
    totalFilesTransferred: Long
    userName: String
}

type TaskDetailChart {
    focus: ReportFocusEnum!
    groupBy: [TaskDetailGroupByEnum!]
    name: String!
}

type TaskDetailClusterType {
    stringValue: String!
}

type TaskDetailConnection {
    count: Int!
    edges: [TaskDetailEdge!]!
    nodes: [TaskDetail!]!
    pageInfo: PageInfo!
}

type TaskDetailEdge {
    cursor: String!
    node: TaskDetail!
}

"Task detail with groupby info applied to it."
type TaskDetailGroupBy {
    "The data groupby info."
    groupByInfo: TaskDetailGroupByInfo!
    "Paginated task detail data."
    taskDetailConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task detail by field"
        sortBy: TaskDetailSortByEnum = EndTime,
        "task detail sort order"
        sortOrder: SortOrderEnum = Desc
    ): TaskDetailConnection!
    taskDetailGroupBy(
        "group task detail by a field"
        groupBy: TaskDetailGroupByEnum!
    ): [TaskDetailGroupBy!]!
}

type TaskDetailGroupByConnection {
    count: Int!
    edges: [TaskDetailGroupByEdge!]!
    nodes: [TaskDetailGroupBy!]!
    pageInfo: PageInfo!
}

type TaskDetailGroupByEdge {
    cursor: String!
    node: TaskDetailGroupBy!
}

type TaskDetailObjectType {
    stringValue: String!
}

type TaskDetailTable {
    focus: ReportFocusEnum!
    groupBy: [TaskDetailGroupByEnum!]
    name: String!
    selectedColumns: [TaskDetailTableColumnEnum!]!
    sortBy: TaskDetailSortByEnum
    sortOrder: SortOrderEnum
}

"A backup task summary."
type TaskSummary {
    clusterUuid: UUID!
    date: DateTime!
    "Location of the associated backup task summary."
    location: String
    "The number of the canceled tasks."
    numCanceled: Int!
    "The number of the expected tasks."
    numExpected: Int!
    "The number of the failed and missed tasks."
    numFailed: Int!
    "The number of the successful tasks."
    numSucceeded: Int!
    "Object name of the associated backup task summary."
    objectName: String!
    "Object type of the associated backup task summary."
    objectType: ObjectTypeEnum!
    slaDomainId: String!
    "slaDomain name of the object."
    slaDomainName: String!
    "Snappable Id of the associated backup task summary"
    snappbleId: UUID!
}

type TaskSummaryAggregation {
    NumOfCanceled: Int!
    NumOfExpected: Int!
    NumOfFailed: Int!
    NumOfSucceeded: Int!
}

type TaskSummaryChart {
    focus: ReportFocusEnum!
    groupBy: [TaskSummaryGroupByEnum!]
    name: String!
}

type TaskSummaryConnection {
    aggregation: TaskSummaryAggregation!
    count: Int!
    edges: [TaskSummaryEdge!]!
    nodes: [TaskSummary!]!
    pageInfo: PageInfo!
}

type TaskSummaryEdge {
    cursor: String!
    node: TaskSummary!
}

"Task summary with groupby info applied to it."
type TaskSummaryGroupBy {
    "The data groupby info."
    groupByInfo: TaskSummaryGroupByInfo!
    "Paginated task summary data."
    taskSummaryConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task summary by field"
        sortBy: TaskSummarySortByEnum = ObjectName,
        "sort order"
        sortOrder: SortOrderEnum
    ): TaskSummaryConnection!
    taskSummaryGroupBy(
        "group task summary by a field"
        groupBy: TaskSummaryGroupByEnum!
    ): [TaskSummaryGroupBy!]!
}

type TaskSummaryGroupByConnection {
    count: Int!
    edges: [TaskSummaryGroupByEdge!]!
    nodes: [TaskSummaryGroupBy!]!
    pageInfo: PageInfo!
}

type TaskSummaryGroupByEdge {
    cursor: String!
    node: TaskSummaryGroupBy!
}

type TaskSummaryTable {
    focus: ReportFocusEnum!
    groupBy: [TaskSummaryGroupByEnum!]
    name: String!
    selectedColumns: [TaskReportTableColumnEnum!]!
    sortBy: TaskSummarySortByEnum
    sortOrder: SortOrderEnum
}

"Taskchain"
type Taskchain {
    account: String!
    component: String!
    config: String!
    currentTaskExecutionAttempts: Int!
    currentTaskIndex: Int!
    endTime: DateTime
    error: String!
    id: Long!
    jobId: Long!
    jobType: String!
    name: String!
    parentTaskchainId: String!
    podName: String!
    priority: Int!
    progress: Long!
    progressedAt: DateTime
    startTime: DateTime
    state: TaskchainStateEnum!
    taskchainUuid: String!
    workflowName: String!
}

type TaskchainInfo {
    appId: String!
    taskchainId: String!
}

"A range of time"
type TimeRange {
    "End of the time range"
    end: DateTime!
    "Start of the time range"
    start: DateTime!
}

"A range of time and the unit of that range"
type TimeRangeWithUnit {
    "End of the time range"
    end: DateTime!
    "Start of the time range"
    start: DateTime!
    "Unit of the time range"
    unit: TimeUnitEnum!
}

type TimeSeriesResult {
    count: Long!
    timestamp: String!
}

type TimelineEntry {
    day: String!
    hits: Hits
    policyId: String!
}

"Lambda job information on certain cluster "
type TriggerRansomwareDetectionReply {
    clusterUuid: String!
    jobId: String!
}

type UnidirectionalReplicationSpec {
    replicationTargetId: String!
    replicationTargetName: String!
    retention: Int!
    retentionUnit: RetentionUnitEnum!
    "The cluster to which this SLA will replicate the snapshots."
    targetCluster: Cluster
}

"Aws cloud account save response."
type UpdateAwsCloudAccountReply {
    "Contains success response message."
    message: String
}

"Output for updateCloudNativeAwsStorageSetting mutation"
type UpdateCloudNativeAwsStorageSettingReply {
    targetMapping: TargetMapping!
}

"The status of update indexing status call. For each snappable ID in the request: an entry in errors if failed."
type UpdateCloudNativeIndexingStatusReply {
    errors: [UpdateIndexingStatusError!]!
}

type UpdateIndexingStatusError {
    error: String!
    snappableId: String!
}

type UpdateLdapConfigReply {
    ldapConfig: LDAPConfig
}

"Cluster upgrade data with groupby info applied to it."
type UpgradeInfoGroupBy {
    "Paginated snappable data."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort upgradeInfo by field"
        sortBy: UpgradeInfoSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Further provide groupings for the data."
    clusterGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: UpgradeInfoGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [UpgradeGroupByInfo!]!
    "The data groupby info."
    groupByInfo: UpgradeGroupByInfo!
}

type UpgradeInfoGroupByConnection {
    count: Int!
    edges: [UpgradeInfoGroupByEdge!]!
    nodes: [UpgradeInfoGroupBy!]!
    pageInfo: PageInfo!
}

type UpgradeInfoGroupByEdge {
    cursor: String!
    node: UpgradeInfoGroupBy!
}

type UpgradeJobReply {
    message: String!
    success: Boolean!
}

type UpgradeJobReplyWithUuid {
    UpgradeJobReply: UpgradeJobReply!
    uuid: String!
}

type UpgradeRecommendationInfo {
    recommendation: String!
    releaseNotesLink: String!
    upgradability: [String!]!
}

type UpgradeStatus {
    code: String!
    excepshuns: String!
    message: String!
}

type UpgradeStatusReply {
    currentState: String!
    currentStateName: String!
    currentStateProgress: String!
    finishedStates: String!
    mode: String!
    nodeName: String!
    pendingStates: String!
    progress: String!
    tarballName: String!
    upgradeProgressPercentage: String!
    upgradeStatus: UpgradeStatus
    upgradeTimeLeftSecs: String!
    upgradeTimestamp: String!
    userSurfacedTaskName: String!
}

type User {
    domain: UserDomainEnum!
    email: String!
    emailConfig: [EventDigest!]!
    groups: [String!]!
    id: String!
    isAccountOwner: Boolean!
    lastLogin: DateTime
    roles: [Role!]!
    status: UserStatusEnum!
    unreadCount: Int!
    username: String!
}

"Represents the activity for a specific user."
type UserActivityResult {
    "The total number of activities this user had."
    numActivities: Int!
    "The total number of activities, grouped by activity type."
    numActivitiesBreakdown: [ActivityResult!]!
    "ID used for pagination."
    paginationId: String!
    "The user that this result corresponds to."
    user: AccessUser
}

type UserActivityResultConnection {
    count: Int!
    edges: [UserActivityResultEdge!]!
    nodes: [UserActivityResult!]!
    pageInfo: PageInfo!
}

type UserActivityResultEdge {
    cursor: String!
    node: UserActivityResult!
}

type UserAudit {
    auditType: UserAuditTypeEnum
    cluster: Cluster
    id: ID!
    message: String!
    objectId: String!
    objectName: String
    objectType: UserAuditObjectTypeEnum!
    severity: UserAuditSeverityEnum
    status: UserAuditStatusEnum!
    time: DateTime!
    userName: String
}

type UserAuditChart {
    focus: ReportFocusEnum!
    groupBy: [UserAuditGroupByEnum!]
    name: String!
}

type UserAuditConnection {
    count: Int!
    edges: [UserAuditEdge!]!
    nodes: [UserAudit!]!
    pageInfo: PageInfo!
}

type UserAuditEdge {
    cursor: String!
    node: UserAudit!
}

"User audit data with groupby info applied to it"
type UserAuditGroupBy {
    "The data group by info."
    groupByInfo: UserAuditGroupByInfo!
    "Paginated audit data."
    userAuditConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort user audit by field"
        sortBy: UserAuditSortByEnum = Time
    ): UserAuditConnection!
    "Further provide groupings for the data."
    userAuditGroupBy(
        "group audits by a field"
        groupBy: UserAuditGroupByEnum!
    ): [UserAuditGroupBy!]!
}

type UserAuditGroupByConnection {
    count: Int!
    edges: [UserAuditGroupByEdge!]!
    nodes: [UserAuditGroupBy!]!
    pageInfo: PageInfo!
}

type UserAuditGroupByEdge {
    cursor: String!
    node: UserAuditGroupBy!
}

type UserAuditObjectType {
    enumValue: UserAuditObjectTypeEnum!
}

type UserAuditStatus {
    enumValue: UserAuditStatusEnum!
}

type UserAuditTable {
    focus: ReportFocusEnum!
    groupBy: [UserAuditGroupByEnum!]
    name: String!
    selectedColumns: [UserAuditTableColumnEnum!]!
    sortBy: UserAuditSortByEnum
    sortOrder: SortOrderEnum
}

type UserAuditType {
    enumValue: UserAuditTypeEnum!
}

type UserConnection {
    count: Int!
    edges: [UserEdge!]!
    nodes: [User!]!
    pageInfo: PageInfo!
}

type UserDownload {
    completeTime: String!
    createTime: String!
    id: Long!
    identifier: DownloadIdentifierEnum!
    name: String!
    progress: Int!
    status: DownloadStatusEnum!
}

type UserDownloadUrl {
    url: String!
}

type UserEdge {
    cursor: String!
    node: User!
}

type UserSetting {
    setting: String!
    value: String!
}

type UserSettings {
    settings: [UserSetting!]!
}

type VNet {
    id: String!
    name: String!
    regionName: String!
    resourceGroup: ResourceGroup
}

type VNetConnection {
    count: Int!
    edges: [VNetEdge!]!
    nodes: [VNet!]!
    pageInfo: PageInfo!
}

type VNetEdge {
    cursor: String!
    node: VNet!
}

type VSphereBlueprint implements Blueprint & CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The list of children snappable"
    childConnection: BlueprintChildConnection!
    children: [VSphereVmChild!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    currentFailoverStatus: AppBlueprintFailoverStatusEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isAssignedSlaSynced: Boolean!
    isMount: Boolean!
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    lastFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastFailoverTimeMillisOpt: Long
    "last test failover"
    lastTestFailover: Failover
    lastTestFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastTestFailoverTimeMillisOpt: Long
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    mountTimeMillisOpt: Long
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot ready for failover"
    newestFailoverReadySnapshot(isTestFailover: Boolean!): CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The recovery ranges of the blueprint"
    recoveryInfo(
        "The id of the cluster"
        clusterUuid: UUID!
    ): BlueprintRecoveryRanges
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    rmStatus: AppBlueprintRmStatusEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    status: AppBlueprintStatusEnum!
}

type VSphereBlueprintChildFailoverInstance implements BlueprintFailoverInstance {
    failoverInstance: AwsEc2Instance!
    snappableId: String!
}

type VSphereBlueprintNew implements BlueprintNew & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The list of children snappable"
    childConnection: BlueprintChildConnection!
    children: [VSphereVmChild!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    lastFailoverStatus: BlueprintFailoverStatus!
    "Time when the last failover occurred."
    lastFailoverTime: DateTime
    lastFailoverTimeOpt: DateTime
    lastTestFailoverStatus: BlueprintFailoverStatus!
    "Time when the last test failover occurred."
    lastTestFailoverTime: DateTime
    lastTestFailoverTimeOpt: DateTime
    latestFailover: BlueprintFailover
    "Details of the local blueprint RPO lag."
    localRpoLagInfo: RPOLagInfo
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    platform: BlueprintPlatformEnum!
    "The recovery ranges of the blueprint"
    recoveryInfo(
        "The id of the cluster"
        clusterUuid: UUID!
    ): BlueprintRecoveryRanges
    "blueprint remote RPO lag info"
    remoteRpoLagInfo: RPOLagInfo
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "The source location from which this object originated."
    sourceLocation: BlueprintLocation
    status: BlueprintStatusEnum!
    "The target location to which the object failed over"
    targetLocation: BlueprintLocation
    version: Int!
}

type VSphereComputeCluster implements CdmHierarchyObject & HierarchyObject & VSphereDatacenterDescendantType & VSphereDatacenterPhysicalChildType & VSphereVCenterDescendantType & VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereComputeClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereComputeClusterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereComputeClusterDescendantTypeConnection {
    count: Int!
    edges: [VSphereComputeClusterDescendantTypeEdge!]!
    nodes: [VSphereComputeClusterDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereComputeClusterDescendantTypeEdge {
    cursor: String!
    node: VSphereComputeClusterDescendantType!
}

type VSphereComputeClusterPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereComputeClusterPhysicalChildTypeEdge!]!
    nodes: [VSphereComputeClusterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereComputeClusterPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereComputeClusterPhysicalChildType!
}

type VSphereDatacenter implements CdmHierarchyObject & HierarchyObject & VSphereVCenterDescendantType & VSphereVCenterLogicalChildType & VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereDatacenterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereDatacenterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereDatacenterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereDatacenterDescendantTypeConnection {
    count: Int!
    edges: [VSphereDatacenterDescendantTypeEdge!]!
    nodes: [VSphereDatacenterDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereDatacenterDescendantTypeEdge {
    cursor: String!
    node: VSphereDatacenterDescendantType!
}

type VSphereDatacenterLogicalChildTypeConnection {
    count: Int!
    edges: [VSphereDatacenterLogicalChildTypeEdge!]!
    nodes: [VSphereDatacenterLogicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereDatacenterLogicalChildTypeEdge {
    cursor: String!
    node: VSphereDatacenterLogicalChildType!
}

type VSphereDatacenterPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereDatacenterPhysicalChildTypeEdge!]!
    nodes: [VSphereDatacenterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereDatacenterPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereDatacenterPhysicalChildType!
}

type VSphereDatastore implements CdmHierarchyObject & HierarchyObject & VSphereComputeClusterDescendantType & VSphereDatacenterDescendantType & VSphereHostDescendantType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    capacity: Long!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    datastoreType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    freeSpace: Long!
    "object id"
    id: UUID!
    isLocal: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereDatastoreConnection {
    count: Int!
    edges: [VSphereDatastoreEdge!]!
    nodes: [VSphereDatastore!]!
    pageInfo: PageInfo!
}

type VSphereDatastoreEdge {
    cursor: String!
    node: VSphereDatastore!
}

type VSphereFolder implements CdmHierarchyObject & HierarchyObject & VSphereDatacenterDescendantType & VSphereDatacenterLogicalChildType & VSphereFolderDescendantType & VSphereFolderLogicalChildType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereFolderDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereFolderLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereFolderDescendantTypeConnection {
    count: Int!
    edges: [VSphereFolderDescendantTypeEdge!]!
    nodes: [VSphereFolderDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereFolderDescendantTypeEdge {
    cursor: String!
    node: VSphereFolderDescendantType!
}

type VSphereFolderLogicalChildTypeConnection {
    count: Int!
    edges: [VSphereFolderLogicalChildTypeEdge!]!
    nodes: [VSphereFolderLogicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereFolderLogicalChildTypeEdge {
    cursor: String!
    node: VSphereFolderLogicalChildType!
}

type VSphereHost implements CdmHierarchyObject & HierarchyObject & VSphereComputeClusterDescendantType & VSphereComputeClusterPhysicalChildType & VSphereDatacenterDescendantType & VSphereDatacenterPhysicalChildType & VSphereVCenterDescendantType & VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereHostDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereHostPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereHostConnection {
    count: Int!
    edges: [VSphereHostEdge!]!
    nodes: [VSphereHost!]!
    pageInfo: PageInfo!
}

type VSphereHostDescendantTypeConnection {
    count: Int!
    edges: [VSphereHostDescendantTypeEdge!]!
    nodes: [VSphereHostDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereHostDescendantTypeEdge {
    cursor: String!
    node: VSphereHostDescendantType!
}

type VSphereHostEdge {
    cursor: String!
    node: VSphereHost!
}

type VSphereHostPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereHostPhysicalChildTypeEdge!]!
    nodes: [VSphereHostPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereHostPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereHostPhysicalChildType!
}

type VSphereMount {
    attachingDiskCount: Int
    authorizedOperations: AuthorizedOperations!
    cdmId: String!
    cluster: Cluster!
    clusterName: String!
    hasAttachingDisk: Boolean
    host: VSphereHost
    id: UUID!
    isReady: Boolean!
    migrateDatastoreRequestId: String
    mountRequestId: String
    mountTimestamp: DateTime
    newVMName: String
    newVm: VSphereVm
    sourceSnapshot: CdmSnapshot
    sourceVm: VSphereVm
    status: VSphereLiveMountStatusEnum!
    unmountRequestId: String
}

type VSphereMountConnection {
    count: Int!
    edges: [VSphereMountEdge!]!
    nodes: [VSphereMount!]!
    pageInfo: PageInfo!
}

type VSphereMountEdge {
    cursor: String!
    node: VSphereMount!
}

type VSphereNetwork implements CdmHierarchyObject & HierarchyObject & VSphereHostDescendantType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereRecoveryComputeTarget {
    computeClusterId: String!
    computeClusterName: String!
    hostId: String!
    hostName: String!
    resourcePoolId: String!
    resourcePoolName: String!
    vCenterId: String!
    vCenterName: String!
}

type VSphereRecoverySpec implements RecoverySpec {
    memoryMbs: Int!
    target: VSphereRecoveryComputeTarget!
    userData: String
    vCpus: Int!
    vSphereNicSpecs: [VSphereVMNicSpec!]!
    vSphereVolumeSpecs: [VSphereVMVolumeSpec!]!
    version: Long!
}

type VSphereTag implements CdmHierarchyObject & HierarchyObject & VSphereTagCategoryDescendantType & VSphereTagCategoryTagChildType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tag children"
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereTagTagChildTypeConnection!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VSphereTagCategory implements CdmHierarchyObject & HierarchyObject & VSphereVCenterDescendantType & VSphereVCenterTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tag children"
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereTagCategoryTagChildTypeConnection!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VSphereTagCategoryTagChildTypeConnection {
    count: Int!
    edges: [VSphereTagCategoryTagChildTypeEdge!]!
    nodes: [VSphereTagCategoryTagChildType!]!
    pageInfo: PageInfo!
}

type VSphereTagCategoryTagChildTypeEdge {
    cursor: String!
    node: VSphereTagCategoryTagChildType!
}

type VSphereTagTagChildTypeConnection {
    count: Int!
    edges: [VSphereTagTagChildTypeEdge!]!
    nodes: [VSphereTagTagChildType!]!
    pageInfo: PageInfo!
}

type VSphereTagTagChildTypeEdge {
    cursor: String!
    node: VSphereTagTagChildType!
}

type VSphereVCenter implements CdmHierarchyObject & HierarchyObject {
    aboutInfo: AboutInformation
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    caCerts: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    conflictResolutionAuthz: ConflictResolutionAuthzEnum
    connectionStatus: RefreshableObjectConnectionStatus!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    lastRefreshTime: DateTime
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tag children"
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterTagChildTypeConnection!
    username: String!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VSphereVCenterConnection {
    count: Int!
    edges: [VSphereVCenterEdge!]!
    nodes: [VSphereVCenter!]!
    pageInfo: PageInfo!
}

type VSphereVCenterDescendantTypeConnection {
    count: Int!
    edges: [VSphereVCenterDescendantTypeEdge!]!
    nodes: [VSphereVCenterDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterDescendantTypeEdge {
    cursor: String!
    node: VSphereVCenterDescendantType!
}

type VSphereVCenterEdge {
    cursor: String!
    node: VSphereVCenter!
}

type VSphereVCenterLogicalChildTypeConnection {
    count: Int!
    edges: [VSphereVCenterLogicalChildTypeEdge!]!
    nodes: [VSphereVCenterLogicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterLogicalChildTypeEdge {
    cursor: String!
    node: VSphereVCenterLogicalChildType!
}

type VSphereVCenterPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereVCenterPhysicalChildTypeEdge!]!
    nodes: [VSphereVCenterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereVCenterPhysicalChildType!
}

type VSphereVCenterTagChildTypeConnection {
    count: Int!
    edges: [VSphereVCenterTagChildTypeEdge!]!
    nodes: [VSphereVCenterTagChildType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterTagChildTypeEdge {
    cursor: String!
    node: VSphereVCenterTagChildType!
}

type VSphereVMNicSpec {
    adapterType: NetworkAdapterTypeEnum!
    dnsInfos: [String!]!
    gateway: String!
    ipv4Address: String!
    ipv6Address: String!
    isPrimaryNic: Boolean!
    key: String!
    netmask: String!
    networkId: String!
    networkMoid: String!
    networkType: NetworkTypeEnum!
}

type VSphereVMVolumeSpec {
    dataStoreCdmId: String!
    dataStoreId: String!
    key: String!
    sizeGbs: Int!
}

type VSphereVirtualDisk {
    cdmId: String!
    cdmVersion: String!
    clusterUuid: UUID!
    deviceKey: Int
    excludeFromSnapshots: Boolean!
    fid: UUID!
    fileName: String!
    size: Long
    virtualMachineId: String!
}

type VSphereVirtualDiskConnection {
    count: Int!
    edges: [VSphereVirtualDiskEdge!]!
    nodes: [VSphereVirtualDisk!]!
    pageInfo: PageInfo!
}

type VSphereVirtualDiskEdge {
    cursor: String!
    node: VSphereVirtualDisk!
}

type VSphereVm implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & VSphereComputeClusterDescendantType & VSphereDatacenterDescendantType & VSphereFolderDescendantType & VSphereFolderLogicalChildType & VSphereHostDescendantType & VSphereHostPhysicalChildType & VSphereTagCategoryDescendantType & VSphereTagDescendantType & VSphereTagTagChildType & VSphereVCenterDescendantType {
    "Status of the Rubrik Backup Service agent on this VM"
    agentStatus: AgentStatus
    "Whether array integration is enabled for this VM"
    arrayIntegrationEnabled: Boolean!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "Guest credential authorization status"
    guestCredentialAuthorizationStatus: GuestCredentialAuthorizationStatusEnum!
    guestOsName: String!
    "The Guest OS Type of this VM"
    guestOsType: GuestOsTypeEnum!
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentSnappableIdOpt: UUID
    parentSnappableTypeOpt: String
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "postBackupScript"
    postBackupScript: PrePostScript
    "postSnapScript"
    postSnapScript: PrePostScript
    powerStatus: VmPowerStatusEnum
    "preBackupScript"
    preBackupScript: PrePostScript
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Date that effective SLA was assigned / inherited."
    protectionDate: DateTime
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "contains stats for this snappable (e.g., capacity)"
    reportSnappable: Snappable
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "snapshot consistency mandate"
    snapshotConsistencyMandate: ConsistencyLevelEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    "list of liveMounts for this VM"
    vSphereMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter for VM live mounts"
        filter: VSphereMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VSphereMountSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): VSphereMountConnection!
    vmwareToolsInstalled: Boolean!
    vsphereTagPath: [PathNode!]!
    "list of virtual disks for this VM"
    vsphereVirtualDisks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter for VM virtual disks"
        filter: VSphereVirtualDiskFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VSphereVirtualDiskSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): VSphereVirtualDiskConnection!
}

type VSphereVmChild implements BlueprintChild {
    bootPriority: Int!
    "failover instance of child snappable"
    failoverInstance: VSphereBlueprintChildFailoverInstance
    fid: UUID!
    "local RPO lag information"
    localRpoLagInfo: RPOLagInfo
    "The recovery info of the child virtual machine"
    recoveryInfo(
        "The id of the cluster"
        clusterUuid: UUID!
    ): ChildVmRecoveryInfo
    "recoverySpec of child snappable"
    recoverySpec: RecoverySpec
    "remote RPO lag information"
    remoteRpoLagInfo: RPOLagInfo
    "resourceSpec of child snappable"
    resourceSpec: VmwareResourceSpec
    "the child snappable"
    snappable: VSphereVm
    snappableType: ObjectTypeEnum!
}

type VSphereVmConnection {
    count: Int!
    edges: [VSphereVmEdge!]!
    nodes: [VSphereVm!]!
    pageInfo: PageInfo!
}

type VSphereVmEdge {
    cursor: String!
    node: VSphereVm!
}

"Aws cloud accounts validate response."
type ValidateAndCreateAwsCloudAccountReply {
    "AWS cloud account initiate response if the request is successful."
    initiateResponse: AwsCloudAccountInitiate
    "Contains error message for admin account if the request is not successful."
    validateResponse: AwsCloudAccountValidateResponse
}

"Validate AWS RDS Instance name for export."
type ValidateAwsNativeRdsInstanceNameForExportReply {
    error: String!
    isValid: Boolean!
}

"Resource mapping validation reply."
type ValidateBlueprintResourceMappingReply {
    "Detailed information about each resource validation."
    statusInfos: [ValidationStatusInfo!]!
    "Status of the validation."
    success: Boolean!
}

"Contains a map representing feasibility to do file recovery on snapshots"
type ValidateCloudNativeFileRecoveryFeasibilityReply {
    snapshotFileRecoveryFeasibility: [CloudNativeFileRecoveryFeasibility!]!
}

type ValidateFailureReason {
    failureReason: String!
    planName: PlanNameEnum!
    snappableId: String!
    snapshotId: String!
}

"Status for resource mapping validation for blueprint."
type ValidationStatusInfo {
    "List of all failure error messages."
    failureReasons: [String!]!
    "Validated resource info."
    resourceInfo: ResourceInfo
    "Resource mapping validation status for the snappable."
    validationStatus: ValidationStatus!
    "List of all warning messages."
    warningReasons: [String!]!
}

type ValueBoolean implements Value {
    serializedValue: String!
    value: Boolean
}

type ValueDateTime implements Value {
    serializedValue: String!
    value: DateTime
}

type ValueFloat implements Value {
    serializedValue: String!
    value: Float
}

type ValueInteger implements Value {
    serializedValue: String!
    value: Int
}

type ValueLong implements Value {
    serializedValue: String!
    value: Long
}

type ValueNull implements Value {
    serializedValue: String!
}

type ValueString implements Value {
    serializedValue: String!
    value: String
}

type Vcd implements CdmHierarchyObject & HierarchyObject & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdCatalog implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgVdcDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdDescendantTypeConnection {
    count: Int!
    edges: [VcdDescendantTypeEdge!]!
    nodes: [VcdDescendantType!]!
    pageInfo: PageInfo!
}

type VcdDescendantTypeEdge {
    cursor: String!
    node: VcdDescendantType!
}

type VcdLogicalChildTypeConnection {
    count: Int!
    edges: [VcdLogicalChildTypeEdge!]!
    nodes: [VcdLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdLogicalChildTypeEdge {
    cursor: String!
    node: VcdLogicalChildType!
}

type VcdOrg implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdOrgDescendantTypeConnection {
    count: Int!
    edges: [VcdOrgDescendantTypeEdge!]!
    nodes: [VcdOrgDescendantType!]!
    pageInfo: PageInfo!
}

type VcdOrgDescendantTypeEdge {
    cursor: String!
    node: VcdOrgDescendantType!
}

type VcdOrgLogicalChildTypeConnection {
    count: Int!
    edges: [VcdOrgLogicalChildTypeEdge!]!
    nodes: [VcdOrgLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdOrgLogicalChildTypeEdge {
    cursor: String!
    node: VcdOrgLogicalChildType!
}

type VcdOrgVdc implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgVdcDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgVdcLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdOrgVdcDescendantTypeConnection {
    count: Int!
    edges: [VcdOrgVdcDescendantTypeEdge!]!
    nodes: [VcdOrgVdcDescendantType!]!
    pageInfo: PageInfo!
}

type VcdOrgVdcDescendantTypeEdge {
    cursor: String!
    node: VcdOrgVdcDescendantType!
}

type VcdOrgVdcLogicalChildTypeConnection {
    count: Int!
    edges: [VcdOrgVdcLogicalChildTypeEdge!]!
    nodes: [VcdOrgVdcLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdOrgVdcLogicalChildTypeEdge {
    cursor: String!
    node: VcdOrgVdcLogicalChildType!
}

type VcdTopLevelDescendantTypeConnection {
    count: Int!
    edges: [VcdTopLevelDescendantTypeEdge!]!
    nodes: [VcdTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type VcdTopLevelDescendantTypeEdge {
    cursor: String!
    node: VcdTopLevelDescendantType!
}

type VcdVapp implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & VcdCatalogDescendantType & VcdCatalogLogicalChildType & VcdDescendantType & VcdOrgDescendantType & VcdOrgVdcDescendantType & VcdOrgVdcLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdVappLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type VcdVappConnection {
    count: Int!
    edges: [VcdVappEdge!]!
    nodes: [VcdVapp!]!
    pageInfo: PageInfo!
}

type VcdVappEdge {
    cursor: String!
    node: VcdVapp!
}

type VcdVappLogicalChildTypeConnection {
    count: Int!
    edges: [VcdVappLogicalChildTypeEdge!]!
    nodes: [VcdVappLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdVappLogicalChildTypeEdge {
    cursor: String!
    node: VcdVappLogicalChildType!
}

type VcdVimServer implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VerifySLAWithReplicationToClusterResp {
    isActiveSla: Boolean!
}

type VersionedFile {
    absolutePath: String!
    displayPath: String!
    fileVersions: [HierarchySnappableFileVersion!]!
    filename: String!
    path: String!
}

type VersionedFileConnection {
    count: Int!
    edges: [VersionedFileEdge!]!
    nodes: [VersionedFile!]!
    pageInfo: PageInfo!
}

type VersionedFileEdge {
    cursor: String!
    node: VersionedFile!
}

"Vm Application Consistency Specs Info"
type VmAppConsistentSpecsInternal {
    cancelBackupIfPreScriptFails: Boolean!
    postScriptTimeoutInSeconds: Int!
    postSnapshotScriptPath: String!
    preScriptTimeoutInSeconds: Int!
    preSnapshotScriptPath: String!
    rbaStatus: CloudNativeRBAStatusType!
}

type VmDatastore {
    datastoreId: String!
    datastoreName: String!
}

type VmDiskMapEntry {
    sourceDatastore: VmDatastore
    sourceVmDiskId: String!
    targetDiskId: String!
    targetDiskNativeId: String!
    targetIsOsDisk: Boolean!
    targetLogicalSize: Long!
    targetSnapshotId: String!
}

type VmHost {
    hostId: String!
    hostName: String!
    vcenterId: String!
    vcenterName: String!
}

type VmInfo {
    gateway: String!
    ipAddress: String!
    subnetMask: String!
    vmName: String!
}

type VmNic {
    nicId: String!
    nicMoid: String!
    nicName: String!
}

type VmNicMapEntry {
    sourceNic: VmNic
    sourceNicAdapterType: String!
    sourceNicId: String!
    targetNicId: String!
}

"""

Supported in v5.1+
"""
type VmwareCdpLiveInfo {
    """

    Supported in v5.1+
    The time on this node. Computed after computing the live CDP info for the virtual machine.
    """
    currentTime: DateTime
    """

    Supported in v5.1+
    The latest time to which this virtual machine can be recovered locally.
    """
    localRecoveryPoint: DateTime
    """

    Supported in v5.1+
    The latest time to which this virtual machine can be recovered on a remote cluster.
    """
    remoteRecoveryPoint: DateTime
    """

    Supported in v5.1+
    The ID of the virtual machine that we are getting CDP live fields for.
    """
    vmId: String!
}

"""

Supported in v5.1+
"""
type VmwareRecoverableRange {
    """

    Supported in v5.1+
    """
    beginTime: DateTime
    """

    Supported in v5.1+
    """
    endTime: DateTime
}

type VmwareRecoveryPoints {
    localRecoveryPoint: DateTime
    remoteRecoveryPoint: DateTime
}

type VmwareRecoveryState {
    healthPercentage: Float!
    localStatus: CdpLocalStatusEnum!
    replicationStatus: CdpReplicationStatusEnum!
}

type VmwareResourceSpec implements ResourceSpec {
    isArchived: Boolean!
    memoryMbs: Int!
    osType: String!
    snappableId: String!
    snappableName: String!
    snapshotId: String!
    vCpus: Int!
    vmWareVolumeSpecs: [VmwareVirtualMachineVolume!]!
    vmwareNics: [VmwareVirtualMachineNic!]!
}

type VmwareVirtualMachineNic {
    deviceLabel: String!
    key: Int!
    networkLabel: String!
    v4Addresses: [String!]!
}

type VmwareVirtualMachineVolume {
    capacityKbs: Long!
    key: Int!
    label: String!
}

type VmwareVmConfig {
    logRetentionSeconds: Long!
}

"""

Supported in v5.0+
"""
type VmwareVmMountDetailV1 {
    """

    Supported in v5.0+
    The power status of the mounted VM(ON,OFF,SLEEP etc.).
    """
    powerStatus: String
    vmwareVmMountSummaryV1: VmwareVmMountSummaryV1
}

"""

Supported in v5.0+
"""
type VmwareVmMountSummaryV1 {
    """

    Supported in v5.0+
    An integer value that identifies how many disks are attached.
    """
    attachingDiskCount: Int
    """

    Supported in v5.0+
    This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.
    """
    createDatastoreOnlyMount: Boolean
    """

    Supported in v5.0+
    The name of the datastore that contains the mounted VMDK.
    """
    datastoreName: String
    """

    Supported in v5.0+
    A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.
    """
    datastoreReady: Boolean
    """

    Supported in v5.0+
    A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.
    """
    hasAttachingDisk: Boolean
    """

    Supported in v5.0+
    """
    hostId: String
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    """
    isReady: Boolean!
    """

    Supported in v5.0+
    """
    mountRequestId: String
    """

    Supported in v5.0+
    Gives the timestamp at which the mount was created.
    """
    mountTimestamp: DateTime
    """

    Supported in v5.0+
    """
    mountedVmId: String
    """

    Supported in v5.0+
    """
    snapshotDate: DateTime
    """

    Supported in v5.0+
    """
    unmountRequestId: String
    """

    Supported in v5.0+
    """
    vmId: String!
}

"""

Supported in v5.3+
"""
type VmwareVmRecoverableRanges {
    """

    Supported in v5.3+
    The recoverable ranges for the virtual machine.
    """
    recoverableRanges: [VmwareRecoverableRange!]!
    """

    Supported in v5.3+
    The ID of the virtual machine for which to retrieve recoverable ranges.
    """
    vmId: String!
}

type VolumeGroup implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type VolumeGroupConnection {
    count: Int!
    edges: [VolumeGroupEdge!]!
    nodes: [VolumeGroup!]!
    pageInfo: PageInfo!
}

type VolumeGroupEdge {
    cursor: String!
    node: VolumeGroup!
}

type Vpc {
    cidrBlock: AddressBlockV4
    id: String!
    name: String!
    vpcId: String!
}

type VpcConnection {
    count: Int!
    edges: [VpcEdge!]!
    nodes: [Vpc!]!
    pageInfo: PageInfo!
}

type VpcEdge {
    cursor: String!
    node: Vpc!
}

type VsphereBlueprintChildSnapshotInfo {
    host: VmHost
    memoryMbs: Int!
    nicMap: [VmNicMapEntry!]!
    osType: String!
    snapshotAppMetadata: String!
    snapshotId: String!
    vcpus: Int!
    volumeMap: [VmDiskMapEntry!]!
}

type WeeklySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfWeek: DayOfWeekEnum!
}

type WhitelistedAnalyzer {
    isExplicit: Boolean!
    whitelistedAnalyzerId: String!
    whitelistedPath: String!
}

type WindowsCluster implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): WindowsClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): WindowsClusterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type WindowsClusterDescendantTypeConnection {
    count: Int!
    edges: [WindowsClusterDescendantTypeEdge!]!
    nodes: [WindowsClusterDescendantType!]!
    pageInfo: PageInfo!
}

type WindowsClusterDescendantTypeEdge {
    cursor: String!
    node: WindowsClusterDescendantType!
}

type WindowsClusterLogicalChildTypeConnection {
    count: Int!
    edges: [WindowsClusterLogicalChildTypeEdge!]!
    nodes: [WindowsClusterLogicalChildType!]!
    pageInfo: PageInfo!
}

type WindowsClusterLogicalChildTypeEdge {
    cursor: String!
    node: WindowsClusterLogicalChildType!
}

type WindowsFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FailoverClusterAppDescendantType & FailoverClusterAppPhysicalChildType & FailoverClusterTopLevelDescendantType & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    failoverClusterApp: FailoverClusterApp
    hardlinkSupportEnabled: Boolean!
    host: PhysicalHost
    "The fid of the hierarchy object."
    id: UUID!
    isPassThrough: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    pathExceptions: [String!]!
    pathExcluded: [String!]!
    pathIncluded: [String!]!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    symlinkResolutionEnabled: Boolean!
}

type YearlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfYear: DayOfYearEnum!
    yearStartMonth: MonthEnum!
}

"Snapshot data with groupby info applied to it."
type cdmSnapshotGroupBy {
    "Further provide groupings for the data."
    cdmSnapshotGroupBy(
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!
    ): [cdmSnapshotGroupBy!]!
    "The data groupby info."
    groupByInfo: CdmSnapshotGroupByInfo!
    "Paginated snapshot data."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection!
}

type cdmSnapshotGroupByConnection {
    count: Int!
    edges: [cdmSnapshotGroupByEdge!]!
    nodes: [cdmSnapshotGroupBy!]!
    pageInfo: PageInfo!
}

type cdmSnapshotGroupByEdge {
    cursor: String!
    node: cdmSnapshotGroupBy!
}

type clusterState {
    "Cluster removal job creation time."
    clusterRemovalCreatedAt: DateTime
    "Cluster removal status of cdm cluster"
    clusterRemovalState: ClusterRemovalState!
    "Cluster removal job update time."
    clusterRemovalUpdatedAt: DateTime
    "ConnectedStatus of cdm cluster"
    connectedState: ClusterStatus!
}

type configGroupBy {
    "Aggregations for single-level groupBy. This does not affect double-level groupBys."
    aggregations: [String!]!
    "Report-level groupBy selection"
    groupById: String!
}

type dataViewMetadata {
    count: Long!
    dataViewType: DataViewTypeEnum!
}

"Cluster metric data grouped by a time unit."
type metricTimeSeries {
    "cluster metric data for the given time interval."
    metric: ClusterMetric!
    "The time groupby info."
    timeInfo: ClusterMetricGroupByInfo!
}

type pendingAction {
    actionType: PendingActionType
    actionTypeStr: String!
    clusterUuid: String!
    createdAt: DateTime
    description: String!
    info: String!
    pendingActionId: String!
    status: PendingActionStatusEnum!
    updatedAt: DateTime
}

type reportGenerateReply {
    "The Id of the job"
    jobId: Long!
    "The reference Id of the job"
    referenceId: String!
}

"The status of the async cdm request"
type vSphereAsyncRequestStatus {
    endTime: DateTime!
    error: vSphereRequestErrorInfo
    id: String!
    links: [vSphereLink!]!
    nodeId: String!
    progress: Float!
    startTime: DateTime!
    status: String!
}

"a link with href and rel properties."
type vSphereLink {
    href: String!
    rel: String!
}

"contains error info for a cdm response"
type vSphereRequestErrorInfo {
    message: String!
}

enum AccessTypeEnum {
    CREATE_ACCESS
    DELETE_ACCESS
    FULL_CONTROL
    READ_ACCESS
    WRITE_ACCESS
}

enum AceFlagsEnum {
    CONTAINER_INHERIT
    EMPTY_FLAG
    FAILED_ACCESS
    INHERITED
    INHERIT_ONLY
    NO_PROPAGATE_INHERIT
    OBJECT_INHERIT
    SUCCESSFUL_ACCESS
}

enum AceQualifierEnum {
    ACCESS_ALLOWED
    ACCESS_DENIED
    CUSTOM
    SYSTEM_ALARM
    SYSTEM_AUDIT
}

enum AckClusterStatus {
    DownloadFailed
    PrechecksError
}

enum ActionEnum {
    RESUME
    ROLLBACK
    START
}

enum ActivityAccessTypeEnum {
    CREATE_ACTIVITY
    DELETE_ACTIVITY
    READ_ACTIVITY
    WRITE_ACTIVITY
}

enum ActivityObjectTypeEnum {
    AppBlueprint
    AuthDomain
    AwsAccount
    AwsEventType
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeDisk
    AzureNativeSubscription
    AzureNativeVm
    CapacityBundle
    Certificate
    CloudNativeVirtualMachine
    CloudNativeVm
    Cluster
    ComputeInstance
    DataLocation
    Ec2Instance
    Envoy
    Exocompute
    FailoverClusterApp
    GcpNativeDisk
    GcpNativeGceInstance
    GcpNativeProject
    Hdfs
    Host
    HypervScvmm
    HypervServer
    HypervVm
    JobInstance
    KuprCluster
    KuprNamespace
    Ldap
    LinuxFileset
    LinuxHost
    ManagedVolume
    Mssql
    NasHost
    NutanixCluster
    NutanixVm
    O365Calendar
    O365Mailbox
    O365Onedrive
    O365Organization
    O365SharePointDrive
    O365Site
    O365Team
    ObjectProtection
    Oracle
    OracleDb
    OracleHost
    OracleRac
    PolarisAccount
    PolarisEbsVolume
    PolarisEc2Instance
    PublicCloudMachineInstance
    SamlSso
    SapHanaDb
    SapHanaSystem
    ShareFileset
    SlaDomain
    SmbDomain
    StorageArray
    StorageArrayVolumeGroup
    StorageLocation
    Storm
    SupportBundle
    UnknownObjectType
    Upgrade
    User
    Vcd
    VcdVapp
    Vcenter
    VmwareComputeCluster
    VmwareVm
    VolumeGroup
    WindowsFileset
    WindowsHost
}

enum ActivitySeriesGroupByEnum {
    Cluster
    ClusterType
    Day
    Hour
    LastActivityStatus
    LastActivityType
    Month
    ObjectType
    Quarter
    Week
    Year
}

enum ActivitySeriesSortByEnum {
    ActivityStatus
    ActivityType
    ClusterName
    LastUpdated
    Location
    ObjectName
    ObjectType
    Severity
    StartTime
}

enum ActivitySeverityEnum {
    Critical
    Info
    Warning
}

enum ActivityStatusEnum {
    Canceled
    Canceling
    Failure
    Info
    Queued
    Running
    Success
    TaskFailure
    TaskSuccess
    Warning
}

enum ActivityTableColumnEnum {
    ActivityStatus
    ActivityType
    ClusterName
    ClusterType
    ComplianceStatus
    LastUpdated
    Location
    ObjectName
    ObjectType
    SlaDomain
    StartTime
}

enum ActivityTypeEnum {
    Anomaly
    Archive
    AuthDomain
    AwsEvent
    Backup
    Classification
    CloudNativeSource
    CloudNativeVirtualMachine
    CloudNativeVm
    Configuration
    Connection
    Conversion
    Diagnostic
    Discovery
    Download
    EmbeddedEvent
    Failover
    Fileset
    Hardware
    Hdfs
    HostEvent
    HypervScvmm
    HypervServer
    Index
    Instantiate
    LegalHold
    LocalRecovery
    Maintenance
    NutanixCluster
    RadarAnalysis
    Recovery
    Replication
    ResourceOperations
    Storage
    StorageArray
    StormResource
    Support
    Sync
    System
    TestFailover
    UnknownEventType
    Upgrade
    VCenter
    Vcd
    VolumeGroup
}

enum AgentConnectStatusEnum {
    Connected
    Disconnected
    SecondaryCluster
    Unregistered
}

enum AnalyzerErrorCodeEnum {
    ANALYZER
    NOERROR
    OTHER
    PARSING
    READING
}

enum AnalyzerGroupTypeEnum {
    CCPA
    CUSTOM
    GLBA
    HIPAA
    PCI_DSS
    UK_PII
    UNDEFINED
    US_FINANCE
    US_PII
}

enum AnalyzerTypeEnum {
    ABA_ROUTING_NUMBER
    CREDIT_CARD
    CUSIP_NUMBER
    DEA_NUMBER
    EIN
    EMAIL_ADDRESS
    IBAN
    IPV4_ADDRESS
    KEYWORD
    MAC_ADDRESS
    PASSPORT
    PHONE_NUMBER
    REGEX
    SIMHASH
    UK_DL
    UK_NHS
    UK_NINO
    UK_UTR
    UNDEFINED
    US_BANK_ACCT
    US_CA_DL
    US_DL
    US_HEALTHCARE_NPI
    US_ITIN
    US_SSN
    US_VIN
    WORD_FREQUENCY
}

enum AnomalyResultGroupByEnum {
    ClusterUuid
    Day
    Hour
    IsAnomaly
    ManagedId
    Month
    Week
    Year
}

enum AnomalyResultSortByEnum {
    AnomalyProbability
    BytesCreatedCount
    BytesDeletedCount
    BytesModifiedCount
    BytesNetChangedCount
    ClusterUuid
    FilesCreatedCount
    FilesDeletedCount
    FilesModifiedCount
    IsAnomaly
    ManagedId
    ObjectType
    PreviousSnapshotDate
    PreviousSnapshotId
    SnappableName
    SnappableType
    SnapshotDate
    SnapshotId
}

enum AnomalyTableColumnEnum {
    BytesCreated
    BytesDeleted
    BytesModified
    BytesNetChanged
    FilesCreated
    FilesDeleted
    FilesModified
    IsAnomaly
    PreviousSnapshotDate
    PreviousSnapshotId
    SnappableName
    SnappableType
    SnapshotDate
    SnapshotId
    SuspiciousFilesAdded
}

enum AppBlueprintFailoverStatusEnum {
    CleanupInProgress
    InProgress
    Paused
    Ready
    TestCleanupInProgress
    TestInProgress
    TestPaused
    TestPending
    Tested
}

enum AppBlueprintLastFailoverStatusEnum {
    Failed
    NotExist
    Succeeded
}

enum AppBlueprintRmStatusEnum {
    Configured
    Invalid
    MissingVms
    NotConfigured
}

enum AppBlueprintStatusEnum {
    Creating
    Deleted
    Deleting
    Ready
    Updating
}

enum AppFilterFieldEnum {
    APP_ID
    APP_TYPE
    SUBSCRIPTION
    TENANT_ID
}

enum AppSortByFieldEnum {
    ADDED_AT
    APP_ID
    APP_OWNER
    APP_TYPE
    IS_AUTHENTICATED
    SUBSCRIPTION
}

enum AppSortOrderEnum {
    ASC
    DESC
}

enum AppflowsBlueprintFailoverReportStatusEnum {
    ACTIVE
    CREATING
    EXPIRED
}

enum ArchivalGroupTypeEnum {
    AUTOMATIC_ARCHIVAL_GROUP
    CLOUD_NATIVE_ARCHIVAL_GROUP
    DATACENTER_ARCHIVAL_GROUP
    MANUAL_ARCHIVAL_GROUP
    UNKNOWN_ARCHIVAL_GROUP
}

enum ArchivalLocationType {
    Azure
    Cleversafe
    Glacier
    Google
    HDS
    Nfs
    Qstar
    Rehydrated
    S3
    S3Compatible
    Scality
}

enum AssignSLAWarningsEnum {
    ARCHIVAL_CONFIGURATION_NOT_RESPECTED
    ARCHIVAL_LOCATION_NOT_SPECIFIED
    AWS_CROSS_ACCOUNT_REPLICATION_CONFIG_WARNING
    AWS_RDS_LOG_BACKUP_CONFIG_WARNING
    AZURE_FULL_SNAPSHOTS
    AZURE_NATIONAL_PUBLIC_REPLICATION_NOT_SUPPORTED
    BACKUP_WINDOWS_NOT_RESPECTED
    CROSS_REGION_ARCHIVAL
    DIFFERENTIAL_BACKUP_FREQUENCY_NOT_RESPECTED
    INCREMENTAL_BACKUP_FREQUENCY_NOT_RESPECTED
    NO_WARNING
    REMOTE_CONFIGURATION_NOT_RESPECTED
    REPLICATION_CONFIGURATION_NOT_RESPECTED
    REPLICATION_TARGET_SAME_AS_SOURCE
    SLA_NOT_SYNCED
    SNAPSHOTS_MAY_EXPIRE
}

enum AuthTypeEnum {
    KERBEROS
    NONE
}

enum AwsAccountStatusEnum {
    Added
    Deleted
    Deleting
    DeletionFailed
    Disconnected
    RefreshFailed
    Refreshed
    Refreshing
}

enum AwsCloudAccountRegionEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_NORTH_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    SA_EAST_1
    UNKNOWN_AWS_REGION
    US_EAST_1
    US_EAST_2
    US_WEST_1
    US_WEST_2
}

enum AwsCloudComputeSettingFilterFieldEnum {
    CLOUD_ACCOUNT_ID
    CLUSTER_ALL
    CLUSTER_ID
    IS_ARCHIVED
    IS_SG_POLARIS_MANAGED
    NAME
}

enum AwsCloudComputeSettingSortByFieldEnum {
    NAME
}

enum AwsCloudTypeEnum {
    CHINA
    STANDARD
}

enum AwsFeatureForPermissionCheck {
    AWS_EXPORT_VM_IN_POWERED_OFF_STATE
    AWS_UNSPECIFIED
}

enum AwsInstanceTenancyEnum {
    DEDICATED
    DEFAULT
    HOST
}

enum AwsNativeAccountSortFieldsEnum {
    EBS_VOLUME_COUNT
    EC2_INSTANCE_COUNT
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AwsNativeEbsVolumeSortFieldsEnum {
    AWS_NATIVE_ACCOUNT_NAME
    EBS_VOLUME_ID
    EBS_VOLUME_NAME
    EBS_VOLUME_SIZE
    EBS_VOLUME_TYPE
    EFFECTIVE_SLA_DOMAIN
}

enum AwsNativeEbsVolumeTypeEnum {
    GP2
    GP3
    IO1
    IO2
    NOT_SPECIFIED
    SC1
    ST1
    STANDARD
    UNKNOWN
}

enum AwsNativeEc2InstanceSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AWS_NATIVE_ACCOUNT_NAME
    AWS_VPC_ID
    EC2_INSTANCE_ID
    EC2_INSTANCE_NAME
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA_DOMAIN
}

enum AwsNativeEc2InstanceTypeEnum {
    A1_2XLARGE
    A1_4XLARGE
    A1_LARGE
    A1_MEDIUM
    A1_METAL
    A1_XLARGE
    C1_MEDIUM
    C1_XLARGE
    C3_2XLARGE
    C3_4XLARGE
    C3_8XLARGE
    C3_LARGE
    C3_XLARGE
    C4_2XLARGE
    C4_4XLARGE
    C4_8XLARGE
    C4_LARGE
    C4_XLARGE
    C5D_12XLARGE
    C5D_18XLARGE
    C5D_24XLARGE
    C5D_2XLARGE
    C5D_4XLARGE
    C5D_9XLARGE
    C5D_LARGE
    C5D_METAL
    C5D_XLARGE
    C5N_18XLARGE
    C5N_2XLARGE
    C5N_4XLARGE
    C5N_9XLARGE
    C5N_LARGE
    C5N_XLARGE
    C5_12XLARGE
    C5_18XLARGE
    C5_24XLARGE
    C5_2XLARGE
    C5_4XLARGE
    C5_9XLARGE
    C5_LARGE
    C5_METAL
    C5_XLARGE
    CC1_4XLARGE
    CC2_8XLARGE
    CG1_4XLARGE
    CR1_8XLARGE
    D2_2XLARGE
    D2_4XLARGE
    D2_8XLARGE
    D2_XLARGE
    F1_16XLARGE
    F1_2XLARGE
    F1_4XLARGE
    G2_2XLARGE
    G2_8XLARGE
    G3S_XLARGE
    G3_16XLARGE
    G3_4XLARGE
    G3_8XLARGE
    G4DN_12XLARGE
    G4DN_16XLARGE
    G4DN_2XLARGE
    G4DN_4XLARGE
    G4DN_8XLARGE
    G4DN_XLARGE
    H1_16XLARGE
    H1_2XLARGE
    H1_4XLARGE
    H1_8XLARGE
    HI1_4XLARGE
    HS1_8XLARGE
    I2_2XLARGE
    I2_4XLARGE
    I2_8XLARGE
    I2_XLARGE
    I3EN_12XLARGE
    I3EN_24XLARGE
    I3EN_2XLARGE
    I3EN_3XLARGE
    I3EN_6XLARGE
    I3EN_LARGE
    I3EN_METAL
    I3EN_XLARGE
    I3_16XLARGE
    I3_2XLARGE
    I3_4XLARGE
    I3_8XLARGE
    I3_LARGE
    I3_METAL
    I3_XLARGE
    INF1_24XLARGE
    INF1_2XLARGE
    INF1_6XLARGE
    INF1_XLARGE
    M1_LARGE
    M1_MEDIUM
    M1_SMALL
    M1_XLARGE
    M2_2XLARGE
    M2_4XLARGE
    M2_XLARGE
    M3_2XLARGE
    M3_LARGE
    M3_MEDIUM
    M3_XLARGE
    M4_10XLARGE
    M4_16XLARGE
    M4_2XLARGE
    M4_4XLARGE
    M4_LARGE
    M4_XLARGE
    M5AD_12XLARGE
    M5AD_16XLARGE
    M5AD_24XLARGE
    M5AD_2XLARGE
    M5AD_4XLARGE
    M5AD_8XLARGE
    M5AD_LARGE
    M5AD_XLARGE
    M5A_12XLARGE
    M5A_16XLARGE
    M5A_24XLARGE
    M5A_2XLARGE
    M5A_4XLARGE
    M5A_8XLARGE
    M5A_LARGE
    M5A_XLARGE
    M5DN_12XLARGE
    M5DN_16XLARGE
    M5DN_24XLARGE
    M5DN_2XLARGE
    M5DN_4XLARGE
    M5DN_8XLARGE
    M5DN_LARGE
    M5DN_XLARGE
    M5D_12XLARGE
    M5D_16XLARGE
    M5D_24XLARGE
    M5D_2XLARGE
    M5D_4XLARGE
    M5D_8XLARGE
    M5D_LARGE
    M5D_METAL
    M5D_XLARGE
    M5N_12XLARGE
    M5N_16XLARGE
    M5N_24XLARGE
    M5N_2XLARGE
    M5N_4XLARGE
    M5N_8XLARGE
    M5N_LARGE
    M5N_XLARGE
    M5_12XLARGE
    M5_16XLARGE
    M5_24XLARGE
    M5_2XLARGE
    M5_4XLARGE
    M5_8XLARGE
    M5_LARGE
    M5_METAL
    M5_XLARGE
    NOT_SPECIFIED
    P2_16XLARGE
    P2_8XLARGE
    P2_XLARGE
    P3DN_24XLARGE
    P3_16XLARGE
    P3_2XLARGE
    P3_8XLARGE
    R3_2XLARGE
    R3_4XLARGE
    R3_8XLARGE
    R3_LARGE
    R3_XLARGE
    R4_16XLARGE
    R4_2XLARGE
    R4_4XLARGE
    R4_8XLARGE
    R4_LARGE
    R4_XLARGE
    R5AD_12XLARGE
    R5AD_16XLARGE
    R5AD_24XLARGE
    R5AD_2XLARGE
    R5AD_4XLARGE
    R5AD_8XLARGE
    R5AD_LARGE
    R5AD_XLARGE
    R5A_12XLARGE
    R5A_16XLARGE
    R5A_24XLARGE
    R5A_2XLARGE
    R5A_4XLARGE
    R5A_8XLARGE
    R5A_LARGE
    R5A_XLARGE
    R5DN_12XLARGE
    R5DN_16XLARGE
    R5DN_24XLARGE
    R5DN_2XLARGE
    R5DN_4XLARGE
    R5DN_8XLARGE
    R5DN_LARGE
    R5DN_XLARGE
    R5D_12XLARGE
    R5D_16XLARGE
    R5D_24XLARGE
    R5D_2XLARGE
    R5D_4XLARGE
    R5D_8XLARGE
    R5D_LARGE
    R5D_METAL
    R5D_XLARGE
    R5N_12XLARGE
    R5N_16XLARGE
    R5N_24XLARGE
    R5N_2XLARGE
    R5N_4XLARGE
    R5N_8XLARGE
    R5N_LARGE
    R5N_XLARGE
    R5_12XLARGE
    R5_16XLARGE
    R5_24XLARGE
    R5_2XLARGE
    R5_4XLARGE
    R5_8XLARGE
    R5_LARGE
    R5_METAL
    R5_XLARGE
    T1_MICRO
    T2_2XLARGE
    T2_LARGE
    T2_MEDIUM
    T2_MICRO
    T2_NANO
    T2_SMALL
    T2_XLARGE
    T3A_2XLARGE
    T3A_LARGE
    T3A_MEDIUM
    T3A_MICRO
    T3A_NANO
    T3A_SMALL
    T3A_XLARGE
    T3_2XLARGE
    T3_LARGE
    T3_MEDIUM
    T3_MICRO
    T3_NANO
    T3_SMALL
    T3_XLARGE
    UNKNOWN
    U_12TB1_METAL
    U_18TB1_METAL
    U_24TB1_METAL
    U_6TB1_METAL
    U_9TB1_METAL
    X1E_16XLARGE
    X1E_2XLARGE
    X1E_32XLARGE
    X1E_4XLARGE
    X1E_8XLARGE
    X1E_XLARGE
    X1_16XLARGE
    X1_32XLARGE
    Z1D_12XLARGE
    Z1D_2XLARGE
    Z1D_3XLARGE
    Z1D_6XLARGE
    Z1D_LARGE
    Z1D_METAL
    Z1D_XLARGE
}

enum AwsNativeFileRecoveryStatusEnum {
    DISABLED
    ENABLED
    NOT_SPECIFIED
}

enum AwsNativeProtectionFeatureEnum {
    EC2
    RDS
}

enum AwsNativeRdsDbEngineEnum {
    MARIADB
    MYSQL
    ORACLE_EE
    ORACLE_SE
    ORACLE_SE1
    ORACLE_SE2
    POSTGRES
    SQLSERVER_EE
    SQLSERVER_EX
    SQLSERVER_SE
    SQLSERVER_WEB
    UNKNOWN
}

enum AwsNativeRdsDbInstanceClassEnum {
    DB_M1_LARGE
    DB_M1_MEDIUM
    DB_M1_SMALL
    DB_M1_XLARGE
    DB_M2_2XLARGE
    DB_M2_4XLARGE
    DB_M2_XLARGE
    DB_M3_2XLARGE
    DB_M3_LARGE
    DB_M3_MEDIUM
    DB_M3_XLARGE
    DB_M4_10XLARGE
    DB_M4_16XLARGE
    DB_M4_2XLARGE
    DB_M4_4XLARGE
    DB_M4_LARGE
    DB_M4_XLARGE
    DB_M5_12XLARGE
    DB_M5_16XLARGE
    DB_M5_24XLARGE
    DB_M5_2XLARGE
    DB_M5_4XLARGE
    DB_M5_8XLARGE
    DB_M5_LARGE
    DB_M5_XLARGE
    DB_R3_2XLARGE
    DB_R3_4XLARGE
    DB_R3_8XLARGE
    DB_R3_LARGE
    DB_R3_XLARGE
    DB_R4_12XLARGE
    DB_R4_16XLARGE
    DB_R4_2XLARGE
    DB_R4_4XLARGE
    DB_R4_8XLARGE
    DB_R4_LARGE
    DB_R4_XLARGE
    DB_R5_12XLARGE
    DB_R5_16XLARGE
    DB_R5_24XLARGE
    DB_R5_2XLARGE
    DB_R5_4XLARGE
    DB_R5_8XLARGE
    DB_R5_LARGE
    DB_R5_XLARGE
    DB_T2_2XLARGE
    DB_T2_LARGE
    DB_T2_MEDIUM
    DB_T2_MICRO
    DB_T2_SMALL
    DB_T2_XLARGE
    DB_T3_2XLARGE
    DB_T3_LARGE
    DB_T3_MEDIUM
    DB_T3_MICRO
    DB_T3_SMALL
    DB_T3_XLARGE
    DB_X1E_16XLARGE
    DB_X1E_2XLARGE
    DB_X1E_32XLARGE
    DB_X1E_4XLARGE
    DB_X1E_8XLARGE
    DB_X1E_XLARGE
    DB_X1_16XLARGE
    DB_X1_32XLARGE
    DB_Z1D_12XLARGE
    DB_Z1D_2XLARGE
    DB_Z1D_4XLARGE
    DB_Z1D_6XLARGE
    DB_Z1D_LARGE
    DB_Z1D_XLARGE
    UNKNOWN
}

enum AwsNativeRdsInstanceSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AWS_NATIVE_ACCOUNT_NAME
    AWS_NATIVE_RDS_DB_ENGINE
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    AWS_VPC_ID
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AwsNativeRdsStorageTypeEnum {
    GP2
    IO1
    NOT_SPECIFIED
    STANDARD
    UNKNOWN
}

enum AwsNativeRegionEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_NORTH_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    NOT_SPECIFIED
    SA_EAST_1
    US_EAST_1
    US_EAST_2
    US_WEST_1
    US_WEST_2
}

enum AwsNativeRegionForReplicationEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_NORTH_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    NOT_DEFINED
    SA_EAST_1
    SOURCE_REGION
    US_EAST_1
    US_EAST_2
    US_WEST_1
    US_WEST_2
}

enum AwsRegionEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_NORTHEAST_3
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    SA_EAST_1
    UNKNOWN_AWS_REGION
    US_EAST_1
    US_EAST_2
    US_GOV_WEST_1
    US_WEST_1
    US_WEST_2
}

enum AwsStorageClassTypeEnum {
    ONEZONE_IA
    STANDARD
    STANDARD_IA
    UNKNOWN_STORAGE_CLASS
}

enum AzureCloudAccountRegionEnum {
    AUSTRALIACENTRAL
    AUSTRALIACENTRAL2
    AUSTRALIAEAST
    AUSTRALIASOUTHEAST
    BRAZILSOUTH
    CANADACENTRAL
    CANADAEAST
    CENTRALINDIA
    CENTRALUS
    CHINAEAST
    CHINAEAST2
    CHINANORTH
    CHINANORTH2
    EASTASIA
    EASTUS
    EASTUS2
    FRANCECENTRAL
    FRANCESOUTH
    GERMANYNORTH
    GERMANYWESTCENTRAL
    JAPANEAST
    JAPANWEST
    KOREACENTRAL
    KOREASOUTH
    NORTHCENTRALUS
    NORTHEUROPE
    NORWAYEAST
    NORWAYWEST
    SOUTHAFRICANORTH
    SOUTHAFRICAWEST
    SOUTHCENTRALUS
    SOUTHEASTASIA
    SOUTHINDIA
    SWITZERLANDNORTH
    SWITZERLANDWEST
    UAECENTRAL
    UAENORTH
    UKSOUTH
    UKWEST
    UNKNOWN_AZURE_REGION
    WESTCENTRALUS
    WESTEUROPE
    WESTINDIA
    WESTUS
    WESTUS2
}

enum AzureCloudTypeEnum {
    AZURECHINACLOUD
    AZUREPUBLICCLOUD
}

enum AzureFeatureForPermissionCheck {
    AZURE_CROSS_REGION_REPLICATION
    AZURE_EXPORT_VM_IN_POWERED_OFF_STATE
    AZURE_LIST_AVAILABILITY_SET
    AZURE_UNSPECIFIED
}

enum AzureHostTypeEnum {
    BOTH_HOSTS
    CUSTOMER_HOST
    RUBRIK_HOST
    UNDEFINED
}

enum AzureNativeCommonResourceGroupSortFieldsEnum {
    AZURE_REGION
    AZURE_RG_DISK_EFFECTIVE_SLA
    AZURE_RG_SUBSCRIPTION_NAME
    AZURE_RG_VM_EFFECTIVE_SLA
    NAME
}

enum AzureNativeDiskSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AZURE_DISK_CRG_NAME
    AZURE_DISK_CRG_SUBSCRIPTION_NAME
    AZURE_DISK_RG_NAME
    AZURE_DISK_SIZE
    AZURE_DISK_SUBSCRIPTION_NAME
    AZURE_DISK_TYPE
    AZURE_REGION
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AzureNativeManagedDiskTypeEnum {
    NOT_SPECIFIED
    Premium_LRS
    StandardSSD_LRS
    Standard_LRS
    UNKNOWN
    UltraSSD_LRS
}

enum AzureNativeRegionEnum {
    AustraliaCentral
    AustraliaCentral2
    AustraliaEast
    AustraliaSoutheast
    BrazilSouth
    CanadaCentral
    CanadaEast
    CentralIndia
    CentralUS
    ChinaEast
    ChinaEast2
    ChinaNorth
    ChinaNorth2
    EastAsia
    EastUS
    EastUS2
    FranceCentral
    FranceSouth
    GermanyNorth
    GermanyWestCentral
    JapanEast
    JapanWest
    KoreaCentral
    KoreaSouth
    NorthCentralUS
    NorthEurope
    NorwayEast
    NorwayWest
    NotSpecified
    SouthAfricaNorth
    SouthAfricaWest
    SouthCentralUS
    SouthIndia
    SoutheastAsia
    SwitzerlandNorth
    SwitzerlandWest
    UKSouth
    UKWest
    UaeCentral
    UaeNorth
    WestCentralUS
    WestEurope
    WestIndia
    WestUS
    WestUS2
}

enum AzureNativeRegionForReplicationEnum {
    AustraliaCentral
    AustraliaCentral2
    AustraliaEast
    AustraliaSoutheast
    BrazilSouth
    CanadaCentral
    CanadaEast
    CentralIndia
    CentralUS
    ChinaEast
    ChinaEast2
    ChinaNorth
    ChinaNorth2
    EastAsia
    EastUS
    EastUS2
    FranceCentral
    FranceSouth
    GermanyNorth
    GermanyWestCentral
    JapanEast
    JapanWest
    KoreaCentral
    KoreaSouth
    NorthCentralUS
    NorthEurope
    NorwayEast
    NorwayWest
    NotDefined
    SourceRegion
    SouthAfricaNorth
    SouthAfricaWest
    SouthCentralUS
    SouthIndia
    SoutheastAsia
    SwitzerlandNorth
    SwitzerlandWest
    UKSouth
    UKWest
    UaeCentral
    UaeNorth
    WestCentralUS
    WestEurope
    WestIndia
    WestUS
    WestUS2
}

enum AzureNativeSubscriptionSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AZURE_SUBSCRIPTION_DISKCOUNT
    AZURE_SUBSCRIPTION_VMCOUNT
    AZURE_TENANT_ID
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AzureNativeVirtualMachineSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AZURE_REGION
    AZURE_SUBNET_NAME
    AZURE_VM_CRG_NAME
    AZURE_VM_CRG_SUBSCRIPTION_NAME
    AZURE_VM_RG_NAME
    AZURE_VM_SIZE
    AZURE_VM_SUBSCRIPTION_NAME
    AZURE_VNET_NAME
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AzureNativeVmOsTypeEnum {
    Linux
    Unknown
    Windows
}

enum AzureNetworkSecurityRulesStatusEnum {
    BLOCKING
    GOOD
    MAYBE_BLOCKING
}

enum AzureRegionEnum {
    ASIA_EAST
    ASIA_SOUTHEAST
    AUSTRALIA_EAST
    AUSTRALIA_SOUTHEAST
    BRAZIL_SOUTH
    CANADA_CENTRAL
    CANADA_EAST
    CHINA_EAST
    CHINA_NORTH
    EUROPE_NORTH
    EUROPE_WEST
    GERMANY_CENTRAL
    GERMANY_NORTHEAST
    GOV_US_ARIZONA
    GOV_US_DOD_CENTRAL
    GOV_US_DOD_EAST
    GOV_US_IOWA
    GOV_US_TEXAS
    GOV_US_VIRGINIA
    INDIA_CENTRAL
    INDIA_SOUTH
    INDIA_WEST
    JAPAN_EAST
    JAPAN_WEST
    KOREA_CENTRAL
    KOREA_SOUTH
    UK_SOUTH
    UK_WEST
    UNKNOWN_AZURE_REGION
    US_CENTRAL
    US_EAST
    US_EAST2
    US_NORTH_CENTRAL
    US_SOUTH_CENTRAL
    US_WEST
    US_WEST2
    US_WEST_CENTRAL
}

enum AzureSubscriptionStatusEnum {
    Added
    Deleted
    Deleting
    DeletionFailed
    RefreshFailed
    Refreshed
    Refreshing
}

"Blueprint failover status enum."
enum BlueprintFailoverStatus {
    "Blueprint failover failed."
    FAILED
    "Blueprint failover does not exist."
    NOT_EXIST
    "Blueprint failover succeeded."
    SUCCEEDED
}

enum BlueprintLocationTypeEnum {
    Aws
    Azure
    CDM
    Unknown
}

enum BlueprintPlatformEnum {
    Aws
    UnknownPlatform
    vSphere
}

enum BlueprintStatusEnum {
    Configured
    Invalid
    MissingChildren
    NotConfigured
    Uncompleted
}

enum CalendarEmailAddressFilterTypeEnum {
    ALL
    ATTENDEE
    ORGANIZER
}

enum CalendarEventTypeEnum {
    SERIES_EXCEPTION
    SERIES_MASTER
    SERIES_OCCURRENCE
    SINGLE_INSTANCE
}

enum CalendarSearchKeywordTypeEnum {
    NAME
}

enum CalendarSearchObjectTypeEnum {
    ALL
    CALENDAR
    EVENT
}

enum CdmClusterStatusTypeEnum {
    Disconnected
    DownloadPackageFailed
    DownloadingPackage
    FailedToInitiateUpgrade
    OnOldRelease
    PrechecksFailureError
    PrechecksFailureWarning
    PrechecksRunning
    ReadyForDownload
    ReadyForUpgrade
    ResumingUpgrade
    RollbackFailed
    RollingBackUpgrade
    Stable
    StableWithUpgradeInfo
    Unknown
    UpgradeFailed
    UpgradeRecommended
    UpgradeScheduled
    UpgradeScheduledWithWarning
    Upgrading
}

enum CdmSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum CdmSnapshotSortByEnum {
    Date
    SnappableId
    SnapshotId
}

enum CdpLocalStatusEnum {
    CDP_LOCAL_STATUS_ACTIVE
    CDP_LOCAL_STATUS_FAILED
    CDP_LOCAL_STATUS_NOT_ENABLED
    CDP_LOCAL_STATUS_PENDING
    CDP_LOCAL_STATUS_RESYNCING
    CDP_LOCAL_STATUS_TAKING_SNAPSHOT
}

enum CdpReplicationStatusEnum {
    CDP_REPLICATION_STATUS_FAILED
    CDP_REPLICATION_STATUS_HEALTHY
    CDP_REPLICATION_STATUS_INITIALIZING
    CDP_REPLICATION_STATUS_NOT_ENABLED
}

enum CertMgmtSortByEnum {
    NAME
}

enum ChartType {
    BAR
    LINE
    PIE
    STACKED_BAR
}

enum ChronologicalOrderEnum {
    ASC
    DESC
}

enum ClassificationPolicyColor {
    COLOR_001
    COLOR_002
    COLOR_003
    COLOR_004
    COLOR_005
    COLOR_006
    COLOR_007
    COLOR_008
    COLOR_009
    COLOR_010
    COLOR_011
    COLOR_012
    UNKNOWN
}

enum ClassificationPolicyMode {
    COMPLIANCE
    DISCOVERY
}

enum CloudAccountActionEnum {
    CREATE
    DELETE
    UPDATE_CHILD_ACCOUNTS
    UPDATE_PERMISSIONS
    UPDATE_REGIONS
}

enum CloudAccountFeatureEnum {
    ALL
    APP_FLOWS
    ARCHIVAL
    CLOUDACCOUNTS
    CLOUD_NATIVE_ARCHIVAL
    CLOUD_NATIVE_PROTECTION
    EXOCOMPUTE
    GCP_SHARED_VPC_HOST
    RDS_PROTECTION
}

enum CloudAccountFilterFieldEnum {
    ACCOUNT_PROVIDER_TYPE
    IS_KEY_BASED
    NAME
}

enum CloudAccountSortByFieldEnum {
    NAME
}

enum CloudAccountStatusEnum {
    CONNECTED
    CONNECTING
    DISABLED
    DISCONNECTED
    MISSING_PERMISSIONS
}

enum CloudNativeLabelObjectType {
    GCP_DISK
    GCP_GCE_INSTANCE
}

enum CloudNativeLocTemplateTypeEnum {
    INVALID
    SOURCE_REGION
    SPECIFIC_REGION
}

enum CloudNativeRBAStatusType {
    Not_Registered
    Registered
    Unavailable
}

enum CloudNativeTagObjectType {
    AWS_EBS_VOLUME
    AWS_EC2_INSTANCE
    AWS_RDS_INSTANCE
    AZURE_MANAGED_DISK
    AZURE_VIRTUAL_MACHINE
}

enum CloudNativeTagRuleFilterFieldsEnum {
    AWS_ACCOUNT
    CLOUD_NATIVE_ACCOUNT
    NAME
    SLA_DOMAIN
}

enum CloudNativeTagRuleSortByFieldsEnum {
    NAME
    SLA_DOMAIN
    TAG
}

enum CloudNativeVmAppConsistentObjectType {
    AZURE_VIRTUAL_MACHINE
}

enum CloudProviderEnum {
    AWS
    AZURE
}

enum CloudProviderTypeEnum {
    CLOUD_ACCOUNT_AWS
    CLOUD_ACCOUNT_AWS_ROLE_BASED
    CLOUD_ACCOUNT_AZURE
    CLOUD_ACCOUNT_GCP
    UNKNOWN_CLOUD_ACCOUNT
}

enum ClusterDiskStatus {
    ACTIVE
    FAILED
    LOCKED
    MISSING
    REMOVED
    UNFORMATTED
    UNKNOWN
}

enum ClusterDiskType {
    FLASH
    HDD
    UNKNOWN
}

enum ClusterGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Type
    Week
    Year
}

enum ClusterJobStatusTypeEnum {
    DownloadPackageFailed
    DownloadingPackage
    FailedToInitiateUpgrade
    PreCheckFailureError
    PreCheckFailureWarning
    ReadyForDownload
    ReadyForUpgrade
    ResumingUpgrade
    RollbackFailed
    RollingBackUpgrade
    Unknown
    UpToDate
    UpgradeFailed
    Upgrading
}

enum ClusterProductEnum {
    CDM
    DATOS
    POLARIS
}

enum ClusterRemovalState {
    DATA_DELETING
    DISCONNECTING
    FAILED
    REGISTERED
    UNREGISTERED
    WAITING_FOR_DATA_DELETION
}

enum ClusterSortByEnum {
    ClusterName
    ClusterType
    RegisteredAt
}

enum ClusterStatus {
    Connected
    Disconnected
    Initializing
}

enum ClusterTypeEnum {
    Cloud
    ExoCompute
    OnPrem
    Polaris
    Robo
    Unknown
}

enum ComplianceStatusEnum {
    Empty
    InCompliance
    NotApplicable
    NotAvailable
    Null
    OutOfCompliance
    Unprotected
}

enum ComponentEnum {
    APP_FLOWS
    AWS_NATIVE
    AWS_SOURCE
    AZURE_NATIVE
    BLOBSTORE
    CEREBRO
    CLOUD_ACCOUNTS
    CLOUD_NATIVE
    COLOSSUS
    DATA_GOV
    EXO_COMPUTE
    FORGE
    GCP_NATIVE
    GPS
    KUPR
    O365
    PLATFORM
    RADAR
    SNAPPABLES
    SONAR
    THOR
    USER_MANAGEMENT
}

enum ConfiguredSlaTypeEnum {
    CONFIGURED_SLA_TYPE_PROTECTION_SLA
    CONFIGURED_SLA_TYPE_RETENTION_SLA
}

enum ConflictResolutionAuthzEnum {
    ALLOW_AUTO_CONFLICT_RESOLUTION
    NONE
    NO_CONFLICT_RESOLUTION
}

enum ConnectionStatusType {
    CONNECTED
    DISCONNECTED
}

"Tells whether snapshot has app or crash consistency"
enum ConsistencyLevelEnum {
    AppConsistent
    CrashConsistent
    FileSystemConsistent
    Inconsistent
    Unknown
    VssConsistent
}

enum ContextFilterTypeEnum {
    APPFLOWS_FAILOVER_TO_AWS
    APPFLOWS_FAILOVER_TO_CDM
    DEFAULT
}

enum CrawlStatusEnum {
    COMPLETE
    COMPLETE_WITH_FAIL
    IN_PROGRESS
    IN_PROGRESS_WITH_FAIL
}

enum CustomReportGroupByEnum {
    ReportFocus
}

enum CustomReportSortByEnum {
    CreationTime
    UpdateTime
    ViewTime
}

enum DataGovFileModeEnum {
    DIRECTORY
    FILE
    SYMLINK
    UNKNOWN
}

enum DataGovOsTypeEnum {
    LINUX
    NONE
    WINDOWS
}

enum DataGovShareTypeEnum {
    NFS
    SMB
    UNKNOWN_SHARE_TYPE
}

enum DataGovSortOrderEnum {
    ASC
    DESC
}

enum DataTransferTypeEnum {
    EMPTY_VALUE
    EXPORT
    HYDRATION
    INPLACE
}

enum DataTypeEnum {
    BOOLEAN
    BYTE
    DATE_TIME
    FILTER_DATE_RANGE
    FLOAT
    INTEGER
    LONG
    STRING
    URL
}

enum DataViewTypeEnum {
    BACKUP_COMPLIANCE
    CDM_UPGRADES
    INDEXING
    MONITORING_ALL
    MONITORING_CANCELED
    MONITORING_COMPLETED
    MONITORING_FAILED
    MONITORING_IN_PROGRESS
    MONITORING_RETRYABLE_CANCELED
    MONITORING_RETRYABLE_FAILED
    MONITORING_SCHEDULED
    MONITORING_TASK_COUNT_TIME_SERIES
    OBJECT_AUDIT_DETAIL
    OBJECT_AUDIT_LIST
    SLA_AUDIT_DETAIL
    SLA_AUDIT_LIST
    SLA_COMPLIANCE
}

enum DayOfMonthEnum {
    FIFTEENTH
    FIRST_DAY
    LAST_DAY
}

enum DayOfQuarterEnum {
    FIRST_DAY
    LAST_DAY
}

enum DayOfWeekEnum {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

enum DayOfYearEnum {
    FIRST_DAY
    LAST_DAY
}

enum DeltaTypeEnum {
    BYTES_CREATED
    BYTES_DELETED
    BYTES_MODIFIED
    NODES_CREATED
    NODES_DELETED
    NODES_MODIFIED
    NODES_SUSPICIOUS
}

enum DiskEncryptionType {
    CUSTOMER_MANAGED_KEY
    CUSTOMER_MANAGED_KEY_RESOURCE_ID
    GOOGLE_MANAGED_KEY
    SOURCE_DISK_ENCRYPTION
}

enum DownloadIdentifierEnum {
    REPORT
    SEND_NOW_EMAIL
    SONAR_DOWNLOAD
}

enum DownloadStatusEnum {
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

enum EmailAddressFilterTypeEnum {
    ALL
    FROM
    TO
}

"Available options for retention for existing snapshots"
enum ExistingSnapshotRetentionEnum {
    "Expire immediately"
    EXPIRE_IMMEDIATELY
    "Keep forever"
    KEEP_FOREVER
    NOT_APPLICABLE
    "Preserve retention from previous SLA"
    RETAIN_SNAPSHOTS
}

enum FailoverClusterAppConnectionStatusEnum {
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_REPLICATION_TARGET
}

enum FailoverClusterConnectionStatusEnum {
    FAILOVER_CLUSTER_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_PARTIALLY_CONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_REPLICATION_TARGET
}

enum FailoverClusterNodeConnectionStatusEnum {
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTOR_NOT_DEPLOYED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_PARTIALLY_CONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_REPLICATION_TARGET
}

enum FailoverClusterOsTypeEnum {
    FAILOVER_CLUSTER_OS_TYPE_AIX
    FAILOVER_CLUSTER_OS_TYPE_ANY
    FAILOVER_CLUSTER_OS_TYPE_HPUX
    FAILOVER_CLUSTER_OS_TYPE_LINUX
    FAILOVER_CLUSTER_OS_TYPE_SUN_OS
    FAILOVER_CLUSTER_OS_TYPE_UNIX_LIKE
    FAILOVER_CLUSTER_OS_TYPE_WINDOWS
}

enum FailoverClusterTypeEnum {
    FAILOVER_CLUSTER_TYPE_UNIX_LIKE
    FAILOVER_CLUSTER_TYPE_WINDOWS
}

enum FailoverGroupByEnum {
    Day
    FailoverStatus
    FailoverType
    Hour
    LastTestStatus
    Month
    Quarter
    Source
    TargetSite
    Week
    Year
}

enum FailoverSortByEnum {
    AppBlueprintName
    SourceSiteName
    StartTime
    TargetSiteName
}

enum FailoverStatusEnum {
    FailoverCleanupStarted
    FailoverFailed
    FailoverJobFailed
    FailoverJobSucceeded
    LocalRecoverySucceeded
    Ongoing
    Paused
    TestFailoverSucceeded
}

enum FailoverTableColumnEnum {
    AppBlueprintName
    Duration
    EndTime
    FailoverStatus
    FailoverType
    LastTestStatus
    LastTestTime
    Source
    StartTime
    TargetSite
}

enum FailoverTypeEnum {
    FAILOVER
    LOCALRECOVERY
    TEST_FAILOVER
}

enum FeatureFlagEntityTypeEnum {
    ACCOUNT
    RANDOM
    SESSION
    USER
}

enum FeatureFlagNameEnum {
    AWSAutoProtectByTagsEnabled
    AWSCrossRegionReplicationEnabled
    AWSCustomCMKInExportEnabled
    AWSCustomKeyPairInExportEnabled
    AWSEc2CrashConsistentSnapshotEnabled
    AWSFileIndexingEnabled
    AWSFilterByTagsEnabled
    AWSOnDemandIndexingEnabled
    AWSReplaceVolumeOptionEnabled
    AWSSnapshotIntegrityEnabled
    AddonsUIEnabled
    AppFlowsEnabled
    AppFlowsGAEnabled
    AutoStorageSettingClusterListEnabled
    AwsChinaCloudEnabled
    AwsComputeSettingsEnabled
    AwsCrossAccountReplicationEnabled
    AwsExocomputeConfigEnabled
    AwsExportInstanceInPoweredOffStateEnabled
    AwsNativeArchivalEnabled
    AwsNativeArchivalGAEnabled
    AwsNativeArchivalShortTermRetentionEnabled
    AwsRDSAutoProtectByTagsEnabled
    AwsRDSProtectionEnabled
    AwsRoleBasedArchivalLocationsEnabled
    AwsSnsSqsBasedAutomatedFlowEnabled
    AzureAppConsistentSnapshotsEnabled
    AzureAutoProtectByTagsEnabled
    AzureCommonResourceGroupEnabled
    AzureCrossRegionReplicationEnabled
    AzureCrossSubscriptionExportEnabled
    AzureLockSnapshotsEnabled
    AzureNationalCloudEnabled
    AzureNativeArchivalEnabled
    AzureRecoverPoweredOffEnabled
    AzureSeparateResourceGroupEnabled
    AzureSnapshotIntegrityEnabled
    BackupFailureRemediationEnabled
    CapacityReportNativeSnappableEnabled
    CardPinningEnabled
    CdmUpgradesEnabled
    CdmUpgradesReportNgEnabled
    CertMgmtEnabled
    CloudAccountForAppFlowsEnabled
    CloudAccountListCombinedEnabled
    CloudAccountsAwsUpgradePermissionEnabled
    CloudAccountsAzureUpgradePermissionEnabled
    CloudAccountsSeamlessFlowEnabled
    CloudAccountsStackSetFlowEnabled
    CloudNativeAWSEnabled
    CloudNativeAzureEnabled
    CloudNativeGCPEnabled
    CloudNativeOnDemandSnapshotsWithSLA
    CloudNativeUnmanagedObjectsEnabled
    ClusterAddForbidden
    ClusterListFilterEnabled
    ClusterStatusEnabled
    ClusterSyncJobsAlertsEnabled
    ComplianceReportNativeSnappableEnabled
    CreateNewClusterEnabled
    DarkSiteEnabled
    DataClassificationDevEnabled
    DataClassificationEnabled
    DatagovNasAuditEnabled
    DatagovUAEnabled
    DetailedInventoryCardEnabled
    EnforceMoatOnAPIsEnabled
    ExpandedGlobalSearchEnabled
    FederatedLoginEnabled
    FederatedLoginManagementEnabled
    FilesetFeatureEnablementEnabled
    FilesetInventoryEAEnabled
    FilesetInventoryEnabled
    FilesetInventoryGAEnabled
    FilesetRbacEnabled
    GcpNativeAutoProtectByTagsEnabled
    GcpNativeCrossProjectInstanceExport
    GcpNativeDiskProtection
    GcpNativeExportEncryptedInstances
    GcpNativeExportInstanceInStoppedState
    GcpNativeExportInstancesInSharedVPC
    GcpNativeRestoreEncryptedInstances
    GcpNativeSnapshotStorageReport
    GlobalDashboardEntryPointEnabled
    GlobalDashboardPageEnabled
    GlobalSLAGPSEnabled
    GoFeatureExtractionEnabled
    HyperVHierarchyEnabled
    HyperVInventoryViewEnabled
    JobMonitoringUIEnabled
    KubernetesInventoryEnabled
    LambdaEnabled
    LdapEnabled
    LocalSlaEnabled
    ManagedVolumeHierarchyEnabled
    MetadataIncrementalSyncEnabled
    MetadataSyncAdvancedMetricsEnabled
    MetadataSyncEnabled
    MfaLoginEnabled
    MssqlHierarchyEnabled
    NameSplitRefreshKorgJobEnabled
    NasFilesetRbacEnabled
    NewThemesEnabled
    O365CalendarEnabled
    O365DashboardEnabled
    O365DashboardV2Enabled
    O365ExchangeAppShardingEnabled
    O365InventoryEnabled
    O365OnedriveEnabled
    O365OnedriveGAEnabled
    O365OnedriveGAOrgSlaAssigmnentEnabled
    O365SharePointEnabled
    O365SharedMailboxEnabled
    O365TeamsEnabled
    ObjectLevelRBACEnabled
    ObjectTypeSLAEnhancementEnabled
    OnDemandCrawlEnabled
    OnDemandSnapshotExpirationEnabled
    OnPremNotificationEnabled
    OracleHierarchyEnabled
    PreferDarkTheme
    RBACForGlobalSLAEnabled
    RadarAnomalyModelBEnabled
    RadarAppFlowsEnabled
    RadarBetaEnabled
    RadarDashboardEnabled
    RadarDemoEnabled
    RadarDevEnabled
    RadarDownloadCsvEnabled
    RadarPipelineMergeEnabled
    RadarSIEMEnabled
    RecoverySearchEnabled
    RemoveClusterEnabled
    ReportAsyncDownloadEnabled
    ReportForecasterEnabled
    ReportForwardUIEnabled
    ReportLastSyncedDateEnabled
    ReportPDFEnabled
    RkTableEnabled
    RollbackOnSuccessEnabled
    RubrikSEDemoEnabled
    SLAAuditReportsEnabled
    SLAHierarchyEnabled
    SLASyncHighFreqEnabled
    SSOEnhancementEnabled
    SapHanaInventoryEnabled
    SapHanaOnGcpEnabled
    ScheduledReportEnabled
    SecureUploadEnabled
    ServiceAccountEnabled
    SkipFailedEventQueryEnabled
    SlaComplianceFilterEnabled
    SnapshotWindowEnabled
    SonarDashEnabled
    SonarObjectFilesEnabled
    SonarReplicatedObjectsEnabled
    SonarUKAnalyzersEnabled
    SonarVMObjectsEnabled
    SonarVirtualAppliancesEnabled
    SsoEnabled
    StaticRetentionEnabled
    SystemAnnouncementsEnabled
    ThemedClusterCardEnabled
    UAFileCountsEnabled
    UAPermissionsTabEnabled
    UnmanagedObjectEnabled
    UserAwarenessV1Enabled
    UserAwarenessV2Enabled
    UserPreferencesEnabled
    VSphereFeatureEnablementEnabled
    VSphereInventoryEnabled
    VSphereSearchAndRecoveryRolloutEnabled
    VcdHierarchyEnabled
    WIPEnabled
    WorkflowBasedRolesEnabled
}

enum FeatureNameEnum {
    FilesetManagement
    NotSpecified
    VmwareManagement
}

enum FieldEnum {
    ALL
    IS_COMPLETE
    IS_CORRUPTED
    IS_DELETED_FROM_SOURCE
    IS_EXPIRED
    IS_HINT_SET
    IS_INDEXED
    IS_INDEX_MERGED
    IS_ON_DEMAND
    TIME_RANGE_WITH_OFFSET
}

enum FileActivitiesSortBy {
    NUM_ACTIVITIES
    USER_NAME
}

enum FileCountTypeEnum {
    ANY
    HITS
    OPEN_ACCESS
    OPEN_ACCESS_HITS
    STALE
    STALE_HITS
}

enum FileModeEnum {
    DIRECTORY
    FILE
    SYMLINK
}

enum FileRecoveryFeasibility {
    EXOCOMPUTE_NOT_CONFIGURED
    FEASIBLE
    SNAPSHOT_EXPIRED
    UNKNOWN
}

enum FileResultSortByEnum {
    CLUSTER
    DAILY_CHANGE
    FILES_WITH_HITS
    FILES_WITH_OPEN_ACCESS_HITS
    HITS
    LAST_ACCESS_TIME
    NAME
    NATIVE_PATH
    NUM_ACTIVITIES
    NUM_ACTIVITIES_DELTA
    OBJECT_LOCATION
    OBJECT_NAME
    OPEN_ACCESS_TYPE
    SNAPSHOT_TIME
    STALE_FILES_WITH_HITS
}

enum FileTypeEnum {
    CSV
    PDF
}

enum FileVersionSourceEnum {
    CLOUD
}

enum FilesetOSType {
    LINUX
    NO_OS_TYPE
    UNIX_LIKE
    WINDOWS
}

enum FilesetTemplateCreateOperatingSystemTypeEnum {
    FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_UNIX_LIKE
    FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum FilesetTemplateCreateShareTypeEnum {
    FILESET_TEMPLATE_CREATE_SHARE_TYPE_NFS
    FILESET_TEMPLATE_CREATE_SHARE_TYPE_SMB
}

enum FilesetTemplatePatchOperatingSystemTypeEnum {
    FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_UNIX_LIKE
    FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum FilesetTemplatePatchShareTypeEnum {
    FILESET_TEMPLATE_PATCH_SHARE_TYPE_NFS
    FILESET_TEMPLATE_PATCH_SHARE_TYPE_SMB
}

enum FilterTypeEnum {
    CLUSTER_FILTER
    DATE_RANGE
    MULTI_SELECT
    SEARCH
    SINGLE_SELECT
}

enum FrequencyUnitEnum {
    DAILY
    MONTHLY
}

enum GcpNativeDiskSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    EFFECTIVE_SLA_DOMAIN
    GCP_DISK_LOCATION
    GCP_DISK_NATIVE_ID
    GCP_DISK_NATIVE_NAME
    GCP_DISK_PROJECT_NAME
    GCP_DISK_SIZE
}

enum GcpNativeGCEInstanceSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    EFFECTIVE_SLA_DOMAIN
    GCP_INSTANCE_NATIVE_ID
    GCP_INSTANCE_NATIVE_NAME
    GCP_INSTANCE_NETWORK_NAME
    GCP_INSTANCE_PROJECT_NAME
    GCP_INSTANCE_REGION
    GCP_INSTANCE_TYPE
}

enum GcpNativeLabelFilterTypeEnum {
    LABEL_KEY
    LABEL_KEY_VALUE
}

enum GcpNativeProjectSortFieldsEnum {
    EFFECTIVE_SLA_DOMAIN
    GCP_PROJECT_DISK_COUNT
    GCP_PROJECT_INSTANCE_COUNT
    GCP_PROJECT_NATIVE_ID
    GCP_PROJECT_NUMBER
    GCP_PROJECT_ORG_NAME
    NAME
}

enum GcpNativeProjectStatusEnum {
    Deleted
    Deleting
    DeletionFailed
    Refreshed
    Refreshing
}

enum GlobalSlaQueryFilterInputField {
    CLUSTER_UUID
    NAME
    OBJECT_TYPE
    SHOW_CLUSTER_SLAS_ONLY
}

enum GroupByFieldEnum {
    Analyzer
    Cluster
    ClusterType
    ClusterUuid
    ComplianceStatus
    Day
    FailoverStatus
    FailoverType
    File
    Hour
    IsAnomaly
    LastActivityStatus
    LastActivityType
    LastTestStatus
    ManagedId
    Month
    Object
    ObjectName
    ObjectType
    POLICY_VIOLATIONS
    Policy
    ProtectionStatus
    PullTimeWithOffset
    Quarter
    SLADomain
    STATUS_POLICY
    SlaDomain
    Source
    Status
    TIME_ISSUES
    TIME_VIOLATIONS
    TargetSite
    TaskDetailClusterType
    TaskDetailObjectType
    Time
    Type
    UserAuditStatus
    UserAuditType
    Week
    Year
}

enum GuestCredentialAuthorizationStatusEnum {
    FAILED
    PENDING
    SUCCESSFUL
}

enum GuestOSEnum {
    CENTOS
    RHEL
    UBUNTU
    UNKNOWN
    WINDOWS
}

"The guest operating system"
enum GuestOsTypeEnum {
    "Linux Operating System"
    Linux
    "Unknown Guest OS type"
    Unknown
    "Windows Operating System"
    Windows
}

enum HierarchyFilterField {
    AWS_NATIVE_ACCOUNT_ENABLED_FEATURE
    AWS_NATIVE_ACCOUNT_ID
    AWS_NATIVE_EC2_INSTANCE_ID
    AWS_NATIVE_RDS_DB_ENGINE
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    AWS_REGION
    AWS_TAG
    AWS_VPC_ID
    AZURE_DISK_ATTACHED_VM
    AZURE_DISK_CRG_NAME
    AZURE_DISK_CRG_SUBSCRIPTION_ID
    AZURE_DISK_RG_NAME
    AZURE_DISK_RG_SUBSCRIPTION_ID
    AZURE_DISK_SIZE
    AZURE_DISK_SUBSCRIPTION_ID
    AZURE_DISK_TYPE
    AZURE_REGION
    AZURE_RG_DISK_OR_VM_SLA
    AZURE_RG_SUBSCRIPTION_ID
    AZURE_TAG
    AZURE_VM_CRG_NAME
    AZURE_VM_CRG_SUBSCRIPTION_ID
    AZURE_VM_RG_NAME
    AZURE_VM_RG_SUBSCRIPTION_ID
    AZURE_VM_SIZE
    AZURE_VM_SUBSCRIPTION_ID
    AZURE_VNET_NAME
    CLUSTER_ID
    CLUSTER_TYPE
    DOES_PHYSICAL_HOST_HAVE_RELIC_FILESETS
    EBS_VOLUME_ID
    EBS_VOLUME_INDEXING_STATUS
    EBS_VOLUME_NAME
    EBS_VOLUME_NAME_OR_VOLUME_ID
    EBS_VOLUME_TYPE
    EC2_INSTANCE_ID
    EC2_INSTANCE_INDEXING_STATUS
    EC2_INSTANCE_NAME
    EC2_INSTANCE_NAME_OR_INSTANCE_ID
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA
    EFFECTIVE_SLA_SOURCE_OBJECT
    EFFECTIVE_SLA_TYPE
    FAILOVER_CLUSTER_ID
    FILESET_SLA
    FILESET_TEMPLATE_ID
    FILESET_TEMPLATE_OS_TYPE
    GCP_LABEL
    GCP_NATIVE_DISK_LOCATION
    GCP_NATIVE_DISK_NAME_OR_NATIVE_ID
    GCP_NATIVE_DISK_PROJECT
    GCP_NATIVE_DISK_TYPE
    GCP_NATIVE_INSTANCE_NAME_OR_NATIVE_ID
    GCP_NATIVE_INSTANCE_NETWORK_NAME
    GCP_NATIVE_INSTANCE_TYPE
    GCP_NATIVE_PROJECT_ID
    GCP_NATIVE_PROJECT_NAME_OR_PROJECT_NUMBER
    GCP_NATIVE_PROJECT_NATIVE_ID
    GCP_NATIVE_REGION
    GUEST_OS_TYPE_FOR_FILE_RESTORE
    HAS_PARENT_SNAPPABLE
    IS_ARCHIVED
    IS_GHOST
    IS_PROTECTED
    IS_RELIC
    IS_REPLICATED
    KUPR_CDM_CLUSTER_ID
    KUPR_CLUSTER_STATUS
    KUPR_NAMESPACE_CDM_CLUSTER_ID
    KUPR_NAMESPACE_CLUSTER_STATUS
    LOCATION
    NAME
    NAME_EXACT_MATCH
    NAME_OR_EMAIL_ADDRESS
    O365_SPECIFIC_TYPE
    ON_OR_ABOVE_CLUSTER_VERSION
    OS_NAME
    OS_TYPE
    PHYSICAL_HOST_CONNECTION_STATUS
    PHYSICAL_HOST_EFFECTIVE_SLA
    PHYSICAL_HOST_ID
    SAP_HANA_SYSTEM_ID
    SAP_HANA_SYSTEM_SID
    SAP_HANA_SYSTEM_STATUS
}

enum HierarchyObjectTypeEnum {
    AllSubHierarchyType
    AppBlueprint
    AppflowsBlueprint
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeResourceGroup
    AzureNativeSubscription
    AzureNativeVm
    CloudNativeTagRule
    Ec2Instance
    FailoverClusterApp
    Fileset
    FilesetTemplate
    GcpNativeDisk
    GcpNativeGCEInstance
    GcpNativeProject
    Hdfs
    HostFailoverCluster
    HostShare
    HypervCluster
    HypervSCVMM
    HypervServer
    HypervVirtualMachine
    KuprCluster
    KuprNamespace
    LinuxFileset
    ManagedVolume
    MongoCollection
    MongoDb
    MongoSource
    Mssql
    MssqlAvailabilityGroup
    MssqlDatabaseBatchMaintenance
    MssqlInstance
    NutanixCluster
    NutanixVirtualMachine
    O365Calendar
    O365File
    O365Mailbox
    O365Onedrive
    O365Org
    O365SharePointDrive
    O365Site
    O365Teams
    O365User
    OracleDatabase
    OracleHost
    OracleRac
    PhysicalHost
    PolarisEbsVolume
    PolarisEc2Instance
    SapHanaDatabase
    SapHanaSystem
    ShareFileset
    StorageArrayVolumeGroup
    VSphereComputeCluster
    VSphereDatacenter
    VSphereDatastore
    VSphereFolder
    VSphereHost
    VSphereNetwork
    VSphereTag
    VSphereTagCategory
    VSphereVCenter
    Vcd
    VcdCatalog
    VcdOrg
    VcdOrgVdc
    VcdVapp
    VcdVimServer
    VmwareVirtualMachine
    VolumeGroup
    WindowsCluster
    WindowsFileset
    WindowsVolumeGroup
}

enum HierarchySortByField {
    ASSIGNED_SLA_DOMAIN
    AWS_NATIVE_ACCOUNT_NAME
    AWS_NATIVE_RDS_DB_ENGINE
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    AWS_REGION
    AWS_VPC_ID
    AZURE_DISK_ATTACHED_VM
    AZURE_DISK_CRG_NAME
    AZURE_DISK_CRG_SUBSCRIPTION_NAME
    AZURE_DISK_RG_DISKCOUNT
    AZURE_DISK_RG_NAME
    AZURE_DISK_RG_SUBSCRIPTION_NAME
    AZURE_DISK_SIZE
    AZURE_DISK_SUBSCRIPTION_NAME
    AZURE_DISK_TYPE
    AZURE_REGION
    AZURE_RG_DISKCOUNT
    AZURE_RG_DISK_EFFECTIVE_SLA
    AZURE_RG_SUBSCRIPTION_NAME
    AZURE_RG_VMCOUNT
    AZURE_RG_VM_EFFECTIVE_SLA
    AZURE_SUBNET_NAME
    AZURE_SUBSCRIPTION_DISKCOUNT
    AZURE_SUBSCRIPTION_VMCOUNT
    AZURE_TENANT_ID
    AZURE_VM_CRG_NAME
    AZURE_VM_CRG_SUBSCRIPTION_NAME
    AZURE_VM_RG_NAME
    AZURE_VM_RG_SUBSCRIPTION_NAME
    AZURE_VM_RG_VMCOUNT
    AZURE_VM_SIZE
    AZURE_VM_SUBSCRIPTION_NAME
    AZURE_VNET_NAME
    EBS_VOLUME_COUNT
    EBS_VOLUME_ID
    EBS_VOLUME_NAME
    EBS_VOLUME_SIZE
    EBS_VOLUME_TYPE
    EC2_INSTANCE_COUNT
    EC2_INSTANCE_ID
    EC2_INSTANCE_NAME
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA_DOMAIN
    EMAIL_ADDRESS
    FILESET_TEMPLATE_DOES_NOT_EXCLUDE
    FILESET_TEMPLATE_EXCLUDES
    FILESET_TEMPLATE_INCLUDES
    GCP_DISK_LOCATION
    GCP_DISK_NATIVE_ID
    GCP_DISK_NATIVE_NAME
    GCP_DISK_PROJECT_NAME
    GCP_DISK_SIZE
    GCP_INSTANCE_NATIVE_ID
    GCP_INSTANCE_NATIVE_NAME
    GCP_INSTANCE_NETWORK_NAME
    GCP_INSTANCE_PROJECT_NAME
    GCP_INSTANCE_REGION
    GCP_INSTANCE_TYPE
    GCP_PROJECT_DISK_COUNT
    GCP_PROJECT_INSTANCE_COUNT
    GCP_PROJECT_NATIVE_ID
    GCP_PROJECT_NUMBER
    GCP_PROJECT_ORG_NAME
    ID
    NAME
    PHYSICAL_HOST_CONNECTION_STATUS
    PHYSICAL_HOST_OS_NAME
    SAP_HANA_SYSTEM_SID
    SAP_HANA_SYSTEM_STATUS
}

enum HierarchySortOrder {
    ASC
    DESC
}

enum HostConnectivityStatusEnum {
    BADLY_CONFIGURED
    CONNECTED
    CONNECTING
    CONNECTOR_NOT_DEPLOYED
    DELETED
    DELETING
    DELETION_FAILED
    DISCONNECTED
    PARTIALLY_CONNECTED
    REFRESHING
    REFRESH_FAILED
    REMOTE
    REPLICATED_TARGET
    UNKNOWN_CONNECTIVITY_STATUS
}

enum HostFailoverClusterRoot {
    LINUX_HOST_ROOT
    WINDOWS_HOST_ROOT
}

enum HostRoot {
    LINUX_HOST_ROOT
    NAS_HOST_ROOT
    WINDOWS_HOST_ROOT
}

enum HostVfdInstallConfigEnum {
    HOST_VFD_INSTALL_CONFIG_DISABLED
    HOST_VFD_INSTALL_CONFIG_ENABLED
}

enum HostVfdStateEnum {
    HOST_VFD_STATE_INSTALLED
    HOST_VFD_STATE_INSTALLED_BUT_RESTART_REQUIRED
    HOST_VFD_STATE_NOT_INSTALLED
    HOST_VFD_STATE_UNINSTALLED_BUT_RESTART_REQUIRED
}

enum InfrastructureTableColumnEnum {
    ClusterName
    ClusterType
    EncryptionEnabled
    EstimatedRunway
    Location
    TotalCapacity
    UsedCapacity
}

enum InodeTypeEnum {
    DIRECTORY
    FILE
    UNKNOWN_INODE
}

enum InstanceTypeEnum {
    AZURE_CHINA
    AZURE_DEFAULT
    AZURE_GERMANY
    AZURE_GOVERNMENT
    UNKNOWN_INSTANCE
}

enum InterfaceTypeEnum {
    BOND0
    BOND1
    CUSTOM
    UNKNOWN_TYPE
}

enum InventorySubHierarchyRootEnum {
    APPFLOWS_ROOT
    AWSNATIVE_ROOT
    AZURENATIVE_ROOT
    CLOUD_NATIVE_TAG_RULE_ROOT
    GCPNATIVE_ROOT
    HYPERV_ROOT
    KUPR_ROOT
    LINUX_HOST_ROOT
    MANAGED_VOLUME_ROOT
    MONGO_ROOT
    MSSQL_ROOT
    NAS_HOST_ROOT
    NUTANIX_ROOT
    O365_ROOT
    ORACLE_ROOT
    PHYSICAL_HOST_ROOT
    SAP_HANA_ROOT
    VCD_ROOT
    VSPHERE_ROOT
    WINDOWS_HOST_ROOT
}

enum IssueEventTypeEnum {
    ADD_WHITELIST_EVENT
    CREATE_EVENT
    DELETE_POLICY_EVENT
    NO_ISSUES_SNAPSHOT_EVENT
    REMOVE_POLICY_OBJ_EVENT
    REMOVE_WHITELIST_EVENT
    SNAPSHOT_EVENT
}

enum IssueStatusEnum {
    OPEN
    RESOLVED
}

enum K8sClusterDBType {
    AWS
    Azure
    GCP
    OnPrem
}

enum K8sClusterProtoType {
    AWS
    AZURE
    GCP
    ON_PREM
    UNKNOWN
}

enum K8sClusterStatus {
    STATUS_CONNECTED
    STATUS_DISCONNECTED
    STATUS_INIT
    STATUS_UNKNOWN
}

enum LastTestStatusEnum {
    Failed
    NotExist
    Succeeded
}

enum LdapAuthorizedPrincipalFieldEnum {
    DirectoryName
    Email
    Name
}

enum LdapIntegrationFieldEnum {
    Name
}

enum LdapPrincipalFieldEnum {
    Name
}

enum ListAccessUsersSortEnum {
    EMAIL
    NUM_ACTIVITIES
    NUM_ACTIVITY_DELTA
    USERNAME
}

enum LocationType {
    AWS
    AZURE
    CDM
    GCP
    UNKNOWN_TYPE
}

"type of data location"
enum LocationTypeEnum {
    Azure
    CLOUD_NATIVE_AWS
    CLOUD_NATIVE_GCP
    Cleversafe
    Glacier
    Google
    HDS
    LOCAL
    Nfs
    Qstar
    REPLICATION_OFF
    REPLICATION_POLARIS_SOURCE
    REPLICATION_SOURCE
    REPLICATION_SOURCE_AND_TARGET
    REPLICATION_TARGET
    Rehydrated
    S3
    S3Compatible
    Scality
}

enum LogLevelEnum {
    DEBUG
    INFO
}

enum ManagedObjectType {
    APP_BLUEPRINT
    AWS_NATIVE_ACCOUNT
    AWS_NATIVE_EBS_VOLUME
    AWS_NATIVE_EC2_INSTANCE
    AWS_NATIVE_RDS_INSTANCE
    AZURE_MANAGED_DISK
    AZURE_RESOURCE_GROUP
    AZURE_RESOURCE_GROUP_FOR_DISK_HIERARCHY
    AZURE_RESOURCE_GROUP_FOR_VM_HIERARCHY
    AZURE_SUBSCRIPTION
    AZURE_UNMANAGED_DISK
    AZURE_VIRTUAL_MACHINE
    BLUEPRINT
    CLOUD_NATIVE_TAG_RULE
    FAILOVER_CLUSTER_APP
    FILESET_TEMPLATE
    GCP_NATIVE_DISK
    GCP_NATIVE_GCE_INSTANCE
    GCP_NATIVE_PROJECT
    HOST_FAILOVER_CLUSTER
    HOST_SHARE
    HYPERV_CLUSTER
    HYPERV_SCVMM
    HYPERV_SERVER
    HYPERV_VIRTUAL_MACHINE
    KUPR_CLUSTER
    KUPR_NAMESPACE
    LINUX_FILESET
    MANAGED_VOLUME
    MONGO_COLLECTION
    MONGO_DB
    MONGO_SOURCE
    MSSQL_AVAILABILITY_GROUP
    MSSQL_DAG
    MSSQL_DATABASE
    MSSQL_INSTANCE
    NUTANIX_CLUSTER
    NUTANIX_VIRTUAL_MACHINE
    O365_CALENDAR
    O365_INDIVIDUAL_MAILBOX
    O365_INDIVIDUAL_USER
    O365_MAILBOX
    O365_ONEDRIVE
    O365_ORGANIZATION
    O365_SHARED_MAILBOX
    O365_SHARED_USER
    O365_SHAREPOINT_DRIVE
    O365_SITE
    O365_TEAMS
    O365_USER
    ORACLE_DATABASE
    ORACLE_HOST
    ORACLE_RAC
    PHYSICAL_HOST
    SAP_HANA_DATABASE
    SAP_HANA_SYSTEM
    SHARE_FILESET
    VCD
    VCD_CATALOG
    VCD_ORG
    VCD_ORG_VDC
    VCD_VAPP
    VCD_VIM_SERVER
    VOLUME_GROUP
    VSPHERE_COMPUTE_CLUSTER
    VSPHERE_DATACENTER
    VSPHERE_DATASTORE
    VSPHERE_FOLDER
    VSPHERE_HOST
    VSPHERE_NETWORK
    VSPHERE_RESOURCE_POOL
    VSPHERE_TAG
    VSPHERE_TAG_CATEGORY
    VSPHERE_VCENTER
    VSPHERE_VIRTUAL_MACHINE
    WINDOWS_CLUSTER
    WINDOWS_FILESET
}

enum MissedSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum MissedSnapshotSortByEnum {
    Date
}

enum MonthEnum {
    APRIL
    AUGUST
    DECEMBER
    FEBRUARY
    JANUARY
    JULY
    JUNE
    MARCH
    MAY
    NOVEMBER
    OCTOBER
    SEPTEMBER
}

enum MssqlCbtEffectiveStatusTypeEnum {
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF_DEFAULT
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON_DEFAULT
}

enum MssqlCbtStatusTypeEnum {
    MSSQL_CBT_STATUS_TYPE_DEFAULT
    MSSQL_CBT_STATUS_TYPE_DISABLED
    MSSQL_CBT_STATUS_TYPE_ENABLED
}

enum NetworkAdapterTypeEnum {
    E1000
    E1000E
    PCNET32
    VMXNET
    VMXNET2
    VMXNET3
}

enum NetworkProtocolTypeEnum {
    TCP
    UDP
}

enum NetworkTypeEnum {
    DHCP
    STATIC
}

enum O365AzureCloudTypeEnum {
    PUBLIC
    USGOV
}

enum O365ServiceAccountStatusEnum {
    INVALID
    NOT_CONFIGURED
    VALID
}

enum O365ServiceStatusEnum {
    DOWN
    ONLINE
}

enum ObjectPolicyStatus {
    STALE
    UNKNOWN
    UP_TO_DATE
}

enum ObjectTypeEnum {
    AppBlueprint
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeVm
    Ec2Instance
    Fileset
    GcpNativeDisk
    GcpNativeGCEInstance
    Hdfs
    HypervVirtualMachine
    KuprNamespace
    LinuxFileset
    ManagedVolume
    Mssql
    MssqlDatabaseBatchMaintenance
    NutanixVirtualMachine
    O365Calendar
    O365File
    O365Mailbox
    O365Onedrive
    O365SharePointDrive
    O365Site
    O365Teams
    OracleDatabase
    PolarisEbsVolume
    PolarisEc2Instance
    SapHanaDatabase
    ShareFileset
    StorageArrayVolumeGroup
    VcdVapp
    VmwareVirtualMachine
    VolumeGroup
    WindowsFileset
    WindowsVolumeGroup
}

enum OnedriveSearchKeywordTypeEnum {
    FILE_TYPE
    NAME
}

enum OnedriveSearchObjectTypeEnum {
    ALL
    O365_FOLDER
    ONEDRIVE_FILE
}

enum OpenAccessTypeEnum {
    EXPLICIT
    INHERITED
    NOT_OPEN
    UNKNOWN_ACCESS
}

enum OperationEnum {
    AddAwsCloudAccount
    AddAzureCloudAccount
    AddCluster
    AddGcpCloudAccount
    AddInventory
    AddStorageSettings
    CancelRunningActivity
    CategoryManageDataSource
    CategoryProtection
    CategoryRecovery
    CategoryViewDataSource
    ConfigureDataClassGlobal
    CreateReport
    CreateSLA
    DeleteAwsCloudAccount
    DeleteAzureCloudAccount
    DeleteCluster
    DeleteGcpCloudAccount
    DeleteInventory
    DeleteReport
    DeleteSLA
    DeleteSnapshot
    DeleteStorageSettings
    Download
    DownloadFromArchivalLocation
    EditAwsCloudAccount
    EditAzureCloudAccount
    EditCdmNetworkSetting
    EditCdmSupportSetting
    EditCdmSysConfig
    EditGcpCloudAccount
    EditSecuritySettings
    EditStorageSettings
    EditSystemPreference
    EditUserManagement
    Export
    ExportDataClassGlobal
    ExportFiles
    ExportSnapshots
    InstantRecover
    ManageAccess
    ManageDataSource
    ManageLegalHold
    ManageProtection
    ManageSLA
    ModifyCluster
    ModifyInventory
    ModifyReport
    ModifySLA
    Mount
    ProvisionOnInfrastructure
    RefreshDataSource
    Restore
    RestoreToOrigin
    TakeOnDemandSnapshot
    TransferAccountOwnership
    UpgradeCluster
    ViewAccess
    ViewAuditLog
    ViewAwsCloudAccount
    ViewAzureCloudAccount
    ViewCdmNetworkSetting
    ViewCdmSupportSetting
    ViewCdmSysConfig
    ViewCluster
    ViewDashboard
    ViewDataClassGlobal
    ViewGcpCloudAccount
    ViewInventory
    ViewInventoryWithHierarchy
    ViewNonSystemEvent
    ViewReport
    ViewSLA
    ViewSecuritySettings
    ViewStorageSettings
    ViewSystemEvent
    ViewSystemPreference
    ViewUserManagement
}

enum OrgStatusEnum {
    ACTIVE
    DELETED
    DELETING
    REFRESHING
}

enum OsTypeEnum {
    Linux
    Other
    Undefined
    Windows
}

enum PastDurationEnum {
    NONE
    PAST_12_MONTHS
    PAST_24_HOURS
    PAST_30_DAYS
    PAST_3_DAYS
    PAST_7_DAYS
}

enum PendingActionGroupTypeEnum {
    APP_FLOW
    ARCHIVAL_LOCATION
    CLOUD_ACCOUNTS
    GLOBAL_SLA
    REPLICATION
    UNMANAGED_OBJECTS
}

enum PendingActionStatusEnum {
    FAILED
    IN_PROGRESS
    QUEUED
    SUCCEEDED
    SYNCED_TO_CDM
}

enum PendingActionSubGroupTypeEnum {
    ARCHIVAL_LOCATION_DELETE
    ARCHIVAL_LOCATION_PAUSE
    ARCHIVAL_LOCATION_RESUME
    AWS_COMPUTE_SETTING_UPSERT
    AWS_IAM_CUSTOMER_ACCOUNT_UPSERT
    AWS_ROLE_BASED_ARCHIVAL_LOCATION
    BLUEPRINT_CREATE
    BLUEPRINT_DELETE
    BLUEPRINT_DEPRECATE
    BLUEPRINT_UPDATE
    CLUSTER_PEER_TOKEN_GET
    CLUSTER_PEER_TOKEN_GET_AND_SET
    CLUSTER_PEER_TOKEN_SET
    DISABLE_REPLICATION_LOCATION_PUT
    ENABLE_LOCATION_AS_REPLICATION_TARGET
    ENABLE_POLARIS_AS_REPLICATION_SOURCE
    GLOBAL_SLA_ASSIGN
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPPABLE
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT_V2
    GLOBAL_SLA_DELETE
    GLOBAL_SLA_PUT
    NFS_LOCATION_PUT
    OBJECT_STORE_LOCATION_PUT
    UNMANAGED_OBJECT_DELETE_SNAPSHOTS
    UNMANAGED_OBJECT_DELETE_SNAPSHOTS_OF_OBJECT
}

enum PendingActionSyncTypeEnum {
    CDM
    POLARIS
}

enum PlanNameEnum {
    PROD
    PROD_LOCAL
    TEST
}

enum PolarisObjectAuthorizedOperationsEnum {
    ManageDataSource
    ManageProtection
    RefreshDataSource
    ViewInventory
}

enum PolarisSLASyncStatusEnum {
    FAILED
    PENDING
    SUCCEEDED
}

enum PolarisSnappableAuthorizedOperationsEnum {
    DeleteSnapshot
    Download
    ExportSnapshots
    ManageProtection
    RestoreToOrigin
    TakeOnDemandSnapshot
    ViewInventory
}

enum PolarisSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum PolarisSnapshotSortByEnum {
    Date
    SnappableId
    SnapshotId
}

enum PolicyObjectFilterEnum {
    ALL
    HAS_OBJECTS
    NO_OBJECTS
}

enum PrePostScriptFailureHandlingEnum {
    abort
    continue
}

enum PrechecksStatusTypeEnum {
    PrechecksFailureError
    PrechecksFailureWarning
    PrechecksRunning
    PrechecksSuccess
    Unknown
}

enum PrincipalTypeEnum {
    CLIENT
    GROUP
    UNKNOWN
    USER
}

enum ProtectionStatusEnum {
    DoNotProtect
    NoSla
    Protected
}

enum RansomwareResultGroupByEnum {
    ClusterUuid
    ManagedId
    SnapshotDay
    SnapshotHour
    SnapshotMonth
    SnapshotWeek
    SnapshotYear
}

enum RansomwareResultSortByEnum {
    ClusterUuid
    EncryptionProbability
    IsEncrypted
    ManagedId
    SnappableId
    SnapshotDate
    SnapshotId
}

enum RecoverySpecTypeEnum {
    AWS_EC2
    UNKNOWN_VM
    VMWARE_VM
}

enum ReplicationTypeEnum {
    REPLICATION_TO_CLOUD_LOCATION
    REPLICATION_TO_CLOUD_REGION
    UNIDIRECTIONAL_REPLICATION_TO_CLUSTER
    UNKNOWN_REPLICATION_TYPE
}

enum ReportFocusEnum {
    Activity
    Anomaly
    Audit
    Capacity
    Compliance
    Failover
    Infrastructure
    Protection
    ProtectionTaskDetail
    RecoveryTaskDetail
    Sonar
    SonarContent
    TaskSummary
}

enum ReportTableColumnEnum {
    ActivityStatus
    ActivityType
    AnalyzersBreakdown
    AppBlueprintName
    ArchivalTarget
    ArchiveSnapshots
    ArchiveStorage
    BytesCreated
    BytesDeleted
    BytesModified
    BytesNetChanged
    Cluster
    ClusterLocation
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    DataTransferred
    DirectArchive
    Duration
    EncryptionEnabled
    EndDate
    EndTime
    EstimatedRunway
    FailoverStatus
    FailoverType
    FailureReason
    FileName
    FilesCreated
    FilesDeleted
    FilesModified
    IsAnomaly
    LastSnapshot
    LastTestStatus
    LastTestTime
    LastUpdated
    LocalSnapshots
    Location
    LogicalByte
    LogicalBytes
    MissedSnapshots
    NumCoveredObjects
    NumHighRiskLocations
    NumOfCanceled
    NumOfExpected
    NumOfFailed
    NumOfSucceeded
    NumViolatedFiles
    NumViolations
    ObjectName
    ObjectType
    Path
    PhysicalBytes
    PoliciesBreakdown
    PolicyName
    PolicyStatus
    PreviousSnapshotDate
    PreviousSnapshotId
    ProtectedVolume
    RecoveryPoint
    RecoveryPointType
    ReplicaSnapshots
    ReplicaStorage
    ReplicationSource
    ReplicationTarget
    Size
    SlaDomain
    SlaDomainName
    SnappableName
    SnappableType
    SnapshotConsistency
    SnapshotDate
    SnapshotId
    SnapshotTime
    Source
    StartDate
    StartTime
    Status
    SuspiciousFilesAdded
    TargetSite
    TaskType
    TotalCapacity
    TotalFileTransferred
    TotalHits
    TotalSnapshots
    TransferredBytes
    UsedCapacity
    UserAuditStatus
    UserAuditType
    UserName
}

enum ResolutionTypeEnum {
    RESOLVED_AD
    RESOLVED_ON_HOST
    UNRESOLVED
    WELL_KNOWN
}

enum ResourceType {
    BLUEPRINT
    CLUSTER
    SNAPPABLE
}

enum RetentionUnitEnum {
    DAYS
    HOURS
    MINUTES
    MONTHS
    QUARTERS
    WEEKS
    YEARS
}

enum RiskLevelTypeEnum {
    HIGH_RISK
    LOW_RISK
    MEDIUM_RISK
    NO_RISK
    UNKNOWN_RISK
}

enum RoleFieldEnum {
    Name
}

enum SLAAuditDetailFilterFieldEnum {
    USER_NAME
}

enum SLAComplianceTimeRangeEnum {
    Last24Hours
    Last2Snapshots
    Last3Snapshots
    LastSnapshot
    Past30Days
    Past365Days
    Past7Days
    Past90Days
    SinceProtection
}

enum SLAObjectTypeEnum {
    AWS_EC2_EBS_OBJECT_TYPE
    AWS_RDS_OBJECT_TYPE
    AZURE_OBJECT_TYPE
    GCP_OBJECT_TYPE
    KUPR_OBJECT_TYPE
    O365_OBJECT_TYPE
    SAP_HANA_OBJECT_TYPE
    UNKNOWN_OBJECT_TYPE
    VSPHERE_OBJECT_TYPE
}

enum SLAQuerySortByFieldEnum {
    NAME
    PROTECTED_OBJECT_COUNT
}

enum SLAQuerySortByOrderEnum {
    ASC
    DESC
}

enum SMTPSecurityTypeEnum {
    NONE
    SSL
    STARTTLS
    TLS
}

enum SapHanaDataPathTypeEnum {
    SAP_HANA_DATA_PATH_TYPE_GCP
    SAP_HANA_DATA_PATH_TYPE_LOCAL
    SAP_HANA_DATA_PATH_TYPE_MANAGED_VOLUME
}

enum SapHanaHostHostTypeEnum {
    SAP_HANA_HOST_HOST_TYPE_MASTER
    SAP_HANA_HOST_HOST_TYPE_SECONDARY_MASTER
    SAP_HANA_HOST_HOST_TYPE_SECONDARY_SLAVE
    SAP_HANA_HOST_HOST_TYPE_SLAVE
}

enum SapHanaLogSnapshotSortByEnum {
    Date
}

enum SapHanaRecoverableRangeSortByEnum {
    EndTime
    StartTime
}

enum SapHanaSslInfoEncryptionProviderEnum {
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_COMMON_CRYPTO
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_OPENSSL
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_SAP_CRYPTO
}

enum SapHanaSystemStatus {
    ERROR
    OK
    UNKNOWN_SYSTEM_STATUS
    WARNING
}

enum SapHanaSystemSummaryContainerTypeEnum {
    SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_MULTI_CONTAINER
    SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_SINGLE_CONTAINER
}

enum SapHanaSystemSummaryStatusEnum {
    SAP_HANA_SYSTEM_SUMMARY_STATUS_ERROR
    SAP_HANA_SYSTEM_SUMMARY_STATUS_OK
    SAP_HANA_SYSTEM_SUMMARY_STATUS_UNKNOWN
    SAP_HANA_SYSTEM_SUMMARY_STATUS_WARNING
}

enum SearchKeywordTypeEnum {
    ALL
    FOLDER_NAME
    SUBJECT
}

enum SearchObjectTypeEnum {
    EMAIL
    FOLDER
}

enum ServiceAccountSortByEnum {
    NAME
}

"Share type for fileset"
enum ShareTypeEnum {
    "NFS share"
    NFS
    "not shared"
    NoShareType
    "SMB share"
    SMB
}

enum SkuEnum {
    STANDARD_GRS
    STANDARD_LRS
    STANDARD_ZRS
}

enum SlaAssignTypeEnum {
    doNotProtect
    noAssignment
    protectWithSlaId
}

enum SlaAssignmentEnum {
    SLA_ASSIGNMENT_DERIVED
    SLA_ASSIGNMENT_DIRECT
    SLA_ASSIGNMENT_UNASSIGNED
}

enum SlaAssignmentTypeEnum {
    Derived
    Direct
    Unassigned
}

enum SnappableAggregationsEnum {
    ArchiveStorage
    Count
    LogicalBytes
    MissedSnapshots
    PhysicalBytes
    ReplicaStorage
    TotalSnapshots
}

enum SnappableCrawlStatus {
    COMPLETE
    FAIL
    IN_PROGRESS
}

enum SnappableGroupByEnum {
    Cluster
    ClusterType
    ComplianceStatus
    Day
    Hour
    Month
    ObjectType
    ProtectionStatus
    PullTimeWithOffset
    Quarter
    SlaDomain
    Week
    Year
}

enum SnappableLevelHierarchyTypeEnum {
    AllSubHierarchyType
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeVirtualMachine
    GcpNativeGCEInstance
    KuprNamespace
    O365Mailbox
    O365Onedrive
    O365SharePointDrive
    O365Site
    O365Teams
}

enum SnappableSortByEnum {
    ArchivalComplianceStatus
    ArchivalSnapshotLag
    ArchiveSnapshots
    ArchiveStorage
    AwaitingFirstFull
    Cluster
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    LastSnapshot
    LatestArchivalSnapshot
    LatestReplicationSnapshot
    LocalOnDemandSnapshots
    LocalSLASnapshots
    LocalSnapshots
    Location
    LogicalBytes
    LogicalDataReduction
    MissedSnapshots
    Name
    ObjectType
    PhysicalBytes
    ProtectionStatus
    ReplicaSnapshots
    ReplicaStorage
    ReplicationComplianceStatus
    ReplicationSnapshotLag
    SlaDomainName
    TotalSnapshots
    TransferredBytes
}

enum SnappableTableColumnEnum {
    ArchiveSnapshots
    ArchiveStorage
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    LastSnapshot
    LocalSnapshots
    Location
    LogicalByte
    MissedSnapshots
    ObjectType
    PhysicalBytes
    ReplicaSnapshots
    ReplicaStorage
    SlaDomain
    SnappableName
    TotalSnapshots
    TransferredBytes
}

enum SnappableTypeEnum {
    CALENDAR
    MAILBOX
    ONEDRIVE
    SHAREPOINT_DRIVE
    SHAREPOINT_SITE
    TEAMS
}

enum SnapshotCloudStorageTierEnum {
    SNAPSHOT_CLOUD_STORAGE_TIER_AZURE_ARCHIVE
    SNAPSHOT_CLOUD_STORAGE_TIER_COLD
    SNAPSHOT_CLOUD_STORAGE_TIER_COOL
    SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER
    SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER_DEEP_ARCHIVE
    SNAPSHOT_CLOUD_STORAGE_TIER_HOT
}

enum SnapshotConsistencyLevelEnum {
    SNAPSHOT_APP_CONSISTENT
    SNAPSHOT_CRASH_CONSISTENT
    UNKNOWN_CONSISTENCY_LEVEL
}

enum SnapshotFrequencyEnum {
    DAILY
    HOURLY
    MONTHLY
    NA
    QUARTERLY
    WEEKLY
    YEARLY
}

enum SnapshotGroupByTimeEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum SnapshotQueryFilterField {
    EBS_AWS_NATIVE_ACCOUNT_ID
    EC2_AWS_NATIVE_ACCOUNT_ID
    IS_ARCHIVED
    IS_DELETED_FROM_SOURCE
    IS_DOWNLOADED
    IS_GCED
    IS_ON_DEMAND
    IS_REPLICA
    IS_SAP_HANA_INCREMENTAL_SNAPSHOT
    SLA_ID
    SNAPSHOT_TYPE
}

enum SnapshotQuerySortByField {
    CREATION_TIME
    UNKNOWN
}

enum SnapshotType {
    ARCHIVED
    REPLICATED
    SOURCE
}

enum SnapshotTypeEnum {
    DOWNLOADED
    ON_DEMAND
    SCHEDULED
}

enum SnapshotTypeToUseIfSourceExpired {
    ARCHIVED
    REPLICATED
}

enum SonarContentReportGroupByEnum {
    Analyzer
    Cluster
    File
    ObjectName
    Policy
    SLADomain
    Time
}

enum SonarContentReportSortByEnum {
    AnalyzerName
    Cluster
    FileName
    FilesWithHits
    Location
    ObjectName
    Path
    PolicyName
    SLADomain
    Size
    SnapshotTime
    TotalHits
}

enum SonarContentReportTableColumnEnum {
    AnalyzersBreakdown
    Cluster
    FileName
    ObjectName
    ObjectType
    Path
    PoliciesBreakdown
    Size
    SnapshotTime
    TotalHits
}

enum SonarReportGroupByEnum {
    POLICY_VIOLATIONS
    STATUS_POLICY
    TIME_ISSUES
    TIME_VIOLATIONS
}

enum SonarReportSortByEnum {
    NUM_HIGH_RISK_LOCATIONS
    NUM_OBJECTS
    NUM_VIOLATED_FILES
    NUM_VIOLATION
    POLICY_NAME
    POLICY_STATUS
}

enum SonarReportTableColumnEnum {
    NumCoveredObjects
    NumHighRiskLocations
    NumViolatedFiles
    NumViolations
    PolicyName
    PolicyStatus
}

enum SonarReportTablePolicyStatusEnum {
    DISCOVERY
    IN_COMPLIANCE
    OUT_OF_COMPLIANCE
}

enum SortByFieldEnum {
    ActivityStatus
    ActivityType
    AnalyzerName
    AnomalyProbability
    AppBlueprintName
    ArchivalComplianceStatus
    ArchivalSnapshotLag
    ArchiveSnapshots
    ArchiveStorage
    AwaitingFirstFull
    BytesCreatedCount
    BytesDeletedCount
    BytesModifiedCount
    BytesNetChangedCount
    Cluster
    ClusterName
    ClusterType
    ClusterUuid
    ComplianceStatus
    DataReduction
    Date
    EndTime
    FileName
    FilesCreatedCount
    FilesDeletedCount
    FilesModifiedCount
    FilesWithHits
    IsAnomaly
    LastSnapshot
    LastUpdated
    LatestArchivalSnapshot
    LatestReplicationSnapshot
    LocalOnDemandSnapshots
    LocalSLASnapshots
    LocalSnapshots
    Location
    LogicalBytes
    LogicalDataReduction
    ManagedId
    MissedSnapshots
    NUM_HIGH_RISK_LOCATIONS
    NUM_OBJECTS
    NUM_VIOLATED_FILES
    NUM_VIOLATION
    Name
    NumCanceled
    NumExpected
    NumFailed
    NumSucceeded
    ObjectName
    ObjectType
    POLICY_NAME
    POLICY_STATUS
    Path
    PhysicalBytes
    PolicyName
    PreviousSnapshotDate
    PreviousSnapshotId
    ProtectionStatus
    RegisteredAt
    ReplicaSnapshots
    ReplicaStorage
    ReplicationComplianceStatus
    ReplicationSnapshotLag
    SLADomain
    Severity
    Size
    SlaDomainName
    SnappableName
    SnappableType
    SnapshotDate
    SnapshotId
    SnapshotTime
    SourceSiteName
    StartTime
    TargetSiteName
    Time
    TotalHits
    TotalSnapshots
    TransferredBytes
}

enum SortOrderEnum {
    Asc
    Desc
}

enum StalenessTypeEnum {
    IS_STALE
    NOT_STALE
}

enum SyslogFacilityTypeEnum {
    ALL_SYSLOG
    AUTH
    RUBRIK_CLI
    RUBRIK_EVENT
    RUBRIK_SSH
    SECURITY
    SYSLOG
}

enum SyslogSeverityTypeEnum {
    ALL_SEVERITY
    CRITICAL
    INFORMATIONAL
    WARNING
}

enum TagFilterType {
    TAG_KEY
    TAG_KEY_VALUE
}

enum TagRuleSlaAssignTypeEnum {
    doNotProtect
    protectWithSlaId
}

enum TargetEncryptionTypeEnum {
    KMS_MASTER_KEY_BASED
    RSA_KEY_BASED
    UNKNOWN_ENCRYPTION_TYPE
}

enum TargetMappingQueryFilterFieldEnum {
    ARCHIVAL_GROUP_TYPE
    ARCHIVAL_LOCATION_TYPE
    NAME
}

enum TargetMappingSortByFieldEnum {
    NAME
}

enum TargetQueryFilterFieldEnum {
    IS_MANAGED_BY_AUTO_AG
    LOCATION_TYPE
    NAME
}

enum TargetSortByFieldEnum {
    NAME
}

enum TargetSyncStatusEnum {
    ACTION_FAILED
    NOT_CREATED_ON_CDM
    PENDING_SYNC
    SYNCED
}

enum TargetTypeEnum {
    AWS
    AZURE
    NFS
}

enum TaskDetailGroupByEnum {
    Cluster
    Day
    Hour
    Month
    Quarter
    Status
    TaskDetailClusterType
    TaskDetailObjectType
    Week
    Year
}

enum TaskDetailSortByEnum {
    EndTime
}

enum TaskDetailTableColumnEnum {
    ArchivalTarget
    ClusterLocation
    DataTransferred
    DirectArchive
    EndTime
    FailureReason
    Location
    LogicalBytes
    ObjectName
    ObjectType
    PhysicalBytes
    ProtectedVolume
    RecoveryPoint
    RecoveryPointType
    ReplicationSource
    ReplicationTarget
    SlaDomainName
    SnapshotConsistency
    StartTime
    Status
    TaskType
    TotalFileTransferred
    UserName
}

enum TaskReportTableColumnEnum {
    EndDate
    Location
    NumOfCanceled
    NumOfExpected
    NumOfFailed
    NumOfSucceeded
    ObjectName
    ObjectType
    SlaDomainName
    StartDate
}

enum TaskSummaryGroupByEnum {
    Cluster
    ClusterType
    Day
    Month
    Object
    ObjectType
    Quarter
    SlaDomain
    Week
    Year
}

enum TaskSummarySortByEnum {
    Date
    NumCanceled
    NumExpected
    NumFailed
    NumSucceeded
    ObjectName
    ObjectType
    SlaDomainName
}

enum TaskchainStateEnum {
    CANCELED
    CANCELING
    FAILED
    READY
    RUNNING
    SUCCEEDED
    UNDOING
}

enum TierEnum {
    COOL
    HOT
}

enum TimeDurationEnum {
    DAY
    HOUR
    MONTH
}

enum TimeGranularityEnum {
    DAY
    MONTH
}

enum TimeUnitEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum UpgradeInfoGroupByEnum {
    ClusterJobStatus
    Type
    VersionStatus
}

enum UpgradeInfoSortByEnum {
    ClusterJobStatus
    ClusterLocation
    ClusterName
    ClusterType
    DownloadedVersion
    InstalledVersion
    RegisteredAt
    VersionStatus
}

enum UserAuditGroupByEnum {
    Cluster
    ClusterType
    Day
    Hour
    Month
    ObjectType
    Quarter
    UserAuditStatus
    UserAuditType
    Week
    Year
}

enum UserAuditObjectTypeEnum {
    AppBlueprint
    ArchivalLocation
    AuthDomain
    AwsAccount
    AwsEventType
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeDisk
    AzureNativeSubscription
    AzureNativeVm
    Blueprint
    CloudNativeTagRule
    Cluster
    DataLocation
    Ec2Instance
    FailoverClusterApp
    FederatedAccess
    GcpNativeDisk
    GcpNativeGceInstance
    GcpNativeProject
    Host
    HostFailoverCluster
    HypervScvmm
    HypervServer
    HypervVm
    IpWhitelist
    JobInstance
    Ldap
    LinuxFileset
    LinuxHost
    ManagedVolume
    Mssql
    NasHost
    NutanixCluster
    NutanixVm
    O365Calendar
    O365Mailbox
    O365Onedrive
    O365Organization
    O365SharepointDrive
    O365Team
    OracleDb
    OracleHost
    OracleRac
    PublicCloudMachineInstance
    SapHanaDb
    SapHanaSystem
    ShareFileset
    Sla
    SlaDomain
    SmbDomain
    Snapshot
    StorageArray
    StorageArrayVolumeGroup
    StorageSettings
    Storm
    SupportTunnel
    SystemPreference
    UnknownObjectType
    Upgrade
    User
    UserActionAudit
    UserGroup
    UserRole
    Vcd
    VcdVapp
    Vcenter
    VmwareMount
    VmwareVm
    VolumeGroup
    WindowsFileset
    WindowsHost
}

enum UserAuditSeverityEnum {
    Critical
    Info
    NA
    Warning
}

enum UserAuditSortByEnum {
    Time
}

enum UserAuditStatusEnum {
    Failure
    Success
}

enum UserAuditTableColumnEnum {
    ClusterName
    ClusterType
    UserAuditStatus
    UserAuditType
}

enum UserAuditTypeEnum {
    AccessManagement
    Audit
    Backup
    Classification
    Configuration
    Diagnostic
    Download
    Failover
    Index
    LegalHold
    Login
    Recovery
    Search
    SlaAssignment
    SlaModification
    Sync
    UnknownUserAuditType
}

enum UserDomainEnum {
    CLIENT
    LDAP
    LOCAL
    SHARED_SSO
    SSO
}

enum UserFieldEnum {
    Domain
    Email
    LastLogin
    Status
}

enum UserStatusEnum {
    ACTIVE
    DEACTIVATED
    UNKNOWN
}

enum VCenterConnectionStatusEnum {
    BADLY_CONFIGURED
    CONNECTED
    CONNECTION_STATUS_UNKNOWN
    DELETING
    DISCONNECTED
    REFRESHING
    REMOTE
}

enum VSphereLiveMountStatusEnum {
    DatastoreMounted
    MigratingDatastore
    Mounting
    PoweredOff
    PoweredOn
    Unknown
    Unmounting
}

enum VSphereMountSortByEnum {
    ClusterName
    MountTime
    NewVmName
    SourceVmName
    Status
}

enum VSphereVirtualDiskSortByEnum {
    FileName
    Size
}

enum ValidationStatus {
    FAILURE
    SUCCESS
    WARNING
}

enum VersionStatusTypeEnum {
    Stable
    Unknown
    UpgradeRecommended
}

enum VmPowerStatusEnum {
    poweredOff
    poweredOn
    suspended
}

enum VmTypeEnum {
    DENSE
    STANDARD
}

enum WarningSeverityEnum {
    BLOCKING
    NONE
    NON_BLOCKING
}

enum WeekDayEnum {
    Friday
    Monday
    Saturday
    Sunday
    Thursday
    Tuesday
    Wednesday
}

enum WhitelistModeEnum {
    ALL_USERS
    LOCAL_USERS
}

"Filter Activity series data"
input ActivitySeriesFilterInput {
    ancestorId: UUID
    cluster: CommonClusterFilterInput
    lastActivityStatus: [ActivityStatusEnum!]
    lastActivityType: [ActivityTypeEnum!]
    lastUpdated_gt: DateTime
    lastUpdated_lt: DateTime
    objectFids: [UUID!]
    objectName: String
    objectType: [ActivityObjectTypeEnum!]
    searchTerm: String
    severity: [ActivitySeverityEnum!]
    startTime_gt: DateTime
    startTime_lt: DateTime
}

input AnalyzerGroupInput {
    analyzers: [AnalyzerInput!] = []
    groupType: AnalyzerGroupTypeEnum = UNDEFINED
    id: String = ""
    name: String = ""
}

input AnalyzerInput {
    analyzerType: AnalyzerTypeEnum = UNDEFINED
    dictionary: [String!] = []
    dictionaryCsv: String = ""
    id: String = ""
    name: String = ""
    regex: String = ""
}

"Filter anomaly result data."
input AnomalyResultFilterInput {
    clusterUuid: [UUID!]
    endTime: DateTime
    isAnomaly: Boolean
    managedId: [String!]
    snappableFid: [UUID!]
    startTime: DateTime
}

input AppBlueprintChildInput {
    bootPriority: Int!
    fid: UUID!
    snappableType: ObjectTypeEnum!
}

input AppBlueprintChildSnappableExportSpec {
    datastoreId: String! = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    vmName: String = ""
}

input AppBlueprintChildSnappableInstantRecoverySpec {
    dataStoreName: String = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    preserveMoid: Boolean = false
    vlan: Int = 0
}

input AppBlueprintChildSnappableLocalRecoverySpec {
    disableNetwork: Boolean = false
    hostId: String = ""
    originalVmId: String! = ""
    recoveredVmName: String = ""
    removeNetworkDevices: Boolean = false
    shouldKeepMacAddresses: Boolean = false
    shouldUnregisterVm: Boolean = false
}

input AppBlueprintChildSnappableMountSpec {
    dataStoreName: String = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    vlan: Int = 0
    vmName: String = ""
}

input AppBlueprintExportSnapshotJobConfig {
    baseConfig: AppBlueprintRestoreSnapshotJobConfigBase
    childrenToRestore: [AppBlueprintChildSnappableExportSpec!]! = []
    newAppName: String = ""
}

input AppBlueprintMountSnapshotJobConfig {
    childrenToRestore: [AppBlueprintChildSnappableMountSpec!]! = []
    jobConfigBase: AppBlueprintRestoreSnapshotJobConfigBase
    newAppName: String = ""
}

input AppBlueprintRecoverySpecCreateReqInputType {
    childRecoverySpecs: [ChildRecoverySpecCreateReqInputType!]!
    locationInfo: LocationInfo
    planType: PlanNameEnum!
    userData: String
}

input AppBlueprintRestoreSnapshotJobConfigBase {
    "Power on the new virtual machine(s) if set to True."
    shouldPowerOn: Boolean = true
}

"O365 list app filter"
input AppFilter {
    field: AppFilterFieldEnum = APP_TYPE
    texts: [String!] = []
}

"O365 list app sort by param"
input AppSortByParam {
    field: AppSortByFieldEnum = APP_ID
    sortOrder: AppSortOrderEnum = ASC
}

input ArchivalSpecInput {
    archivalGroupId: String = ""
    threshold: Int = 0
    thresholdUnit: RetentionUnitEnum = MINUTES
}

input AutomaticAwsTargetMappingCreateRequest {
    awsComputeSettingsId: String
    bucketPrefix: String!
    cloudAccountId: UUID!
    clusterUuidList: [String!]
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String
    name: String!
    proxySettings: ProxySettingsInput
    region: AwsRegionEnum!
    rsaKey: String
    storageClass: AwsStorageClassTypeEnum!
}

input AutomaticAwsTargetMappingEditRequest {
    awsComputeSettingsId: String
    cloudAccountId: UUID
    clusterUuidList: [String!]
    id: String!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageClass: AwsStorageClassTypeEnum
}

input AutomaticAzureTargetMappingCreateRequest {
    accessKey: String!
    cloudAccountId: UUID!
    clusterUuidList: [String!]
    computeSettings: AzureCloudComputeSettingsInput
    containerNamePrefix: String!
    instanceType: InstanceTypeEnum!
    isConsolidationEnabled: Boolean!
    name: String!
    proxySettings: ProxySettingsInput
    rsaKey: String!
    storageAccountName: String!
}

input AutomaticAzureTargetMappingEditRequest {
    accessKey: String
    cloudAccountId: UUID
    clusterUuidList: [String!]
    computeSettings: AzureCloudComputeSettingsInput
    id: String!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageAccountName: String
}

input AwsAccountCreateRequest {
    accessKey: String!
    description: String
    name: String!
    secretKey: String!
}

input AwsAccountEditRequest {
    accessKey: String!
    description: String
    id: String!
    name: String!
    secretKey: String!
}

input AwsCloudAccountAdminInput {
    "Name of cloud account."
    accountName: String = ""
    "Cloud type (Standard/China) for the cloud account"
    cloudType: AwsCloudTypeEnum = STANDARD
    id: String = ""
    "Native ID of cloud account."
    nativeId: String = ""
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean = false
}

input AwsCloudAccountFeatureVersionInput {
    "Name of feature to be protected for cloud account."
    feature: CloudAccountFeatureEnum!
    "Version of feature. This should be same as the response given in the first step (validateAndCreateAwsCloudAccount)."
    version: Int!
}

input AwsCloudAccountInitiateInput {
    action: CloudAccountActionEnum!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    awsChildAccounts: [AwsCloudAccountInput!]!
    features: [CloudAccountFeatureEnum!]!
}

input AwsCloudAccountInput {
    "Name of cloud account."
    accountName: String = ""
    "Cloud type (Standard/China) for the cloud account"
    cloudType: AwsCloudTypeEnum = STANDARD
    id: String = ""
    "Native ID of cloud account."
    nativeId: String = ""
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean = false
}

input AwsCloudAccountSelectorInput {
    features: [CloudAccountFeatureEnum!]!
}

input AwsCloudAccountValidateInput {
    awsAdminAccount: AwsCloudAccountAdminInput
    awsChildAccounts: [AwsCloudAccountInput!]!
    features: [CloudAccountFeatureEnum!]!
}

input AwsCloudAccountsInput {
    "Admin account ID to filter."
    awsAdminAccountFilter: UUID
    "Search in native ID, account name, and role ARN."
    columnSearchFilter: String
    "Type of cloud native protection feature."
    feature: CloudAccountFeatureEnum!
    "List of status filters for listing cloud accounts."
    statusFilters: [CloudAccountStatusEnum!]!
}

input AwsCloudComputeSettingFilterInput {
    field: AwsCloudComputeSettingFilterFieldEnum = NAME
    text: String = ""
}

input AwsComputeSettingsCreateRequest {
    cloudAccountId: String = ""
    clusterInterfaceCidrs: [ClusterInfCidrsInput!] = []
    isSecurityGroupPolarisManaged: Boolean = false
    name: String = ""
    region: AwsRegionEnum = UNKNOWN_AWS_REGION
    securityGroupId: String = ""
    subnetId: String = ""
    vpcId: String = ""
}

input AwsComputeSettingsEditRequest {
    id: String = ""
    name: String = ""
    securityGroupId: String = ""
    subnetId: String = ""
    vpcId: String = ""
}

"AWS exocompute configuration to add."
input AwsExocomputeConfigInput {
    "AWS ID of cluster control plane security group. Not required if isPolarisManaged is true"
    clusterSecurityGroupId: String = ""
    "True, if security groups are to be managed to be polaris. False, if security groups are managed by user."
    isPolarisManaged: Boolean!
    "AWS ID of worker node security group. Not required if isPolarisManaged is true"
    nodeSecurityGroupId: String = ""
    "The region for which the configuration is specified."
    region: AwsCloudAccountRegionEnum!
    "List of exactly 2 subnets."
    subnets: [AwsExocomputeSubnetInputType!]!
    "AWS ID of the VPC"
    vpcId: String!
}

"Aws exocompute subnet input"
input AwsExocomputeSubnetInputType {
    "Availability zone of the subnet"
    availabilityZone: String!
    "AWS ID of subnet"
    subnetId: String!
}

"Filter to return AWS objects which have account rubrik ID in the given list of account rubrik IDs."
input AwsNativeAccountFilter {
    accountIds: [String!]!
}

"Filters for list of AWS accounts."
input AwsNativeAccountFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
}

"Filter to return AWS EBS volumes which are attached to one of the EC2 instances in the given list of EC2 instance IDs."
input AwsNativeAttachedInstanceFilter {
    ec2InstanceIds: [String!]!
}

"Filter to return AWS EBS volumes which have file recovery enabled."
input AwsNativeEbsVolumeFileRecoveryStatusFilter {
    statuses: [AwsNativeFileRecoveryStatusEnum!]!
}

"Filters for list of AWS EBS volumes."
input AwsNativeEbsVolumeFilters {
    accountFilter: AwsNativeAccountFilter
    attachedInstanceFilter: AwsNativeAttachedInstanceFilter
    effectiveSlaFilter: EffectiveSlaFilter
    fileRecoveryStatusFilter: AwsNativeEbsVolumeFileRecoveryStatusFilter
    nameOrIdSubstringFilter: AwsNativeEbsVolumeNameOrIdSubstringFilter
    regionFilter: AwsNativeRegionFilter
    relicFilter: RelicFilter
    tagFilter: AwsNativeTagFilter
    typeFilter: AwsNativeEbsVolumeTypeFilter
}

"Filter to return AWS EBS volumes with a given substring in their name or instance ID."
input AwsNativeEbsVolumeNameOrIdSubstringFilter {
    nameOrIdSubstring: String!
}

"Filter to return AWS EBS volumes which have volume type in the given list of volume types."
input AwsNativeEbsVolumeTypeFilter {
    ebsVolumeTypes: [AwsNativeEbsVolumeTypeEnum!]!
}

"Filter to return AWS EC2 instances which have file recovery enabled."
input AwsNativeEc2InstanceFileRecoveryStatusFilter {
    statuses: [AwsNativeFileRecoveryStatusEnum!]!
}

"Filters for list of AWS EC2 instances."
input AwsNativeEc2InstanceFilters {
    accountFilter: AwsNativeAccountFilter
    effectiveSlaFilter: EffectiveSlaFilter
    fileRecoveryStatusFilter: AwsNativeEc2InstanceFileRecoveryStatusFilter
    nameOrIdSubstringFilter: AwsNativeEc2InstanceNameOrIdSubstringFilter
    regionFilter: AwsNativeRegionFilter
    relicFilter: RelicFilter
    tagFilter: AwsNativeTagFilter
    typeFilter: AwsNativeEc2InstanceTypeFilter
    vpcFilter: AwsNativeVPCFilter
}

"Filter to return AWS EC2 instances with a given substring in their name or instance ID."
input AwsNativeEc2InstanceNameOrIdSubstringFilter {
    nameOrIdSubstring: String!
}

"Filter to return AWS EC2 instances which have instance type in the given list of instance types."
input AwsNativeEc2InstanceTypeFilter {
    ec2InstanceTypes: [AwsNativeEc2InstanceTypeEnum!]!
}

input AwsNativeProtectionAccountAddRequest {
    "12 digit aws cloud account Id"
    accountId: String!
    "Name or account alias to identify aws account"
    name: String!
    "regions to be enabled for native protection"
    regions: [String!]!
}

"Filter to return AWS RDS instances which have database engine in the given list of database engines."
input AwsNativeRdsDbEngineFilter {
    dbEngines: [AwsNativeRdsDbEngineEnum!]!
}

"Filter to return AWS RDS instances which have database instance class in the given list of database instance classes."
input AwsNativeRdsDbInstanceClassFilter {
    dbInstanceClasses: [AwsNativeRdsDbInstanceClassEnum!]!
}

"Filters for list of AWS RDS instances."
input AwsNativeRdsInstanceFilters {
    accountFilter: AwsNativeAccountFilter
    dbEngineFilter: AwsNativeRdsDbEngineFilter
    dbInstanceClassFilter: AwsNativeRdsDbInstanceClassFilter
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AwsNativeRegionFilter
    relicFilter: RelicFilter
    tagFilter: AwsNativeTagFilter
    vpcFilter: AwsNativeVPCFilter
}

"Filter to return AWS objects which have region in the given list of regions."
input AwsNativeRegionFilter {
    regions: [AwsNativeRegionEnum!]!
}

"Filter to return AWS objects which have at least one tag in the given list of tags."
input AwsNativeTagFilter {
    tagFilterParams: [TagFilterParams!]!
}

"Filter to return AWS EC2 instances which have VPC ID in the given list of VPC IDs."
input AwsNativeVPCFilter {
    vpcIDs: [String!]!
}

input AwsRdsConfigInput {
    logRetention: SlaDurationInput
}

input AwsTargetCreateRequest {
    awsComputeSettingsId: String
    bucketName: String!
    cloudAccountId: UUID!
    clusterUuid: String!
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String
    name: String!
    proxySettings: ProxySettingsInput
    region: AwsRegionEnum!
    rsaKey: String
    storageClass: AwsStorageClassTypeEnum!
}

input AwsTargetEditRequest {
    awsComputeSettingsId: String
    cloudAccountId: UUID
    id: String!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageClass: AwsStorageClassTypeEnum
}

input AwsVMNicSpecInputType {
    awsSecurityGroupId: String = ""
    awsSubnetId: String = ""
    ipv4Address: String = ""
    key: Int = 0
    securityGroupId: String = ""
    subnetId: String = ""
}

input AwsVMRecoverySpecInputType {
    availabilityZone: String = ""
    dedicatedHostId: String = ""
    hostAffinity: String = ""
    instanceTypeId: Int! = 0
    instanceTypeName: String = ""
    keyName: String = ""
    nics: [AwsVMNicSpecInputType!] = []
    placementGroup: String = ""
    tenancy: AwsInstanceTenancyEnum = DEDICATED
    userData: String = ""
    version: Long = 0
    volumes: [AwsVMVolumeSpecInputType!] = []
}

input AwsVMVolumeSpecInputType {
    iops: Int = 0
    "key value defined in VMWare VM"
    key: Int = 0
    sizeGbs: Int = 0
    volumeTypeId: Int = 0
}

input AzureAccountCreateRequest {
    description: String
    name: String!
    subscriptionId: String!
}

input AzureAccountEditRequest {
    description: String
    id: String!
    name: String
    subscriptionId: String
}

input AzureCloudAccountSubscriptionInput {
    id: String = ""
    name: String = ""
}

input AzureCloudComputeSettingsInput {
    appId: String = ""
    appSecretKey: String = ""
    computeProxySettings: ProxySettingsInput
    generalPurposeStorageContainer: String = ""
    generalPurposeStorageName: String = ""
    region: AzureRegionEnum = UNKNOWN_AZURE_REGION
    resourceGroup: String = ""
    securityGroupId: String = ""
    subnetId: String = ""
    virtualNetworkId: String = ""
}

input AzureDiskBasedVmConfig {
    cdmVersion: String = ""
    location: String = ""
    networkResourceGroup: String = ""
    networkSecurityGroup: String = ""
    nodeSize: Int = 0
    resourceGroup: String = ""
    subnet: String = ""
    tags: String = ""
    vhdUrl: String = ""
    vmType: VmTypeEnum
    vnet: String = ""
}

"Azure exocompute config to add."
input AzureExocomputeAddConfigInputType {
    "Specifies if this configuration is managed by Polaris."
    isPolarisManaged: Boolean!
    "The region for which the config is specified."
    region: AzureCloudAccountRegionEnum!
    "Subnet native id where exocompute should be launched."
    subnetNativeId: String!
}

"Filter to return Azure disks which are attached to one of the virtual machines in the given list of virtual machine IDs."
input AzureNativeAttachedVMFilter {
    virtualMachineIds: [String!]!
}

"Filter to return Azure resource groups with subscription ID in the given list of Rubrik subscription IDs."
input AzureNativeCommonRGSubscriptionFilter {
    subscriptionIds: [String!]!
}

"Filters for listing Azure resource groups."
input AzureNativeCommonResourceGroupFilters {
    effectiveSlaFilter: AzureNativeRGDiskOrVmSlaFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AzureNativeRegionFilter
    subscriptionFilter: AzureNativeCommonRGSubscriptionFilter
}

"Filters for list of Azure disks."
input AzureNativeDiskFilters {
    attachedVMFilter: AzureNativeAttachedVMFilter
    diskTypeFilter: AzureNativeDiskTypeFilter
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AzureNativeRegionFilter
    relicFilter: RelicFilter
    resourceGroupFilter: AzureNativeDiskResourceGroupFilter
    subscriptionFilter: AzureNativeDiskSubscriptionFilter
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure disks which have resource group name in the given list of resource group names."
input AzureNativeDiskResourceGroupFilter {
    isCommonResourceGroupEnabled: Boolean = true
    resourceGroupNames: [String!]!
}

"Filter to return Azure disks which have rubrik subscription ID in the given list of rubrik subscription IDs."
input AzureNativeDiskSubscriptionFilter {
    isCommonResourceGroupEnabled: Boolean = true
    subscriptionIds: [String!]!
}

"Filter to return Azure virtual machine which have VM size in the given list of VM sizes."
input AzureNativeDiskTypeFilter {
    diskTypes: [String!]!
}

"Filter to return Azure resource groups with either disk or VM SLA in the given list of SLA IDs"
input AzureNativeRGDiskOrVmSlaFilter {
    effectiveSlaIds: [String!]!
}

"Filter to return Azure virtual machine which have region in the given list of regions."
input AzureNativeRegionFilter {
    regions: [AzureNativeRegionEnum!]!
}

"Filters for list of Azure subscriptions."
input AzureNativeSubscriptionFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
}

"Filter to return Azure objects which have at least one tag in the given list of tags."
input AzureNativeTagFilter {
    tagFilterParams: [TagFilterParams!]!
}

"Filter to return Azure virtual machines which have resource group name in the given list of resource group names."
input AzureNativeVMResourceGroupFilter {
    isCommonResourceGroupEnabled: Boolean = true
    resourceGroupNames: [String!]!
}

"Filter to return Azure virtual machine which have VM size in the given list of VM sizes."
input AzureNativeVMSizeFilter {
    vmSizes: [String!]!
}

"Filter to return Azure virtual machines which have rubrik subscription ID in the given list of rubrik subscription IDs."
input AzureNativeVMSubscriptionFilter {
    isCommonResourceGroupEnabled: Boolean = true
    subscriptionIds: [String!]!
}

"Filters for list of Azure virtual machines."
input AzureNativeVirtualMachineFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AzureNativeRegionFilter
    relicFilter: RelicFilter
    resourceGroupFilter: AzureNativeVMResourceGroupFilter
    subscriptionFilter: AzureNativeVMSubscriptionFilter
    tagFilter: AzureNativeTagFilter
    vmSizeFilter: AzureNativeVMSizeFilter
    vnetFilter: AzureNativeVnetFilter
}

"Filter to return Azure virtual machine which have Vnet name in the given list of Vnet names."
input AzureNativeVnetFilter {
    vnetNames: [String!]!
}

"Exocompute config"
input AzureO365ExocomputeConfig {
    existingComputeConfig: ExistingComputeConfig
    existingGroupConfig: GroupConfig
    existingStorageAccountConfig: ExistingStorageAccountConfig
    newComputeConfig: NewComputeConfig
    newGroupConfig: GroupConfig
    newStorageAccountConfig: NewStorageAccountConfig
    regionName: String!
}

input AzureSubscriptionInput {
    name: String!
    nativeId: String!
}

input AzureTargetCreateRequest {
    accessKey: String!
    cloudAccountId: UUID!
    clusterUuid: UUID!
    computeSettings: AzureCloudComputeSettingsInput
    containerName: String!
    instanceType: InstanceTypeEnum!
    isConsolidationEnabled: Boolean!
    name: String!
    proxySettings: ProxySettingsInput
    rsaKey: String!
    storageAccountName: String!
}

input AzureTargetEditRequest {
    accessKey: String
    cloudAccountId: UUID
    computeSettings: AzureCloudComputeSettingsInput
    id: UUID!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageAccountName: String
}

input BackupObject {
    eventSeriesId: String = ""
    monitoringId: String = ""
    objectFid: String = ""
}

input BackupRunConfig {
    runNow: Boolean = false
}

"Specifies backup window params"
input BackupWindowInput {
    durationInHours: Int = 0
    startTimeAttributes: StartTimeAttributesInput
}

input BaseOnDemandSnapshotConfig {
    slaFid: String = ""
}

"""

Supported in v5.0+
"""
input BaseOnDemandSnapshotConfigInput {
    """

    Supported in v5.0+
    """
    slaId: String
}

input BasicSnapshotScheduleInput {
    frequency: Int = 0
    retention: Int = 0
    retentionUnit: RetentionUnitEnum = MINUTES
}

"""

Supported in v5.0+
"""
input BatchMountSnapshotJobConfigInput {
    """

    Required. Supported in v5.0+
    v5.0: Array of virtual machine IDs with snapshots to be live mounted.
    v5.1-v5.3: Array of vm_ids to live mount a snapshot from
    v6.0: Array of objects containing information about snapshots to mount.
    """
    snapshots: [MountSnapshotJobConfigForBatchV1Input!] = []
}

"""

Supported in v5.3+
"""
input BatchVmwareVmRecoverableRangesRequestInput {
    """

    Supported in v5.3+
    Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
    """
    afterTime: DateTime
    """

    Supported in v5.3+
    Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
    """
    beforeTime: DateTime
    """

    Supported in v5.3+
    The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.
    """
    vmIds: [String!] = []
}

input BidirectionalReplicationSpecInput {
    replicationSpec1: UnidirectionalReplicationSpecInput
    replicationSpec2: UnidirectionalReplicationSpecInput
}

input BlueprintFailoverJobConfig {
    "The ID of the Blueprint to be failed over."
    blueprintId: UUID!
    childSnappableFailoverInfos: [SnappableFailoverInfoType!]
    "The type of the data transfer, EXPORT, INPLACE, and HYDRATION."
    dataTransferType: DataTransferTypeEnum
    "The failure action of failover, PAUSE or CLEANUP."
    failoverFailureAction: String
    "The operation of the failover, Start or Resume."
    failoverOperation: String
    "The type of the failover job, LOCALRECOVERY, FAILOVER or TEST_FAILOVER."
    failoverType: String!
    "The type of the target location, CDM, AZURE, AWS or GCP."
    targetLocationType: LocationType
    "The UUID of the target location."
    targetLocationUuid: UUID
}

"Blueprint failover related properties."
input BlueprintFailoverPropertiesInput {
    "Data transfer type: EXPORT, INPLACE, HYDRATION."
    dataTransferType: DataTransferTypeEnum = EMPTY_VALUE
    "Type of plan: Prod, Test."
    planType: PlanNameEnum = PROD
    "Failover target location information."
    targetLocation: LocationInfo
}

input BlueprintFailoverReportGeneratorJobInfo {
    "The IDs for the failover records in the report."
    failoverIds: [String!]!
}

input BrowseDirectoryFiltersInput {
    analyzerGroupIds: [String!] = []
    whitelistEnabled: Boolean = false
}

"Email address input for organizer and/or attendee"
input CalendarEmailAddressFilter {
    emailAddress: String = ""
    filterType: CalendarEmailAddressFilterTypeEnum = ORGANIZER
}

"Parameters for calendar event search"
input CalendarSearchFilter {
    emailAddresses: [CalendarEmailAddressFilter!] = []
    searchKeywordFilter: CalendarSearchKeywordFilter
    searchObjectFilter: CalendarSearchObjectFilter
    timerange: TimeRangeFilter
}

"Calendar search keyword and type"
input CalendarSearchKeywordFilter {
    keywordType: CalendarSearchKeywordTypeEnum = NAME
    searchKeyword: String = ""
}

"Calendar search object type"
input CalendarSearchObjectFilter {
    searchObjectType: CalendarSearchObjectTypeEnum = CALENDAR
}

input CdmSnapshotFilterInput {
    clusterUuid: [UUID!]
    isOnDemandSnapshot: Boolean
    snappableId: [String!]
    snapshotId: [UUID!]
    timeRange: TimeRangeInput
}

"Filters for the cluster list"
input CdmUpgradeInfoFilterInput {
    "Location of cluster"
    clusterLocation: [String!]
    connectionState: [ClusterStatus!]
    "Cluster software version greater than or equal to"
    downloadedVersion: [String!]
    "Cluster UUIDs"
    id: [UUID!]
    installedVersion: [String!]
    "Cluster software version greater than or equal to"
    minSoftwareVersion: String
    "Cluster names"
    name: [String!]
    "Prechecks status of cluster"
    prechecksStatus: [PrechecksStatusTypeEnum!]
    "Product type of Rubrik cluster"
    productType: [ClusterProductEnum!]
    "Cluster registration time greater than"
    registrationTime_gt: DateTime
    "Cluster registration time less than"
    registrationTime_lt: DateTime
    "Cluster types"
    type: [ClusterTypeEnum!]
    "Cluster upgrade job status"
    upgradeJobStatus: [ClusterJobStatusTypeEnum!]
    upgradeScheduled: Boolean
    versionStatus: [VersionStatusTypeEnum!]
}

input ChangePasswordInput {
    "Email of user performing reset."
    email: String = ""
    "New password for user."
    password: String = ""
}

input ChartConfigInput {
    groupBy: [String!]!
    type: ChartType!
}

input ChildRecoverySpecCreateReqInputType {
    recoverySpec: ChildRecoverySpecInputType!
    slaId: String
    snappableId: String!
}

input ChildRecoverySpecInputType {
    awsSpec: AwsVMRecoverySpecInputType
    vSphereSpec: VSphereVMRecoverySpecInputType
}

"List of snappable ids and recovery points."
input ChildSnappableFailoverInfoInput {
    "Point in time to which to recover the VM."
    recoveryPoint: Long = 0
    "Snappable id of the blueprint child."
    snappableId: String = ""
}

input ClassificationPolicyInput {
    analyzerIds: [String!] = []
    colorEnum: ClassificationPolicyColor = UNKNOWN
    description: String = ""
    id: String = ""
    mode: ClassificationPolicyMode = DISCOVERY
    name: String = ""
    updateAnalyzerIds: Boolean = false
    updateDescription: Boolean = false
    updateMode: Boolean = false
    updateName: Boolean = false
}

input CleanupFailoverJobInfo {
    blueprintId: UUID!
    comments: String
}

input CloudAccountFilterInput {
    field: CloudAccountFilterFieldEnum = NAME
    text: String = ""
}

"Feature for which required permissions have to be checked."
input CloudNativeFeatureForPermissionsCheck {
    awsFeature: AwsFeatureForPermissionCheck
    azureFeature: AzureFeatureForPermissionCheck
}

"DataType representing filters on cloud native tag or label rules"
input CloudNativeFilter {
    field: CloudNativeTagRuleFilterFieldsEnum = SLA_DOMAIN
    texts: [String!] = []
}

"DataType representing cloud native ids"
input CloudNativeIDs {
    awsNativeAccountIds: [String!]
    azureNativeSubscriptionIds: [String!]
    gcpNativeProjectIds: [String!]
}

"Filters for the cluster disk list"
input ClusterDiskFilterInput {
    status: ClusterDiskStatus
    type: ClusterDiskType
}

"Filters for the cluster list"
input ClusterFilterInput {
    "Exclude clusters that do not have any nodes connected"
    excludeEmptyCluster: Boolean
    "Cluster UUIDs"
    id: [UUID!]
    "Cluster software version greater than or equal to"
    minSoftwareVersion: String
    "Cluster names"
    name: [String!]
    "Object types of snappables protected by the cluster"
    objectType: [ObjectTypeEnum!]
    "Cluster registration time greater than"
    registrationTime_gt: DateTime
    "Cluster registration time less than"
    registrationTime_lt: DateTime
    "Cluster types"
    type: [ClusterTypeEnum!]
}

input ClusterInfCidrsInput {
    clusterId: String = ""
    clusterName: String = ""
    interfaceCidr: [InterfaceCidrInput!] = []
}

"GeoLocation of the cluster"
input ClusterLocationEdit {
    address: String!
    latitude: Float!
    longitude: Float!
}

"Filter cluster data."
input CommonClusterFilterInput {
    id: [UUID!]
    type: [ClusterTypeEnum!]
}

input CommonNotificationSettingInputType {
    hostname: String = ""
    networkType: NetworkProtocolTypeEnum = UDP
    port: Int = 0
    securityType: SMTPSecurityTypeEnum = NONE
    trustedCerts: String = ""
}

input ConfigGroupByInput {
    "Aggregations for single-level groupBy. This does not affect double-level groupBys."
    aggregations: [String!]!
    "Report-level groupBy selection"
    groupById: String!
}

input ContextFilterInputField {
    field: String!
    text: String!
}

"Input to create AWS exocompute configurations."
input CreateAwsExocomputeConfigsInput {
    "Rubrik ID for cloud account."
    cloudAccountId: UUID!
    "List of exocompute configurations for the cloud account."
    configs: [AwsExocomputeConfigInput!]!
}

"CreateAzureDiskClusterInput for Azure account."
input CreateAzureDiskClusterInput {
    clusterConfig: clusterConfigInput
    servicePrincipal: servicePrincipal
    vmConfig: AzureDiskBasedVmConfig
}

"Input for CreateCloudNativeAwsStorageSetting mutation"
input CreateCloudNativeAwsStorageSettingInput {
    bucketPrefix: String!
    cloudAccountId: UUID!
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    kmsMasterKeyId: String
    name: String!
    region: AwsRegionEnum
    storageClass: AwsStorageClassTypeEnum!
}

input CreateUserWithPasswordInput {
    "Email for new user."
    email: String = ""
    "Password for new user."
    password: String = ""
    "Role IDs to add to new user."
    roleIds: [String!] = []
}

input CustomReportCreate {
    "Chart configs for the report."
    charts: [ReportChartCreate!]
    "Filters for the report data."
    filters: CustomReportFiltersConfig!
    focus: ReportFocusEnum!
    "True if report should be hidden from gallery view."
    isHidden: Boolean = false
    "True if report is auto-generated and not allowed to be edited."
    isReadOnly: Boolean = false
    "Name of the report."
    name: String!
    "Table configs for the report."
    tables: [ReportTableCreate!]
}

"Filter custom reports data."
input CustomReportFilterInput {
    creationTime_gt: DateTime
    creationTime_lt: DateTime
    focus: ReportFocusEnum
    isHidden: Boolean
    isReadOnly: Boolean
    searchTerm: String
}

input CustomReportFiltersConfig {
    activityObjectType: [ActivityObjectTypeEnum!]
    "List of cluster id to filter on."
    clusterId: [UUID!]
    clusterLocation: [String!]
    "List of cluster types to filter on."
    clusterType: [ClusterTypeEnum!]
    complianceStatus: [ComplianceStatusEnum!]
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    "Whether the snapshot is anomalous or not"
    isAnomaly: Boolean
    "List of activity types to filter on."
    lastActivityStatus: [ActivityStatusEnum!]
    "List of activity types to filter on."
    lastActivityType: [ActivityTypeEnum!]
    "List of managed ids to filter data on."
    managedId: [String!]
    "List of snappable types to filter on."
    objectType: [ObjectTypeEnum!]
    "List of policy IDs to filter on."
    policyId: [String!]
    protectionStatus: [ProtectionStatusEnum!]
    replicationSource: [String!]
    searchTerm: String
    "List of sla domain ids to filter on."
    slaDomainId: [String!]
    slaTimeRange: SLAComplianceTimeRangeEnum
    sonarObjectTypes: [HierarchyObjectTypeEnum!]
    source: [String!]
    targetSite: [String!]
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    "Start and end time range to filter data on."
    timeRange: GenericTimeRangeInput
    "List of object types to filter on for Audits."
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    "List of user audit status to filter on."
    userAuditStatus: [UserAuditStatusEnum!]
    "List of user audit types to filter on."
    userAuditType: [UserAuditTypeEnum!]
}

input DailySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
}

input DayOfWeekOptInput {
    day: DayOfWeekEnum = MONDAY
}

"Input to delete AWS exocompute configurations."
input DeleteAwsExocomputeConfigsInput {
    "IDs of exocompute configurations to be deleted."
    configIdsToBeDeleted: [UUID!]!
}

"DeleteAzureDiskClusterInput for Azure account."
input DeleteAzureDiskClusterInput {
    "Name of Azure cluster."
    clusterName: String = ""
    "Number of nodes in the existing cluster."
    numNodes: Int = 0
    "Azure resource group name."
    resourceGroupName: String = ""
    "Authorization for Azure."
    servicePrincipal: servicePrincipal
}

input DiskIdToIsExcluded {
    diskId: UUID!
    isExcluded: Boolean!
}

"Filters for cdm upgrades page for pdf generation"
input DownloadCdmUpgradesPdfFiltersInput {
    clusterLocations: [String!] = []
    clusterNames: [String!] = []
    clusterTypes: [String!] = []
    clusterUuids: [String!] = []
    downloadedVersions: [String!] = []
    installedVersions: [String!] = []
    prechecksStatus: [String!] = []
    upgradeJobStatus: [String!] = []
    versionStatus: [String!] = []
}

input DownloadObjectFilesCsvInput {
    "The day, (YYYY-MM-DD), from which to collect user activity."
    day: String!
    "The filters to apply on the list of activities."
    filters: ListObjectFilesFiltersInput!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadObjectsListCsvInput {
    "The day (YYYY-MM-DD) to get the latest snapshots of."
    day: String!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadResultsCsvFiltersInput {
    analyzerGroupIds: [String!] = []
    browseDirectorySnappablePath: SnappablePathInput
    fileType: FileCountTypeEnum!
    listFileResultsSearchText: String = ""
    listFileResultsSnappablePaths: [SnappablePathInput!] = []
    listFileResultsSnappableTypes: [String!] = []
    whitelistEnabled: Boolean = false
}

input DownloadUserActivityCsvInput {
    "The day, (YYYY-MM-DD), from which to collect user activity."
    day: String!
    "The filters to apply on the list of activities."
    filters: ListObjectFilesFiltersInput!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadUserFileActivityCsvInput {
    "The path to get all activity from."
    nativePath: String!
    "The path's corresponding snapshot."
    snapshot: ResourceInput!
    "The day (YYYY-MM-DD) from which to collect all activity after."
    startDay: String!
    "The user's IANA timezone."
    timezone: String!
    "The user to fetch activity for."
    userId: String!
}

"Struct representing the onedrive contents to be restored"
input DriveRestoreConfig {
    FilesToRestore: [FileInfo!]!
    FoldersToRestore: [FolderInfo!]!
    RestoreFolderPath: String!
}

"Filter to return objects whose effective SLA ID is one of the given SLA IDs"
input EffectiveSlaFilter {
    effectiveSlaIds: [String!]!
}

"Email address and to/from/both"
input EmailAddressFilter {
    emailAddress: String = ""
    emailAddressType: EmailAddressFilterTypeEnum = TO
}

"Event digest config to specify events criteria."
input EventDigestConfig {
    activitySeverity: [ActivitySeverityEnum!]
    activityStatus: [ActivityStatusEnum!]
    "Activity type to filter for emails. Valid types are Storage, Classification, LegalHold, HypervScvmm, Hdfs, RadarAnalysis, VolumeGroup, Instantiate, HypervServer, Configuration, Upgrade, CloudNativeVm, StorageArray, Connection, Conversion, AuthDomain, UnknownEventType, CloudNativeVirtualMachine, Discovery, Replication, Maintenance, Support, Fileset, LocalRecovery, System, Failover, StormResource, Diagnostic, Vcd, Anomaly, Archive, CloudNativeSource, HostEvent, AwsEvent, ResourceOperations, Backup, Sync, Hardware, TestFailover, Recovery, Download, EmbeddedEvent, NutanixCluster, VCenter, Index, and OTHER_FILTER_ITEM"
    activityType: [String!]
    clusters: [String!]
    objectType: [ActivityObjectTypeEnum!]
}

"Input to mark volumes to be excluded for EC2 snapshot."
input ExcludeAwsNativeEbsVolumeFromSnapshotInput {
    "Rubrik ID of EC2 instance."
    awsNativeEc2InstanceId: UUID!
    "List of map of Rubrik IDs to excluded status of volumes."
    volumeIdsToIsExcluded: [VolumeIdToIsExcluded!]!
}

"existing compute config"
input ExistingComputeConfig {
    subnetId: String = ""
    vnetId: String = ""
}

"existing storage account config"
input ExistingStorageAccountConfig {
    id: String = ""
}

"Config for O365 mailbox export"
input ExportO365MailboxInput {
    exportConfigs: [RestoreObjectConfig!]!
    fromMailboxUUID: UUID!
    snapshotUUID: UUID
    toMailboxUUID: UUID!
}

"""

Supported in v5.0+
"""
input ExportPathPairInput {
    """

    Supported in v5.0+
    Destination path of export files.
    """
    dstPath: String = ""
    """

    Supported in v5.0+
    Original file path.
    """
    srcPath: String = ""
}

"""

Supported in v5.1+
"""
input ExportSnapshotJobConfigV2Input {
    """

    Supported in v5.2+
    ID of the cluster to export the new virtual machine to. virtual machine.
    """
    clusterId: String
    """

    Supported in v5.1+
    ID of the datastore to assign to the exported virtual machine.
    """
    datastoreId: String = ""
    """

    Supported in v5.1+
    ID of the ESXi host to export the new virtual machine to.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v5.2+
    ID of the resource pool to export the new virtual machine to.
    """
    resourcePoolId: String
    """

    Supported in v5.1+
    The job recovers any tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. When this value is 'true', the registration is removed from the vCenter Server. When this value is 'false', the registration is kept on the vCenter Server. The default is 'false'.
    """
    unregisterVm: Boolean
    "The network binding for vNIC of the virtual machine."
    vNicBindings: [VmwareVNicBindingInfoV2Input!] = []
}

"""

Supported in v5.2+
"""
input FailoverClusterAppConfigInput {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
    """
    failoverClusterAppSource: FailoverClusterAppSourceInput
    """

    Supported in v5.2+
    Cluster ID of the failover cluster app.
    """
    failoverClusterId: String = ""
    failoverClusterType: FailoverClusterTypeEnum
    """

    Required. Supported in v5.2+
    Name of the failover cluster app.
    """
    name: String = ""
}

"""

Supported in v5.2+
"""
input FailoverClusterAppSourceInput {
    """

    Supported in v5.2+
    Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
    """
    nodeOrders: [FailoverClusterNodeOrderInput!] = []
    "Virtual IP addresses of the failover cluster."
    vips: [String!] = []
    """

    Supported in v5.3+
    Virtual IP addresses of the failover cluster.
    """
    virtualIps: [String!] = []
}

"""

Supported in v5.2+
"""
input FailoverClusterConfigInput {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    Managed ID's of Hosts of the failover cluster.
    """
    hostIds: [String!] = []
    """

    Required. Supported in v5.2+
    Name of the failover cluster.
    """
    name: String = ""
}

"""

Supported in v5.2+
"""
input FailoverClusterNodeOrderInput {
    """

    Supported in v5.2+
    ID of the failover cluster node.
    """
    nodeId: String = ""
    """

    Supported in v5.3+
    The name of the failover cluster node.
    """
    nodeName: String
    """

    Required. Supported in v5.2+
    An integer that specifies the place occupied by this node in the failover cluster app backup order.
    """
    order: Int = 0
}

"Filter appflows failover jobs"
input FailoverFilterInput {
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    source: [String!]
    targetSite: [String!]
    time_gt: DateTime
    time_lt: DateTime
}

"A contextual value affecting the evaluation of a feature flag"
input FeatureFlagContextField {
    "Key corresponding to this field"
    key: String!
    "The value of this field. Can be any GraphQL scalar."
    value: AnyScalar!
}

input FederatedLoginStatusInput {
    "Enable or Disable federated login."
    enabled: Boolean!
    "Enable or Disable federated login inventory card."
    inventoryCardEnabled: Boolean!
}

"Sorts to apply when listing a file's user activities."
input FileActivitiesSort {
    "The field to sort on."
    sortBy: FileActivitiesSortBy = USER_NAME
    "The direction to sort on."
    sortOrder: DataGovSortOrderEnum = ASC
}

"Struct representing the Onedrive file to be restored"
input FileInfo {
    ChannelInfo: TeamsChannelInfo
    FileID: String!
    FileName: String!
    FileSnapshotsToRestore: [FileSnapshotInfo!]!
}

input FileResultSortInput {
    analyzerGroupId: String = ""
    sortBy: FileResultSortByEnum = HITS
    sortOrder: DataGovSortOrderEnum = ASC
}

"Struct representing the Onedrive file snapshot to be restored"
input FileSnapshotInfo {
    FileSize: Long!
    SnapshotID: UUID!
    SnapshotNum: Int!
}

"""

Supported in v5.0+
"""
input FilesetArraySpecInput {
    """

    Supported in v5.0+
    ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
    """
    proxyHostId: String
}

"""

Supported in v5.0+
"""
input FilesetCreateInput {
    """

    Supported in v5.0+
    """
    arraySpec: FilesetArraySpecInput
    """

    Supported in v5.1+
    A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
    """
    enableHardlinkSupport: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
    """
    enableSymlinkResolution: Boolean
    """

    Supported in v5.2+
    ID of the failover cluster app.
    """
    failoverClusterAppId: String
    """

    Supported in v5.0+
    """
    hostId: String
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
    v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
    """
    isPassthrough: Boolean
    """

    Supported in v5.0+
    """
    shareId: String
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
    """

    Supported in v5.0+
    """
    templateId: String = ""
}

"""

Supported in v5.0+
"""
input FilesetDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Supported in v5.0+
    An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
    """
    sourceDirs: [String!] = []
}

"""

Supported in v5.0+
"""
input FilesetExportFilesJobConfigInput {
    """

    Supported in v5.0+
    Pairs of source path and destination path.
    """
    exportPathPairs: [FilesetExportPathPairInput!] = []
    """

    Supported in v5.0+
    Host ID.
    """
    hostId: String = ""
    """

    Supported in v5.0+
    Optional Boolean value that determines whether or not to ignore errors during an export. By default, this value is set to False. Set this value to True to ignore errors.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    Network share ID.
    """
    shareId: String
}

"""

Supported in v5.0+
"""
input FilesetExportPathPairInput {
    exportPathPair: ExportPathPairInput
}

"""

Supported in v5.0+
"""
input FilesetOptionsInput {
    """

    Supported in v5.0+
    Include or exclude hidden folders inside locally-mounted remote file systems from backups.
    """
    allowBackupHiddenFoldersInNetworkMounts: Boolean
    """

    Supported in v5.0+
    Include or exclude locally-mounted remote file systems from backups.
    """
    allowBackupNetworkMounts: Boolean
    """

    Supported in v5.0+
    Use VSS during Windows backups.
    """
    useWindowsVss: Boolean
}

"""

Supported in v5.0+
"""
input FilesetRestoreFilesJobConfigInput {
    """

    Supported in v5.0+
    Optional field to determine if we should ignore single error during restore. Default value is false.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    v5.0-v5.3: Absolute file path and restore path if not restored back to itself
    v6.0: Absolute file path.. and restore path if not restored back to itself.
    """
    restoreConfig: [FilesetRestorePathPairInput!] = []
}

"""

Supported in v5.0+
"""
input FilesetRestorePathPairInput {
    restorePathPair: RestorePathPairInput
}

"""

Supported in v5.0+
"""
input FilesetTemplateCreateInput {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.0+
    """
    exceptions: [String!] = []
    """

    Supported in v5.0+
    """
    excludes: [String!] = []
    filesetOptions: FilesetOptionsInput
    """

    Required. Supported in v5.0+
    """
    includes: [String!] = []
    """

    Supported in v5.0+
    Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
    """
    isArrayEnabled: Boolean
    """

    Required. Supported in v5.0+
    """
    name: String = ""
    operatingSystemType: FilesetTemplateCreateOperatingSystemTypeEnum
    """

    Supported in v5.0+
    Script to run after backup of this fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplateCreateShareTypeEnum
}

"""

Supported in v5.0+
"""
input FilesetTemplatePatchInput {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.0+
    """
    exceptions: [String!] = []
    """

    Supported in v5.0+
    """
    excludes: [String!] = []
    filesetOptions: FilesetOptionsInput
    """

    Required. Supported in v5.0+
    """
    id: String = ""
    """

    Supported in v5.0+
    """
    includes: [String!] = []
    """

    Supported in v5.0+
    """
    name: String
    operatingSystemType: FilesetTemplatePatchOperatingSystemTypeEnum
    """

    Supported in v5.0+
    Script to run after backup of this Fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this Fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplatePatchShareTypeEnum
}

"Filter"
input Filter {
    awsNativeProtectionFeatureNames: [AwsNativeProtectionFeatureEnum!] = []
    field: HierarchyFilterField = IS_ARCHIVED
    isNegative: Boolean = false
    isSlowSearchEnabled: Boolean = false
    objectTypeFilterParams: [ManagedObjectType!] = []
    tagFilterParams: [TagFilterParams!] = []
    texts: [String!] = []
}

"Input to process and finalize deletion of AWS cloud account."
input FinalizeAwsCloudAccountDeletionInput {
    "Rubrik ID of account to be deleted."
    cloudAccountId: UUID!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeatureEnum!
}

input FinalizeAwsCloudAccountProtectionInput {
    "Action to be performed with cloud account."
    action: CloudAccountActionEnum!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    "List of AWS accounts."
    awsChildAccounts: [AwsCloudAccountInput!]!
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegionEnum!]
    "External ID of the IAM role trust policy for the cloud account."
    externalId: String!
    "List of feature types to be protected for the cloud account."
    featureVersion: [AwsCloudAccountFeatureVersionInput!]!
    "List of features for native protection of cloud account."
    features: [CloudAccountFeatureEnum!]!
    "Name of the CloudFormation stack to be created."
    stackName: String
    "Stackset name of the CloudFormation stack to be created."
    stackSetName: String
}

"Struct representing the Onedrive folder to be restored"
input FolderInfo {
    ChannelInfo: TeamsChannelInfo
    FolderID: String!
    FolderName: String!
    FolderSize: Long!
    SnapshotID: UUID!
    SnapshotNum: Int!
}

"Filters for list of GCP disks."
input GcpNativeDiskFilters {
    diskTypeFilter: GcpNativeDiskTypeFilter
    effectiveSlaFilter: EffectiveSlaFilter
    labelFilter: GcpNativeLabelFilter
    locationFilter: GcpNativeDiskLocationFilter
    nameOrIDSubstringFilter: GcpNativeDiskNameOrIDSubstringFilter
    projectFilter: GcpNativeDiskProjectFilter
    relicFilter: RelicFilter
}

"Filter to return GCP disks which have location in the given list of locations. Location can be a zone or a region."
input GcpNativeDiskLocationFilter {
    locations: [String!]!
}

"Filter to return GCP disks with a given substring in their name or ID."
input GcpNativeDiskNameOrIDSubstringFilter {
    nameOrIDSubstring: String!
}

"Filter to return GCP disks which have project rubrik ID in the given list of project rubrik IDs."
input GcpNativeDiskProjectFilter {
    projectIds: [String!]!
}

"Filter to return GCP disks which have disk type in the given list of disk types."
input GcpNativeDiskTypeFilter {
    diskTypes: [String!]!
}

"Filters for list of GCP GCE instances."
input GcpNativeGceInstanceFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    labelFilter: GcpNativeLabelFilter
    machineTypeFilter: GcpNativeMachineTypeFilter
    nameOrIDSubstringFilter: GcpNativeInstanceNameOrIDSubstringFilter
    networkFilter: GcpNativeNetworkFilter
    projectFilter: GcpNativeProjectFilter
    regionFilter: GcpNativeRegionFilter
    relicFilter: RelicFilter
}

"Filter to return GCP GCE instances with a given substring in their name or ID."
input GcpNativeInstanceNameOrIDSubstringFilter {
    nameOrIDSubstring: String!
}

"Filter to return GCP objects which have at least one label in the given list of labels."
input GcpNativeLabelFilter {
    labelFilterParams: [LabelFilterParams!]!
}

"Filter to return GCP GCE instances which have instance type in the given list of machine types."
input GcpNativeMachineTypeFilter {
    machineTypes: [String!]!
}

"Filter to return GCP GCE instances which have network name in the given list of network names."
input GcpNativeNetworkFilter {
    networkNames: [String!]!
}

"Filter to return GCP objects which have project rubrik ID in the given list of project rubrik IDs."
input GcpNativeProjectFilter {
    projectIds: [String!]!
}

"Filters for list of GCP projects."
input GcpNativeProjectFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    idSubstringFilter: GcpNativeProjectIdSubstringFilter
    nameOrNumberSubstringFilter: GcpNativeProjectNameOrNumberSubstringFilter
}

"Filter to return GCP projects with the given string in their project ID."
input GcpNativeProjectIdSubstringFilter {
    idSubstring: String!
}

"Filter to return GCP projects with a given substring in their name or number."
input GcpNativeProjectNameOrNumberSubstringFilter {
    nameOrNumberSubstring: String!
}

"Filter to return GCP objects which have region in the given list of regions."
input GcpNativeRegionFilter {
    regions: [String!]!
}

input GenericTimeRangeInput {
    absoluteTimeRange: TimeRangeInput
    relativeTimeRange: RelativeTimeRangeInput
}

input GlobalSlaCreateRequest {
    archivalSpecInput: ArchivalSpecInput
    archivalSpecInputs: [ArchivalSpecInput!] = []
    backupWindows: [BackupWindowInput!] = []
    description: String = ""
    firstFullBackupWindows: [BackupWindowInput!] = []
    localRetentionLimit: SlaDurationInput
    logConfig: LogConfig
    name: String = ""
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    objectTypeList: [SLAObjectTypeEnum!] = []
    replicationSpecInput: ReplicationSpecInput
    replicationSpecV2List: [ReplicationSpecV2Input!] = []
    snapshotSchedule: GlobalSnapshotScheduleInput
}

input GlobalSlaEditRequest {
    archivalSpecInput: ArchivalSpecInput
    archivalSpecInputs: [ArchivalSpecInput!] = []
    backupWindows: [BackupWindowInput!] = []
    description: String = ""
    firstFullBackupWindows: [BackupWindowInput!] = []
    id: String = ""
    localRetentionLimit: SlaDurationInput
    logConfig: LogConfig
    name: String = ""
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    objectTypeList: [SLAObjectTypeEnum!] = []
    replicationSpecInput: ReplicationSpecInput
    replicationSpecV2List: [ReplicationSpecV2Input!] = []
    snapshotSchedule: GlobalSnapshotScheduleInput
    stateVersion: Long = 0
}

input GlobalSlaFilterInput {
    field: GlobalSlaQueryFilterInputField = NAME
    objectTypeList: [SLAObjectTypeEnum!] = []
    text: String = ""
}

input GlobalSnapshotScheduleInput {
    daily: DailySnapshotScheduleInput
    hourly: HourlySnapshotScheduleInput
    minute: MinuteSnapshotScheduleInput
    monthly: MonthlySnapshotScheduleInput
    quarterly: QuarterlySnapshotScheduleInput
    weekly: WeeklySnapshotScheduleInput
    yearly: YearlySnapshotScheduleInput
}

"group config"
input GroupConfig {
    name: String = ""
}

input GrowthRequest {
    archivalThreshold: Int = 0
    archiveRetention: Int = 0
    cloudRegion: String = ""
    daysBetweenFullSnapshots: Int = 0
    growthRate: Float = 0.0
    growthRateFrequencyType: FrequencyUnitEnum = DAILY
    initialBackupSize: Float = 0.0
    instantArchive: Boolean = false
    maxDaysToEvaluate: Int = 0
    maxRetention: Int = 0
    snapshotFrequency: Int = 0
    snapshotFrequencyType: FrequencyUnitEnum = DAILY
}

"""

Supported in v5.2+
"""
input HdfsBaseConfigInput {
    """

    Supported in v5.2+
    API token to access Hdfs.
    """
    apiToken: String
    """

    Required. Supported in v5.2+
    List of Hdfs Namenode Hosts.
    """
    hosts: [HdfsHostInput!] = []
    """

    Supported in v5.2+
    Ticket Cache Path of Kerberos Ticket.
    """
    kerberosTicket: String
    """

    Supported in v5.2+
    Logical name for nameservice for Hdfs HA.
    """
    nameservices: String
    """

    Supported in v5.2+
    Username to access Hdfs API.
    """
    username: String
}

"""

Supported in v5.2+
"""
input HdfsConfigInput {
    hdfsBaseConfig: HdfsBaseConfigInput
}

"""

Supported in v5.2+
"""
input HdfsHostInput {
    """

    Required. Supported in v5.2+
    Hostname or Ip of Namenode.
    """
    hostname: String = ""
    """

    Required. Supported in v5.2+
    Port number of Namenode.
    """
    port: Int = 0
}

"""

Supported in v5.0+
"""
input HostRegisterInput {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    """

    Supported in v5.0+
    """
    hasAgent: Boolean
    """

    Supported in v5.2+
    """
    hdfsConfig: HdfsConfigInput
    """

    Required. Supported in v5.0+
    """
    hostname: String = ""
    """

    Supported in v5.2+
    A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration.
    """
    isOracleHost: Boolean
    """

    Supported in v5.0+
    """
    nasConfig: NasConfigInput
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v5.1+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    """
    oracleSysDbaUser: String
    """

    Supported in v5.0+
    The ID of the organization to which the host is assigned.
    """
    organizationId: String
}

"""

Supported in v5.0+
"""
input HostUpdateIdInput {
    """

    Supported in v5.0+
    ID of the host.
    """
    hostId: String = ""
    """

    Supported in v5.0+
    """
    updateProperties: HostUpdateInput
}

"""

Supported in v5.0+
"""
input HostUpdateInput {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    """

    Supported in v5.0+
    """
    compressionEnabled: Boolean
    """

    Supported in v5.2+
    """
    hdfsConfig: HdfsConfigInput
    """

    Supported in v5.0+
    When VFD is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to Disabled.
    """
    hostVfdDriverInstalled: Boolean
    hostVfdEnabled: HostVfdInstallConfigEnum
    """

    Supported in v5.0+
    """
    hostname: String
    """

    Supported in v5.2+
    A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
    """
    isOracleHost: Boolean
    """

    Supported in v5.0+
    When CBT is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to Disabled.
    """
    mssqlCbtDriverInstalled: Boolean
    mssqlCbtEnabled: MssqlCbtStatusTypeEnum
    """

    Supported in v5.0+
    """
    nasConfig: NasConfigInput
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v5.1-v5.3: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v6.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    """
    oracleSysDbaUser: String
}

input HourlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
}

"Input to initiate feature update for AWS cloud account."
input InitiateFeatureUpdateForAwsCloudAccountInput {
    cloudAccountId: UUID!
    features: [CloudAccountFeatureEnum!]!
}

input InstantRecoveryJobConfig {
    baseConfig: AppBlueprintRestoreSnapshotJobConfigBase
    childrenToRestore: [AppBlueprintChildSnappableInstantRecoverySpec!] = []
    shouldRemoveChildrenFromAppBlueprint: Boolean = false
    shouldRemoveChildrenFromOtherAppBlueprints: Boolean = false
}

"""

Supported in v5.1+
"""
input InstantRecoveryJobConfigV2Input {
    "ID of the compute cluster where the new virtual machine will be mounted."
    clusterId: String
    """

    Supported in v5.1+
    ID of the ESXi host to use for Instant Recovery.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    """

    Supported in v5.1+
    A Boolean value that determines whether the MOID of the source virtual machine is preserved in a restore operation. When this value is 'true', the MOID of the source is preserved. When this value is 'false', the restored virtual machine is assigned a new MOID.
    """
    preserveMoid: Boolean
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    "ID of the resource pool where the new virtual machine will be mounted."
    resourcePoolId: String
    """

    Supported in v5.1+
    A Boolean value that determines whether the job recovers the tags assigned to the virtual machine. When this value is 'true', the job recovers the tags. When this value is 'false', the job does not recover the tags.
    """
    shouldRecoverTags: Boolean
    "The network binding for vNIC of the virtual machine."
    vNicBindings: [VmwareVNicBindingInfoV2Input!] = []
    """

    Supported in v5.1+
    The preferred VLAN ID used by the VLAN ESXi host to mount the datastore.
    """
    vlan: Int
}

input InterfaceCidrInput {
    cidr: String = ""
    interfaceType: InterfaceTypeEnum = UNKNOWN_TYPE
    selected: Boolean = false
}

"Config of the k8s cluster to onboard."
input K8sClusterCreateInput {
    "The ID of the CDM cluster for ON_PREM k8s clusters."
    cdmClusterId: UUID
    "List of host IPs/hostnames of the k8s nodes."
    hostList: [String!]!
    "Name of the k8s cluster."
    name: String!
    "Port on the k8s node for the kupr Ingress Controller."
    port: Int!
    "Ports in the range of node port service range of the Kubernetes cluster."
    rbsPortRanges: [PortRange!]!
    "KuprClusterType of the k8s cluster."
    type: K8sClusterProtoType!
}

"Config of the kupr cluster to refresh."
input K8sClusterRefreshInput {
    "The ID of the kupr cluster to be refreshed."
    kuprClusterID: UUID!
}

"Config of the Kupr namespace snapshot to be restored and the target details."
input K8sNamespaceRestore {
    "The UUID of the kupr namepspace snapshot to be restored."
    snapshotUUID: UUID!
    "The UUID of the target cluster to restore the namespace snapshot to."
    targetClusterUUID: UUID!
    "The name of the target namespace to restore the namespace snapshot to."
    targetNamespaceName: String!
}

"Config of the Kupr namespace to snapshot."
input K8sNamespaceSnapshot {
    "The ID of the kupr namespace managed object to snapshot."
    namespaceId: UUID!
    "The SLA ID of the on demand snapshot request."
    onDemandSnapshotSlaId: String!
}

"Label filter parameters for GCP objects."
input LabelFilterParams {
    filterType: GcpNativeLabelFilterTypeEnum!
    labelKey: String!
    labelValue: String!
}

"DataType representing label key-value pair"
input LabelType {
    labelKey: String!
    labelValue: String!
    matchAllValues: Boolean!
}

"LDAP Server"
input LdapServerInput {
    hostname: String = ""
    port: Int = 0
    useTls: Boolean = false
}

"""

Supported in v5.2+
"""
input LegalHoldDownloadConfigInput {
    """

    Supported in v5.2+
    v5.2: Specifies whether the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that is used for integrity verification by external bodies.
    v5.3+: Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.
    """
    isLegalHoldDownload: Boolean = false
}

input ListAccessGroupsFilterInput {
    groupName: String = ""
    userId: String = ""
}

input ListAccessUsersFilterInput {
    groupsIds: [String!] = []
    search: String = ""
    timeRange: UserTimeRangeInput!
}

input ListAccessUsersSortInput {
    sortBy: ListAccessUsersSortEnum = USERNAME
    sortOrder: DataGovSortOrderEnum = ASC
}

input ListFileActivitiesInput {
    "The corresponding snappable's FID."
    snappableFid: String!
    "The datetime to collect user activity from."
    startDateTime: String!
    "The standardized path to fetch user activities for."
    stdPath: String!
    "The user's IANA timezone."
    timezone: String!
}

input ListFileResultFiltersInput {
    analyzerGroupIds: [String!] = []
    fileType: FileCountTypeEnum!
    searchText: String = ""
    snappablePaths: [SnappablePathInput!] = []
    snappableTypes: [String!] = []
    whitelistEnabled: Boolean = false
}

input ListObjectFilesFiltersInput {
    accessTypes: [AccessTypeEnum!] = []
    activityTypes: [ActivityAccessTypeEnum!] = []
    analyzerGroupIds: [String!] = []
    clusterIds: [String!] = []
    fileCountTypes: [FileCountTypeEnum!] = []
    inodeTypes: [InodeTypeEnum!] = []
    objectIds: [String!] = []
    objectTypes: [HierarchyObjectTypeEnum!]!
    openAccessTypes: [OpenAccessTypeEnum!] = []
    pathPrefix: String = ""
    searchText: String = ""
    snappableTypes: [String!] = []
    stalenessTypes: [StalenessTypeEnum!] = []
    whitelistEnabled: Boolean = false
}

"Location information."
input LocationInfo {
    "Id of the location."
    locationId: String = ""
    "Location type: CDM, AZURE, AWS, GCP."
    locationType: LocationType = UNKNOWN_TYPE
}

input LogConfig {
    slaLogFrequencyConfig: SlaLogFrequencyConfig
}

input ManualTargetMappingCreateRequest {
    archivalLocationClusterMappings: [TargetToClusterMapping!] = []
    name: String = ""
    type: TargetTypeEnum = AWS
}

input ManualTargetMappingEditRequest {
    archivalLocationClusterMappings: [TargetToClusterMapping!] = []
    id: String = ""
    name: String = ""
}

input MinuteSnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
}

input MissedSnapshotFilterInput {
    timeRange: TimeRangeInput
}

input MonthlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfMonth: DayOfMonthEnum = FIRST_DAY
}

"""

Supported in v5.0+
"""
input MountExportSnapshotJobCommonOptionsInput {
    """

    Supported in v5.0+
    Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.0+
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v5.0+
    Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
    """
    powerOn: Boolean
    """

    Supported in v5.0+
    Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    """

    Supported in v5.0+
    Name of the new VM created by mount or export.
    """
    vmName: String
}

"""

Supported in v5.1+
"""
input MountExportSnapshotJobCommonOptionsV2Input {
    """

    Supported in v5.1+
    Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.1+
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v5.1+
    Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
    """
    powerOn: Boolean
    """

    Supported in v5.1+
    Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    """

    Supported in v5.1+
    Name of the new VM created by mount or export.
    """
    vmName: String
}

"""

Supported in v5.0+
"""
input MountSnapshotJobConfigForBatchV1Input {
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Snapshot mount config
    v6.0: Configuration for Snapshot mount.
    """
    config: MountSnapshotJobConfigV1Input
    """

    Supported in v5.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v5.0+
    v5.0-v5.3: Mounts the most recent snapshot prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    v6.0: Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v5.0+
    v5.0-v5.3: ID of snapshot to mount. Optional. The snapshot to mount is determined from the other parameters in this call when the ID is not provided.
    v6.0: The ID of the snapshot to export. This parameter is optional if either of the `snapshotBeforeDate` or `snapshotAfterDate` parameters is configured.
    """
    snapshotId: String
    """

    Supported in v5.0+
    v5.0: Mount a snapshot from this virtual machine.
    v5.1-v5.3: Mount a snapshot from this virtual machine
    v6.0: ID of the virtual machine whose snapshot needs to be mounted.
    """
    vmId: String = ""
}

"""

Supported in v5.0+
"""
input MountSnapshotJobConfigV1Input {
    """

    Supported in v5.0+
    The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
    """
    createDatastoreOnly: Boolean
    """

    Supported in v5.0+
    v5.0: Name of the host NAS datastore to use with the new virtual machine. The Rubrik cluster creates a new datastore on the host using the provided name.
    v5.1+: Obsolete parameter.
    """
    dataStoreName: String
    """

    Supported in v5.0+
    ID of the ESXi host to mount the new virtual machine on.
    """
    hostId: String
    mountExportSnapshotJobCommonOptions: MountExportSnapshotJobCommonOptionsInput
    """

    Supported in v5.0+
    The job recovers the tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v5.0+
    VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
    """
    vlan: Int
}

"""

Supported in v5.1+
"""
input MountSnapshotJobConfigV2Input {
    "ID of the compute cluster where the new virtual machine will be mounted."
    clusterId: String
    """

    Supported in v5.1+
    The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
    """
    createDatastoreOnly: Boolean
    """

    Supported in v5.1+
    Obsolete parameter.
    """
    dataStoreName: String
    """

    Supported in v5.1+
    ID of the ESXi host to mount the new virtual machine on.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    "ID of the resource pool where the new virtual machine will be mounted."
    resourcePoolId: String
    """

    Supported in v5.1+
    The job recovers the tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    "The network binding for vNIC of the virtual machine."
    vNicBindings: [VmwareVNicBindingInfoV2Input!] = []
    """

    Supported in v5.1+
    VLAN ID for the VLAN ESXi host preferred to use for mounting the datastore.
    """
    vlan: Int
}

"Filter to return objects with a given substring in their name."
input NameSubstringFilter {
    nameSubstring: String!
}

"""

Supported in v5.0+
"""
input NasConfigInput {
    """

    Supported in v5.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v5.0+
    API endpoint to access NAS API 'FLASHBLADE'.
    """
    apiEndpoint: String
    """

    Supported in v5.0+
    Hostname or IP used in the NAS API calls.
    """
    apiHostname: String
    """

    Supported in v5.0+
    Password to access NAS API 'ISILON/NETAPP'.
    """
    apiPassword: String
    """

    Supported in v5.0+
    API token to access NAS API 'FLASHBLADE'.
    """
    apiToken: String
    """

    Supported in v5.0+
    Username to access NAS API 'ISILON/NETAPP'.
    """
    apiUsername: String
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isIsilonChangelistEnabled: Boolean
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isNetAppSnapDiffEnabled: Boolean
    """

    Supported in v5.3+
    Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
    """
    isShareAutoDiscoveryEnabled: Boolean
    """

    Supported in v5.1
    Control if snapdiff is enabled on Netapp NAS
    """
    isSnapdiffEnabled: Boolean
    """

    Supported in v5.0+
    Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'.
    """
    vendorType: String = ""
    """

    Supported in v5.0+
    Name of the Isilon zone that data IP belongs to.
    """
    zoneName: String
}

"new compute config"
input NewComputeConfig {
    securityGroupName: String = ""
    subnetName: String = ""
    vnetName: String = ""
}

"new storage account config"
input NewStorageAccountConfig {
    name: String = ""
    sku: SkuEnum = STANDARD_LRS
    tier: TierEnum = COOL
}

input NfsTargetCreateRequest {
    clusterUuid: UUID!
    destinationFolder: String!
    encryptionPassword: String!
    exportDir: String!
    fileLockPeriodInSeconds: Int!
    host: String!
    isConsolidationEnabled: Boolean!
    name: String!
    nfsAuthType: AuthTypeEnum!
    nfsVersion: Int
    otherNfsOptions: String
}

input NfsTargetEditRequest {
    exportDir: String
    fileLockPeriodInSeconds: Int
    host: String
    id: UUID!
    isConsolidationEnabled: Boolean
    name: String
    nfsAuthType: AuthTypeEnum
}

input ObjectIdsForHierarchyTypeInput {
    objectIds: [String!]!
    snappableType: SnappableLevelHierarchyTypeEnum!
}

input ObjectSpecificConfigsInput {
    awsRdsConfigInput: AwsRdsConfigInput
    sapHanaConfigInput: SapHanaConfigInput
    vmwareVmConfigInput: VmwareVmConfigInput
}

input OldRestorePathPairInput {
    path: String = ""
    restorePath: String = ""
}

"Parameters for onedrive file or folder search"
input OnedriveSearchFilter {
    channelFolderName: String
    channelId: String
    channelNameKeyword: String
    createTime: TimeRangeFilter
    excludeItemsUnderRoot: Boolean
    modifiedTime: TimeRangeFilter
    searchKeywordFilter: OnedriveSearchKeywordFilter
    searchObjectFilter: OnedriveSearchObjectFilter
}

"Onedrive search keyword and keyword type"
input OnedriveSearchKeywordFilter {
    keywordType: OnedriveSearchKeywordTypeEnum = NAME
    searchKeyword: String = ""
}

"Onedrive search object type"
input OnedriveSearchObjectFilter {
    searchObjectType: OnedriveSearchObjectTypeEnum = O365_FOLDER
}

input PermissionInput {
    objectsForHierarchyTypes: [ObjectIdsForHierarchyTypeInput!]!
    operation: OperationEnum!
}

input PolarisSnapshotFilterInput {
    isOnDemandSnapshot: Boolean
    snappableId: [String!]
    timeRange: TimeRangeInput
}

input PolarisSnapshotFilterNewInput {
    field: FieldEnum = ALL
    texts: [String!] = []
}

"Range of ports that are allowed to be accessed."
input PortRange {
    "The maximum port in the port range."
    portMax: Int = 0
    "The minimum port in the port range."
    portMin: Int = 0
}

input PostBackupScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

input PostSnapScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

input PreBackupScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

"Input to initiate deletion of AWS cloud account."
input PrepareAwsCloudAccountDeletionInput {
    "Rubrik ID of account to be deleted."
    cloudAccountId: UUID!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeatureEnum!
}

input PreviewerClusterConfigInput {
    clusterId: String = ""
    enabled: Boolean = false
}

input ProxySettingsInput {
    password: String = ""
    portNumber: Int = 0
    protocol: String = ""
    proxyServer: String = ""
    username: String = ""
}

input QuarterlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfQuarter: DayOfQuarterEnum = FIRST_DAY
    quarterStartMonth: MonthEnum = JANUARY
}

"Filter ransomware result data."
input RansomwareResultFilterInput {
    clusterUuid: [UUID!]
    endTime: DateTime
    isEncrypted: Boolean
    managedId: [String!]
    startTime: DateTime
}

input RelativeTimeRangeInput {
    magnitude: Int!
    unit: TimeUnitEnum!
}

"Filter to return objects which are relic or not."
input RelicFilter {
    relic: Boolean!
}

input ReplicationSpecInput {
    replicationType: ReplicationTypeEnum = UNKNOWN_REPLICATION_TYPE
    specificReplicationSpecInput: SpecificReplicationSpecInput
}

input ReplicationSpecV2Input {
    awsAccount: String = ""
    awsRegion: AwsNativeRegionForReplicationEnum
    azureRegion: AzureNativeRegionForReplicationEnum
    azureSubscription: String = ""
    clusterUuid: String = ""
    retentionDuration: SlaDurationInput
    storageSettingId: String = ""
}

input ReplicationToCloudLocationSpecInput {
    cloudProvider: CloudProviderEnum = AWS
    replicationTargetId: String = ""
    retentionDuration: SlaDurationInput
}

input ReplicationToCloudRegionSpecInput {
    cloudProvider: CloudProviderEnum = AWS
    replicationTargetRegion: String = ""
    retention: Int = 0
    retentionUnit: RetentionUnitEnum = MINUTES
}

"Create configs for a snappable data chart."
input ReportChartCreate {
    "The metrics focus of the chart."
    focus: ReportFocusEnum!
    groupBy: [GroupByFieldEnum!]
    "The name of the chart."
    name: String!
}

input ReportConfigInput {
    aggregations: [String!]!
    "Chart selections for the report"
    chartConfigs: [ChartConfigInput!]!
    "Column selection for the report"
    columns: [String!]!
    "Type of report"
    dataViewType: DataViewTypeEnum!
    "Filter selection for the report"
    filters: [ReportFilterInput!]!
    "GroupBy selection for the report"
    groupBy: ConfigGroupByInput!
    "Report name"
    name: String!
    sortBy: String!
    sortOrder: SortOrderEnum
}

input ReportFilterInput {
    name: String!
    "values are JSON serialized string of the original value"
    values: [String]!
}

"Create configs for an activity data table."
input ReportTableCreate {
    focus: ReportFocusEnum!
    groupBy: [GroupByFieldEnum!]
    "The name of the table."
    name: String!
    selectedColumns: [ReportTableColumnEnum!]!
    sortBy: SortByFieldEnum
    "The data sorting order for the table, Asc or Des."
    sortOrder: SortOrderEnum
}

"""

Supported in v5.1+
"""
input RequiredRecoveryParametersInput {
    """

    Supported in v5.1+
    Point in time to recover to.
    """
    recoveryPoint: DateTime
    """

    Supported in v5.1+
    ID of the snapshot to recover.
    """
    snapshotId: String
}

input ResourceInput {
    snappableFid: String = ""
    snapshotFid: String = ""
}

input RestoreConfig {
    deltaTypeFilter: [DeltaTypeEnum!] = []
    domainName: String = ""
    nextSnapshotFid: String = ""
    password: String = ""
    restoreFilesConfig: [RestoreFileConfig!] = []
    shouldIgnoreErrors: Boolean = false
    shouldRestoreXAttrs: Boolean
    shouldSaveCredentials: Boolean = false
    shouldUseAgent: Boolean
    username: String = ""
}

input RestoreFileConfig {
    path: String = ""
    restorePath: String = ""
}

"""

Supported in v5.0+
"""
input RestoreFilesJobConfigInput {
    """

    Supported in v5.1+
    Managed ID of the destination object that the files should be recovered to.
    """
    destObjectId: String
    """

    Supported in v5.0+
    Domain name (Use . for local admin).
    """
    domainName: String
    """

    Supported in v5.0+
    v5.0: Optional field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. Default value is false, errors are not ignored.
    v5.1+: Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    Password.
    """
    password: String
    """

    Supported in v5.0+
    Absolute file path and restore path if not restored back to itself.
    """
    restoreConfig: [VmRestorePathPairInput!] = []
    """

    Supported in v5.1+
    Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Windows, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.
    """
    shouldRestoreXAttrs: Boolean
    """

    Supported in v5.0+
    v5.0: Whether we should save the user-entered credentials
    v5.1+: A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
    """
    shouldSaveCredentials: Boolean
    """

    Supported in v5.1+
    A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore files. When 'true', the RBS restores files. When 'false',the VMware tools restores files.
    """
    shouldUseAgent: Boolean
    """

    Supported in v5.0+
    Username.
    """
    username: String
}

"Config for O365 mailbox restore"
input RestoreO365MailboxInput {
    mailboxUUID: UUID!
    restoreConfigs: [RestoreObjectConfig!]!
    snapshotUUID: UUID
}

"Config for the mailbox object (email/folder) to be restored"
input RestoreObjectConfig {
    EmailUUID: UUID
    FolderUUID: UUID
    SnapshotUUID: UUID!
}

"""

Supported in v5.0+
"""
input RestorePathPairInput {
    """

    Required. Supported in v5.0+
    Original file path to be restored.
    """
    path: String = ""
    """

    Supported in v5.0+
    Directory of the folder to copy files into. If this is empty, file will be restored back into original directory.
    """
    restorePath: String
}

input RunCustomAnalyzerInput {
    content: String = ""
    dictionaryCsv: String = ""
    regex: String = ""
}

input SLAAuditDetailFilterInput {
    field: SLAAuditDetailFilterFieldEnum = USER_NAME
    text: String = ""
}

input SapHanaConfigInput {
    differentialFrequency: SlaDurationInput
    incrementalFrequency: SlaDurationInput
    logRetention: SlaDurationInput
}

"Filter Sap Hana log snapshots."
input SapHanaLogSnapshotFilterInput {
    clusterUuid: [UUID!]
    fromTime: DateTime
    isArchived: Boolean
    snappableId: [String!]
    toTime: DateTime
}

"Filter Sap Hana recoverable ranges."
input SapHanaRecoverableRangeFilterInput {
    clusterUuid: [UUID!]
    databaseId: [String!]
    fromTime: DateTime
    isArchived: Boolean
    toTime: DateTime
}

"""

Supported in v5.3+
"""
input SapHanaSystemConfigInput {
    "Data path details of the SAP HANA system."
    dataPathSpec: SapHanaSystemDataPathSpecInput
    """

    Supported in v5.3+
    The SAP HANA system hosts.
    """
    hostIds: [String!] = []
    """

    Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String = ""
    """

    Required. Supported in v5.3+
    The password of the SAP HANA system.
    """
    password: String = ""
    """

    Required. Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String = ""
    """

    Required. Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String = ""
}

input SapHanaSystemDataPathSpecInput {
    dataPathType: SapHanaDataPathTypeEnum
}

"""

Supported in v5.3+
"""
input SapHanaSystemPatchInput {
    """

    Supported in v5.3+
    The ID of the SLA Domain that is configured for the SAP HANA system.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.3+
    The SAP HANA system hosts.
    """
    hostIds: [String!] = []
    """

    Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String
    """

    Supported in v5.3+
    The password of the SAP HANA system.
    """
    password: String
    """

    Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String
    """

    Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String
}

input ScheduledReportCreate {
    creatorId: String
    dailyTime: LocalTime
    hasCSVAttachment: Boolean!
    hasPDFAttachment: Boolean!
    monthlyDate: Int
    monthlyTime: LocalTime
    recipients: [String!]!
    "Chart configs for the report."
    reportId: Int!
    title: String!
    weeklyDays: [WeekDayEnum!]
    weeklyTime: LocalTime
}

"Filters for the scheduled report list"
input ScheduledReportFilterInput {
    reportId: Int
}

"Parameters for mail or folder search"
input SearchFilter {
    emailAddresses: [EmailAddressFilter!] = []
    fromTime: DateTime
    searchKeywordFilter: SearchKeywordFilter
    searchObjectFilter: SearchObjectFilter
    untilTime: DateTime
}

"Search keyword and keyword type"
input SearchKeywordFilter {
    keywordType: SearchKeywordTypeEnum = SUBJECT
    searchKeyword: String = ""
}

"Search object type"
input SearchObjectFilter {
    searchObjectType: SearchObjectTypeEnum = FOLDER
}

"Struct representing the sharepoint doc lib contents to be restored"
input SharePointDriveRestoreConfig {
    DocLibName: String
    DriveRestoreConfig: DriveRestoreConfig!
    ParentSiteUUID: UUID
}

input SlaDurationInput {
    duration: Int = 0
    unit: RetentionUnitEnum = MINUTES
}

input SlaLogFrequencyConfig {
    retention: SlaDurationInput
}

input SnappableFailoverInfoType {
    recoveryPoint: Long!
    snappableId: String!
}

"Filter snappable data."
input SnappableFilterInput {
    cluster: CommonClusterFilterInput
    complianceStatus: [ComplianceStatusEnum!]
    objectType: [ObjectTypeEnum!]
    protectionStatus: [ProtectionStatusEnum!]
    searchTerm: String
    slaDomain: SnappableSlaDomainFilterInput
    slaTimeRange: SLAComplianceTimeRangeEnum
}

"Filter snappable data (including search capability)."
input SnappableFilterInputWithSearch {
    cluster: CommonClusterFilterInput
    complianceStatus: [ComplianceStatusEnum!]
    objectType: [ObjectTypeEnum!]
    protectionStatus: [ProtectionStatusEnum!]
    searchTerm: String
    slaDomain: SnappableSlaDomainFilterInput
    slaTimeRange: SLAComplianceTimeRangeEnum
    timeRange: TimeRangeInput
}

"Filter snappable data in group by."
input SnappableGroupByFilterInput {
    cluster: CommonClusterFilterInput
    complianceStatus: [ComplianceStatusEnum!]
    objectType: [ObjectTypeEnum!]
    protectionStatus: [ProtectionStatusEnum!]
    slaDomain: SnappableSlaDomainFilterInput
    slaTimeRange: SLAComplianceTimeRangeEnum
    timeRange: TimeRangeInput
}

input SnappableIdentifierInput {
    snappableId: UUID!
    snappableType: ObjectTypeEnum!
}

input SnappablePathInput {
    snappableFid: String = ""
    stdPath: String = ""
}

"Struct representing the snappable contents to be restored"
input SnappableRestoreConfig {
    OneDriveRestoreConfig: DriveRestoreConfig
    SharePointDriveRestoreConfig: SharePointDriveRestoreConfig
    TeamsRestoreConfig: TeamsRestoreConfig
}

"Filter snappable data based on properties of its Sla domain."
input SnappableSlaDomainFilterInput {
    id: [String!]
}

input SnapshotDeltaFilterInput {
    deltaType: [DeltaTypeEnum!]
}

input SnapshotQueryFilterInput {
    field: SnapshotQueryFilterField = SLA_ID
    text: String = ""
    typeFilters: [SnapshotTypeEnum!] = []
}

input SonarContentReportFilter {
    applyWhitelists: Boolean = false
    clusterIds: [String!] = []
    objectTypes: [HierarchyObjectTypeEnum!]!
    policyIds: [String!] = []
    search: String = ""
}

input SpecificReplicationSpecInput {
    bidirectionalSpecInput: BidirectionalReplicationSpecInput
    cloudLocationSpecInput: ReplicationToCloudLocationSpecInput
    cloudRegionSpecInput: ReplicationToCloudRegionSpecInput
    unidirectionalSpecInput: UnidirectionalReplicationSpecInput
}

"Input to trigger AWS native account disable job."
input StartAwsNativeAccountDisableJobInput {
    "Rubrik ID of AWS account."
    awsAccountRubrikId: UUID!
    "Type of native protection to be disabled."
    awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum!
    "Whether to delete snapshots in the account."
    shouldDeleteNativeSnapshots: Boolean!
}

"Input to trigger AWS native account refresh job."
input StartAwsNativeAccountsRefreshJobInput {
    "Rubrik IDs of AWS account to be refreshed."
    awsAccountRubrikIds: [UUID!]!
    "Native protection feature to be refreshed."
    awsNativeProtectionFeatures: [AwsNativeProtectionFeatureEnum!]!
}

"Input to trigger AWS native EBS volume export job."
input StartAwsNativeEbsVolumeSnapshotExportJobInput {
    "Availability Zone (AZ) of exported volume."
    availabilityZone: String!
    "Rubrik ID of AWS account where exported volume will reside."
    destinationAwsAccountRubrikId: UUID!
    "Region of exported volume."
    destinationRegionNativeId: AwsNativeRegionEnum!
    "Input/Output (IO) operation limit per second for the exported volume."
    iops: Int!
    "ID of KMS key to be used for export."
    kmsKeyId: String = ""
    "Whether to copy tags to exported volume."
    shouldCopyTags: Boolean!
    "Whether to replace volume where attached."
    shouldReplaceAttached: Boolean!
    "ID of snapshot to be exported."
    snapshotId: UUID!
    "Type of snapshot used for export."
    snapshotType: SnapshotType = SOURCE
    "Name of volume after export."
    volumeName: String!
    "Size in GBs of exported volume."
    volumeSize: Int!
    "AWS Native EBS volume type. Some examples are: g3, io2. More info: https://aws.amazon.com/ebs/volume-types."
    volumeType: AwsNativeEbsVolumeTypeEnum!
}

"Input to trigger AWS native EBS volume create snapshot job."
input StartAwsNativeEbsVolumeSnapshotsJobInput {
    "Rubrik IDs of EBS volumes for snapshots creation."
    ebsVolumeIds: [UUID!]!
    "Retention SLA ID to be used for the snapshots to be created."
    retentionSlaId: String = ""
}

"Input to trigger AWS native EC2 Instance export job."
input StartAwsNativeEc2InstanceSnapshotExportJobInput {
    "Rubrik ID of AWS account where exported instance will reside."
    destinationAwsAccountRubrikId: UUID!
    "Region of exported instance."
    destinationRegionId: AwsNativeRegionEnum!
    "Power state of exported instance."
    exportInstanceInPoweredOffState: Boolean = false
    "Name of instance after export."
    instanceName: String!
    "AWS Native EC2 instance type to be used after export. Some examples are: t2.nano, m5.xlarge. More info:  https://aws.amazon.com/ec2/instance-types."
    instanceType: AwsNativeEc2InstanceTypeEnum!
    "ID of KMS key to be used for export."
    kmsKeyId: String = ""
    "List of security group IDs to be used for exported instance."
    securityGroupIds: [String!]!
    "Whether to copy tags to exported instance."
    shouldCopyTags: Boolean!
    "ID of snapshot to be exported."
    snapshotId: UUID!
    "Type of snapshot used to export."
    snapshotType: SnapshotType = SOURCE
    "Name of SSh key pair to be used for export."
    sshKeyPairName: String = ""
    "ID of subnet to use for exported instance."
    subnetId: String!
}

"Trigger AWS EC2 instance snapshots create job."
input StartAwsNativeEc2InstanceSnapshotsJobInput {
    "List of Rubrik EC2 instance IDs."
    ec2InstanceIds: [UUID!]!
    "Retention SLA Rubrik ID."
    retentionSlaId: String = ""
}

"Input to trigger job to create AWS RDS Instance snapshots."
input StartAwsNativeRdsInstanceSnapshotsInput {
    "List of Rubrik UUIDs of the RDS Instances"
    rdsInstanceIds: [UUID!]!
}

"Trigger create snapshots index job."
input StartCloudNativeSnapshotsIndexJobInput {
    snapshotIds: [UUID!]!
}

"Input to trigger AWS native RDS Instance export job."
input StartExportRdsInstanceJobInput {
    "Instance class of RDS instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClassEnum!
    "Name of the exported RDS DB instance."
    dbInstanceName: String!
    "Region in which the exported RDS DB instance will be launched."
    destinationRegionNativeId: AwsNativeRegionEnum!
    "Export timestamp for Point in Time recovery of the instance."
    exportTime: DateTime
    "Input Output (I/O) per second of the exported RDS DB instance."
    iops: Int = 0
    "Whether the exported RDS DB instance is multi-AZ or not."
    isMultiAz: Boolean!
    "Whether the export of the instance is from snapshot or point-in-time."
    isPointInTime: Boolean!
    "Whether the new RDS instance is publicly accessible or not."
    isPubliclyAccessible: Boolean!
    "KMS Key ID of the exported RDS DB instance."
    kmsKeyId: String = ""
    "Name of the option group selected by the user for the new RDS instance."
    optionGroupName: String = ""
    "Name of the DB parameter group selected by the user for the new RDS instance."
    parameterGroupName: String = ""
    "Port on which the exported RDS DB instance accepts connections."
    port: Long!
    "Availability Zone (AZ) in which the exported RDS DB instance must be launched."
    primaryAz: String = ""
    "Rubrik ID of the RDS Instance to be exported."
    rdsInstanceId: UUID!
    "List of security group IDs for the new RDS instance. Default security group is used if empty list is provided here."
    securityGroupIds: [String!] = []
    "Whether tags will be exported to the new RDS instance."
    shouldExportTags: Boolean!
    "ID of the snapshot if the export is from snapshot."
    snapshotId: String
    "Storage type of the exported RDS DB instance."
    storageType: AwsNativeRdsStorageTypeEnum = NOT_SPECIFIED
    "Name of the subnet group for the new RDS instance."
    subnetGroupName: String = ""
    "List of subnet IDs for the newly created subnet group, which will be associated with the exported RDS DB instance. Default subnet ids are used if empty list is provided here."
    subnetIds: [String!] = []
}

"Trigger AWS EC2 instance snapshot restore job."
input StartRestoreAwsNativeEc2InstanceSnapshotJobInput {
    "Whether to power on after restore completion."
    shouldPowerOn: Boolean!
    "Whether to restore associated tags."
    shouldRestoreTags: Boolean!
    "ID of snapshot to restore."
    snapshotId: String!
    "Snapshot type to use if source snapshot is expired."
    snapshotTypeToUseIfSourceExpired: SnapshotTypeToUseIfSourceExpired
}

input StartTimeAttributesInput {
    dayOfWeek: DayOfWeekOptInput
    hour: Int = 0
    minute: Int = 0
}

input SyslogConfigInputType {
    id: Int = 0
    notificationConf: CommonNotificationSettingInputType
    syslogConf: SyslogSettingInputType
}

input SyslogSettingInputType {
    facility: SyslogFacilityTypeEnum = ALL_SYSLOG
    severity: SyslogSeverityTypeEnum = ALL_SEVERITY
}

"TagFilterParams"
input TagFilterParams {
    filterType: TagFilterType = TAG_KEY
    tagKey: String = ""
    tagValue: String = ""
}

"DataType representing tag key-value pair"
input TagType {
    matchAllValues: Boolean!
    tagKey: String!
    tagValue: String!
}

input TargetFilterInput {
    field: TargetQueryFilterFieldEnum = NAME
    text: String = ""
}

input TargetMappingDeleteRequest {
    id: String = ""
}

input TargetMappingFilterInput {
    field: TargetMappingQueryFilterFieldEnum = NAME
    text: String = ""
}

input TargetToClusterMapping {
    clusterUuid: String = ""
    locationId: String = ""
}

"Filter task detail"
input TaskDetailFilterInput {
    clusterLocation: [String!]
    clusterType: [String!]
    clusterUuid: [UUID!]
    objectType: [String!]
    replicationSource: [String!]
    searchTerm: String
    slaDomain: SnappableSlaDomainFilterInput
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    time_gt: DateTime
    time_lt: DateTime
}

"Filter task summary"
input TaskSummaryFilterInput {
    cluster: CommonClusterFilterInput
    objectType: [ObjectTypeEnum!]
    slaDomain: SnappableSlaDomainFilterInput
    time_gt: DateTime
    time_lt: DateTime
}

"Struct representing the Teams Channels to/from be restored"
input TeamsChannelInfo {
    ChannelFolderName: String
    ChannelID: UUID
    ChannelName: String
    TeamID: UUID!
}

"Struct representing the teams contents to be restored"
input TeamsRestoreConfig {
    DestChannelInfo: TeamsChannelInfo
    FilesRestoreConfig: DriveRestoreConfig
    ShouldCreateDestChannel: Boolean!
}

input TimeFilterInput {
    endTime: String = ""
    startTime: String = ""
    timeDuration: TimeDurationEnum = HOUR
    timezone: String = ""
}

"Timerange filter"
input TimeRangeFilter {
    fromTime: DateTime
    untilTime: DateTime
}

input TimeRangeInput {
    end: DateTime!
    start: DateTime!
}

input UnidirectionalReplicationSpecInput {
    replicationTargetId: String = ""
    retention: Int = 0
    retentionUnit: RetentionUnitEnum = MINUTES
}

input UpdateAwsCloudAccountInput {
    "Action to be taken for cloud account update."
    action: CloudAccountActionEnum!
    "List of regions to be added."
    awsRegions: [AwsCloudAccountRegionEnum!]
    cloudAccountId: UUID!
    "Native protection feature to be updated."
    feature: CloudAccountFeatureEnum!
    "Role ARN for the cloud account."
    roleArn: String = ""
    "Stack ARN for the cloud account."
    stackArn: String = ""
}

"Input for updateCloudNativeAwsStorageSetting mutation"
input UpdateCloudNativeAwsStorageSettingInput {
    id: UUID!
    kmsMasterKeyId: String
    name: String
    storageClass: AwsStorageClassTypeEnum
}

"Filter User Audit data"
input UserAuditFilterInput {
    cluster: CommonClusterFilterInput
    clusterIds: [UUID!]
    searchTerm: String
    status: [UserAuditStatusEnum!]
    time_gt: DateTime
    time_lt: DateTime
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    userAuditSeverity: [UserAuditSeverityEnum!]
    userAuditType: [UserAuditTypeEnum!]
}

input UserGroupToRolesInput {
    roleIds: [String!] = []
    userGroupId: String = ""
}

input UserSettingInputType {
    setting: String = ""
    value: String = ""
}

input UserTimeRangeInput {
    endTime: String = ""
    startTime: String = ""
    timezone: String = ""
}

input VSphereComputeTargetInputType {
    computeClusterCdmId: String = ""
    computeClusterId: String = ""
    computeClusterName: String = ""
    hostCdmId: String = ""
    hostId: String = ""
    hostName: String = ""
    resourcePoolCdmId: String = ""
    resourcePoolId: String = ""
    resourcePoolName: String = ""
    vcenterCdmId: String = ""
    vcenterId: String = ""
    vcenterName: String = ""
}

input VSphereMountFilter {
    clusterUuid: [UUID!]
    name: String
    powerStatus: [Boolean!]
    sourceVmId: UUID
}

input VSphereVMNicSpecInputType {
    adapterType: NetworkAdapterTypeEnum = E1000
    dnsInfos: [String!] = []
    gateway: String = ""
    ipv4Address: String = ""
    ipv6Address: String = ""
    isPrimaryNic: Boolean = false
    key: String = ""
    netmask: String = ""
    networkId: String = ""
    networkMoid: String = ""
    networkType: NetworkTypeEnum = STATIC
}

input VSphereVMRecoverySpecInputType {
    memoryMbs: Int = 0
    nics: [VSphereVMNicSpecInputType!] = []
    target: VSphereComputeTargetInputType
    userData: String = ""
    vcpus: Int = 0
    version: Long = 0
    volumes: [VSphereVMVolumeSpecInputType!] = []
}

input VSphereVMVolumeSpecInputType {
    dataStoreCdmId: String = ""
    dataStoreId: String = ""
    "key value defined in Ebs Volume"
    key: String = ""
    sizeGbs: Int = 0
}

input VSphereVirtualDiskFilter {
    clusterUuid: [UUID!]
    fileName: String
    sourceVmId: UUID
}

input ValidateAndCreateAwsCloudAccountInput {
    "Action to be performed with the cloud account."
    action: CloudAccountActionEnum!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    "Details for cloud accounts to be initiated."
    awsChildAccounts: [AwsCloudAccountInput!]!
    "List of features to be enabled for cloud native protection."
    features: [CloudAccountFeatureEnum!]!
}

"Input for ValidateBlueprintResourceMapping."
input ValidateBlueprintResourceMappingInput {
    "Blueprint failover related properties."
    blueprintFailoverProperties: BlueprintFailoverPropertiesInput!
    "Blueprint uuid."
    blueprintId: UUID!
    "List of snappable ids and recovery points."
    childSnappableFailoverInfos: [ChildSnappableFailoverInfoInput!]!
}

input VmDiskUpdateInput {
    excludeFromSnapshots: Boolean
    virtualDiskFid: UUID!
}

"""

Supported in v5.0+
"""
input VmRestorePathPairInput {
    restorePathPair: RestorePathPairInput
}

input VmwareNetworkDeviceInfoV2Input {
    "Required. Device key of the network adapter."
    key: Int = 0
    "Required. Name of the network adapter."
    name: String = ""
}

input VmwareNetworkInfoV2Input {
    "Required. MOID of the VMware network."
    moid: String = ""
    "Required. Name of the VMware network."
    name: String = ""
}

input VmwareVNicBindingInfoV2Input {
    "Information about the backing network."
    backingNetworkInfo: VmwareNetworkInfoV2Input
    "Information about the network device."
    networkDeviceInfo: VmwareNetworkDeviceInfoV2Input
}

input VmwareVmConfigInput {
    logRetentionSeconds: Long = 0
}

input VolumeIdToIsExcluded {
    isExcluded: Boolean!
    volumeId: String!
}

input WeeklySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfWeek: DayOfWeekEnum = MONDAY
}

input YearlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfYear: DayOfYearEnum = FIRST_DAY
    yearStartMonth: MonthEnum = JANUARY
}

"CDM versions for Azure account."
input cdmVersionRequest {
    location: String = ""
    servicePrincipal: servicePrincipal
}

"ClusterConfig for Azure account."
input clusterConfigInput {
    adminPassword: String = ""
    clusterName: String = ""
    dnsNameServers: [String!]
    dnsSearchDomains: [String!]
    ntpServers: [String!]
    numNodes: Int = 0
    userEmail: String = ""
}

"GCP KMS Crypto Key"
input kmsCryptoKey {
    key: String = ""
    keyRing: String = ""
    location: String = ""
    projectNativeId: String = ""
}

"NsgRequest for Azure account."
input nsgRequest {
    netResourceGroup: String = ""
    servicePrincipal: servicePrincipal
}

"Authorization for Azure account."
input servicePrincipal {
    clientId: String = ""
    clientSecret: String = ""
    subscriptionId: String = ""
    tenatId: String = ""
}

"SubnetRequest for Azure account."
input subnetRequest {
    resourceGroup: String = ""
    servicePrincipal: servicePrincipal
    vnetName: String = ""
}

"VNetRequest for Azure account."
input vnetRequest {
    resourceGroup: String = ""
    servicePrincipal: servicePrincipal
}


scalar AnyScalar

scalar DateTime

"The `LocalTimeType` scalar type a time of day (i.e., between 00:00 and 23:59) WITHOUT an associated timezone. The timezone is assumed to be the local timezone, so if you want an explicit timezone you'll need to associate it explicitly."
scalar LocalTime

scalar UUID

"The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long